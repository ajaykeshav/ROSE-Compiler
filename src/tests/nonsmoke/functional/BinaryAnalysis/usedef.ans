=====================================================================================
=== Starting a new basic block ===
=====================================================================================
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]

0x080480a0: je 0x080480a3<case1>
Symbolic: startInstruction(0x080480a0: je 0x080480a3<case1>)
Symbolic insn@0x080480a0[0]: number_(32, 134512800) = {defs={0x080480a0}, expr=0x080480a0<134512800>[u32]}
Symbolic insn@0x080480a0[0]: number_(32, 2) = {defs={0x080480a0}, expr=0x00000002[u32]}
Symbolic insn@0x080480a0[0]: add({defs={0x080480a0}, expr=0x080480a0<134512800>[u32]}, {defs={0x080480a0}, expr=0x00000002[u32]}) = {defs={0x080480a0}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480a0[0]: writeRegister(eip, {defs={0x080480a0}, expr=0x080480a2<134512802>[u32]})
Symbolic insn@0x080480a0[0]: undefined_(1) = V1[u1]
Symbolic insn@0x080480a0[0]: readRegister(zf, V1[u1]) = zf_0[u1]
Symbolic insn@0x080480a0[0]: undefined_(32) = V2[u32]
Symbolic insn@0x080480a0[0]: readRegister(eip, V2[u32]) = {defs={0x080480a0}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480a0[0]: number_(32, 134512803) = {defs={0x080480a0}, expr=0x080480a3<134512803>[u32]}
Symbolic insn@0x080480a0[0]: unsignedExtend({defs={0x080480a0}, expr=0x080480a3<134512803>[u32]}, 32) = {defs={0x080480a0}, expr=0x080480a3<134512803>[u32]}
Symbolic insn@0x080480a0[0]: ite(zf_0[u1], {defs={0x080480a0}, expr=0x080480a3<134512803>[u32]}, {defs={0x080480a0}, expr=0x080480a2<134512802>[u32]}) = {defs={0x080480a0}, expr=(ite[u32] zf_0[u1] 0x080480a3<134512803>[u32] 0x080480a2<134512802>[u32])}
Symbolic insn@0x080480a0[0]: writeRegister(eip, {defs={0x080480a0}, expr=(ite[u32] zf_0[u1] 0x080480a3<134512803>[u32] 0x080480a2<134512802>[u32])})
Symbolic insn@0x080480a0[0]: finishInstruction(je 0x080480a3<case1>)
registers:
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480a0] = {defs={0x080480a0}, expr=(ite[u32] zf_0[u1] 0x080480a3<134512803>[u32] 0x080480a2<134512802>[u32])}
 fpstatus_top = 0x0[u3]
memory:
Symbolic: operators destroyed
=====================================================================================
=== Starting a new basic block ===
=====================================================================================
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]

0x080480a2: hlt 
Symbolic: startInstruction(0x080480a2: hlt)
Symbolic insn@0x080480a2[0]: number_(32, 134512802) = {defs={0x080480a2}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480a2[0]: number_(32, 1) = {defs={0x080480a2}, expr=0x00000001[u32]}
Symbolic insn@0x080480a2[0]: add({defs={0x080480a2}, expr=0x080480a2<134512802>[u32]}, {defs={0x080480a2}, expr=0x00000001[u32]}) = {defs={0x080480a2}, expr=0x080480a3<134512803>[u32]}
Symbolic insn@0x080480a2[0]: writeRegister(eip, {defs={0x080480a2}, expr=0x080480a3<134512803>[u32]})
Symbolic insn@0x080480a2[0]: hlt()
Symbolic insn@0x080480a2[0]: number_(32, 134512802) = {defs={0x080480a2}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480a2[0]: writeRegister(eip, {defs={0x080480a2}, expr=0x080480a2<134512802>[u32]})
Symbolic insn@0x080480a2[0]: finishInstruction(hlt)
registers:
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480a2] write-only = {defs={0x080480a2}, expr=0x080480a2<134512802>[u32]}
 fpstatus_top = 0x0[u3]
memory:
Symbolic: operators destroyed
=====================================================================================
=== Starting a new basic block ===
=====================================================================================
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]

0x080480a3: mov eax, ebx
Symbolic: startInstruction(0x080480a3: mov eax, ebx)
Symbolic insn@0x080480a3[0]: number_(32, 134512803) = {defs={0x080480a3}, expr=0x080480a3<134512803>[u32]}
Symbolic insn@0x080480a3[0]: number_(32, 2) = {defs={0x080480a3}, expr=0x00000002[u32]}
Symbolic insn@0x080480a3[0]: add({defs={0x080480a3}, expr=0x080480a3<134512803>[u32]}, {defs={0x080480a3}, expr=0x00000002[u32]}) = {defs={0x080480a3}, expr=0x080480a5<134512805>[u32]}
Symbolic insn@0x080480a3[0]: writeRegister(eip, {defs={0x080480a3}, expr=0x080480a5<134512805>[u32]})
Symbolic insn@0x080480a3[0]: undefined_(32) = V1[u32]
Symbolic insn@0x080480a3[0]: readRegister(ebx, V1[u32]) = ebx_0[u32]
Symbolic insn@0x080480a3[0]: writeRegister(eax, ebx_0[u32])
Symbolic insn@0x080480a3[0]: finishInstruction(mov eax, ebx)
registers:
 eax [writer=0x080480a3] write-only = ebx_0[u32]
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480a3] write-only = {defs={0x080480a3}, expr=0x080480a5<134512805>[u32]}
 fpstatus_top = 0x0[u3]
memory:

0x080480a5: mov eax, eax
Symbolic: startInstruction(0x080480a5: mov eax, eax)
Symbolic insn@0x080480a5[1]: number_(32, 134512805) = {defs={0x080480a5}, expr=0x080480a5<134512805>[u32]}
Symbolic insn@0x080480a5[1]: number_(32, 2) = {defs={0x080480a5}, expr=0x00000002[u32]}
Symbolic insn@0x080480a5[1]: add({defs={0x080480a5}, expr=0x080480a5<134512805>[u32]}, {defs={0x080480a5}, expr=0x00000002[u32]}) = {defs={0x080480a5}, expr=0x080480a7<134512807>[u32]}
Symbolic insn@0x080480a5[1]: writeRegister(eip, {defs={0x080480a5}, expr=0x080480a7<134512807>[u32]})
Symbolic insn@0x080480a5[1]: undefined_(32) = V2[u32]
Symbolic insn@0x080480a5[1]: readRegister(eax, V2[u32]) = ebx_0[u32]
Symbolic insn@0x080480a5[1]: writeRegister(eax, ebx_0[u32])
Symbolic insn@0x080480a5[1]: finishInstruction(mov eax, eax)
registers:
 eax [writer=0x080480a5] = ebx_0[u32]
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480a5] write-only = {defs={0x080480a5}, expr=0x080480a7<134512807>[u32]}
 fpstatus_top = 0x0[u3]
memory:

0x080480a7: je 0x080480a2<end>
Symbolic: startInstruction(0x080480a7: je 0x080480a2<end>)
Symbolic insn@0x080480a7[2]: number_(32, 134512807) = {defs={0x080480a7}, expr=0x080480a7<134512807>[u32]}
Symbolic insn@0x080480a7[2]: number_(32, 2) = {defs={0x080480a7}, expr=0x00000002[u32]}
Symbolic insn@0x080480a7[2]: add({defs={0x080480a7}, expr=0x080480a7<134512807>[u32]}, {defs={0x080480a7}, expr=0x00000002[u32]}) = {defs={0x080480a7}, expr=0x080480a9<134512809>[u32]}
Symbolic insn@0x080480a7[2]: writeRegister(eip, {defs={0x080480a7}, expr=0x080480a9<134512809>[u32]})
Symbolic insn@0x080480a7[2]: undefined_(1) = V3[u1]
Symbolic insn@0x080480a7[2]: readRegister(zf, V3[u1]) = zf_0[u1]
Symbolic insn@0x080480a7[2]: undefined_(32) = V4[u32]
Symbolic insn@0x080480a7[2]: readRegister(eip, V4[u32]) = {defs={0x080480a7}, expr=0x080480a9<134512809>[u32]}
Symbolic insn@0x080480a7[2]: number_(32, 134512802) = {defs={0x080480a7}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480a7[2]: unsignedExtend({defs={0x080480a7}, expr=0x080480a2<134512802>[u32]}, 32) = {defs={0x080480a7}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480a7[2]: ite(zf_0[u1], {defs={0x080480a7}, expr=0x080480a2<134512802>[u32]}, {defs={0x080480a7}, expr=0x080480a9<134512809>[u32]}) = {defs={0x080480a7}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x080480a9<134512809>[u32])}
Symbolic insn@0x080480a7[2]: writeRegister(eip, {defs={0x080480a7}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x080480a9<134512809>[u32])})
Symbolic insn@0x080480a7[2]: finishInstruction(je 0x080480a2<end>)
registers:
 eax [writer=0x080480a5] = ebx_0[u32]
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480a7] = {defs={0x080480a7}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x080480a9<134512809>[u32])}
 fpstatus_top = 0x0[u3]
memory:
Symbolic: operators destroyed
=====================================================================================
=== Starting a new basic block ===
=====================================================================================
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]

0x080480a9: add eax, eax
Symbolic: startInstruction(0x080480a9: add eax, eax)
Symbolic insn@0x080480a9[0]: number_(32, 134512809) = {defs={0x080480a9}, expr=0x080480a9<134512809>[u32]}
Symbolic insn@0x080480a9[0]: number_(32, 2) = {defs={0x080480a9}, expr=0x00000002[u32]}
Symbolic insn@0x080480a9[0]: add({defs={0x080480a9}, expr=0x080480a9<134512809>[u32]}, {defs={0x080480a9}, expr=0x00000002[u32]}) = {defs={0x080480a9}, expr=0x080480ab<134512811>[u32]}
Symbolic insn@0x080480a9[0]: writeRegister(eip, {defs={0x080480a9}, expr=0x080480ab<134512811>[u32]})
Symbolic insn@0x080480a9[0]: boolean_(0) = {defs={0x080480a9}, expr=false[u1]}
Symbolic insn@0x080480a9[0]: undefined_(32) = V1[u32]
Symbolic insn@0x080480a9[0]: readRegister(eax, V1[u32]) = eax_0[u32]
Symbolic insn@0x080480a9[0]: undefined_(32) = V2[u32]
Symbolic insn@0x080480a9[0]: readRegister(eax, V2[u32]) = eax_0[u32]
Symbolic insn@0x080480a9[0]: addWithCarries(eax_0[u32], eax_0[u32], {defs={0x080480a9}, expr=false[u1]}) = {defs={0x080480a9}, expr=(add[u32] eax_0[u32] eax_0[u32])}
Symbolic insn@0x080480a9[0]: also returns: {defs={0x080480a9}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32])))}
Symbolic insn@0x080480a9[0]: extract({defs={0x080480a9}, expr=(add[u32] eax_0[u32] eax_0[u32])}, 0, 8) = {defs={0x080480a9}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32]))}
Symbolic insn@0x080480a9[0]: extract({defs={0x080480a9}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32]))}, 1, 2) = {defs={0x080480a9}, expr=(extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32]))}
Symbolic insn@0x080480a9[0]: extract({defs={0x080480a9}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32]))}, 0, 1) = {defs={0x080480a9}, expr=(extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32]))}
Symbolic insn@0x080480a9[0]: xor_({defs={0x080480a9}, expr=(extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32]))}, {defs={0x080480a9}, expr=(extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32]))}) = {defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32])))}
Symbolic insn@0x080480a9[0]: extract({defs={0x080480a9}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32]))}, 3, 4) = {defs={0x080480a9}, expr=(extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32]))}
Symbolic insn@0x080480a9[0]: extract({defs={0x080480a9}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32]))}, 2, 3) = {defs={0x080480a9}, expr=(extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32]))}
Symbolic insn@0x080480a9[0]: xor_({defs={0x080480a9}, expr=(extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32]))}, {defs={0x080480a9}, expr=(extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32]))}) = {defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32])))}
Symbolic insn@0x080480a9[0]: extract({defs={0x080480a9}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32]))}, 5, 6) = {defs={0x080480a9}, expr=(extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32]))}
Symbolic insn@0x080480a9[0]: extract({defs={0x080480a9}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32]))}, 4, 5) = {defs={0x080480a9}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32]))}
Symbolic insn@0x080480a9[0]: xor_({defs={0x080480a9}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32]))}, {defs={0x080480a9}, expr=(extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32]))}) = {defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32])))}
Symbolic insn@0x080480a9[0]: extract({defs={0x080480a9}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32]))}, 7, 8) = {defs={0x080480a9}, expr=(extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32]))}
Symbolic insn@0x080480a9[0]: extract({defs={0x080480a9}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32]))}, 6, 7) = {defs={0x080480a9}, expr=(extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32]))}
Symbolic insn@0x080480a9[0]: xor_({defs={0x080480a9}, expr=(extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32]))}, {defs={0x080480a9}, expr=(extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32]))}) = {defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32])))}
Symbolic insn@0x080480a9[0]: xor_({defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32])))}, {defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32])))}) = {defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32])))}
Symbolic insn@0x080480a9[0]: xor_({defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32])))}, {defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32])))}) = {defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32])))}
Symbolic insn@0x080480a9[0]: xor_({defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32])))}, {defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32])))}) = {defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32])))}
Symbolic insn@0x080480a9[0]: invert({defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32])))}) = {defs={0x080480a9}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32]))))}
Symbolic insn@0x080480a9[0]: writeRegister(pf, {defs={0x080480a9}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32]))))})
Symbolic insn@0x080480a9[0]: extract({defs={0x080480a9}, expr=(add[u32] eax_0[u32] eax_0[u32])}, 31, 32) = {defs={0x080480a9}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] eax_0[u32] eax_0[u32]))}
Symbolic insn@0x080480a9[0]: writeRegister(sf, {defs={0x080480a9}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] eax_0[u32] eax_0[u32]))})
Symbolic insn@0x080480a9[0]: equalToZero({defs={0x080480a9}, expr=(add[u32] eax_0[u32] eax_0[u32])}) = {defs={0x080480a9}, expr=(zerop[u1] (add[u32] eax_0[u32] eax_0[u32]))}
Symbolic insn@0x080480a9[0]: writeRegister(zf, {defs={0x080480a9}, expr=(zerop[u1] (add[u32] eax_0[u32] eax_0[u32]))})
Symbolic insn@0x080480a9[0]: extract({defs={0x080480a9}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32])))}, 31, 32) = {defs={0x080480a9}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32])))}
Symbolic insn@0x080480a9[0]: extract({defs={0x080480a9}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32])))}, 30, 31) = {defs={0x080480a9}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32])))}
Symbolic insn@0x080480a9[0]: extract({defs={0x080480a9}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32])))}, 3, 4) = {defs={0x080480a9}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32])))}
Symbolic insn@0x080480a9[0]: writeRegister(af, {defs={0x080480a9}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32])))})
Symbolic insn@0x080480a9[0]: writeRegister(cf, {defs={0x080480a9}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32])))})
Symbolic insn@0x080480a9[0]: xor_({defs={0x080480a9}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32])))}, {defs={0x080480a9}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32])))}) = {defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32]))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32]))))}
Symbolic insn@0x080480a9[0]: writeRegister(of, {defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32]))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32]))))})
Symbolic insn@0x080480a9[0]: writeRegister(eax, {defs={0x080480a9}, expr=(add[u32] eax_0[u32] eax_0[u32])})
Symbolic insn@0x080480a9[0]: finishInstruction(add eax, eax)
registers:
 eax [writer=0x080480a9] read-before-write = {defs={0x080480a9}, expr=(add[u32] eax_0[u32] eax_0[u32])}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480a9] write-only = {defs={0x080480a9}, expr=0x080480ab<134512811>[u32]}
 cf [writer=0x080480a9] write-only = {defs={0x080480a9}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32])))}
 pf [writer=0x080480a9] write-only = {defs={0x080480a9}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32]))))}
 af [writer=0x080480a9] write-only = {defs={0x080480a9}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32])))}
 zf [writer=0x080480a9] write-only = {defs={0x080480a9}, expr=(zerop[u1] (add[u32] eax_0[u32] eax_0[u32]))}
 sf [writer=0x080480a9] write-only = {defs={0x080480a9}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] eax_0[u32] eax_0[u32]))}
 of [writer=0x080480a9] write-only = {defs={0x080480a9}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32]))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] eax_0[u32]) (uextend[u33] 0x00000021[u32] eax_0[u32]))))}
 fpstatus_top = 0x0[u3]
memory:

0x080480ab: add ebx, ebx
Symbolic: startInstruction(0x080480ab: add ebx, ebx)
Symbolic insn@0x080480ab[1]: number_(32, 134512811) = {defs={0x080480ab}, expr=0x080480ab<134512811>[u32]}
Symbolic insn@0x080480ab[1]: number_(32, 2) = {defs={0x080480ab}, expr=0x00000002[u32]}
Symbolic insn@0x080480ab[1]: add({defs={0x080480ab}, expr=0x080480ab<134512811>[u32]}, {defs={0x080480ab}, expr=0x00000002[u32]}) = {defs={0x080480ab}, expr=0x080480ad<134512813>[u32]}
Symbolic insn@0x080480ab[1]: writeRegister(eip, {defs={0x080480ab}, expr=0x080480ad<134512813>[u32]})
Symbolic insn@0x080480ab[1]: boolean_(0) = {defs={0x080480ab}, expr=false[u1]}
Symbolic insn@0x080480ab[1]: undefined_(32) = V3[u32]
Symbolic insn@0x080480ab[1]: readRegister(ebx, V3[u32]) = ebx_0[u32]
Symbolic insn@0x080480ab[1]: undefined_(32) = V4[u32]
Symbolic insn@0x080480ab[1]: readRegister(ebx, V4[u32]) = ebx_0[u32]
Symbolic insn@0x080480ab[1]: addWithCarries(ebx_0[u32], ebx_0[u32], {defs={0x080480ab}, expr=false[u1]}) = {defs={0x080480ab}, expr=(add[u32] ebx_0[u32] ebx_0[u32])}
Symbolic insn@0x080480ab[1]: also returns: {defs={0x080480ab}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32])))}
Symbolic insn@0x080480ab[1]: extract({defs={0x080480ab}, expr=(add[u32] ebx_0[u32] ebx_0[u32])}, 0, 8) = {defs={0x080480ab}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ab[1]: extract({defs={0x080480ab}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}, 1, 2) = {defs={0x080480ab}, expr=(extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ab[1]: extract({defs={0x080480ab}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}, 0, 1) = {defs={0x080480ab}, expr=(extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ab[1]: xor_({defs={0x080480ab}, expr=(extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}, {defs={0x080480ab}, expr=(extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}) = {defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] ebx_0[u32] ebx_0[u32])))}
Symbolic insn@0x080480ab[1]: extract({defs={0x080480ab}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}, 3, 4) = {defs={0x080480ab}, expr=(extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ab[1]: extract({defs={0x080480ab}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}, 2, 3) = {defs={0x080480ab}, expr=(extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ab[1]: xor_({defs={0x080480ab}, expr=(extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}, {defs={0x080480ab}, expr=(extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}) = {defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] ebx_0[u32] ebx_0[u32])))}
Symbolic insn@0x080480ab[1]: extract({defs={0x080480ab}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}, 5, 6) = {defs={0x080480ab}, expr=(extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ab[1]: extract({defs={0x080480ab}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}, 4, 5) = {defs={0x080480ab}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ab[1]: xor_({defs={0x080480ab}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}, {defs={0x080480ab}, expr=(extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}) = {defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] ebx_0[u32] ebx_0[u32])))}
Symbolic insn@0x080480ab[1]: extract({defs={0x080480ab}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}, 7, 8) = {defs={0x080480ab}, expr=(extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ab[1]: extract({defs={0x080480ab}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}, 6, 7) = {defs={0x080480ab}, expr=(extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ab[1]: xor_({defs={0x080480ab}, expr=(extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}, {defs={0x080480ab}, expr=(extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}) = {defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32])))}
Symbolic insn@0x080480ab[1]: xor_({defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] ebx_0[u32] ebx_0[u32])))}, {defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] ebx_0[u32] ebx_0[u32])))}) = {defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] ebx_0[u32] ebx_0[u32])))}
Symbolic insn@0x080480ab[1]: xor_({defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] ebx_0[u32] ebx_0[u32])))}, {defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32])))}) = {defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32])))}
Symbolic insn@0x080480ab[1]: xor_({defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] ebx_0[u32] ebx_0[u32])))}, {defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32])))}) = {defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32])))}
Symbolic insn@0x080480ab[1]: invert({defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32])))}) = {defs={0x080480ab}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))}
Symbolic insn@0x080480ab[1]: writeRegister(pf, {defs={0x080480ab}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))})
Symbolic insn@0x080480ab[1]: extract({defs={0x080480ab}, expr=(add[u32] ebx_0[u32] ebx_0[u32])}, 31, 32) = {defs={0x080480ab}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ab[1]: writeRegister(sf, {defs={0x080480ab}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] ebx_0[u32] ebx_0[u32]))})
Symbolic insn@0x080480ab[1]: equalToZero({defs={0x080480ab}, expr=(add[u32] ebx_0[u32] ebx_0[u32])}) = {defs={0x080480ab}, expr=(zerop[u1] (add[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ab[1]: writeRegister(zf, {defs={0x080480ab}, expr=(zerop[u1] (add[u32] ebx_0[u32] ebx_0[u32]))})
Symbolic insn@0x080480ab[1]: extract({defs={0x080480ab}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32])))}, 31, 32) = {defs={0x080480ab}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32])))}
Symbolic insn@0x080480ab[1]: extract({defs={0x080480ab}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32])))}, 30, 31) = {defs={0x080480ab}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32])))}
Symbolic insn@0x080480ab[1]: extract({defs={0x080480ab}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32])))}, 3, 4) = {defs={0x080480ab}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32])))}
Symbolic insn@0x080480ab[1]: writeRegister(af, {defs={0x080480ab}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32])))})
Symbolic insn@0x080480ab[1]: writeRegister(cf, {defs={0x080480ab}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32])))})
Symbolic insn@0x080480ab[1]: xor_({defs={0x080480ab}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32])))}, {defs={0x080480ab}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32])))}) = {defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32]))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32]))))}
Symbolic insn@0x080480ab[1]: writeRegister(of, {defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32]))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32]))))})
Symbolic insn@0x080480ab[1]: writeRegister(ebx, {defs={0x080480ab}, expr=(add[u32] ebx_0[u32] ebx_0[u32])})
Symbolic insn@0x080480ab[1]: finishInstruction(add ebx, ebx)
registers:
 eax [writer=0x080480a9] read-before-write = {defs={0x080480a9}, expr=(add[u32] eax_0[u32] eax_0[u32])}
 ebx [writer=0x080480ab] read-before-write = {defs={0x080480ab}, expr=(add[u32] ebx_0[u32] ebx_0[u32])}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480ab] write-only = {defs={0x080480ab}, expr=0x080480ad<134512813>[u32]}
 cf [writer=0x080480ab] write-only = {defs={0x080480ab}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32])))}
 pf [writer=0x080480ab] write-only = {defs={0x080480ab}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))}
 af [writer=0x080480ab] write-only = {defs={0x080480ab}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32])))}
 zf [writer=0x080480ab] write-only = {defs={0x080480ab}, expr=(zerop[u1] (add[u32] ebx_0[u32] ebx_0[u32]))}
 sf [writer=0x080480ab] write-only = {defs={0x080480ab}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] ebx_0[u32] ebx_0[u32]))}
 of [writer=0x080480ab] write-only = {defs={0x080480ab}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32]))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (add[u33] (uextend[u33] 0x00000021[u32] ebx_0[u32]) (uextend[u33] 0x00000021[u32] ebx_0[u32]))))}
 fpstatus_top = 0x0[u3]
memory:

0x080480ad: add eax, ebx
Symbolic: startInstruction(0x080480ad: add eax, ebx)
Symbolic insn@0x080480ad[2]: number_(32, 134512813) = {defs={0x080480ad}, expr=0x080480ad<134512813>[u32]}
Symbolic insn@0x080480ad[2]: number_(32, 2) = {defs={0x080480ad}, expr=0x00000002[u32]}
Symbolic insn@0x080480ad[2]: add({defs={0x080480ad}, expr=0x080480ad<134512813>[u32]}, {defs={0x080480ad}, expr=0x00000002[u32]}) = {defs={0x080480ad}, expr=0x080480af<134512815>[u32]}
Symbolic insn@0x080480ad[2]: writeRegister(eip, {defs={0x080480ad}, expr=0x080480af<134512815>[u32]})
Symbolic insn@0x080480ad[2]: boolean_(0) = {defs={0x080480ad}, expr=false[u1]}
Symbolic insn@0x080480ad[2]: undefined_(32) = V5[u32]
Symbolic insn@0x080480ad[2]: readRegister(ebx, V5[u32]) = {defs={0x080480ab}, expr=(add[u32] ebx_0[u32] ebx_0[u32])}
Symbolic insn@0x080480ad[2]: undefined_(32) = V6[u32]
Symbolic insn@0x080480ad[2]: readRegister(eax, V6[u32]) = {defs={0x080480a9}, expr=(add[u32] eax_0[u32] eax_0[u32])}
Symbolic insn@0x080480ad[2]: addWithCarries({defs={0x080480a9}, expr=(add[u32] eax_0[u32] eax_0[u32])}, {defs={0x080480ab}, expr=(add[u32] ebx_0[u32] ebx_0[u32])}, {defs={0x080480ad}, expr=false[u1]}) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])}
Symbolic insn@0x080480ad[2]: also returns: {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))}
Symbolic insn@0x080480ad[2]: extract({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])}, 0, 8) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ad[2]: extract({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}, 1, 2) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ad[2]: extract({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}, 0, 1) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ad[2]: xor_({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}, {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])))}
Symbolic insn@0x080480ad[2]: extract({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}, 3, 4) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ad[2]: extract({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}, 2, 3) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ad[2]: xor_({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}, {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])))}
Symbolic insn@0x080480ad[2]: extract({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}, 5, 6) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ad[2]: extract({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}, 4, 5) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ad[2]: xor_({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}, {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])))}
Symbolic insn@0x080480ad[2]: extract({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}, 7, 8) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ad[2]: extract({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}, 6, 7) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ad[2]: xor_({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}, {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])))}
Symbolic insn@0x080480ad[2]: xor_({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])))}, {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])))}) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])))}
Symbolic insn@0x080480ad[2]: xor_({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])))}, {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])))}) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])))}
Symbolic insn@0x080480ad[2]: xor_({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])))}, {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])))}) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])))}
Symbolic insn@0x080480ad[2]: invert({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])))}) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))))}
Symbolic insn@0x080480ad[2]: writeRegister(pf, {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))))})
Symbolic insn@0x080480ad[2]: extract({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])}, 31, 32) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ad[2]: writeRegister(sf, {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))})
Symbolic insn@0x080480ad[2]: equalToZero({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])}) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(zerop[u1] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480ad[2]: writeRegister(zf, {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(zerop[u1] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))})
Symbolic insn@0x080480ad[2]: extract({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))}, 31, 32) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))}
Symbolic insn@0x080480ad[2]: extract({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))}, 30, 31) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))}
Symbolic insn@0x080480ad[2]: extract({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))}, 3, 4) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))}
Symbolic insn@0x080480ad[2]: writeRegister(af, {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))})
Symbolic insn@0x080480ad[2]: writeRegister(cf, {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))})
Symbolic insn@0x080480ad[2]: xor_({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))}, {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))}) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32])))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32])))))}
Symbolic insn@0x080480ad[2]: writeRegister(of, {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32])))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32])))))})
Symbolic insn@0x080480ad[2]: writeRegister(eax, {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])})
Symbolic insn@0x080480ad[2]: finishInstruction(add eax, ebx)
registers:
 eax [writer=0x080480ad] read-before-write = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])}
 ebx [writer=0x080480ab] read-before-write = {defs={0x080480ab}, expr=(add[u32] ebx_0[u32] ebx_0[u32])}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480ad] write-only = {defs={0x080480ad}, expr=0x080480af<134512815>[u32]}
 cf [writer=0x080480ad] write-only = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))}
 pf [writer=0x080480ad] write-only = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))))}
 af [writer=0x080480ad] write-only = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))}
 zf [writer=0x080480ad] write-only = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(zerop[u1] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
 sf [writer=0x080480ad] write-only = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
 of [writer=0x080480ad] write-only = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32])))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32])))))}
 fpstatus_top = 0x0[u3]
memory:

0x080480af: je 0x080480a2<end>
Symbolic: startInstruction(0x080480af: je 0x080480a2<end>)
Symbolic insn@0x080480af[3]: number_(32, 134512815) = {defs={0x080480af}, expr=0x080480af<134512815>[u32]}
Symbolic insn@0x080480af[3]: number_(32, 2) = {defs={0x080480af}, expr=0x00000002[u32]}
Symbolic insn@0x080480af[3]: add({defs={0x080480af}, expr=0x080480af<134512815>[u32]}, {defs={0x080480af}, expr=0x00000002[u32]}) = {defs={0x080480af}, expr=0x080480b1<134512817>[u32]}
Symbolic insn@0x080480af[3]: writeRegister(eip, {defs={0x080480af}, expr=0x080480b1<134512817>[u32]})
Symbolic insn@0x080480af[3]: undefined_(1) = V7[u1]
Symbolic insn@0x080480af[3]: readRegister(zf, V7[u1]) = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(zerop[u1] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
Symbolic insn@0x080480af[3]: undefined_(32) = V8[u32]
Symbolic insn@0x080480af[3]: readRegister(eip, V8[u32]) = {defs={0x080480af}, expr=0x080480b1<134512817>[u32]}
Symbolic insn@0x080480af[3]: number_(32, 134512802) = {defs={0x080480af}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480af[3]: unsignedExtend({defs={0x080480af}, expr=0x080480a2<134512802>[u32]}, 32) = {defs={0x080480af}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480af[3]: ite({defs={0x080480a9,0x080480ab,0x080480ad}, expr=(zerop[u1] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}, {defs={0x080480af}, expr=0x080480a2<134512802>[u32]}, {defs={0x080480af}, expr=0x080480b1<134512817>[u32]}) = {defs={0x080480a9,0x080480ab,0x080480ad,0x080480af}, expr=(ite[u32] (zerop[u1] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) 0x080480a2<134512802>[u32] 0x080480b1<134512817>[u32])}
Symbolic insn@0x080480af[3]: writeRegister(eip, {defs={0x080480a9,0x080480ab,0x080480ad,0x080480af}, expr=(ite[u32] (zerop[u1] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) 0x080480a2<134512802>[u32] 0x080480b1<134512817>[u32])})
Symbolic insn@0x080480af[3]: finishInstruction(je 0x080480a2<end>)
registers:
 eax [writer=0x080480ad] read-before-write = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])}
 ebx [writer=0x080480ab] read-before-write = {defs={0x080480ab}, expr=(add[u32] ebx_0[u32] ebx_0[u32])}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480af] = {defs={0x080480a9,0x080480ab,0x080480ad,0x080480af}, expr=(ite[u32] (zerop[u1] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) 0x080480a2<134512802>[u32] 0x080480b1<134512817>[u32])}
 cf [writer=0x080480ad] write-only = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))}
 pf [writer=0x080480ad] write-only = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))))}
 af [writer=0x080480ad] write-only = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))))}
 zf [writer=0x080480ad] = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(zerop[u1] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
 sf [writer=0x080480ad] write-only = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] eax_0[u32] eax_0[u32] ebx_0[u32] ebx_0[u32]))}
 of [writer=0x080480ad] write-only = {defs={0x080480a9,0x080480ab,0x080480ad}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32])))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32]))) (uextend[u33] 0x00000021[u32] (add[u32] eax_0[u32] eax_0[u32])) (uextend[u33] 0x00000021[u32] (add[u32] ebx_0[u32] ebx_0[u32])))))}
 fpstatus_top = 0x0[u3]
memory:
Symbolic: operators destroyed
=====================================================================================
=== Starting a new basic block ===
=====================================================================================
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]

0x080480b1: mov eax, 0x00000001
Symbolic: startInstruction(0x080480b1: mov eax, 0x00000001)
Symbolic insn@0x080480b1[0]: number_(32, 134512817) = {defs={0x080480b1}, expr=0x080480b1<134512817>[u32]}
Symbolic insn@0x080480b1[0]: number_(32, 5) = {defs={0x080480b1}, expr=0x00000005[u32]}
Symbolic insn@0x080480b1[0]: add({defs={0x080480b1}, expr=0x080480b1<134512817>[u32]}, {defs={0x080480b1}, expr=0x00000005[u32]}) = {defs={0x080480b1}, expr=0x080480b6<134512822>[u32]}
Symbolic insn@0x080480b1[0]: writeRegister(eip, {defs={0x080480b1}, expr=0x080480b6<134512822>[u32]})
Symbolic insn@0x080480b1[0]: number_(32, 1) = {defs={0x080480b1}, expr=0x00000001[u32]}
Symbolic insn@0x080480b1[0]: writeRegister(eax, {defs={0x080480b1}, expr=0x00000001[u32]})
Symbolic insn@0x080480b1[0]: finishInstruction(mov eax, 0x00000001)
registers:
 eax [writer=0x080480b1] write-only = {defs={0x080480b1}, expr=0x00000001[u32]}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480b1] write-only = {defs={0x080480b1}, expr=0x080480b6<134512822>[u32]}
 fpstatus_top = 0x0[u3]
memory:

0x080480b6: je 0x080480a2<end>
Symbolic: startInstruction(0x080480b6: je 0x080480a2<end>)
Symbolic insn@0x080480b6[1]: number_(32, 134512822) = {defs={0x080480b6}, expr=0x080480b6<134512822>[u32]}
Symbolic insn@0x080480b6[1]: number_(32, 2) = {defs={0x080480b6}, expr=0x00000002[u32]}
Symbolic insn@0x080480b6[1]: add({defs={0x080480b6}, expr=0x080480b6<134512822>[u32]}, {defs={0x080480b6}, expr=0x00000002[u32]}) = {defs={0x080480b6}, expr=0x080480b8<134512824>[u32]}
Symbolic insn@0x080480b6[1]: writeRegister(eip, {defs={0x080480b6}, expr=0x080480b8<134512824>[u32]})
Symbolic insn@0x080480b6[1]: undefined_(1) = V1[u1]
Symbolic insn@0x080480b6[1]: readRegister(zf, V1[u1]) = zf_0[u1]
Symbolic insn@0x080480b6[1]: undefined_(32) = V2[u32]
Symbolic insn@0x080480b6[1]: readRegister(eip, V2[u32]) = {defs={0x080480b6}, expr=0x080480b8<134512824>[u32]}
Symbolic insn@0x080480b6[1]: number_(32, 134512802) = {defs={0x080480b6}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480b6[1]: unsignedExtend({defs={0x080480b6}, expr=0x080480a2<134512802>[u32]}, 32) = {defs={0x080480b6}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480b6[1]: ite(zf_0[u1], {defs={0x080480b6}, expr=0x080480a2<134512802>[u32]}, {defs={0x080480b6}, expr=0x080480b8<134512824>[u32]}) = {defs={0x080480b6}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x080480b8<134512824>[u32])}
Symbolic insn@0x080480b6[1]: writeRegister(eip, {defs={0x080480b6}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x080480b8<134512824>[u32])})
Symbolic insn@0x080480b6[1]: finishInstruction(je 0x080480a2<end>)
registers:
 eax [writer=0x080480b1] write-only = {defs={0x080480b1}, expr=0x00000001[u32]}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480b6] = {defs={0x080480b6}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x080480b8<134512824>[u32])}
 fpstatus_top = 0x0[u3]
memory:
Symbolic: operators destroyed
=====================================================================================
=== Starting a new basic block ===
=====================================================================================
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]

0x080480b8: mov eax, 0x00000003
Symbolic: startInstruction(0x080480b8: mov eax, 0x00000003)
Symbolic insn@0x080480b8[0]: number_(32, 134512824) = {defs={0x080480b8}, expr=0x080480b8<134512824>[u32]}
Symbolic insn@0x080480b8[0]: number_(32, 5) = {defs={0x080480b8}, expr=0x00000005[u32]}
Symbolic insn@0x080480b8[0]: add({defs={0x080480b8}, expr=0x080480b8<134512824>[u32]}, {defs={0x080480b8}, expr=0x00000005[u32]}) = {defs={0x080480b8}, expr=0x080480bd<134512829>[u32]}
Symbolic insn@0x080480b8[0]: writeRegister(eip, {defs={0x080480b8}, expr=0x080480bd<134512829>[u32]})
Symbolic insn@0x080480b8[0]: number_(32, 3) = {defs={0x080480b8}, expr=0x00000003[u32]}
Symbolic insn@0x080480b8[0]: writeRegister(eax, {defs={0x080480b8}, expr=0x00000003[u32]})
Symbolic insn@0x080480b8[0]: finishInstruction(mov eax, 0x00000003)
registers:
 eax [writer=0x080480b8] write-only = {defs={0x080480b8}, expr=0x00000003[u32]}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480b8] write-only = {defs={0x080480b8}, expr=0x080480bd<134512829>[u32]}
 fpstatus_top = 0x0[u3]
memory:

0x080480bd: mov ebx, 0x00000004
Symbolic: startInstruction(0x080480bd: mov ebx, 0x00000004)
Symbolic insn@0x080480bd[1]: number_(32, 134512829) = {defs={0x080480bd}, expr=0x080480bd<134512829>[u32]}
Symbolic insn@0x080480bd[1]: number_(32, 5) = {defs={0x080480bd}, expr=0x00000005[u32]}
Symbolic insn@0x080480bd[1]: add({defs={0x080480bd}, expr=0x080480bd<134512829>[u32]}, {defs={0x080480bd}, expr=0x00000005[u32]}) = {defs={0x080480bd}, expr=0x080480c2<134512834>[u32]}
Symbolic insn@0x080480bd[1]: writeRegister(eip, {defs={0x080480bd}, expr=0x080480c2<134512834>[u32]})
Symbolic insn@0x080480bd[1]: number_(32, 4) = {defs={0x080480bd}, expr=0x00000004[u32]}
Symbolic insn@0x080480bd[1]: writeRegister(ebx, {defs={0x080480bd}, expr=0x00000004[u32]})
Symbolic insn@0x080480bd[1]: finishInstruction(mov ebx, 0x00000004)
registers:
 eax [writer=0x080480b8] write-only = {defs={0x080480b8}, expr=0x00000003[u32]}
 ebx [writer=0x080480bd] write-only = {defs={0x080480bd}, expr=0x00000004[u32]}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480bd] write-only = {defs={0x080480bd}, expr=0x080480c2<134512834>[u32]}
 fpstatus_top = 0x0[u3]
memory:

0x080480c2: add eax, ebx
Symbolic: startInstruction(0x080480c2: add eax, ebx)
Symbolic insn@0x080480c2[2]: number_(32, 134512834) = {defs={0x080480c2}, expr=0x080480c2<134512834>[u32]}
Symbolic insn@0x080480c2[2]: number_(32, 2) = {defs={0x080480c2}, expr=0x00000002[u32]}
Symbolic insn@0x080480c2[2]: add({defs={0x080480c2}, expr=0x080480c2<134512834>[u32]}, {defs={0x080480c2}, expr=0x00000002[u32]}) = {defs={0x080480c2}, expr=0x080480c4<134512836>[u32]}
Symbolic insn@0x080480c2[2]: writeRegister(eip, {defs={0x080480c2}, expr=0x080480c4<134512836>[u32]})
Symbolic insn@0x080480c2[2]: boolean_(0) = {defs={0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: undefined_(32) = V1[u32]
Symbolic insn@0x080480c2[2]: readRegister(ebx, V1[u32]) = {defs={0x080480bd}, expr=0x00000004[u32]}
Symbolic insn@0x080480c2[2]: undefined_(32) = V2[u32]
Symbolic insn@0x080480c2[2]: readRegister(eax, V2[u32]) = {defs={0x080480b8}, expr=0x00000003[u32]}
Symbolic insn@0x080480c2[2]: addWithCarries({defs={0x080480b8}, expr=0x00000003[u32]}, {defs={0x080480bd}, expr=0x00000004[u32]}, {defs={0x080480c2}, expr=false[u1]}) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x00000007[u32]}
Symbolic insn@0x080480c2[2]: also returns: {defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x00000000[u32]}
Symbolic insn@0x080480c2[2]: extract({defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x00000007[u32]}, 0, 8) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x07[u8]}
Symbolic insn@0x080480c2[2]: extract({defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x07[u8]}, 1, 2) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=true[u1]}
Symbolic insn@0x080480c2[2]: extract({defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x07[u8]}, 0, 1) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=true[u1]}
Symbolic insn@0x080480c2[2]: xor_({defs={0x080480b8,0x080480bd,0x080480c2}, expr=true[u1]}, {defs={0x080480b8,0x080480bd,0x080480c2}, expr=true[u1]}) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: extract({defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x07[u8]}, 3, 4) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: extract({defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x07[u8]}, 2, 3) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=true[u1]}
Symbolic insn@0x080480c2[2]: xor_({defs={0x080480b8,0x080480bd,0x080480c2}, expr=true[u1]}, {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=true[u1]}
Symbolic insn@0x080480c2[2]: extract({defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x07[u8]}, 5, 6) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: extract({defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x07[u8]}, 4, 5) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: xor_({defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}, {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: extract({defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x07[u8]}, 7, 8) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: extract({defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x07[u8]}, 6, 7) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: xor_({defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}, {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: xor_({defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}, {defs={0x080480b8,0x080480bd,0x080480c2}, expr=true[u1]}) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=true[u1]}
Symbolic insn@0x080480c2[2]: xor_({defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}, {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: xor_({defs={0x080480b8,0x080480bd,0x080480c2}, expr=true[u1]}, {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=true[u1]}
Symbolic insn@0x080480c2[2]: invert({defs={0x080480b8,0x080480bd,0x080480c2}, expr=true[u1]}) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: writeRegister(pf, {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]})
Symbolic insn@0x080480c2[2]: extract({defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x00000007[u32]}, 31, 32) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: writeRegister(sf, {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]})
Symbolic insn@0x080480c2[2]: equalToZero({defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x00000007[u32]}) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: writeRegister(zf, {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]})
Symbolic insn@0x080480c2[2]: extract({defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x00000000[u32]}, 31, 32) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: extract({defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x00000000[u32]}, 30, 31) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: extract({defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x00000000[u32]}, 3, 4) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: writeRegister(af, {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]})
Symbolic insn@0x080480c2[2]: writeRegister(cf, {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]})
Symbolic insn@0x080480c2[2]: xor_({defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}, {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}) = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
Symbolic insn@0x080480c2[2]: writeRegister(of, {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]})
Symbolic insn@0x080480c2[2]: writeRegister(eax, {defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x00000007[u32]})
Symbolic insn@0x080480c2[2]: finishInstruction(add eax, ebx)
registers:
 eax [writer=0x080480c2] = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x00000007[u32]}
 ebx [writer=0x080480bd] = {defs={0x080480bd}, expr=0x00000004[u32]}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480c2] write-only = {defs={0x080480c2}, expr=0x080480c4<134512836>[u32]}
 cf [writer=0x080480c2] write-only = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
 pf [writer=0x080480c2] write-only = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
 af [writer=0x080480c2] write-only = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
 zf [writer=0x080480c2] write-only = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
 sf [writer=0x080480c2] write-only = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
 of [writer=0x080480c2] write-only = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=false[u1]}
 fpstatus_top = 0x0[u3]
memory:

0x080480c4: neg ecx
Symbolic: startInstruction(0x080480c4: neg ecx)
Symbolic insn@0x080480c4[3]: number_(32, 134512836) = {defs={0x080480c4}, expr=0x080480c4<134512836>[u32]}
Symbolic insn@0x080480c4[3]: number_(32, 2) = {defs={0x080480c4}, expr=0x00000002[u32]}
Symbolic insn@0x080480c4[3]: add({defs={0x080480c4}, expr=0x080480c4<134512836>[u32]}, {defs={0x080480c4}, expr=0x00000002[u32]}) = {defs={0x080480c4}, expr=0x080480c6<134512838>[u32]}
Symbolic insn@0x080480c4[3]: writeRegister(eip, {defs={0x080480c4}, expr=0x080480c6<134512838>[u32]})
Symbolic insn@0x080480c4[3]: undefined_(32) = V3[u32]
Symbolic insn@0x080480c4[3]: readRegister(ecx, V3[u32]) = ecx_0[u32]
Symbolic insn@0x080480c4[3]: boolean_(0) = {defs={0x080480c4}, expr=false[u1]}
Symbolic insn@0x080480c4[3]: invert(ecx_0[u32]) = {defs={0x080480c4}, expr=(invert[u32] ecx_0[u32])}
Symbolic insn@0x080480c4[3]: number_(32, 0) = {defs={0x080480c4}, expr=0x00000000[u32]}
Symbolic insn@0x080480c4[3]: invert({defs={0x080480c4}, expr=false[u1]}) = {defs={0x080480c4}, expr=true[u1]}
Symbolic insn@0x080480c4[3]: addWithCarries({defs={0x080480c4}, expr=0x00000000[u32]}, {defs={0x080480c4}, expr=(invert[u32] ecx_0[u32])}, {defs={0x080480c4}, expr=true[u1]}) = {defs={0x080480c4}, expr=(add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])}
Symbolic insn@0x080480c4[3]: also returns: {defs={0x080480c4}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}
Symbolic insn@0x080480c4[3]: extract({defs={0x080480c4}, expr=(add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])}, 0, 8) = {defs={0x080480c4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480c4[3]: extract({defs={0x080480c4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 1, 2) = {defs={0x080480c4}, expr=(extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480c4[3]: extract({defs={0x080480c4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 0, 1) = {defs={0x080480c4}, expr=(extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480c4[3]: xor_({defs={0x080480c4}, expr=(extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, {defs={0x080480c4}, expr=(extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}) = {defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}
Symbolic insn@0x080480c4[3]: extract({defs={0x080480c4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 3, 4) = {defs={0x080480c4}, expr=(extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480c4[3]: extract({defs={0x080480c4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 2, 3) = {defs={0x080480c4}, expr=(extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480c4[3]: xor_({defs={0x080480c4}, expr=(extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, {defs={0x080480c4}, expr=(extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}) = {defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}
Symbolic insn@0x080480c4[3]: extract({defs={0x080480c4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 5, 6) = {defs={0x080480c4}, expr=(extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480c4[3]: extract({defs={0x080480c4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 4, 5) = {defs={0x080480c4}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480c4[3]: xor_({defs={0x080480c4}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, {defs={0x080480c4}, expr=(extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}) = {defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}
Symbolic insn@0x080480c4[3]: extract({defs={0x080480c4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 7, 8) = {defs={0x080480c4}, expr=(extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480c4[3]: extract({defs={0x080480c4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 6, 7) = {defs={0x080480c4}, expr=(extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480c4[3]: xor_({defs={0x080480c4}, expr=(extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, {defs={0x080480c4}, expr=(extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}) = {defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}
Symbolic insn@0x080480c4[3]: xor_({defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}, {defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}) = {defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}
Symbolic insn@0x080480c4[3]: xor_({defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}, {defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}) = {defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}
Symbolic insn@0x080480c4[3]: xor_({defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}, {defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}) = {defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}
Symbolic insn@0x080480c4[3]: invert({defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}) = {defs={0x080480c4}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))))}
Symbolic insn@0x080480c4[3]: writeRegister(pf, {defs={0x080480c4}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))))})
Symbolic insn@0x080480c4[3]: extract({defs={0x080480c4}, expr=(add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])}, 31, 32) = {defs={0x080480c4}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480c4[3]: writeRegister(sf, {defs={0x080480c4}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))})
Symbolic insn@0x080480c4[3]: equalToZero({defs={0x080480c4}, expr=(add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])}) = {defs={0x080480c4}, expr=(zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480c4[3]: writeRegister(zf, {defs={0x080480c4}, expr=(zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))})
Symbolic insn@0x080480c4[3]: extract({defs={0x080480c4}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}, 31, 32) = {defs={0x080480c4}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}
Symbolic insn@0x080480c4[3]: extract({defs={0x080480c4}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}, 30, 31) = {defs={0x080480c4}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}
Symbolic insn@0x080480c4[3]: extract({defs={0x080480c4}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}, 3, 4) = {defs={0x080480c4}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}
Symbolic insn@0x080480c4[3]: invert({defs={0x080480c4}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}) = {defs={0x080480c4}, expr=(invert[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
Symbolic insn@0x080480c4[3]: writeRegister(af, {defs={0x080480c4}, expr=(invert[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))})
Symbolic insn@0x080480c4[3]: invert({defs={0x080480c4}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}) = {defs={0x080480c4}, expr=(invert[u1] (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
Symbolic insn@0x080480c4[3]: writeRegister(cf, {defs={0x080480c4}, expr=(invert[u1] (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))})
Symbolic insn@0x080480c4[3]: xor_({defs={0x080480c4}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}, {defs={0x080480c4}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}) = {defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
Symbolic insn@0x080480c4[3]: writeRegister(of, {defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))})
Symbolic insn@0x080480c4[3]: writeRegister(ecx, {defs={0x080480c4}, expr=(add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])})
Symbolic insn@0x080480c4[3]: finishInstruction(neg ecx)
registers:
 eax [writer=0x080480c2] = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x00000007[u32]}
 ecx [writer=0x080480c4] read-before-write = {defs={0x080480c4}, expr=(add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])}
 ebx [writer=0x080480bd] = {defs={0x080480bd}, expr=0x00000004[u32]}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480c4] write-only = {defs={0x080480c4}, expr=0x080480c6<134512838>[u32]}
 cf [writer=0x080480c4] write-only = {defs={0x080480c4}, expr=(invert[u1] (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
 pf [writer=0x080480c4] write-only = {defs={0x080480c4}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))))}
 af [writer=0x080480c4] write-only = {defs={0x080480c4}, expr=(invert[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
 zf [writer=0x080480c4] write-only = {defs={0x080480c4}, expr=(zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
 sf [writer=0x080480c4] write-only = {defs={0x080480c4}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
 of [writer=0x080480c4] write-only = {defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
 fpstatus_top = 0x0[u3]
memory:

0x080480c6: je 0x080480a2<end>
Symbolic: startInstruction(0x080480c6: je 0x080480a2<end>)
Symbolic insn@0x080480c6[4]: number_(32, 134512838) = {defs={0x080480c6}, expr=0x080480c6<134512838>[u32]}
Symbolic insn@0x080480c6[4]: number_(32, 2) = {defs={0x080480c6}, expr=0x00000002[u32]}
Symbolic insn@0x080480c6[4]: add({defs={0x080480c6}, expr=0x080480c6<134512838>[u32]}, {defs={0x080480c6}, expr=0x00000002[u32]}) = {defs={0x080480c6}, expr=0x080480c8<134512840>[u32]}
Symbolic insn@0x080480c6[4]: writeRegister(eip, {defs={0x080480c6}, expr=0x080480c8<134512840>[u32]})
Symbolic insn@0x080480c6[4]: undefined_(1) = V4[u1]
Symbolic insn@0x080480c6[4]: readRegister(zf, V4[u1]) = {defs={0x080480c4}, expr=(zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480c6[4]: undefined_(32) = V5[u32]
Symbolic insn@0x080480c6[4]: readRegister(eip, V5[u32]) = {defs={0x080480c6}, expr=0x080480c8<134512840>[u32]}
Symbolic insn@0x080480c6[4]: number_(32, 134512802) = {defs={0x080480c6}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480c6[4]: unsignedExtend({defs={0x080480c6}, expr=0x080480a2<134512802>[u32]}, 32) = {defs={0x080480c6}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480c6[4]: ite({defs={0x080480c4}, expr=(zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, {defs={0x080480c6}, expr=0x080480a2<134512802>[u32]}, {defs={0x080480c6}, expr=0x080480c8<134512840>[u32]}) = {defs={0x080480c4,0x080480c6}, expr=(ite[u32] (zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) 0x080480a2<134512802>[u32] 0x080480c8<134512840>[u32])}
Symbolic insn@0x080480c6[4]: writeRegister(eip, {defs={0x080480c4,0x080480c6}, expr=(ite[u32] (zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) 0x080480a2<134512802>[u32] 0x080480c8<134512840>[u32])})
Symbolic insn@0x080480c6[4]: finishInstruction(je 0x080480a2<end>)
registers:
 eax [writer=0x080480c2] = {defs={0x080480b8,0x080480bd,0x080480c2}, expr=0x00000007[u32]}
 ecx [writer=0x080480c4] read-before-write = {defs={0x080480c4}, expr=(add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])}
 ebx [writer=0x080480bd] = {defs={0x080480bd}, expr=0x00000004[u32]}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480c6] = {defs={0x080480c4,0x080480c6}, expr=(ite[u32] (zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) 0x080480a2<134512802>[u32] 0x080480c8<134512840>[u32])}
 cf [writer=0x080480c4] write-only = {defs={0x080480c4}, expr=(invert[u1] (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
 pf [writer=0x080480c4] write-only = {defs={0x080480c4}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))))}
 af [writer=0x080480c4] write-only = {defs={0x080480c4}, expr=(invert[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
 zf [writer=0x080480c4] = {defs={0x080480c4}, expr=(zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
 sf [writer=0x080480c4] write-only = {defs={0x080480c4}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
 of [writer=0x080480c4] write-only = {defs={0x080480c4}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
 fpstatus_top = 0x0[u3]
memory:
Symbolic: operators destroyed
=====================================================================================
=== Starting a new basic block ===
=====================================================================================
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]

0x080480c8: mov eax, ebx
Symbolic: startInstruction(0x080480c8: mov eax, ebx)
Symbolic insn@0x080480c8[0]: number_(32, 134512840) = {defs={0x080480c8}, expr=0x080480c8<134512840>[u32]}
Symbolic insn@0x080480c8[0]: number_(32, 2) = {defs={0x080480c8}, expr=0x00000002[u32]}
Symbolic insn@0x080480c8[0]: add({defs={0x080480c8}, expr=0x080480c8<134512840>[u32]}, {defs={0x080480c8}, expr=0x00000002[u32]}) = {defs={0x080480c8}, expr=0x080480ca<134512842>[u32]}
Symbolic insn@0x080480c8[0]: writeRegister(eip, {defs={0x080480c8}, expr=0x080480ca<134512842>[u32]})
Symbolic insn@0x080480c8[0]: undefined_(32) = V1[u32]
Symbolic insn@0x080480c8[0]: readRegister(ebx, V1[u32]) = ebx_0[u32]
Symbolic insn@0x080480c8[0]: writeRegister(eax, ebx_0[u32])
Symbolic insn@0x080480c8[0]: finishInstruction(mov eax, ebx)
registers:
 eax [writer=0x080480c8] write-only = ebx_0[u32]
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480c8] write-only = {defs={0x080480c8}, expr=0x080480ca<134512842>[u32]}
 fpstatus_top = 0x0[u3]
memory:

0x080480ca: mov ah, bh
Symbolic: startInstruction(0x080480ca: mov ah, bh)
Symbolic insn@0x080480ca[1]: number_(32, 134512842) = {defs={0x080480ca}, expr=0x080480ca<134512842>[u32]}
Symbolic insn@0x080480ca[1]: number_(32, 2) = {defs={0x080480ca}, expr=0x00000002[u32]}
Symbolic insn@0x080480ca[1]: add({defs={0x080480ca}, expr=0x080480ca<134512842>[u32]}, {defs={0x080480ca}, expr=0x00000002[u32]}) = {defs={0x080480ca}, expr=0x080480cc<134512844>[u32]}
Symbolic insn@0x080480ca[1]: writeRegister(eip, {defs={0x080480ca}, expr=0x080480cc<134512844>[u32]})
Symbolic insn@0x080480ca[1]: undefined_(8) = V2[u8]
Symbolic insn@0x080480ca[1]: readRegister(bh, V2[u8]) = (extract[u8] 0x00000008[u32] 0x00000010[u32] ebx_0[u32])
Symbolic insn@0x080480ca[1]: writeRegister(ah, (extract[u8] 0x00000008[u32] 0x00000010[u32] ebx_0[u32]))
Symbolic insn@0x080480ca[1]: finishInstruction(mov ah, bh)
registers:
 al [writer=0x080480c8] write-only = (extract[u8] 0x00000000[u32] 0x00000008[u32] ebx_0[u32])
 ah [writer=0x080480ca] write-only = (extract[u8] 0x00000008[u32] 0x00000010[u32] ebx_0[u32])
 REG0.0@16+16 [writer=0x080480c8] write-only = (extract[u16] 0x00000010[u32] 0x00000020[u32] ebx_0[u32])
 bl read-before-write = (extract[u8] 0x00000000[u32] 0x00000008[u32] ebx_0[u32])
 bh read-before-write = (extract[u8] 0x00000008[u32] 0x00000010[u32] ebx_0[u32])
 REG0.3@16+16 read-before-write = (extract[u16] 0x00000010[u32] 0x00000020[u32] ebx_0[u32])
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480ca] write-only = {defs={0x080480ca}, expr=0x080480cc<134512844>[u32]}
 fpstatus_top = 0x0[u3]
memory:

0x080480cc: mov ah, bl
Symbolic: startInstruction(0x080480cc: mov ah, bl)
Symbolic insn@0x080480cc[2]: number_(32, 134512844) = {defs={0x080480cc}, expr=0x080480cc<134512844>[u32]}
Symbolic insn@0x080480cc[2]: number_(32, 2) = {defs={0x080480cc}, expr=0x00000002[u32]}
Symbolic insn@0x080480cc[2]: add({defs={0x080480cc}, expr=0x080480cc<134512844>[u32]}, {defs={0x080480cc}, expr=0x00000002[u32]}) = {defs={0x080480cc}, expr=0x080480ce<134512846>[u32]}
Symbolic insn@0x080480cc[2]: writeRegister(eip, {defs={0x080480cc}, expr=0x080480ce<134512846>[u32]})
Symbolic insn@0x080480cc[2]: undefined_(8) = V3[u8]
Symbolic insn@0x080480cc[2]: readRegister(bl, V3[u8]) = (extract[u8] 0x00000000[u32] 0x00000008[u32] ebx_0[u32])
Symbolic insn@0x080480cc[2]: writeRegister(ah, (extract[u8] 0x00000000[u32] 0x00000008[u32] ebx_0[u32]))
Symbolic insn@0x080480cc[2]: finishInstruction(mov ah, bl)
registers:
 al [writer=0x080480c8] write-only = (extract[u8] 0x00000000[u32] 0x00000008[u32] ebx_0[u32])
 ah [writer=0x080480cc] write-only = (extract[u8] 0x00000000[u32] 0x00000008[u32] ebx_0[u32])
 REG0.0@16+16 [writer=0x080480c8] write-only = (extract[u16] 0x00000010[u32] 0x00000020[u32] ebx_0[u32])
 bl read-before-write = (extract[u8] 0x00000000[u32] 0x00000008[u32] ebx_0[u32])
 bh read-before-write = (extract[u8] 0x00000008[u32] 0x00000010[u32] ebx_0[u32])
 REG0.3@16+16 read-before-write = (extract[u16] 0x00000010[u32] 0x00000020[u32] ebx_0[u32])
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480cc] write-only = {defs={0x080480cc}, expr=0x080480ce<134512846>[u32]}
 fpstatus_top = 0x0[u3]
memory:

0x080480ce: mov ax, cx
Symbolic: startInstruction(0x080480ce: mov ax, cx)
Symbolic insn@0x080480ce[3]: number_(32, 134512846) = {defs={0x080480ce}, expr=0x080480ce<134512846>[u32]}
Symbolic insn@0x080480ce[3]: number_(32, 3) = {defs={0x080480ce}, expr=0x00000003[u32]}
Symbolic insn@0x080480ce[3]: add({defs={0x080480ce}, expr=0x080480ce<134512846>[u32]}, {defs={0x080480ce}, expr=0x00000003[u32]}) = {defs={0x080480ce}, expr=0x080480d1<134512849>[u32]}
Symbolic insn@0x080480ce[3]: writeRegister(eip, {defs={0x080480ce}, expr=0x080480d1<134512849>[u32]})
Symbolic insn@0x080480ce[3]: undefined_(16) = V4[u16]
Symbolic insn@0x080480ce[3]: readRegister(cx, V4[u16]) = cx_0[u16]
Symbolic insn@0x080480ce[3]: writeRegister(ax, cx_0[u16])
Symbolic insn@0x080480ce[3]: finishInstruction(mov ax, cx)
registers:
 ax [writer=0x080480ce] write-only = cx_0[u16]
 REG0.0@16+16 [writer=0x080480c8] write-only = (extract[u16] 0x00000010[u32] 0x00000020[u32] ebx_0[u32])
 bl read-before-write = (extract[u8] 0x00000000[u32] 0x00000008[u32] ebx_0[u32])
 bh read-before-write = (extract[u8] 0x00000008[u32] 0x00000010[u32] ebx_0[u32])
 REG0.3@16+16 read-before-write = (extract[u16] 0x00000010[u32] 0x00000020[u32] ebx_0[u32])
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480ce] write-only = {defs={0x080480ce}, expr=0x080480d1<134512849>[u32]}
 fpstatus_top = 0x0[u3]
memory:

0x080480d1: mov eax, ebx
Symbolic: startInstruction(0x080480d1: mov eax, ebx)
Symbolic insn@0x080480d1[4]: number_(32, 134512849) = {defs={0x080480d1}, expr=0x080480d1<134512849>[u32]}
Symbolic insn@0x080480d1[4]: number_(32, 2) = {defs={0x080480d1}, expr=0x00000002[u32]}
Symbolic insn@0x080480d1[4]: add({defs={0x080480d1}, expr=0x080480d1<134512849>[u32]}, {defs={0x080480d1}, expr=0x00000002[u32]}) = {defs={0x080480d1}, expr=0x080480d3<134512851>[u32]}
Symbolic insn@0x080480d1[4]: writeRegister(eip, {defs={0x080480d1}, expr=0x080480d3<134512851>[u32]})
Symbolic insn@0x080480d1[4]: undefined_(32) = V5[u32]
Symbolic insn@0x080480d1[4]: readRegister(ebx, V5[u32]) = ebx_0[u32]
Symbolic insn@0x080480d1[4]: writeRegister(eax, ebx_0[u32])
Symbolic insn@0x080480d1[4]: finishInstruction(mov eax, ebx)
registers:
 eax [writer=0x080480d1] write-only = ebx_0[u32]
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480d1] write-only = {defs={0x080480d1}, expr=0x080480d3<134512851>[u32]}
 fpstatus_top = 0x0[u3]
memory:

0x080480d3: je 0x080480a2<end>
Symbolic: startInstruction(0x080480d3: je 0x080480a2<end>)
Symbolic insn@0x080480d3[5]: number_(32, 134512851) = {defs={0x080480d3}, expr=0x080480d3<134512851>[u32]}
Symbolic insn@0x080480d3[5]: number_(32, 2) = {defs={0x080480d3}, expr=0x00000002[u32]}
Symbolic insn@0x080480d3[5]: add({defs={0x080480d3}, expr=0x080480d3<134512851>[u32]}, {defs={0x080480d3}, expr=0x00000002[u32]}) = {defs={0x080480d3}, expr=0x080480d5<134512853>[u32]}
Symbolic insn@0x080480d3[5]: writeRegister(eip, {defs={0x080480d3}, expr=0x080480d5<134512853>[u32]})
Symbolic insn@0x080480d3[5]: undefined_(1) = V6[u1]
Symbolic insn@0x080480d3[5]: readRegister(zf, V6[u1]) = zf_0[u1]
Symbolic insn@0x080480d3[5]: undefined_(32) = V7[u32]
Symbolic insn@0x080480d3[5]: readRegister(eip, V7[u32]) = {defs={0x080480d3}, expr=0x080480d5<134512853>[u32]}
Symbolic insn@0x080480d3[5]: number_(32, 134512802) = {defs={0x080480d3}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480d3[5]: unsignedExtend({defs={0x080480d3}, expr=0x080480a2<134512802>[u32]}, 32) = {defs={0x080480d3}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480d3[5]: ite(zf_0[u1], {defs={0x080480d3}, expr=0x080480a2<134512802>[u32]}, {defs={0x080480d3}, expr=0x080480d5<134512853>[u32]}) = {defs={0x080480d3}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x080480d5<134512853>[u32])}
Symbolic insn@0x080480d3[5]: writeRegister(eip, {defs={0x080480d3}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x080480d5<134512853>[u32])})
Symbolic insn@0x080480d3[5]: finishInstruction(je 0x080480a2<end>)
registers:
 eax [writer=0x080480d1] write-only = ebx_0[u32]
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480d3] = {defs={0x080480d3}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x080480d5<134512853>[u32])}
 fpstatus_top = 0x0[u3]
memory:
Symbolic: operators destroyed
=====================================================================================
=== Starting a new basic block ===
=====================================================================================
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]

0x080480d5: mov dword ds:[eax], ebx
Symbolic: startInstruction(0x080480d5: mov dword ds:[eax], ebx)
Symbolic insn@0x080480d5[0]: number_(32, 134512853) = {defs={0x080480d5}, expr=0x080480d5<134512853>[u32]}
Symbolic insn@0x080480d5[0]: number_(32, 2) = {defs={0x080480d5}, expr=0x00000002[u32]}
Symbolic insn@0x080480d5[0]: add({defs={0x080480d5}, expr=0x080480d5<134512853>[u32]}, {defs={0x080480d5}, expr=0x00000002[u32]}) = {defs={0x080480d5}, expr=0x080480d7<134512855>[u32]}
Symbolic insn@0x080480d5[0]: writeRegister(eip, {defs={0x080480d5}, expr=0x080480d7<134512855>[u32]})
Symbolic insn@0x080480d5[0]: undefined_(32) = V1[u32]
Symbolic insn@0x080480d5[0]: readRegister(ebx, V1[u32]) = ebx_0[u32]
Symbolic insn@0x080480d5[0]: undefined_(32) = V2[u32]
Symbolic insn@0x080480d5[0]: readRegister(eax, V2[u32]) = eax_0[u32]
Symbolic insn@0x080480d5[0]: boolean_(1) = {defs={0x080480d5}, expr=true[u1]}
Symbolic insn@0x080480d5[0]: writeMemory(ds, eax_0[u32], ebx_0[u32], {defs={0x080480d5}, expr=true[u1]})
Symbolic insn@0x080480d5[0]: finishInstruction(mov dword ds:[eax], ebx)
registers:
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds read-before-write = 0x0000[u16]
 eip [writer=0x080480d5] write-only = {defs={0x080480d5}, expr=0x080480d7<134512855>[u32]}
 fpstatus_top = 0x0[u3]
memory:
 addr=(add[u32] eax_0[u32] 0x00000003[u32]) writer=0x080480d5 write-only value=(extract[u8] 0x00000018[u32] 0x00000020[u32] ebx_0[u32])
 addr=(add[u32] eax_0[u32] 0x00000002[u32]) writer=0x080480d5 write-only value=(extract[u8] 0x00000010[u32] 0x00000018[u32] ebx_0[u32])
 addr=(add[u32] eax_0[u32] 0x00000001[u32]) writer=0x080480d5 write-only value=(extract[u8] 0x00000008[u32] 0x00000010[u32] ebx_0[u32])
 addr=eax_0[u32] writer=0x080480d5 write-only value=(extract[u8] 0x00000000[u32] 0x00000008[u32] ebx_0[u32])

0x080480d7: je 0x080480a2<end>
Symbolic: startInstruction(0x080480d7: je 0x080480a2<end>)
Symbolic insn@0x080480d7[1]: number_(32, 134512855) = {defs={0x080480d7}, expr=0x080480d7<134512855>[u32]}
Symbolic insn@0x080480d7[1]: number_(32, 2) = {defs={0x080480d7}, expr=0x00000002[u32]}
Symbolic insn@0x080480d7[1]: add({defs={0x080480d7}, expr=0x080480d7<134512855>[u32]}, {defs={0x080480d7}, expr=0x00000002[u32]}) = {defs={0x080480d7}, expr=0x080480d9<134512857>[u32]}
Symbolic insn@0x080480d7[1]: writeRegister(eip, {defs={0x080480d7}, expr=0x080480d9<134512857>[u32]})
Symbolic insn@0x080480d7[1]: undefined_(1) = V3[u1]
Symbolic insn@0x080480d7[1]: readRegister(zf, V3[u1]) = zf_0[u1]
Symbolic insn@0x080480d7[1]: undefined_(32) = V4[u32]
Symbolic insn@0x080480d7[1]: readRegister(eip, V4[u32]) = {defs={0x080480d7}, expr=0x080480d9<134512857>[u32]}
Symbolic insn@0x080480d7[1]: number_(32, 134512802) = {defs={0x080480d7}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480d7[1]: unsignedExtend({defs={0x080480d7}, expr=0x080480a2<134512802>[u32]}, 32) = {defs={0x080480d7}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480d7[1]: ite(zf_0[u1], {defs={0x080480d7}, expr=0x080480a2<134512802>[u32]}, {defs={0x080480d7}, expr=0x080480d9<134512857>[u32]}) = {defs={0x080480d7}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x080480d9<134512857>[u32])}
Symbolic insn@0x080480d7[1]: writeRegister(eip, {defs={0x080480d7}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x080480d9<134512857>[u32])})
Symbolic insn@0x080480d7[1]: finishInstruction(je 0x080480a2<end>)
registers:
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds read-before-write = 0x0000[u16]
 eip [writer=0x080480d7] = {defs={0x080480d7}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x080480d9<134512857>[u32])}
 fpstatus_top = 0x0[u3]
memory:
 addr=(add[u32] eax_0[u32] 0x00000003[u32]) writer=0x080480d5 write-only value=(extract[u8] 0x00000018[u32] 0x00000020[u32] ebx_0[u32])
 addr=(add[u32] eax_0[u32] 0x00000002[u32]) writer=0x080480d5 write-only value=(extract[u8] 0x00000010[u32] 0x00000018[u32] ebx_0[u32])
 addr=(add[u32] eax_0[u32] 0x00000001[u32]) writer=0x080480d5 write-only value=(extract[u8] 0x00000008[u32] 0x00000010[u32] ebx_0[u32])
 addr=eax_0[u32] writer=0x080480d5 write-only value=(extract[u8] 0x00000000[u32] 0x00000008[u32] ebx_0[u32])
Symbolic: operators destroyed
=====================================================================================
=== Starting a new basic block ===
=====================================================================================
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]

0x080480d9: mov eax, dword ds:[ebx]
Symbolic: startInstruction(0x080480d9: mov eax, dword ds:[ebx])
Symbolic insn@0x080480d9[0]: number_(32, 134512857) = {defs={0x080480d9}, expr=0x080480d9<134512857>[u32]}
Symbolic insn@0x080480d9[0]: number_(32, 2) = {defs={0x080480d9}, expr=0x00000002[u32]}
Symbolic insn@0x080480d9[0]: add({defs={0x080480d9}, expr=0x080480d9<134512857>[u32]}, {defs={0x080480d9}, expr=0x00000002[u32]}) = {defs={0x080480d9}, expr=0x080480db<134512859>[u32]}
Symbolic insn@0x080480d9[0]: writeRegister(eip, {defs={0x080480d9}, expr=0x080480db<134512859>[u32]})
Symbolic insn@0x080480d9[0]: undefined_(32) = V1[u32]
Symbolic insn@0x080480d9[0]: readRegister(ebx, V1[u32]) = ebx_0[u32]
Symbolic insn@0x080480d9[0]: undefined_(32) = V2[u32]
Symbolic insn@0x080480d9[0]: boolean_(1) = {defs={0x080480d9}, expr=true[u1]}
Symbolic insn@0x080480d9[0]: readMemory(ds, ebx_0[u32], V2[u32], {defs={0x080480d9}, expr=true[u1]}) = V2[u32]
Symbolic insn@0x080480d9[0]: writeRegister(eax, V2[u32])
Symbolic insn@0x080480d9[0]: finishInstruction(mov eax, dword ds:[ebx])
registers:
 eax [writer=0x080480d9] write-only = V2[u32]
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds read-before-write = 0x0000[u16]
 eip [writer=0x080480d9] write-only = {defs={0x080480d9}, expr=0x080480db<134512859>[u32]}
 fpstatus_top = 0x0[u3]
memory:
 addr=(add[u32] ebx_0[u32] 0x00000003[u32]) read-before-write value=(extract[u8] 0x00000018[u32] 0x00000020[u32] V2[u32])
 addr=(add[u32] ebx_0[u32] 0x00000002[u32]) read-before-write value=(extract[u8] 0x00000010[u32] 0x00000018[u32] V2[u32])
 addr=(add[u32] ebx_0[u32] 0x00000001[u32]) read-before-write value=(extract[u8] 0x00000008[u32] 0x00000010[u32] V2[u32])
 addr=ebx_0[u32] read-before-write value=(extract[u8] 0x00000000[u32] 0x00000008[u32] V2[u32])

0x080480db: je 0x080480a2<end>
Symbolic: startInstruction(0x080480db: je 0x080480a2<end>)
Symbolic insn@0x080480db[1]: number_(32, 134512859) = {defs={0x080480db}, expr=0x080480db<134512859>[u32]}
Symbolic insn@0x080480db[1]: number_(32, 2) = {defs={0x080480db}, expr=0x00000002[u32]}
Symbolic insn@0x080480db[1]: add({defs={0x080480db}, expr=0x080480db<134512859>[u32]}, {defs={0x080480db}, expr=0x00000002[u32]}) = {defs={0x080480db}, expr=0x080480dd<134512861>[u32]}
Symbolic insn@0x080480db[1]: writeRegister(eip, {defs={0x080480db}, expr=0x080480dd<134512861>[u32]})
Symbolic insn@0x080480db[1]: undefined_(1) = V3[u1]
Symbolic insn@0x080480db[1]: readRegister(zf, V3[u1]) = zf_0[u1]
Symbolic insn@0x080480db[1]: undefined_(32) = V4[u32]
Symbolic insn@0x080480db[1]: readRegister(eip, V4[u32]) = {defs={0x080480db}, expr=0x080480dd<134512861>[u32]}
Symbolic insn@0x080480db[1]: number_(32, 134512802) = {defs={0x080480db}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480db[1]: unsignedExtend({defs={0x080480db}, expr=0x080480a2<134512802>[u32]}, 32) = {defs={0x080480db}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480db[1]: ite(zf_0[u1], {defs={0x080480db}, expr=0x080480a2<134512802>[u32]}, {defs={0x080480db}, expr=0x080480dd<134512861>[u32]}) = {defs={0x080480db}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x080480dd<134512861>[u32])}
Symbolic insn@0x080480db[1]: writeRegister(eip, {defs={0x080480db}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x080480dd<134512861>[u32])})
Symbolic insn@0x080480db[1]: finishInstruction(je 0x080480a2<end>)
registers:
 eax [writer=0x080480d9] write-only = V2[u32]
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds read-before-write = 0x0000[u16]
 eip [writer=0x080480db] = {defs={0x080480db}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x080480dd<134512861>[u32])}
 fpstatus_top = 0x0[u3]
memory:
 addr=(add[u32] ebx_0[u32] 0x00000003[u32]) read-before-write value=(extract[u8] 0x00000018[u32] 0x00000020[u32] V2[u32])
 addr=(add[u32] ebx_0[u32] 0x00000002[u32]) read-before-write value=(extract[u8] 0x00000010[u32] 0x00000018[u32] V2[u32])
 addr=(add[u32] ebx_0[u32] 0x00000001[u32]) read-before-write value=(extract[u8] 0x00000008[u32] 0x00000010[u32] V2[u32])
 addr=ebx_0[u32] read-before-write value=(extract[u8] 0x00000000[u32] 0x00000008[u32] V2[u32])
Symbolic: operators destroyed
=====================================================================================
=== Starting a new basic block ===
=====================================================================================
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]

0x080480dd: shr eax, 0x0a
Symbolic: startInstruction(0x080480dd: shr eax, 0x0a)
Symbolic insn@0x080480dd[0]: number_(32, 134512861) = {defs={0x080480dd}, expr=0x080480dd<134512861>[u32]}
Symbolic insn@0x080480dd[0]: number_(32, 3) = {defs={0x080480dd}, expr=0x00000003[u32]}
Symbolic insn@0x080480dd[0]: add({defs={0x080480dd}, expr=0x080480dd<134512861>[u32]}, {defs={0x080480dd}, expr=0x00000003[u32]}) = {defs={0x080480dd}, expr=0x080480e0<134512864>[u32]}
Symbolic insn@0x080480dd[0]: writeRegister(eip, {defs={0x080480dd}, expr=0x080480e0<134512864>[u32]})
Symbolic insn@0x080480dd[0]: number_(8, 10) = {defs={0x080480dd}, expr=0x0a[u8]}
Symbolic insn@0x080480dd[0]: unspecified_(32) = V1[u32]<unspec>
Symbolic insn@0x080480dd[0]: undefined_(32) = V2[u32]
Symbolic insn@0x080480dd[0]: readRegister(eax, V2[u32]) = eax_0[u32]
Symbolic insn@0x080480dd[0]: extract({defs={0x080480dd}, expr=0x0a[u8]}, 0, 5) = {defs={0x080480dd}, expr=0x0a[u5]}
Symbolic insn@0x080480dd[0]: equalToZero({defs={0x080480dd}, expr=0x0a[u5]}) = {defs={0x080480dd}, expr=false[u1]}
Symbolic insn@0x080480dd[0]: extract({defs={0x080480dd}, expr=0x0a[u8]}, 5, 8) = {defs={0x080480dd}, expr=0x0[u3]}
Symbolic insn@0x080480dd[0]: equalToZero({defs={0x080480dd}, expr=0x0[u3]}) = {defs={0x080480dd}, expr=true[u1]}
Symbolic insn@0x080480dd[0]: invert({defs={0x080480dd}, expr=true[u1]}) = {defs={0x080480dd}, expr=false[u1]}
Symbolic insn@0x080480dd[0]: number_(5, 31) = {defs={0x080480dd}, expr=0x1f<-1>[u5]}
Symbolic insn@0x080480dd[0]: add({defs={0x080480dd}, expr=0x0a[u5]}, {defs={0x080480dd}, expr=0x1f<-1>[u5]}) = {defs={0x080480dd}, expr=0x09[u5]}
Symbolic insn@0x080480dd[0]: equalToZero({defs={0x080480dd}, expr=0x09[u5]}) = {defs={0x080480dd}, expr=false[u1]}
Symbolic insn@0x080480dd[0]: shiftRight(eax_0[u32], {defs={0x080480dd}, expr=0x0a[u5]}) = {defs={0x080480dd}, expr=(concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32]))}
Symbolic insn@0x080480dd[0]: extract(eax_0[u32], 31, 32) = {defs={0x080480dd}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])}
Symbolic insn@0x080480dd[0]: extract({defs={0x080480dd}, expr=(concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32]))}, 31, 32) = {defs={0x080480dd}, expr=false[u1]}
Symbolic insn@0x080480dd[0]: unspecified_(1) = V3[u1]<unspec>
Symbolic insn@0x080480dd[0]: undefined_(1) = V4[u1]
Symbolic insn@0x080480dd[0]: peekRegister(af, V4[u1]) = V4[u1]
Symbolic insn@0x080480dd[0]: ite({defs={0x080480dd}, expr=false[u1]}, V4[u1], V3[u1]<unspec>) = {defs={0x080480dd}, expr=V3[u1]<unspec>}
Symbolic insn@0x080480dd[0]: writeRegister(af, {defs={0x080480dd}, expr=V3[u1]<unspec>})
Symbolic insn@0x080480dd[0]: add({defs={0x080480dd}, expr=0x0a[u5]}, {defs={0x080480dd}, expr=0x1f<-1>[u5]}) = {defs={0x080480dd}, expr=0x09[u5]}
Symbolic insn@0x080480dd[0]: shiftRight(eax_0[u32], {defs={0x080480dd}, expr=0x09[u5]}) = {defs={0x080480dd}, expr=(concat[u32] 0x000[u9] (extract[u23] 0x00000009[u32] 0x00000020[u32] eax_0[u32]))}
Symbolic insn@0x080480dd[0]: extract({defs={0x080480dd}, expr=(concat[u32] 0x000[u9] (extract[u23] 0x00000009[u32] 0x00000020[u32] eax_0[u32]))}, 0, 1) = {defs={0x080480dd}, expr=(extract[u1] 0x00000009[u32] 0x0000000a[u32] eax_0[u32])}
Symbolic insn@0x080480dd[0]: unspecified_(1) = V5[u1]<unspec>
Symbolic insn@0x080480dd[0]: ite({defs={0x080480dd}, expr=false[u1]}, V5[u1]<unspec>, {defs={0x080480dd}, expr=(extract[u1] 0x00000009[u32] 0x0000000a[u32] eax_0[u32])}) = {defs={0x080480dd}, expr=(extract[u1] 0x00000009[u32] 0x0000000a[u32] eax_0[u32])}
Symbolic insn@0x080480dd[0]: undefined_(1) = V6[u1]
Symbolic insn@0x080480dd[0]: peekRegister(cf, V6[u1]) = V6[u1]
Symbolic insn@0x080480dd[0]: ite({defs={0x080480dd}, expr=false[u1]}, V6[u1], {defs={0x080480dd}, expr=(extract[u1] 0x00000009[u32] 0x0000000a[u32] eax_0[u32])}) = {defs={0x080480dd}, expr=(extract[u1] 0x00000009[u32] 0x0000000a[u32] eax_0[u32])}
Symbolic insn@0x080480dd[0]: writeRegister(cf, {defs={0x080480dd}, expr=(extract[u1] 0x00000009[u32] 0x0000000a[u32] eax_0[u32])})
Symbolic insn@0x080480dd[0]: unspecified_(1) = V7[u1]<unspec>
Symbolic insn@0x080480dd[0]: undefined_(1) = V8[u1]
Symbolic insn@0x080480dd[0]: peekRegister(of, V8[u1]) = V8[u1]
Symbolic insn@0x080480dd[0]: ite({defs={0x080480dd}, expr=false[u1]}, V8[u1], V7[u1]<unspec>) = {defs={0x080480dd}, expr=V7[u1]<unspec>}
Symbolic insn@0x080480dd[0]: ite({defs={0x080480dd}, expr=false[u1]}, {defs={0x080480dd}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])}, {defs={0x080480dd}, expr=V7[u1]<unspec>}) = {defs={0x080480dd}, expr=V7[u1]<unspec>}
Symbolic insn@0x080480dd[0]: writeRegister(of, {defs={0x080480dd}, expr=V7[u1]<unspec>})
Symbolic insn@0x080480dd[0]: invert({defs={0x080480dd}, expr=false[u1]}) = {defs={0x080480dd}, expr=true[u1]}
Symbolic insn@0x080480dd[0]: extract({defs={0x080480dd}, expr=(concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32]))}, 0, 8) = {defs={0x080480dd}, expr=(extract[u8] 0x0000000a[u32] 0x00000012[u32] eax_0[u32])}
Symbolic insn@0x080480dd[0]: extract({defs={0x080480dd}, expr=(concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32]))}, 31, 32) = {defs={0x080480dd}, expr=false[u1]}
Symbolic insn@0x080480dd[0]: undefined_(1) = V9[u1]
Symbolic insn@0x080480dd[0]: peekRegister(pf, V9[u1]) = V9[u1]
Symbolic insn@0x080480dd[0]: extract({defs={0x080480dd}, expr=(extract[u8] 0x0000000a[u32] 0x00000012[u32] eax_0[u32])}, 1, 2) = {defs={0x080480dd}, expr=(extract[u1] 0x0000000b[u32] 0x0000000c[u32] eax_0[u32])}
Symbolic insn@0x080480dd[0]: extract({defs={0x080480dd}, expr=(extract[u8] 0x0000000a[u32] 0x00000012[u32] eax_0[u32])}, 0, 1) = {defs={0x080480dd}, expr=(extract[u1] 0x0000000a[u32] 0x0000000b[u32] eax_0[u32])}
Symbolic insn@0x080480dd[0]: xor_({defs={0x080480dd}, expr=(extract[u1] 0x0000000a[u32] 0x0000000b[u32] eax_0[u32])}, {defs={0x080480dd}, expr=(extract[u1] 0x0000000b[u32] 0x0000000c[u32] eax_0[u32])}) = {defs={0x080480dd}, expr=(xor[u1] (extract[u1] 0x0000000a[u32] 0x0000000b[u32] eax_0[u32]) (extract[u1] 0x0000000b[u32] 0x0000000c[u32] eax_0[u32]))}
Symbolic insn@0x080480dd[0]: extract({defs={0x080480dd}, expr=(extract[u8] 0x0000000a[u32] 0x00000012[u32] eax_0[u32])}, 3, 4) = {defs={0x080480dd}, expr=(extract[u1] 0x0000000d[u32] 0x0000000e[u32] eax_0[u32])}
Symbolic insn@0x080480dd[0]: extract({defs={0x080480dd}, expr=(extract[u8] 0x0000000a[u32] 0x00000012[u32] eax_0[u32])}, 2, 3) = {defs={0x080480dd}, expr=(extract[u1] 0x0000000c[u32] 0x0000000d[u32] eax_0[u32])}
Symbolic insn@0x080480dd[0]: xor_({defs={0x080480dd}, expr=(extract[u1] 0x0000000c[u32] 0x0000000d[u32] eax_0[u32])}, {defs={0x080480dd}, expr=(extract[u1] 0x0000000d[u32] 0x0000000e[u32] eax_0[u32])}) = {defs={0x080480dd}, expr=(xor[u1] (extract[u1] 0x0000000c[u32] 0x0000000d[u32] eax_0[u32]) (extract[u1] 0x0000000d[u32] 0x0000000e[u32] eax_0[u32]))}
Symbolic insn@0x080480dd[0]: extract({defs={0x080480dd}, expr=(extract[u8] 0x0000000a[u32] 0x00000012[u32] eax_0[u32])}, 5, 6) = {defs={0x080480dd}, expr=(extract[u1] 0x0000000f[u32] 0x00000010[u32] eax_0[u32])}
Symbolic insn@0x080480dd[0]: extract({defs={0x080480dd}, expr=(extract[u8] 0x0000000a[u32] 0x00000012[u32] eax_0[u32])}, 4, 5) = {defs={0x080480dd}, expr=(extract[u1] 0x0000000e[u32] 0x0000000f[u32] eax_0[u32])}
Symbolic insn@0x080480dd[0]: xor_({defs={0x080480dd}, expr=(extract[u1] 0x0000000e[u32] 0x0000000f[u32] eax_0[u32])}, {defs={0x080480dd}, expr=(extract[u1] 0x0000000f[u32] 0x00000010[u32] eax_0[u32])}) = {defs={0x080480dd}, expr=(xor[u1] (extract[u1] 0x0000000e[u32] 0x0000000f[u32] eax_0[u32]) (extract[u1] 0x0000000f[u32] 0x00000010[u32] eax_0[u32]))}
Symbolic insn@0x080480dd[0]: extract({defs={0x080480dd}, expr=(extract[u8] 0x0000000a[u32] 0x00000012[u32] eax_0[u32])}, 7, 8) = {defs={0x080480dd}, expr=(extract[u1] 0x00000011[u32] 0x00000012[u32] eax_0[u32])}
Symbolic insn@0x080480dd[0]: extract({defs={0x080480dd}, expr=(extract[u8] 0x0000000a[u32] 0x00000012[u32] eax_0[u32])}, 6, 7) = {defs={0x080480dd}, expr=(extract[u1] 0x00000010[u32] 0x00000011[u32] eax_0[u32])}
Symbolic insn@0x080480dd[0]: xor_({defs={0x080480dd}, expr=(extract[u1] 0x00000010[u32] 0x00000011[u32] eax_0[u32])}, {defs={0x080480dd}, expr=(extract[u1] 0x00000011[u32] 0x00000012[u32] eax_0[u32])}) = {defs={0x080480dd}, expr=(xor[u1] (extract[u1] 0x00000010[u32] 0x00000011[u32] eax_0[u32]) (extract[u1] 0x00000011[u32] 0x00000012[u32] eax_0[u32]))}
Symbolic insn@0x080480dd[0]: xor_({defs={0x080480dd}, expr=(xor[u1] (extract[u1] 0x0000000a[u32] 0x0000000b[u32] eax_0[u32]) (extract[u1] 0x0000000b[u32] 0x0000000c[u32] eax_0[u32]))}, {defs={0x080480dd}, expr=(xor[u1] (extract[u1] 0x0000000c[u32] 0x0000000d[u32] eax_0[u32]) (extract[u1] 0x0000000d[u32] 0x0000000e[u32] eax_0[u32]))}) = {defs={0x080480dd}, expr=(xor[u1] (extract[u1] 0x0000000a[u32] 0x0000000b[u32] eax_0[u32]) (extract[u1] 0x0000000b[u32] 0x0000000c[u32] eax_0[u32]) (extract[u1] 0x0000000c[u32] 0x0000000d[u32] eax_0[u32]) (extract[u1] 0x0000000d[u32] 0x0000000e[u32] eax_0[u32]))}
Symbolic insn@0x080480dd[0]: xor_({defs={0x080480dd}, expr=(xor[u1] (extract[u1] 0x0000000e[u32] 0x0000000f[u32] eax_0[u32]) (extract[u1] 0x0000000f[u32] 0x00000010[u32] eax_0[u32]))}, {defs={0x080480dd}, expr=(xor[u1] (extract[u1] 0x00000010[u32] 0x00000011[u32] eax_0[u32]) (extract[u1] 0x00000011[u32] 0x00000012[u32] eax_0[u32]))}) = {defs={0x080480dd}, expr=(xor[u1] (extract[u1] 0x0000000e[u32] 0x0000000f[u32] eax_0[u32]) (extract[u1] 0x0000000f[u32] 0x00000010[u32] eax_0[u32]) (extract[u1] 0x00000010[u32] 0x00000011[u32] eax_0[u32]) (extract[u1] 0x00000011[u32] 0x00000012[u32] eax_0[u32]))}
Symbolic insn@0x080480dd[0]: xor_({defs={0x080480dd}, expr=(xor[u1] (extract[u1] 0x0000000a[u32] 0x0000000b[u32] eax_0[u32]) (extract[u1] 0x0000000b[u32] 0x0000000c[u32] eax_0[u32]) (extract[u1] 0x0000000c[u32] 0x0000000d[u32] eax_0[u32]) (extract[u1] 0x0000000d[u32] 0x0000000e[u32] eax_0[u32]))}, {defs={0x080480dd}, expr=(xor[u1] (extract[u1] 0x0000000e[u32] 0x0000000f[u32] eax_0[u32]) (extract[u1] 0x0000000f[u32] 0x00000010[u32] eax_0[u32]) (extract[u1] 0x00000010[u32] 0x00000011[u32] eax_0[u32]) (extract[u1] 0x00000011[u32] 0x00000012[u32] eax_0[u32]))}) = {defs={0x080480dd}, expr=(xor[u1] (extract[u1] 0x0000000a[u32] 0x0000000b[u32] eax_0[u32]) (extract[u1] 0x0000000b[u32] 0x0000000c[u32] eax_0[u32]) (extract[u1] 0x0000000c[u32] 0x0000000d[u32] eax_0[u32]) (extract[u1] 0x0000000d[u32] 0x0000000e[u32] eax_0[u32]) (extract[u1] 0x0000000e[u32] 0x0000000f[u32] eax_0[u32]) (extract[u1] 0x0000000f[u32] 0x00000010[u32] eax_0[u32]) (extract[u1] 0x00000010[u32] 0x00000011[u32] eax_0[u32]) (extract[u1] 0x00000011[u32] 0x00000012[u32] eax_0[u32]))}
Symbolic insn@0x080480dd[0]: invert({defs={0x080480dd}, expr=(xor[u1] (extract[u1] 0x0000000a[u32] 0x0000000b[u32] eax_0[u32]) (extract[u1] 0x0000000b[u32] 0x0000000c[u32] eax_0[u32]) (extract[u1] 0x0000000c[u32] 0x0000000d[u32] eax_0[u32]) (extract[u1] 0x0000000d[u32] 0x0000000e[u32] eax_0[u32]) (extract[u1] 0x0000000e[u32] 0x0000000f[u32] eax_0[u32]) (extract[u1] 0x0000000f[u32] 0x00000010[u32] eax_0[u32]) (extract[u1] 0x00000010[u32] 0x00000011[u32] eax_0[u32]) (extract[u1] 0x00000011[u32] 0x00000012[u32] eax_0[u32]))}) = {defs={0x080480dd}, expr=(invert[u1] (xor[u1] (extract[u1] 0x0000000a[u32] 0x0000000b[u32] eax_0[u32]) (extract[u1] 0x0000000b[u32] 0x0000000c[u32] eax_0[u32]) (extract[u1] 0x0000000c[u32] 0x0000000d[u32] eax_0[u32]) (extract[u1] 0x0000000d[u32] 0x0000000e[u32] eax_0[u32]) (extract[u1] 0x0000000e[u32] 0x0000000f[u32] eax_0[u32]) (extract[u1] 0x0000000f[u32] 0x00000010[u32] eax_0[u32]) (extract[u1] 0x00000010[u32] 0x00000011[u32] eax_0[u32]) (extract[u1] 0x00000011[u32] 0x00000012[u32] eax_0[u32])))}
Symbolic insn@0x080480dd[0]: ite({defs={0x080480dd}, expr=true[u1]}, {defs={0x080480dd}, expr=(invert[u1] (xor[u1] (extract[u1] 0x0000000a[u32] 0x0000000b[u32] eax_0[u32]) (extract[u1] 0x0000000b[u32] 0x0000000c[u32] eax_0[u32]) (extract[u1] 0x0000000c[u32] 0x0000000d[u32] eax_0[u32]) (extract[u1] 0x0000000d[u32] 0x0000000e[u32] eax_0[u32]) (extract[u1] 0x0000000e[u32] 0x0000000f[u32] eax_0[u32]) (extract[u1] 0x0000000f[u32] 0x00000010[u32] eax_0[u32]) (extract[u1] 0x00000010[u32] 0x00000011[u32] eax_0[u32]) (extract[u1] 0x00000011[u32] 0x00000012[u32] eax_0[u32])))}, V9[u1]) = {defs={0x080480dd}, expr=(invert[u1] (xor[u1] (extract[u1] 0x0000000a[u32] 0x0000000b[u32] eax_0[u32]) (extract[u1] 0x0000000b[u32] 0x0000000c[u32] eax_0[u32]) (extract[u1] 0x0000000c[u32] 0x0000000d[u32] eax_0[u32]) (extract[u1] 0x0000000d[u32] 0x0000000e[u32] eax_0[u32]) (extract[u1] 0x0000000e[u32] 0x0000000f[u32] eax_0[u32]) (extract[u1] 0x0000000f[u32] 0x00000010[u32] eax_0[u32]) (extract[u1] 0x00000010[u32] 0x00000011[u32] eax_0[u32]) (extract[u1] 0x00000011[u32] 0x00000012[u32] eax_0[u32])))}
Symbolic insn@0x080480dd[0]: writeRegister(pf, {defs={0x080480dd}, expr=(invert[u1] (xor[u1] (extract[u1] 0x0000000a[u32] 0x0000000b[u32] eax_0[u32]) (extract[u1] 0x0000000b[u32] 0x0000000c[u32] eax_0[u32]) (extract[u1] 0x0000000c[u32] 0x0000000d[u32] eax_0[u32]) (extract[u1] 0x0000000d[u32] 0x0000000e[u32] eax_0[u32]) (extract[u1] 0x0000000e[u32] 0x0000000f[u32] eax_0[u32]) (extract[u1] 0x0000000f[u32] 0x00000010[u32] eax_0[u32]) (extract[u1] 0x00000010[u32] 0x00000011[u32] eax_0[u32]) (extract[u1] 0x00000011[u32] 0x00000012[u32] eax_0[u32])))})
Symbolic insn@0x080480dd[0]: undefined_(1) = V10[u1]
Symbolic insn@0x080480dd[0]: peekRegister(sf, V10[u1]) = V10[u1]
Symbolic insn@0x080480dd[0]: ite({defs={0x080480dd}, expr=true[u1]}, {defs={0x080480dd}, expr=false[u1]}, V10[u1]) = {defs={0x080480dd}, expr=false[u1]}
Symbolic insn@0x080480dd[0]: writeRegister(sf, {defs={0x080480dd}, expr=false[u1]})
Symbolic insn@0x080480dd[0]: undefined_(1) = V11[u1]
Symbolic insn@0x080480dd[0]: peekRegister(zf, V11[u1]) = V11[u1]
Symbolic insn@0x080480dd[0]: equalToZero({defs={0x080480dd}, expr=(concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32]))}) = {defs={0x080480dd}, expr=(zerop[u1] (concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32])))}
Symbolic insn@0x080480dd[0]: ite({defs={0x080480dd}, expr=true[u1]}, {defs={0x080480dd}, expr=(zerop[u1] (concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32])))}, V11[u1]) = {defs={0x080480dd}, expr=(zerop[u1] (concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32])))}
Symbolic insn@0x080480dd[0]: writeRegister(zf, {defs={0x080480dd}, expr=(zerop[u1] (concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32])))})
Symbolic insn@0x080480dd[0]: writeRegister(eax, {defs={0x080480dd}, expr=(concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32]))})
Symbolic insn@0x080480dd[0]: finishInstruction(shr eax, 0x0a)
registers:
 eax [writer=0x080480dd] read-before-write = {defs={0x080480dd}, expr=(concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32]))}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480dd] write-only = {defs={0x080480dd}, expr=0x080480e0<134512864>[u32]}
 cf [writer=0x080480dd] write-only = {defs={0x080480dd}, expr=(extract[u1] 0x00000009[u32] 0x0000000a[u32] eax_0[u32])}
 pf [writer=0x080480dd] write-only = {defs={0x080480dd}, expr=(invert[u1] (xor[u1] (extract[u1] 0x0000000a[u32] 0x0000000b[u32] eax_0[u32]) (extract[u1] 0x0000000b[u32] 0x0000000c[u32] eax_0[u32]) (extract[u1] 0x0000000c[u32] 0x0000000d[u32] eax_0[u32]) (extract[u1] 0x0000000d[u32] 0x0000000e[u32] eax_0[u32]) (extract[u1] 0x0000000e[u32] 0x0000000f[u32] eax_0[u32]) (extract[u1] 0x0000000f[u32] 0x00000010[u32] eax_0[u32]) (extract[u1] 0x00000010[u32] 0x00000011[u32] eax_0[u32]) (extract[u1] 0x00000011[u32] 0x00000012[u32] eax_0[u32])))}
 af [writer=0x080480dd] write-only = {defs={0x080480dd}, expr=V3[u1]<unspec>}
 zf [writer=0x080480dd] write-only = {defs={0x080480dd}, expr=(zerop[u1] (concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32])))}
 sf [writer=0x080480dd] write-only = {defs={0x080480dd}, expr=false[u1]}
 of [writer=0x080480dd] write-only = {defs={0x080480dd}, expr=V7[u1]<unspec>}
 fpstatus_top = 0x0[u3]
memory:

0x080480e0: shr eax, 0x0a
Symbolic: startInstruction(0x080480e0: shr eax, 0x0a)
Symbolic insn@0x080480e0[1]: number_(32, 134512864) = {defs={0x080480e0}, expr=0x080480e0<134512864>[u32]}
Symbolic insn@0x080480e0[1]: number_(32, 3) = {defs={0x080480e0}, expr=0x00000003[u32]}
Symbolic insn@0x080480e0[1]: add({defs={0x080480e0}, expr=0x080480e0<134512864>[u32]}, {defs={0x080480e0}, expr=0x00000003[u32]}) = {defs={0x080480e0}, expr=0x080480e3<134512867>[u32]}
Symbolic insn@0x080480e0[1]: writeRegister(eip, {defs={0x080480e0}, expr=0x080480e3<134512867>[u32]})
Symbolic insn@0x080480e0[1]: number_(8, 10) = {defs={0x080480e0}, expr=0x0a[u8]}
Symbolic insn@0x080480e0[1]: unspecified_(32) = V12[u32]<unspec>
Symbolic insn@0x080480e0[1]: undefined_(32) = V13[u32]
Symbolic insn@0x080480e0[1]: readRegister(eax, V13[u32]) = {defs={0x080480dd}, expr=(concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32]))}
Symbolic insn@0x080480e0[1]: extract({defs={0x080480e0}, expr=0x0a[u8]}, 0, 5) = {defs={0x080480e0}, expr=0x0a[u5]}
Symbolic insn@0x080480e0[1]: equalToZero({defs={0x080480e0}, expr=0x0a[u5]}) = {defs={0x080480e0}, expr=false[u1]}
Symbolic insn@0x080480e0[1]: extract({defs={0x080480e0}, expr=0x0a[u8]}, 5, 8) = {defs={0x080480e0}, expr=0x0[u3]}
Symbolic insn@0x080480e0[1]: equalToZero({defs={0x080480e0}, expr=0x0[u3]}) = {defs={0x080480e0}, expr=true[u1]}
Symbolic insn@0x080480e0[1]: invert({defs={0x080480e0}, expr=true[u1]}) = {defs={0x080480e0}, expr=false[u1]}
Symbolic insn@0x080480e0[1]: number_(5, 31) = {defs={0x080480e0}, expr=0x1f<-1>[u5]}
Symbolic insn@0x080480e0[1]: add({defs={0x080480e0}, expr=0x0a[u5]}, {defs={0x080480e0}, expr=0x1f<-1>[u5]}) = {defs={0x080480e0}, expr=0x09[u5]}
Symbolic insn@0x080480e0[1]: equalToZero({defs={0x080480e0}, expr=0x09[u5]}) = {defs={0x080480e0}, expr=false[u1]}
Symbolic insn@0x080480e0[1]: shiftRight({defs={0x080480dd}, expr=(concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32]))}, {defs={0x080480e0}, expr=0x0a[u5]}) = {defs={0x080480dd,0x080480e0}, expr=(concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32]))}
Symbolic insn@0x080480e0[1]: extract({defs={0x080480dd}, expr=(concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32]))}, 31, 32) = {defs={0x080480dd,0x080480e0}, expr=false[u1]}
Symbolic insn@0x080480e0[1]: extract({defs={0x080480dd,0x080480e0}, expr=(concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32]))}, 31, 32) = {defs={0x080480dd,0x080480e0}, expr=false[u1]}
Symbolic insn@0x080480e0[1]: unspecified_(1) = V14[u1]<unspec>
Symbolic insn@0x080480e0[1]: undefined_(1) = V15[u1]
Symbolic insn@0x080480e0[1]: peekRegister(af, V15[u1]) = {defs={0x080480dd}, expr=V3[u1]<unspec>}
Symbolic insn@0x080480e0[1]: ite({defs={0x080480e0}, expr=false[u1]}, {defs={0x080480dd}, expr=V3[u1]<unspec>}, V14[u1]<unspec>) = {defs={0x080480e0}, expr=V14[u1]<unspec>}
Symbolic insn@0x080480e0[1]: writeRegister(af, {defs={0x080480e0}, expr=V14[u1]<unspec>})
Symbolic insn@0x080480e0[1]: add({defs={0x080480e0}, expr=0x0a[u5]}, {defs={0x080480e0}, expr=0x1f<-1>[u5]}) = {defs={0x080480e0}, expr=0x09[u5]}
Symbolic insn@0x080480e0[1]: shiftRight({defs={0x080480dd}, expr=(concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32]))}, {defs={0x080480e0}, expr=0x09[u5]}) = {defs={0x080480dd,0x080480e0}, expr=(concat[u32] 0x00000[u19] (extract[u13] 0x00000013[u32] 0x00000020[u32] eax_0[u32]))}
Symbolic insn@0x080480e0[1]: extract({defs={0x080480dd,0x080480e0}, expr=(concat[u32] 0x00000[u19] (extract[u13] 0x00000013[u32] 0x00000020[u32] eax_0[u32]))}, 0, 1) = {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000013[u32] 0x00000014[u32] eax_0[u32])}
Symbolic insn@0x080480e0[1]: unspecified_(1) = V16[u1]<unspec>
Symbolic insn@0x080480e0[1]: ite({defs={0x080480e0}, expr=false[u1]}, V16[u1]<unspec>, {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000013[u32] 0x00000014[u32] eax_0[u32])}) = {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000013[u32] 0x00000014[u32] eax_0[u32])}
Symbolic insn@0x080480e0[1]: undefined_(1) = V17[u1]
Symbolic insn@0x080480e0[1]: peekRegister(cf, V17[u1]) = {defs={0x080480dd}, expr=(extract[u1] 0x00000009[u32] 0x0000000a[u32] eax_0[u32])}
Symbolic insn@0x080480e0[1]: ite({defs={0x080480e0}, expr=false[u1]}, {defs={0x080480dd}, expr=(extract[u1] 0x00000009[u32] 0x0000000a[u32] eax_0[u32])}, {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000013[u32] 0x00000014[u32] eax_0[u32])}) = {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000013[u32] 0x00000014[u32] eax_0[u32])}
Symbolic insn@0x080480e0[1]: writeRegister(cf, {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000013[u32] 0x00000014[u32] eax_0[u32])})
Symbolic insn@0x080480e0[1]: unspecified_(1) = V18[u1]<unspec>
Symbolic insn@0x080480e0[1]: undefined_(1) = V19[u1]
Symbolic insn@0x080480e0[1]: peekRegister(of, V19[u1]) = {defs={0x080480dd}, expr=V7[u1]<unspec>}
Symbolic insn@0x080480e0[1]: ite({defs={0x080480e0}, expr=false[u1]}, {defs={0x080480dd}, expr=V7[u1]<unspec>}, V18[u1]<unspec>) = {defs={0x080480e0}, expr=V18[u1]<unspec>}
Symbolic insn@0x080480e0[1]: ite({defs={0x080480e0}, expr=false[u1]}, {defs={0x080480dd,0x080480e0}, expr=false[u1]}, {defs={0x080480e0}, expr=V18[u1]<unspec>}) = {defs={0x080480e0}, expr=V18[u1]<unspec>}
Symbolic insn@0x080480e0[1]: writeRegister(of, {defs={0x080480e0}, expr=V18[u1]<unspec>})
Symbolic insn@0x080480e0[1]: invert({defs={0x080480e0}, expr=false[u1]}) = {defs={0x080480e0}, expr=true[u1]}
Symbolic insn@0x080480e0[1]: extract({defs={0x080480dd,0x080480e0}, expr=(concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32]))}, 0, 8) = {defs={0x080480dd,0x080480e0}, expr=(extract[u8] 0x00000014[u32] 0x0000001c[u32] eax_0[u32])}
Symbolic insn@0x080480e0[1]: extract({defs={0x080480dd,0x080480e0}, expr=(concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32]))}, 31, 32) = {defs={0x080480dd,0x080480e0}, expr=false[u1]}
Symbolic insn@0x080480e0[1]: undefined_(1) = V20[u1]
Symbolic insn@0x080480e0[1]: peekRegister(pf, V20[u1]) = {defs={0x080480dd}, expr=(invert[u1] (xor[u1] (extract[u1] 0x0000000a[u32] 0x0000000b[u32] eax_0[u32]) (extract[u1] 0x0000000b[u32] 0x0000000c[u32] eax_0[u32]) (extract[u1] 0x0000000c[u32] 0x0000000d[u32] eax_0[u32]) (extract[u1] 0x0000000d[u32] 0x0000000e[u32] eax_0[u32]) (extract[u1] 0x0000000e[u32] 0x0000000f[u32] eax_0[u32]) (extract[u1] 0x0000000f[u32] 0x00000010[u32] eax_0[u32]) (extract[u1] 0x00000010[u32] 0x00000011[u32] eax_0[u32]) (extract[u1] 0x00000011[u32] 0x00000012[u32] eax_0[u32])))}
Symbolic insn@0x080480e0[1]: extract({defs={0x080480dd,0x080480e0}, expr=(extract[u8] 0x00000014[u32] 0x0000001c[u32] eax_0[u32])}, 1, 2) = {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000015[u32] 0x00000016[u32] eax_0[u32])}
Symbolic insn@0x080480e0[1]: extract({defs={0x080480dd,0x080480e0}, expr=(extract[u8] 0x00000014[u32] 0x0000001c[u32] eax_0[u32])}, 0, 1) = {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000014[u32] 0x00000015[u32] eax_0[u32])}
Symbolic insn@0x080480e0[1]: xor_({defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000014[u32] 0x00000015[u32] eax_0[u32])}, {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000015[u32] 0x00000016[u32] eax_0[u32])}) = {defs={0x080480dd,0x080480e0}, expr=(xor[u1] (extract[u1] 0x00000014[u32] 0x00000015[u32] eax_0[u32]) (extract[u1] 0x00000015[u32] 0x00000016[u32] eax_0[u32]))}
Symbolic insn@0x080480e0[1]: extract({defs={0x080480dd,0x080480e0}, expr=(extract[u8] 0x00000014[u32] 0x0000001c[u32] eax_0[u32])}, 3, 4) = {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000017[u32] 0x00000018[u32] eax_0[u32])}
Symbolic insn@0x080480e0[1]: extract({defs={0x080480dd,0x080480e0}, expr=(extract[u8] 0x00000014[u32] 0x0000001c[u32] eax_0[u32])}, 2, 3) = {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000016[u32] 0x00000017[u32] eax_0[u32])}
Symbolic insn@0x080480e0[1]: xor_({defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000016[u32] 0x00000017[u32] eax_0[u32])}, {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000017[u32] 0x00000018[u32] eax_0[u32])}) = {defs={0x080480dd,0x080480e0}, expr=(xor[u1] (extract[u1] 0x00000016[u32] 0x00000017[u32] eax_0[u32]) (extract[u1] 0x00000017[u32] 0x00000018[u32] eax_0[u32]))}
Symbolic insn@0x080480e0[1]: extract({defs={0x080480dd,0x080480e0}, expr=(extract[u8] 0x00000014[u32] 0x0000001c[u32] eax_0[u32])}, 5, 6) = {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000019[u32] 0x0000001a[u32] eax_0[u32])}
Symbolic insn@0x080480e0[1]: extract({defs={0x080480dd,0x080480e0}, expr=(extract[u8] 0x00000014[u32] 0x0000001c[u32] eax_0[u32])}, 4, 5) = {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000018[u32] 0x00000019[u32] eax_0[u32])}
Symbolic insn@0x080480e0[1]: xor_({defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000018[u32] 0x00000019[u32] eax_0[u32])}, {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000019[u32] 0x0000001a[u32] eax_0[u32])}) = {defs={0x080480dd,0x080480e0}, expr=(xor[u1] (extract[u1] 0x00000018[u32] 0x00000019[u32] eax_0[u32]) (extract[u1] 0x00000019[u32] 0x0000001a[u32] eax_0[u32]))}
Symbolic insn@0x080480e0[1]: extract({defs={0x080480dd,0x080480e0}, expr=(extract[u8] 0x00000014[u32] 0x0000001c[u32] eax_0[u32])}, 7, 8) = {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x0000001b[u32] 0x0000001c[u32] eax_0[u32])}
Symbolic insn@0x080480e0[1]: extract({defs={0x080480dd,0x080480e0}, expr=(extract[u8] 0x00000014[u32] 0x0000001c[u32] eax_0[u32])}, 6, 7) = {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x0000001a[u32] 0x0000001b[u32] eax_0[u32])}
Symbolic insn@0x080480e0[1]: xor_({defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x0000001a[u32] 0x0000001b[u32] eax_0[u32])}, {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x0000001b[u32] 0x0000001c[u32] eax_0[u32])}) = {defs={0x080480dd,0x080480e0}, expr=(xor[u1] (extract[u1] 0x0000001a[u32] 0x0000001b[u32] eax_0[u32]) (extract[u1] 0x0000001b[u32] 0x0000001c[u32] eax_0[u32]))}
Symbolic insn@0x080480e0[1]: xor_({defs={0x080480dd,0x080480e0}, expr=(xor[u1] (extract[u1] 0x00000014[u32] 0x00000015[u32] eax_0[u32]) (extract[u1] 0x00000015[u32] 0x00000016[u32] eax_0[u32]))}, {defs={0x080480dd,0x080480e0}, expr=(xor[u1] (extract[u1] 0x00000016[u32] 0x00000017[u32] eax_0[u32]) (extract[u1] 0x00000017[u32] 0x00000018[u32] eax_0[u32]))}) = {defs={0x080480dd,0x080480e0}, expr=(xor[u1] (extract[u1] 0x00000014[u32] 0x00000015[u32] eax_0[u32]) (extract[u1] 0x00000015[u32] 0x00000016[u32] eax_0[u32]) (extract[u1] 0x00000016[u32] 0x00000017[u32] eax_0[u32]) (extract[u1] 0x00000017[u32] 0x00000018[u32] eax_0[u32]))}
Symbolic insn@0x080480e0[1]: xor_({defs={0x080480dd,0x080480e0}, expr=(xor[u1] (extract[u1] 0x00000018[u32] 0x00000019[u32] eax_0[u32]) (extract[u1] 0x00000019[u32] 0x0000001a[u32] eax_0[u32]))}, {defs={0x080480dd,0x080480e0}, expr=(xor[u1] (extract[u1] 0x0000001a[u32] 0x0000001b[u32] eax_0[u32]) (extract[u1] 0x0000001b[u32] 0x0000001c[u32] eax_0[u32]))}) = {defs={0x080480dd,0x080480e0}, expr=(xor[u1] (extract[u1] 0x00000018[u32] 0x00000019[u32] eax_0[u32]) (extract[u1] 0x00000019[u32] 0x0000001a[u32] eax_0[u32]) (extract[u1] 0x0000001a[u32] 0x0000001b[u32] eax_0[u32]) (extract[u1] 0x0000001b[u32] 0x0000001c[u32] eax_0[u32]))}
Symbolic insn@0x080480e0[1]: xor_({defs={0x080480dd,0x080480e0}, expr=(xor[u1] (extract[u1] 0x00000014[u32] 0x00000015[u32] eax_0[u32]) (extract[u1] 0x00000015[u32] 0x00000016[u32] eax_0[u32]) (extract[u1] 0x00000016[u32] 0x00000017[u32] eax_0[u32]) (extract[u1] 0x00000017[u32] 0x00000018[u32] eax_0[u32]))}, {defs={0x080480dd,0x080480e0}, expr=(xor[u1] (extract[u1] 0x00000018[u32] 0x00000019[u32] eax_0[u32]) (extract[u1] 0x00000019[u32] 0x0000001a[u32] eax_0[u32]) (extract[u1] 0x0000001a[u32] 0x0000001b[u32] eax_0[u32]) (extract[u1] 0x0000001b[u32] 0x0000001c[u32] eax_0[u32]))}) = {defs={0x080480dd,0x080480e0}, expr=(xor[u1] (extract[u1] 0x00000014[u32] 0x00000015[u32] eax_0[u32]) (extract[u1] 0x00000015[u32] 0x00000016[u32] eax_0[u32]) (extract[u1] 0x00000016[u32] 0x00000017[u32] eax_0[u32]) (extract[u1] 0x00000017[u32] 0x00000018[u32] eax_0[u32]) (extract[u1] 0x00000018[u32] 0x00000019[u32] eax_0[u32]) (extract[u1] 0x00000019[u32] 0x0000001a[u32] eax_0[u32]) (extract[u1] 0x0000001a[u32] 0x0000001b[u32] eax_0[u32]) (extract[u1] 0x0000001b[u32] 0x0000001c[u32] eax_0[u32]))}
Symbolic insn@0x080480e0[1]: invert({defs={0x080480dd,0x080480e0}, expr=(xor[u1] (extract[u1] 0x00000014[u32] 0x00000015[u32] eax_0[u32]) (extract[u1] 0x00000015[u32] 0x00000016[u32] eax_0[u32]) (extract[u1] 0x00000016[u32] 0x00000017[u32] eax_0[u32]) (extract[u1] 0x00000017[u32] 0x00000018[u32] eax_0[u32]) (extract[u1] 0x00000018[u32] 0x00000019[u32] eax_0[u32]) (extract[u1] 0x00000019[u32] 0x0000001a[u32] eax_0[u32]) (extract[u1] 0x0000001a[u32] 0x0000001b[u32] eax_0[u32]) (extract[u1] 0x0000001b[u32] 0x0000001c[u32] eax_0[u32]))}) = {defs={0x080480dd,0x080480e0}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000014[u32] 0x00000015[u32] eax_0[u32]) (extract[u1] 0x00000015[u32] 0x00000016[u32] eax_0[u32]) (extract[u1] 0x00000016[u32] 0x00000017[u32] eax_0[u32]) (extract[u1] 0x00000017[u32] 0x00000018[u32] eax_0[u32]) (extract[u1] 0x00000018[u32] 0x00000019[u32] eax_0[u32]) (extract[u1] 0x00000019[u32] 0x0000001a[u32] eax_0[u32]) (extract[u1] 0x0000001a[u32] 0x0000001b[u32] eax_0[u32]) (extract[u1] 0x0000001b[u32] 0x0000001c[u32] eax_0[u32])))}
Symbolic insn@0x080480e0[1]: ite({defs={0x080480e0}, expr=true[u1]}, {defs={0x080480dd,0x080480e0}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000014[u32] 0x00000015[u32] eax_0[u32]) (extract[u1] 0x00000015[u32] 0x00000016[u32] eax_0[u32]) (extract[u1] 0x00000016[u32] 0x00000017[u32] eax_0[u32]) (extract[u1] 0x00000017[u32] 0x00000018[u32] eax_0[u32]) (extract[u1] 0x00000018[u32] 0x00000019[u32] eax_0[u32]) (extract[u1] 0x00000019[u32] 0x0000001a[u32] eax_0[u32]) (extract[u1] 0x0000001a[u32] 0x0000001b[u32] eax_0[u32]) (extract[u1] 0x0000001b[u32] 0x0000001c[u32] eax_0[u32])))}, {defs={0x080480dd}, expr=(invert[u1] (xor[u1] (extract[u1] 0x0000000a[u32] 0x0000000b[u32] eax_0[u32]) (extract[u1] 0x0000000b[u32] 0x0000000c[u32] eax_0[u32]) (extract[u1] 0x0000000c[u32] 0x0000000d[u32] eax_0[u32]) (extract[u1] 0x0000000d[u32] 0x0000000e[u32] eax_0[u32]) (extract[u1] 0x0000000e[u32] 0x0000000f[u32] eax_0[u32]) (extract[u1] 0x0000000f[u32] 0x00000010[u32] eax_0[u32]) (extract[u1] 0x00000010[u32] 0x00000011[u32] eax_0[u32]) (extract[u1] 0x00000011[u32] 0x00000012[u32] eax_0[u32])))}) = {defs={0x080480dd,0x080480e0}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000014[u32] 0x00000015[u32] eax_0[u32]) (extract[u1] 0x00000015[u32] 0x00000016[u32] eax_0[u32]) (extract[u1] 0x00000016[u32] 0x00000017[u32] eax_0[u32]) (extract[u1] 0x00000017[u32] 0x00000018[u32] eax_0[u32]) (extract[u1] 0x00000018[u32] 0x00000019[u32] eax_0[u32]) (extract[u1] 0x00000019[u32] 0x0000001a[u32] eax_0[u32]) (extract[u1] 0x0000001a[u32] 0x0000001b[u32] eax_0[u32]) (extract[u1] 0x0000001b[u32] 0x0000001c[u32] eax_0[u32])))}
Symbolic insn@0x080480e0[1]: writeRegister(pf, {defs={0x080480dd,0x080480e0}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000014[u32] 0x00000015[u32] eax_0[u32]) (extract[u1] 0x00000015[u32] 0x00000016[u32] eax_0[u32]) (extract[u1] 0x00000016[u32] 0x00000017[u32] eax_0[u32]) (extract[u1] 0x00000017[u32] 0x00000018[u32] eax_0[u32]) (extract[u1] 0x00000018[u32] 0x00000019[u32] eax_0[u32]) (extract[u1] 0x00000019[u32] 0x0000001a[u32] eax_0[u32]) (extract[u1] 0x0000001a[u32] 0x0000001b[u32] eax_0[u32]) (extract[u1] 0x0000001b[u32] 0x0000001c[u32] eax_0[u32])))})
Symbolic insn@0x080480e0[1]: undefined_(1) = V21[u1]
Symbolic insn@0x080480e0[1]: peekRegister(sf, V21[u1]) = {defs={0x080480dd}, expr=false[u1]}
Symbolic insn@0x080480e0[1]: ite({defs={0x080480e0}, expr=true[u1]}, {defs={0x080480dd,0x080480e0}, expr=false[u1]}, {defs={0x080480dd}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0}, expr=false[u1]}
Symbolic insn@0x080480e0[1]: writeRegister(sf, {defs={0x080480dd,0x080480e0}, expr=false[u1]})
Symbolic insn@0x080480e0[1]: undefined_(1) = V22[u1]
Symbolic insn@0x080480e0[1]: peekRegister(zf, V22[u1]) = {defs={0x080480dd}, expr=(zerop[u1] (concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32])))}
Symbolic insn@0x080480e0[1]: equalToZero({defs={0x080480dd,0x080480e0}, expr=(concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32]))}) = {defs={0x080480dd,0x080480e0}, expr=(zerop[u1] (concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32])))}
Symbolic insn@0x080480e0[1]: ite({defs={0x080480e0}, expr=true[u1]}, {defs={0x080480dd,0x080480e0}, expr=(zerop[u1] (concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32])))}, {defs={0x080480dd}, expr=(zerop[u1] (concat[u32] 0x000[u10] (extract[u22] 0x0000000a[u32] 0x00000020[u32] eax_0[u32])))}) = {defs={0x080480dd,0x080480e0}, expr=(zerop[u1] (concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32])))}
Symbolic insn@0x080480e0[1]: writeRegister(zf, {defs={0x080480dd,0x080480e0}, expr=(zerop[u1] (concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32])))})
Symbolic insn@0x080480e0[1]: writeRegister(eax, {defs={0x080480dd,0x080480e0}, expr=(concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32]))})
Symbolic insn@0x080480e0[1]: finishInstruction(shr eax, 0x0a)
registers:
 eax [writer=0x080480e0] read-before-write = {defs={0x080480dd,0x080480e0}, expr=(concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32]))}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480e0] write-only = {defs={0x080480e0}, expr=0x080480e3<134512867>[u32]}
 cf [writer=0x080480e0] write-only = {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000013[u32] 0x00000014[u32] eax_0[u32])}
 pf [writer=0x080480e0] write-only = {defs={0x080480dd,0x080480e0}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000014[u32] 0x00000015[u32] eax_0[u32]) (extract[u1] 0x00000015[u32] 0x00000016[u32] eax_0[u32]) (extract[u1] 0x00000016[u32] 0x00000017[u32] eax_0[u32]) (extract[u1] 0x00000017[u32] 0x00000018[u32] eax_0[u32]) (extract[u1] 0x00000018[u32] 0x00000019[u32] eax_0[u32]) (extract[u1] 0x00000019[u32] 0x0000001a[u32] eax_0[u32]) (extract[u1] 0x0000001a[u32] 0x0000001b[u32] eax_0[u32]) (extract[u1] 0x0000001b[u32] 0x0000001c[u32] eax_0[u32])))}
 af [writer=0x080480e0] write-only = {defs={0x080480e0}, expr=V14[u1]<unspec>}
 zf [writer=0x080480e0] write-only = {defs={0x080480dd,0x080480e0}, expr=(zerop[u1] (concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32])))}
 sf [writer=0x080480e0] write-only = {defs={0x080480dd,0x080480e0}, expr=false[u1]}
 of [writer=0x080480e0] write-only = {defs={0x080480e0}, expr=V18[u1]<unspec>}
 fpstatus_top = 0x0[u3]
memory:

0x080480e3: shr eax, 0x0a
Symbolic: startInstruction(0x080480e3: shr eax, 0x0a)
Symbolic insn@0x080480e3[2]: number_(32, 134512867) = {defs={0x080480e3}, expr=0x080480e3<134512867>[u32]}
Symbolic insn@0x080480e3[2]: number_(32, 3) = {defs={0x080480e3}, expr=0x00000003[u32]}
Symbolic insn@0x080480e3[2]: add({defs={0x080480e3}, expr=0x080480e3<134512867>[u32]}, {defs={0x080480e3}, expr=0x00000003[u32]}) = {defs={0x080480e3}, expr=0x080480e6<134512870>[u32]}
Symbolic insn@0x080480e3[2]: writeRegister(eip, {defs={0x080480e3}, expr=0x080480e6<134512870>[u32]})
Symbolic insn@0x080480e3[2]: number_(8, 10) = {defs={0x080480e3}, expr=0x0a[u8]}
Symbolic insn@0x080480e3[2]: unspecified_(32) = V23[u32]<unspec>
Symbolic insn@0x080480e3[2]: undefined_(32) = V24[u32]
Symbolic insn@0x080480e3[2]: readRegister(eax, V24[u32]) = {defs={0x080480dd,0x080480e0}, expr=(concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32]))}
Symbolic insn@0x080480e3[2]: extract({defs={0x080480e3}, expr=0x0a[u8]}, 0, 5) = {defs={0x080480e3}, expr=0x0a[u5]}
Symbolic insn@0x080480e3[2]: equalToZero({defs={0x080480e3}, expr=0x0a[u5]}) = {defs={0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: extract({defs={0x080480e3}, expr=0x0a[u8]}, 5, 8) = {defs={0x080480e3}, expr=0x0[u3]}
Symbolic insn@0x080480e3[2]: equalToZero({defs={0x080480e3}, expr=0x0[u3]}) = {defs={0x080480e3}, expr=true[u1]}
Symbolic insn@0x080480e3[2]: invert({defs={0x080480e3}, expr=true[u1]}) = {defs={0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: number_(5, 31) = {defs={0x080480e3}, expr=0x1f<-1>[u5]}
Symbolic insn@0x080480e3[2]: add({defs={0x080480e3}, expr=0x0a[u5]}, {defs={0x080480e3}, expr=0x1f<-1>[u5]}) = {defs={0x080480e3}, expr=0x09[u5]}
Symbolic insn@0x080480e3[2]: equalToZero({defs={0x080480e3}, expr=0x09[u5]}) = {defs={0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: shiftRight({defs={0x080480dd,0x080480e0}, expr=(concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32]))}, {defs={0x080480e3}, expr=0x0a[u5]}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}
Symbolic insn@0x080480e3[2]: extract({defs={0x080480dd,0x080480e0}, expr=(concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32]))}, 31, 32) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: extract({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}, 31, 32) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: unspecified_(1) = V25[u1]<unspec>
Symbolic insn@0x080480e3[2]: undefined_(1) = V26[u1]
Symbolic insn@0x080480e3[2]: peekRegister(af, V26[u1]) = {defs={0x080480e0}, expr=V14[u1]<unspec>}
Symbolic insn@0x080480e3[2]: ite({defs={0x080480e3}, expr=false[u1]}, {defs={0x080480e0}, expr=V14[u1]<unspec>}, V25[u1]<unspec>) = {defs={0x080480e3}, expr=V25[u1]<unspec>}
Symbolic insn@0x080480e3[2]: writeRegister(af, {defs={0x080480e3}, expr=V25[u1]<unspec>})
Symbolic insn@0x080480e3[2]: add({defs={0x080480e3}, expr=0x0a[u5]}, {defs={0x080480e3}, expr=0x1f<-1>[u5]}) = {defs={0x080480e3}, expr=0x09[u5]}
Symbolic insn@0x080480e3[2]: shiftRight({defs={0x080480dd,0x080480e0}, expr=(concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32]))}, {defs={0x080480e3}, expr=0x09[u5]}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u32] 0x00000000[u29] (extract[u3] 0x0000001d[u32] 0x00000020[u32] eax_0[u32]))}
Symbolic insn@0x080480e3[2]: extract({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u32] 0x00000000[u29] (extract[u3] 0x0000001d[u32] 0x00000020[u32] eax_0[u32]))}, 0, 1) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(extract[u1] 0x0000001d[u32] 0x0000001e[u32] eax_0[u32])}
Symbolic insn@0x080480e3[2]: unspecified_(1) = V27[u1]<unspec>
Symbolic insn@0x080480e3[2]: ite({defs={0x080480e3}, expr=false[u1]}, V27[u1]<unspec>, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(extract[u1] 0x0000001d[u32] 0x0000001e[u32] eax_0[u32])}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(extract[u1] 0x0000001d[u32] 0x0000001e[u32] eax_0[u32])}
Symbolic insn@0x080480e3[2]: undefined_(1) = V28[u1]
Symbolic insn@0x080480e3[2]: peekRegister(cf, V28[u1]) = {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000013[u32] 0x00000014[u32] eax_0[u32])}
Symbolic insn@0x080480e3[2]: ite({defs={0x080480e3}, expr=false[u1]}, {defs={0x080480dd,0x080480e0}, expr=(extract[u1] 0x00000013[u32] 0x00000014[u32] eax_0[u32])}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(extract[u1] 0x0000001d[u32] 0x0000001e[u32] eax_0[u32])}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(extract[u1] 0x0000001d[u32] 0x0000001e[u32] eax_0[u32])}
Symbolic insn@0x080480e3[2]: writeRegister(cf, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(extract[u1] 0x0000001d[u32] 0x0000001e[u32] eax_0[u32])})
Symbolic insn@0x080480e3[2]: unspecified_(1) = V29[u1]<unspec>
Symbolic insn@0x080480e3[2]: undefined_(1) = V30[u1]
Symbolic insn@0x080480e3[2]: peekRegister(of, V30[u1]) = {defs={0x080480e0}, expr=V18[u1]<unspec>}
Symbolic insn@0x080480e3[2]: ite({defs={0x080480e3}, expr=false[u1]}, {defs={0x080480e0}, expr=V18[u1]<unspec>}, V29[u1]<unspec>) = {defs={0x080480e3}, expr=V29[u1]<unspec>}
Symbolic insn@0x080480e3[2]: ite({defs={0x080480e3}, expr=false[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}, {defs={0x080480e3}, expr=V29[u1]<unspec>}) = {defs={0x080480e3}, expr=V29[u1]<unspec>}
Symbolic insn@0x080480e3[2]: writeRegister(of, {defs={0x080480e3}, expr=V29[u1]<unspec>})
Symbolic insn@0x080480e3[2]: invert({defs={0x080480e3}, expr=false[u1]}) = {defs={0x080480e3}, expr=true[u1]}
Symbolic insn@0x080480e3[2]: extract({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}, 0, 8) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u8] 0x00[u6] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}
Symbolic insn@0x080480e3[2]: extract({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}, 31, 32) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: undefined_(1) = V31[u1]
Symbolic insn@0x080480e3[2]: peekRegister(pf, V31[u1]) = {defs={0x080480dd,0x080480e0}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000014[u32] 0x00000015[u32] eax_0[u32]) (extract[u1] 0x00000015[u32] 0x00000016[u32] eax_0[u32]) (extract[u1] 0x00000016[u32] 0x00000017[u32] eax_0[u32]) (extract[u1] 0x00000017[u32] 0x00000018[u32] eax_0[u32]) (extract[u1] 0x00000018[u32] 0x00000019[u32] eax_0[u32]) (extract[u1] 0x00000019[u32] 0x0000001a[u32] eax_0[u32]) (extract[u1] 0x0000001a[u32] 0x0000001b[u32] eax_0[u32]) (extract[u1] 0x0000001b[u32] 0x0000001c[u32] eax_0[u32])))}
Symbolic insn@0x080480e3[2]: extract({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u8] 0x00[u6] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}, 1, 2) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])}
Symbolic insn@0x080480e3[2]: extract({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u8] 0x00[u6] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}, 0, 1) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(extract[u1] 0x0000001e[u32] 0x0000001f[u32] eax_0[u32])}
Symbolic insn@0x080480e3[2]: xor_({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(extract[u1] 0x0000001e[u32] 0x0000001f[u32] eax_0[u32])}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(xor[u1] (extract[u1] 0x0000001e[u32] 0x0000001f[u32] eax_0[u32]) (extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32]))}
Symbolic insn@0x080480e3[2]: extract({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u8] 0x00[u6] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}, 3, 4) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: extract({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u8] 0x00[u6] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}, 2, 3) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: xor_({defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: extract({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u8] 0x00[u6] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}, 5, 6) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: extract({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u8] 0x00[u6] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}, 4, 5) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: xor_({defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: extract({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u8] 0x00[u6] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}, 7, 8) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: extract({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u8] 0x00[u6] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}, 6, 7) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: xor_({defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: xor_({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(xor[u1] (extract[u1] 0x0000001e[u32] 0x0000001f[u32] eax_0[u32]) (extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32]))}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(xor[u1] (extract[u1] 0x0000001e[u32] 0x0000001f[u32] eax_0[u32]) (extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32]))}
Symbolic insn@0x080480e3[2]: xor_({defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: xor_({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(xor[u1] (extract[u1] 0x0000001e[u32] 0x0000001f[u32] eax_0[u32]) (extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32]))}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(xor[u1] (extract[u1] 0x0000001e[u32] 0x0000001f[u32] eax_0[u32]) (extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32]))}
Symbolic insn@0x080480e3[2]: invert({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(xor[u1] (extract[u1] 0x0000001e[u32] 0x0000001f[u32] eax_0[u32]) (extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32]))}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(invert[u1] (xor[u1] (extract[u1] 0x0000001e[u32] 0x0000001f[u32] eax_0[u32]) (extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])))}
Symbolic insn@0x080480e3[2]: ite({defs={0x080480e3}, expr=true[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(invert[u1] (xor[u1] (extract[u1] 0x0000001e[u32] 0x0000001f[u32] eax_0[u32]) (extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])))}, {defs={0x080480dd,0x080480e0}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000014[u32] 0x00000015[u32] eax_0[u32]) (extract[u1] 0x00000015[u32] 0x00000016[u32] eax_0[u32]) (extract[u1] 0x00000016[u32] 0x00000017[u32] eax_0[u32]) (extract[u1] 0x00000017[u32] 0x00000018[u32] eax_0[u32]) (extract[u1] 0x00000018[u32] 0x00000019[u32] eax_0[u32]) (extract[u1] 0x00000019[u32] 0x0000001a[u32] eax_0[u32]) (extract[u1] 0x0000001a[u32] 0x0000001b[u32] eax_0[u32]) (extract[u1] 0x0000001b[u32] 0x0000001c[u32] eax_0[u32])))}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(invert[u1] (xor[u1] (extract[u1] 0x0000001e[u32] 0x0000001f[u32] eax_0[u32]) (extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])))}
Symbolic insn@0x080480e3[2]: writeRegister(pf, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(invert[u1] (xor[u1] (extract[u1] 0x0000001e[u32] 0x0000001f[u32] eax_0[u32]) (extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])))})
Symbolic insn@0x080480e3[2]: undefined_(1) = V32[u1]
Symbolic insn@0x080480e3[2]: peekRegister(sf, V32[u1]) = {defs={0x080480dd,0x080480e0}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: ite({defs={0x080480e3}, expr=true[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}, {defs={0x080480dd,0x080480e0}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e3[2]: writeRegister(sf, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]})
Symbolic insn@0x080480e3[2]: undefined_(1) = V33[u1]
Symbolic insn@0x080480e3[2]: peekRegister(zf, V33[u1]) = {defs={0x080480dd,0x080480e0}, expr=(zerop[u1] (concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32])))}
Symbolic insn@0x080480e3[2]: equalToZero({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(zerop[u1] (concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32])))}
Symbolic insn@0x080480e3[2]: ite({defs={0x080480e3}, expr=true[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(zerop[u1] (concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32])))}, {defs={0x080480dd,0x080480e0}, expr=(zerop[u1] (concat[u32] 0x00000[u20] (extract[u12] 0x00000014[u32] 0x00000020[u32] eax_0[u32])))}) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(zerop[u1] (concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32])))}
Symbolic insn@0x080480e3[2]: writeRegister(zf, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(zerop[u1] (concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32])))})
Symbolic insn@0x080480e3[2]: writeRegister(eax, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))})
Symbolic insn@0x080480e3[2]: finishInstruction(shr eax, 0x0a)
registers:
 eax [writer=0x080480e3] read-before-write = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480e3] write-only = {defs={0x080480e3}, expr=0x080480e6<134512870>[u32]}
 cf [writer=0x080480e3] write-only = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(extract[u1] 0x0000001d[u32] 0x0000001e[u32] eax_0[u32])}
 pf [writer=0x080480e3] write-only = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(invert[u1] (xor[u1] (extract[u1] 0x0000001e[u32] 0x0000001f[u32] eax_0[u32]) (extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])))}
 af [writer=0x080480e3] write-only = {defs={0x080480e3}, expr=V25[u1]<unspec>}
 zf [writer=0x080480e3] write-only = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(zerop[u1] (concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32])))}
 sf [writer=0x080480e3] write-only = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
 of [writer=0x080480e3] write-only = {defs={0x080480e3}, expr=V29[u1]<unspec>}
 fpstatus_top = 0x0[u3]
memory:

0x080480e6: shr eax, 0x02
Symbolic: startInstruction(0x080480e6: shr eax, 0x02)
Symbolic insn@0x080480e6[3]: number_(32, 134512870) = {defs={0x080480e6}, expr=0x080480e6<134512870>[u32]}
Symbolic insn@0x080480e6[3]: number_(32, 3) = {defs={0x080480e6}, expr=0x00000003[u32]}
Symbolic insn@0x080480e6[3]: add({defs={0x080480e6}, expr=0x080480e6<134512870>[u32]}, {defs={0x080480e6}, expr=0x00000003[u32]}) = {defs={0x080480e6}, expr=0x080480e9<134512873>[u32]}
Symbolic insn@0x080480e6[3]: writeRegister(eip, {defs={0x080480e6}, expr=0x080480e9<134512873>[u32]})
Symbolic insn@0x080480e6[3]: number_(8, 2) = {defs={0x080480e6}, expr=0x02[u8]}
Symbolic insn@0x080480e6[3]: unspecified_(32) = V34[u32]<unspec>
Symbolic insn@0x080480e6[3]: undefined_(32) = V35[u32]
Symbolic insn@0x080480e6[3]: readRegister(eax, V35[u32]) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}
Symbolic insn@0x080480e6[3]: extract({defs={0x080480e6}, expr=0x02[u8]}, 0, 5) = {defs={0x080480e6}, expr=0x02[u5]}
Symbolic insn@0x080480e6[3]: equalToZero({defs={0x080480e6}, expr=0x02[u5]}) = {defs={0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: extract({defs={0x080480e6}, expr=0x02[u8]}, 5, 8) = {defs={0x080480e6}, expr=0x0[u3]}
Symbolic insn@0x080480e6[3]: equalToZero({defs={0x080480e6}, expr=0x0[u3]}) = {defs={0x080480e6}, expr=true[u1]}
Symbolic insn@0x080480e6[3]: invert({defs={0x080480e6}, expr=true[u1]}) = {defs={0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: number_(5, 31) = {defs={0x080480e6}, expr=0x1f<-1>[u5]}
Symbolic insn@0x080480e6[3]: add({defs={0x080480e6}, expr=0x02[u5]}, {defs={0x080480e6}, expr=0x1f<-1>[u5]}) = {defs={0x080480e6}, expr=0x01[u5]}
Symbolic insn@0x080480e6[3]: equalToZero({defs={0x080480e6}, expr=0x01[u5]}) = {defs={0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: shiftRight({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}, {defs={0x080480e6}, expr=0x02[u5]}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00000000[u32]}
Symbolic insn@0x080480e6[3]: extract({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}, 31, 32) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: extract({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00000000[u32]}, 31, 32) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: unspecified_(1) = V36[u1]<unspec>
Symbolic insn@0x080480e6[3]: undefined_(1) = V37[u1]
Symbolic insn@0x080480e6[3]: peekRegister(af, V37[u1]) = {defs={0x080480e3}, expr=V25[u1]<unspec>}
Symbolic insn@0x080480e6[3]: ite({defs={0x080480e6}, expr=false[u1]}, {defs={0x080480e3}, expr=V25[u1]<unspec>}, V36[u1]<unspec>) = {defs={0x080480e6}, expr=V36[u1]<unspec>}
Symbolic insn@0x080480e6[3]: writeRegister(af, {defs={0x080480e6}, expr=V36[u1]<unspec>})
Symbolic insn@0x080480e6[3]: add({defs={0x080480e6}, expr=0x02[u5]}, {defs={0x080480e6}, expr=0x1f<-1>[u5]}) = {defs={0x080480e6}, expr=0x01[u5]}
Symbolic insn@0x080480e6[3]: shiftRight({defs={0x080480dd,0x080480e0,0x080480e3}, expr=(concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32]))}, {defs={0x080480e6}, expr=0x01[u5]}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=(concat[u32] 0x00000000[u31] (extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32]))}
Symbolic insn@0x080480e6[3]: extract({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=(concat[u32] 0x00000000[u31] (extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32]))}, 0, 1) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])}
Symbolic insn@0x080480e6[3]: unspecified_(1) = V38[u1]<unspec>
Symbolic insn@0x080480e6[3]: ite({defs={0x080480e6}, expr=false[u1]}, V38[u1]<unspec>, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])}
Symbolic insn@0x080480e6[3]: undefined_(1) = V39[u1]
Symbolic insn@0x080480e6[3]: peekRegister(cf, V39[u1]) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(extract[u1] 0x0000001d[u32] 0x0000001e[u32] eax_0[u32])}
Symbolic insn@0x080480e6[3]: ite({defs={0x080480e6}, expr=false[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(extract[u1] 0x0000001d[u32] 0x0000001e[u32] eax_0[u32])}, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])}
Symbolic insn@0x080480e6[3]: writeRegister(cf, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])})
Symbolic insn@0x080480e6[3]: unspecified_(1) = V40[u1]<unspec>
Symbolic insn@0x080480e6[3]: undefined_(1) = V41[u1]
Symbolic insn@0x080480e6[3]: peekRegister(of, V41[u1]) = {defs={0x080480e3}, expr=V29[u1]<unspec>}
Symbolic insn@0x080480e6[3]: ite({defs={0x080480e6}, expr=false[u1]}, {defs={0x080480e3}, expr=V29[u1]<unspec>}, V40[u1]<unspec>) = {defs={0x080480e6}, expr=V40[u1]<unspec>}
Symbolic insn@0x080480e6[3]: ite({defs={0x080480e6}, expr=false[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}, {defs={0x080480e6}, expr=V40[u1]<unspec>}) = {defs={0x080480e6}, expr=V40[u1]<unspec>}
Symbolic insn@0x080480e6[3]: writeRegister(of, {defs={0x080480e6}, expr=V40[u1]<unspec>})
Symbolic insn@0x080480e6[3]: invert({defs={0x080480e6}, expr=false[u1]}) = {defs={0x080480e6}, expr=true[u1]}
Symbolic insn@0x080480e6[3]: extract({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00000000[u32]}, 0, 8) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00[u8]}
Symbolic insn@0x080480e6[3]: extract({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00000000[u32]}, 31, 32) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: undefined_(1) = V42[u1]
Symbolic insn@0x080480e6[3]: peekRegister(pf, V42[u1]) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(invert[u1] (xor[u1] (extract[u1] 0x0000001e[u32] 0x0000001f[u32] eax_0[u32]) (extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])))}
Symbolic insn@0x080480e6[3]: extract({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00[u8]}, 1, 2) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: extract({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00[u8]}, 0, 1) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: xor_({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: extract({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00[u8]}, 3, 4) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: extract({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00[u8]}, 2, 3) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: xor_({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: extract({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00[u8]}, 5, 6) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: extract({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00[u8]}, 4, 5) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: xor_({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: extract({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00[u8]}, 7, 8) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: extract({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00[u8]}, 6, 7) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: xor_({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: xor_({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: xor_({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: xor_({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: invert({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]}
Symbolic insn@0x080480e6[3]: ite({defs={0x080480e6}, expr=true[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(invert[u1] (xor[u1] (extract[u1] 0x0000001e[u32] 0x0000001f[u32] eax_0[u32]) (extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])))}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]}
Symbolic insn@0x080480e6[3]: writeRegister(pf, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]})
Symbolic insn@0x080480e6[3]: undefined_(1) = V43[u1]
Symbolic insn@0x080480e6[3]: peekRegister(sf, V43[u1]) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: ite({defs={0x080480e6}, expr=true[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=false[u1]}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
Symbolic insn@0x080480e6[3]: writeRegister(sf, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]})
Symbolic insn@0x080480e6[3]: undefined_(1) = V44[u1]
Symbolic insn@0x080480e6[3]: peekRegister(zf, V44[u1]) = {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(zerop[u1] (concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32])))}
Symbolic insn@0x080480e6[3]: equalToZero({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00000000[u32]}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]}
Symbolic insn@0x080480e6[3]: ite({defs={0x080480e6}, expr=true[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]}, {defs={0x080480dd,0x080480e0,0x080480e3}, expr=(zerop[u1] (concat[u32] 0x00000000[u30] (extract[u2] 0x0000001e[u32] 0x00000020[u32] eax_0[u32])))}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]}
Symbolic insn@0x080480e6[3]: writeRegister(zf, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]})
Symbolic insn@0x080480e6[3]: writeRegister(eax, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00000000[u32]})
Symbolic insn@0x080480e6[3]: finishInstruction(shr eax, 0x02)
registers:
 eax [writer=0x080480e6] read-before-write = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=0x00000000[u32]}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480e6] write-only = {defs={0x080480e6}, expr=0x080480e9<134512873>[u32]}
 cf [writer=0x080480e6] write-only = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])}
 pf [writer=0x080480e6] write-only = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]}
 af [writer=0x080480e6] write-only = {defs={0x080480e6}, expr=V36[u1]<unspec>}
 zf [writer=0x080480e6] write-only = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]}
 sf [writer=0x080480e6] write-only = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
 of [writer=0x080480e6] write-only = {defs={0x080480e6}, expr=V40[u1]<unspec>}
 fpstatus_top = 0x0[u3]
memory:

0x080480e9: mov eax, ebx
Symbolic: startInstruction(0x080480e9: mov eax, ebx)
Symbolic insn@0x080480e9[4]: number_(32, 134512873) = {defs={0x080480e9}, expr=0x080480e9<134512873>[u32]}
Symbolic insn@0x080480e9[4]: number_(32, 2) = {defs={0x080480e9}, expr=0x00000002[u32]}
Symbolic insn@0x080480e9[4]: add({defs={0x080480e9}, expr=0x080480e9<134512873>[u32]}, {defs={0x080480e9}, expr=0x00000002[u32]}) = {defs={0x080480e9}, expr=0x080480eb<134512875>[u32]}
Symbolic insn@0x080480e9[4]: writeRegister(eip, {defs={0x080480e9}, expr=0x080480eb<134512875>[u32]})
Symbolic insn@0x080480e9[4]: undefined_(32) = V45[u32]
Symbolic insn@0x080480e9[4]: readRegister(ebx, V45[u32]) = ebx_0[u32]
Symbolic insn@0x080480e9[4]: writeRegister(eax, ebx_0[u32])
Symbolic insn@0x080480e9[4]: finishInstruction(mov eax, ebx)
registers:
 eax [writer=0x080480e9] read-before-write = ebx_0[u32]
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480e9] write-only = {defs={0x080480e9}, expr=0x080480eb<134512875>[u32]}
 cf [writer=0x080480e6] write-only = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])}
 pf [writer=0x080480e6] write-only = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]}
 af [writer=0x080480e6] write-only = {defs={0x080480e6}, expr=V36[u1]<unspec>}
 zf [writer=0x080480e6] write-only = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]}
 sf [writer=0x080480e6] write-only = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
 of [writer=0x080480e6] write-only = {defs={0x080480e6}, expr=V40[u1]<unspec>}
 fpstatus_top = 0x0[u3]
memory:

0x080480eb: je 0x080480a2<end>
Symbolic: startInstruction(0x080480eb: je 0x080480a2<end>)
Symbolic insn@0x080480eb[5]: number_(32, 134512875) = {defs={0x080480eb}, expr=0x080480eb<134512875>[u32]}
Symbolic insn@0x080480eb[5]: number_(32, 2) = {defs={0x080480eb}, expr=0x00000002[u32]}
Symbolic insn@0x080480eb[5]: add({defs={0x080480eb}, expr=0x080480eb<134512875>[u32]}, {defs={0x080480eb}, expr=0x00000002[u32]}) = {defs={0x080480eb}, expr=0x080480ed<134512877>[u32]}
Symbolic insn@0x080480eb[5]: writeRegister(eip, {defs={0x080480eb}, expr=0x080480ed<134512877>[u32]})
Symbolic insn@0x080480eb[5]: undefined_(1) = V46[u1]
Symbolic insn@0x080480eb[5]: readRegister(zf, V46[u1]) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]}
Symbolic insn@0x080480eb[5]: undefined_(32) = V47[u32]
Symbolic insn@0x080480eb[5]: readRegister(eip, V47[u32]) = {defs={0x080480eb}, expr=0x080480ed<134512877>[u32]}
Symbolic insn@0x080480eb[5]: number_(32, 134512802) = {defs={0x080480eb}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480eb[5]: unsignedExtend({defs={0x080480eb}, expr=0x080480a2<134512802>[u32]}, 32) = {defs={0x080480eb}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480eb[5]: ite({defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]}, {defs={0x080480eb}, expr=0x080480a2<134512802>[u32]}, {defs={0x080480eb}, expr=0x080480ed<134512877>[u32]}) = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6,0x080480eb}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480eb[5]: writeRegister(eip, {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6,0x080480eb}, expr=0x080480a2<134512802>[u32]})
Symbolic insn@0x080480eb[5]: finishInstruction(je 0x080480a2<end>)
registers:
 eax [writer=0x080480e9] read-before-write = ebx_0[u32]
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480eb] = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6,0x080480eb}, expr=0x080480a2<134512802>[u32]}
 cf [writer=0x080480e6] write-only = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] eax_0[u32])}
 pf [writer=0x080480e6] write-only = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]}
 af [writer=0x080480e6] write-only = {defs={0x080480e6}, expr=V36[u1]<unspec>}
 zf [writer=0x080480e6] = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=true[u1]}
 sf [writer=0x080480e6] write-only = {defs={0x080480dd,0x080480e0,0x080480e3,0x080480e6}, expr=false[u1]}
 of [writer=0x080480e6] write-only = {defs={0x080480e6}, expr=V40[u1]<unspec>}
 fpstatus_top = 0x0[u3]
memory:
Symbolic: operators destroyed
=====================================================================================
=== Starting a new basic block ===
=====================================================================================
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]

0x080480ed: mov eax, 0x00000001
Symbolic: startInstruction(0x080480ed: mov eax, 0x00000001)
Symbolic insn@0x080480ed[0]: number_(32, 134512877) = {defs={0x080480ed}, expr=0x080480ed<134512877>[u32]}
Symbolic insn@0x080480ed[0]: number_(32, 5) = {defs={0x080480ed}, expr=0x00000005[u32]}
Symbolic insn@0x080480ed[0]: add({defs={0x080480ed}, expr=0x080480ed<134512877>[u32]}, {defs={0x080480ed}, expr=0x00000005[u32]}) = {defs={0x080480ed}, expr=0x080480f2<134512882>[u32]}
Symbolic insn@0x080480ed[0]: writeRegister(eip, {defs={0x080480ed}, expr=0x080480f2<134512882>[u32]})
Symbolic insn@0x080480ed[0]: number_(32, 1) = {defs={0x080480ed}, expr=0x00000001[u32]}
Symbolic insn@0x080480ed[0]: writeRegister(eax, {defs={0x080480ed}, expr=0x00000001[u32]})
Symbolic insn@0x080480ed[0]: finishInstruction(mov eax, 0x00000001)
registers:
 eax [writer=0x080480ed] write-only = {defs={0x080480ed}, expr=0x00000001[u32]}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480ed] write-only = {defs={0x080480ed}, expr=0x080480f2<134512882>[u32]}
 fpstatus_top = 0x0[u3]
memory:

0x080480f2: xor eax, eax
Symbolic: startInstruction(0x080480f2: xor eax, eax)
Symbolic insn@0x080480f2[1]: number_(32, 134512882) = {defs={0x080480f2}, expr=0x080480f2<134512882>[u32]}
Symbolic insn@0x080480f2[1]: number_(32, 2) = {defs={0x080480f2}, expr=0x00000002[u32]}
Symbolic insn@0x080480f2[1]: add({defs={0x080480f2}, expr=0x080480f2<134512882>[u32]}, {defs={0x080480f2}, expr=0x00000002[u32]}) = {defs={0x080480f2}, expr=0x080480f4<134512884>[u32]}
Symbolic insn@0x080480f2[1]: writeRegister(eip, {defs={0x080480f2}, expr=0x080480f4<134512884>[u32]})
Symbolic insn@0x080480f2[1]: number_(32, 0) = {defs={0x080480f2}, expr=0x00000000[u32]}
Symbolic insn@0x080480f2[1]: extract({defs={0x080480f2}, expr=0x00000000[u32]}, 0, 8) = {defs={0x080480f2}, expr=0x00[u8]}
Symbolic insn@0x080480f2[1]: extract({defs={0x080480f2}, expr=0x00[u8]}, 1, 2) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: extract({defs={0x080480f2}, expr=0x00[u8]}, 0, 1) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: xor_({defs={0x080480f2}, expr=false[u1]}, {defs={0x080480f2}, expr=false[u1]}) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: extract({defs={0x080480f2}, expr=0x00[u8]}, 3, 4) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: extract({defs={0x080480f2}, expr=0x00[u8]}, 2, 3) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: xor_({defs={0x080480f2}, expr=false[u1]}, {defs={0x080480f2}, expr=false[u1]}) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: extract({defs={0x080480f2}, expr=0x00[u8]}, 5, 6) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: extract({defs={0x080480f2}, expr=0x00[u8]}, 4, 5) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: xor_({defs={0x080480f2}, expr=false[u1]}, {defs={0x080480f2}, expr=false[u1]}) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: extract({defs={0x080480f2}, expr=0x00[u8]}, 7, 8) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: extract({defs={0x080480f2}, expr=0x00[u8]}, 6, 7) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: xor_({defs={0x080480f2}, expr=false[u1]}, {defs={0x080480f2}, expr=false[u1]}) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: xor_({defs={0x080480f2}, expr=false[u1]}, {defs={0x080480f2}, expr=false[u1]}) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: xor_({defs={0x080480f2}, expr=false[u1]}, {defs={0x080480f2}, expr=false[u1]}) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: xor_({defs={0x080480f2}, expr=false[u1]}, {defs={0x080480f2}, expr=false[u1]}) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: invert({defs={0x080480f2}, expr=false[u1]}) = {defs={0x080480f2}, expr=true[u1]}
Symbolic insn@0x080480f2[1]: writeRegister(pf, {defs={0x080480f2}, expr=true[u1]})
Symbolic insn@0x080480f2[1]: extract({defs={0x080480f2}, expr=0x00000000[u32]}, 31, 32) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: writeRegister(sf, {defs={0x080480f2}, expr=false[u1]})
Symbolic insn@0x080480f2[1]: equalToZero({defs={0x080480f2}, expr=0x00000000[u32]}) = {defs={0x080480f2}, expr=true[u1]}
Symbolic insn@0x080480f2[1]: writeRegister(zf, {defs={0x080480f2}, expr=true[u1]})
Symbolic insn@0x080480f2[1]: writeRegister(eax, {defs={0x080480f2}, expr=0x00000000[u32]})
Symbolic insn@0x080480f2[1]: boolean_(0) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: writeRegister(of, {defs={0x080480f2}, expr=false[u1]})
Symbolic insn@0x080480f2[1]: unspecified_(1) = V1[u1]<unspec>
Symbolic insn@0x080480f2[1]: writeRegister(af, V1[u1]<unspec>)
Symbolic insn@0x080480f2[1]: boolean_(0) = {defs={0x080480f2}, expr=false[u1]}
Symbolic insn@0x080480f2[1]: writeRegister(cf, {defs={0x080480f2}, expr=false[u1]})
Symbolic insn@0x080480f2[1]: finishInstruction(xor eax, eax)
registers:
 eax [writer=0x080480f2] write-only = {defs={0x080480f2}, expr=0x00000000[u32]}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480f2] write-only = {defs={0x080480f2}, expr=0x080480f4<134512884>[u32]}
 cf [writer=0x080480f2] write-only = {defs={0x080480f2}, expr=false[u1]}
 pf [writer=0x080480f2] write-only = {defs={0x080480f2}, expr=true[u1]}
 af [writer=0x080480f2] write-only = V1[u1]<unspec>
 zf [writer=0x080480f2] write-only = {defs={0x080480f2}, expr=true[u1]}
 sf [writer=0x080480f2] write-only = {defs={0x080480f2}, expr=false[u1]}
 of [writer=0x080480f2] write-only = {defs={0x080480f2}, expr=false[u1]}
 fpstatus_top = 0x0[u3]
memory:

0x080480f4: neg ecx
Symbolic: startInstruction(0x080480f4: neg ecx)
Symbolic insn@0x080480f4[2]: number_(32, 134512884) = {defs={0x080480f4}, expr=0x080480f4<134512884>[u32]}
Symbolic insn@0x080480f4[2]: number_(32, 2) = {defs={0x080480f4}, expr=0x00000002[u32]}
Symbolic insn@0x080480f4[2]: add({defs={0x080480f4}, expr=0x080480f4<134512884>[u32]}, {defs={0x080480f4}, expr=0x00000002[u32]}) = {defs={0x080480f4}, expr=0x080480f6<134512886>[u32]}
Symbolic insn@0x080480f4[2]: writeRegister(eip, {defs={0x080480f4}, expr=0x080480f6<134512886>[u32]})
Symbolic insn@0x080480f4[2]: undefined_(32) = V2[u32]
Symbolic insn@0x080480f4[2]: readRegister(ecx, V2[u32]) = ecx_0[u32]
Symbolic insn@0x080480f4[2]: boolean_(0) = {defs={0x080480f4}, expr=false[u1]}
Symbolic insn@0x080480f4[2]: invert(ecx_0[u32]) = {defs={0x080480f4}, expr=(invert[u32] ecx_0[u32])}
Symbolic insn@0x080480f4[2]: number_(32, 0) = {defs={0x080480f4}, expr=0x00000000[u32]}
Symbolic insn@0x080480f4[2]: invert({defs={0x080480f4}, expr=false[u1]}) = {defs={0x080480f4}, expr=true[u1]}
Symbolic insn@0x080480f4[2]: addWithCarries({defs={0x080480f4}, expr=0x00000000[u32]}, {defs={0x080480f4}, expr=(invert[u32] ecx_0[u32])}, {defs={0x080480f4}, expr=true[u1]}) = {defs={0x080480f4}, expr=(add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])}
Symbolic insn@0x080480f4[2]: also returns: {defs={0x080480f4}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}
Symbolic insn@0x080480f4[2]: extract({defs={0x080480f4}, expr=(add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])}, 0, 8) = {defs={0x080480f4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480f4[2]: extract({defs={0x080480f4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 1, 2) = {defs={0x080480f4}, expr=(extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480f4[2]: extract({defs={0x080480f4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 0, 1) = {defs={0x080480f4}, expr=(extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480f4[2]: xor_({defs={0x080480f4}, expr=(extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, {defs={0x080480f4}, expr=(extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}) = {defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}
Symbolic insn@0x080480f4[2]: extract({defs={0x080480f4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 3, 4) = {defs={0x080480f4}, expr=(extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480f4[2]: extract({defs={0x080480f4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 2, 3) = {defs={0x080480f4}, expr=(extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480f4[2]: xor_({defs={0x080480f4}, expr=(extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, {defs={0x080480f4}, expr=(extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}) = {defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}
Symbolic insn@0x080480f4[2]: extract({defs={0x080480f4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 5, 6) = {defs={0x080480f4}, expr=(extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480f4[2]: extract({defs={0x080480f4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 4, 5) = {defs={0x080480f4}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480f4[2]: xor_({defs={0x080480f4}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, {defs={0x080480f4}, expr=(extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}) = {defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}
Symbolic insn@0x080480f4[2]: extract({defs={0x080480f4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 7, 8) = {defs={0x080480f4}, expr=(extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480f4[2]: extract({defs={0x080480f4}, expr=(extract[u8] 0x00000000[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, 6, 7) = {defs={0x080480f4}, expr=(extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480f4[2]: xor_({defs={0x080480f4}, expr=(extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, {defs={0x080480f4}, expr=(extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}) = {defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}
Symbolic insn@0x080480f4[2]: xor_({defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}, {defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}) = {defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}
Symbolic insn@0x080480f4[2]: xor_({defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}, {defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}) = {defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}
Symbolic insn@0x080480f4[2]: xor_({defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}, {defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}) = {defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}
Symbolic insn@0x080480f4[2]: invert({defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])))}) = {defs={0x080480f4}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))))}
Symbolic insn@0x080480f4[2]: writeRegister(pf, {defs={0x080480f4}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))))})
Symbolic insn@0x080480f4[2]: extract({defs={0x080480f4}, expr=(add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])}, 31, 32) = {defs={0x080480f4}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480f4[2]: writeRegister(sf, {defs={0x080480f4}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))})
Symbolic insn@0x080480f4[2]: equalToZero({defs={0x080480f4}, expr=(add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])}) = {defs={0x080480f4}, expr=(zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480f4[2]: writeRegister(zf, {defs={0x080480f4}, expr=(zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))})
Symbolic insn@0x080480f4[2]: extract({defs={0x080480f4}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}, 31, 32) = {defs={0x080480f4}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}
Symbolic insn@0x080480f4[2]: extract({defs={0x080480f4}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}, 30, 31) = {defs={0x080480f4}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}
Symbolic insn@0x080480f4[2]: extract({defs={0x080480f4}, expr=(extract[u32] 0x00000001[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}, 3, 4) = {defs={0x080480f4}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}
Symbolic insn@0x080480f4[2]: invert({defs={0x080480f4}, expr=(extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}) = {defs={0x080480f4}, expr=(invert[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
Symbolic insn@0x080480f4[2]: writeRegister(af, {defs={0x080480f4}, expr=(invert[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))})
Symbolic insn@0x080480f4[2]: invert({defs={0x080480f4}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}) = {defs={0x080480f4}, expr=(invert[u1] (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
Symbolic insn@0x080480f4[2]: writeRegister(cf, {defs={0x080480f4}, expr=(invert[u1] (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))})
Symbolic insn@0x080480f4[2]: xor_({defs={0x080480f4}, expr=(extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}, {defs={0x080480f4}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32]))))}) = {defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
Symbolic insn@0x080480f4[2]: writeRegister(of, {defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))})
Symbolic insn@0x080480f4[2]: writeRegister(ecx, {defs={0x080480f4}, expr=(add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])})
Symbolic insn@0x080480f4[2]: finishInstruction(neg ecx)
registers:
 eax [writer=0x080480f2] write-only = {defs={0x080480f2}, expr=0x00000000[u32]}
 ecx [writer=0x080480f4] read-before-write = {defs={0x080480f4}, expr=(add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480f4] write-only = {defs={0x080480f4}, expr=0x080480f6<134512886>[u32]}
 cf [writer=0x080480f4] write-only = {defs={0x080480f4}, expr=(invert[u1] (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
 pf [writer=0x080480f4] write-only = {defs={0x080480f4}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))))}
 af [writer=0x080480f4] write-only = {defs={0x080480f4}, expr=(invert[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
 zf [writer=0x080480f4] write-only = {defs={0x080480f4}, expr=(zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
 sf [writer=0x080480f4] write-only = {defs={0x080480f4}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
 of [writer=0x080480f4] write-only = {defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
 fpstatus_top = 0x0[u3]
memory:

0x080480f6: je 0x080480a2<end>
Symbolic: startInstruction(0x080480f6: je 0x080480a2<end>)
Symbolic insn@0x080480f6[3]: number_(32, 134512886) = {defs={0x080480f6}, expr=0x080480f6<134512886>[u32]}
Symbolic insn@0x080480f6[3]: number_(32, 2) = {defs={0x080480f6}, expr=0x00000002[u32]}
Symbolic insn@0x080480f6[3]: add({defs={0x080480f6}, expr=0x080480f6<134512886>[u32]}, {defs={0x080480f6}, expr=0x00000002[u32]}) = {defs={0x080480f6}, expr=0x080480f8<134512888>[u32]}
Symbolic insn@0x080480f6[3]: writeRegister(eip, {defs={0x080480f6}, expr=0x080480f8<134512888>[u32]})
Symbolic insn@0x080480f6[3]: undefined_(1) = V3[u1]
Symbolic insn@0x080480f6[3]: readRegister(zf, V3[u1]) = {defs={0x080480f4}, expr=(zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
Symbolic insn@0x080480f6[3]: undefined_(32) = V4[u32]
Symbolic insn@0x080480f6[3]: readRegister(eip, V4[u32]) = {defs={0x080480f6}, expr=0x080480f8<134512888>[u32]}
Symbolic insn@0x080480f6[3]: number_(32, 134512802) = {defs={0x080480f6}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480f6[3]: unsignedExtend({defs={0x080480f6}, expr=0x080480a2<134512802>[u32]}, 32) = {defs={0x080480f6}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x080480f6[3]: ite({defs={0x080480f4}, expr=(zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}, {defs={0x080480f6}, expr=0x080480a2<134512802>[u32]}, {defs={0x080480f6}, expr=0x080480f8<134512888>[u32]}) = {defs={0x080480f4,0x080480f6}, expr=(ite[u32] (zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) 0x080480a2<134512802>[u32] 0x080480f8<134512888>[u32])}
Symbolic insn@0x080480f6[3]: writeRegister(eip, {defs={0x080480f4,0x080480f6}, expr=(ite[u32] (zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) 0x080480a2<134512802>[u32] 0x080480f8<134512888>[u32])})
Symbolic insn@0x080480f6[3]: finishInstruction(je 0x080480a2<end>)
registers:
 eax [writer=0x080480f2] write-only = {defs={0x080480f2}, expr=0x00000000[u32]}
 ecx [writer=0x080480f4] read-before-write = {defs={0x080480f4}, expr=(add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480f6] = {defs={0x080480f4,0x080480f6}, expr=(ite[u32] (zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) 0x080480a2<134512802>[u32] 0x080480f8<134512888>[u32])}
 cf [writer=0x080480f4] write-only = {defs={0x080480f4}, expr=(invert[u1] (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
 pf [writer=0x080480f4] write-only = {defs={0x080480f4}, expr=(invert[u1] (xor[u1] (extract[u1] 0x00000000[u32] 0x00000001[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000001[u32] 0x00000002[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000002[u32] 0x00000003[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000003[u32] 0x00000004[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000004[u32] 0x00000005[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000005[u32] 0x00000006[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000006[u32] 0x00000007[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32])) (extract[u1] 0x00000007[u32] 0x00000008[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))))}
 af [writer=0x080480f4] write-only = {defs={0x080480f4}, expr=(invert[u1] (extract[u1] 0x00000004[u32] 0x00000005[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
 zf [writer=0x080480f4] = {defs={0x080480f4}, expr=(zerop[u1] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
 sf [writer=0x080480f4] write-only = {defs={0x080480f4}, expr=(extract[u1] 0x0000001f[u32] 0x00000020[u32] (add[u32] (invert[u32] ecx_0[u32]) 0x00000001[u32]))}
 of [writer=0x080480f4] write-only = {defs={0x080480f4}, expr=(xor[u1] (extract[u1] 0x0000001f[u32] 0x00000020[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))) (extract[u1] 0x00000020[u32] 0x00000021[u32] (xor[u33] (add[u33] (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])) 0x000000001[u33]) (uextend[u33] 0x00000021[u32] (invert[u32] ecx_0[u32])))))}
 fpstatus_top = 0x0[u3]
memory:
Symbolic: operators destroyed
=====================================================================================
=== Starting a new basic block ===
=====================================================================================
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]

0x080480f8: push 0x00000003
Symbolic: startInstruction(0x080480f8: push 0x00000003)
Symbolic insn@0x080480f8[0]: number_(32, 134512888) = {defs={0x080480f8}, expr=0x080480f8<134512888>[u32]}
Symbolic insn@0x080480f8[0]: number_(32, 5) = {defs={0x080480f8}, expr=0x00000005[u32]}
Symbolic insn@0x080480f8[0]: add({defs={0x080480f8}, expr=0x080480f8<134512888>[u32]}, {defs={0x080480f8}, expr=0x00000005[u32]}) = {defs={0x080480f8}, expr=0x080480fd<134512893>[u32]}
Symbolic insn@0x080480f8[0]: writeRegister(eip, {defs={0x080480f8}, expr=0x080480fd<134512893>[u32]})
Symbolic insn@0x080480f8[0]: number_(32, 3) = {defs={0x080480f8}, expr=0x00000003[u32]}
Symbolic insn@0x080480f8[0]: undefined_(32) = V1[u32]
Symbolic insn@0x080480f8[0]: readRegister(esp, V1[u32]) = esp_0[u32]
Symbolic insn@0x080480f8[0]: number_(32, 18446744073709551612) = {defs={0x080480f8}, expr=0xfffffffc<4294967292,-4>[u32]}
Symbolic insn@0x080480f8[0]: add(esp_0[u32], {defs={0x080480f8}, expr=0xfffffffc<4294967292,-4>[u32]}) = {defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffc<4294967292,-4>[u32])}
Symbolic insn@0x080480f8[0]: writeRegister(esp, {defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffc<4294967292,-4>[u32])})
Symbolic insn@0x080480f8[0]: boolean_(1) = {defs={0x080480f8}, expr=true[u1]}
Symbolic insn@0x080480f8[0]: writeMemory(ss, {defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffc<4294967292,-4>[u32])}, {defs={0x080480f8}, expr=0x00000003[u32]}, {defs={0x080480f8}, expr=true[u1]})
Symbolic insn@0x080480f8[0]: finishInstruction(push 0x00000003)
registers:
 esp [writer=0x080480f8] read-before-write = {defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffc<4294967292,-4>[u32])}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss read-before-write = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480f8] write-only = {defs={0x080480f8}, expr=0x080480fd<134512893>[u32]}
 fpstatus_top = 0x0[u3]
memory:
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xffffffff<4294967295,-1>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x00[u8]}
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffe<4294967294,-2>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x00[u8]}
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffd<4294967293,-3>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x00[u8]}
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffc<4294967292,-4>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x03[u8]}

0x080480fd: mov eax, 0x00000007
Symbolic: startInstruction(0x080480fd: mov eax, 0x00000007)
Symbolic insn@0x080480fd[1]: number_(32, 134512893) = {defs={0x080480fd}, expr=0x080480fd<134512893>[u32]}
Symbolic insn@0x080480fd[1]: number_(32, 5) = {defs={0x080480fd}, expr=0x00000005[u32]}
Symbolic insn@0x080480fd[1]: add({defs={0x080480fd}, expr=0x080480fd<134512893>[u32]}, {defs={0x080480fd}, expr=0x00000005[u32]}) = {defs={0x080480fd}, expr=0x08048102<134512898>[u32]}
Symbolic insn@0x080480fd[1]: writeRegister(eip, {defs={0x080480fd}, expr=0x08048102<134512898>[u32]})
Symbolic insn@0x080480fd[1]: number_(32, 7) = {defs={0x080480fd}, expr=0x00000007[u32]}
Symbolic insn@0x080480fd[1]: writeRegister(eax, {defs={0x080480fd}, expr=0x00000007[u32]})
Symbolic insn@0x080480fd[1]: finishInstruction(mov eax, 0x00000007)
registers:
 eax [writer=0x080480fd] write-only = {defs={0x080480fd}, expr=0x00000007[u32]}
 esp [writer=0x080480f8] read-before-write = {defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffc<4294967292,-4>[u32])}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss read-before-write = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x080480fd] write-only = {defs={0x080480fd}, expr=0x08048102<134512898>[u32]}
 fpstatus_top = 0x0[u3]
memory:
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xffffffff<4294967295,-1>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x00[u8]}
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffe<4294967294,-2>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x00[u8]}
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffd<4294967293,-3>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x00[u8]}
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffc<4294967292,-4>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x03[u8]}

0x08048102: push eax
Symbolic: startInstruction(0x08048102: push eax)
Symbolic insn@0x08048102[2]: number_(32, 134512898) = {defs={0x08048102}, expr=0x08048102<134512898>[u32]}
Symbolic insn@0x08048102[2]: number_(32, 1) = {defs={0x08048102}, expr=0x00000001[u32]}
Symbolic insn@0x08048102[2]: add({defs={0x08048102}, expr=0x08048102<134512898>[u32]}, {defs={0x08048102}, expr=0x00000001[u32]}) = {defs={0x08048102}, expr=0x08048103<134512899>[u32]}
Symbolic insn@0x08048102[2]: writeRegister(eip, {defs={0x08048102}, expr=0x08048103<134512899>[u32]})
Symbolic insn@0x08048102[2]: undefined_(32) = V2[u32]
Symbolic insn@0x08048102[2]: readRegister(eax, V2[u32]) = {defs={0x080480fd}, expr=0x00000007[u32]}
Symbolic insn@0x08048102[2]: undefined_(32) = V3[u32]
Symbolic insn@0x08048102[2]: readRegister(esp, V3[u32]) = {defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffc<4294967292,-4>[u32])}
Symbolic insn@0x08048102[2]: number_(32, 18446744073709551612) = {defs={0x08048102}, expr=0xfffffffc<4294967292,-4>[u32]}
Symbolic insn@0x08048102[2]: add({defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffc<4294967292,-4>[u32])}, {defs={0x08048102}, expr=0xfffffffc<4294967292,-4>[u32]}) = {defs={0x080480f8,0x08048102}, expr=(add[u32] esp_0[u32] 0xfffffff8<4294967288,-8>[u32])}
Symbolic insn@0x08048102[2]: writeRegister(esp, {defs={0x080480f8,0x08048102}, expr=(add[u32] esp_0[u32] 0xfffffff8<4294967288,-8>[u32])})
Symbolic insn@0x08048102[2]: boolean_(1) = {defs={0x08048102}, expr=true[u1]}
Symbolic insn@0x08048102[2]: writeMemory(ss, {defs={0x080480f8,0x08048102}, expr=(add[u32] esp_0[u32] 0xfffffff8<4294967288,-8>[u32])}, {defs={0x080480fd}, expr=0x00000007[u32]}, {defs={0x08048102}, expr=true[u1]})
Symbolic insn@0x08048102[2]: finishInstruction(push eax)
registers:
 eax [writer=0x080480fd] = {defs={0x080480fd}, expr=0x00000007[u32]}
 esp [writer=0x08048102] read-before-write = {defs={0x080480f8,0x08048102}, expr=(add[u32] esp_0[u32] 0xfffffff8<4294967288,-8>[u32])}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss read-before-write = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x08048102] write-only = {defs={0x08048102}, expr=0x08048103<134512899>[u32]}
 fpstatus_top = 0x0[u3]
memory:
 addr={defs={0x080480f8,0x08048102}, expr=(add[u32] esp_0[u32] 0xfffffffb<4294967291,-5>[u32])} writer=0x08048102 write-only value={defs={0x080480fd}, expr=0x00[u8]}
 addr={defs={0x080480f8,0x08048102}, expr=(add[u32] esp_0[u32] 0xfffffffa<4294967290,-6>[u32])} writer=0x08048102 write-only value={defs={0x080480fd}, expr=0x00[u8]}
 addr={defs={0x080480f8,0x08048102}, expr=(add[u32] esp_0[u32] 0xfffffff9<4294967289,-7>[u32])} writer=0x08048102 write-only value={defs={0x080480fd}, expr=0x00[u8]}
 addr={defs={0x080480f8,0x08048102}, expr=(add[u32] esp_0[u32] 0xfffffff8<4294967288,-8>[u32])} writer=0x08048102 write-only value={defs={0x080480fd}, expr=0x07[u8]}
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xffffffff<4294967295,-1>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x00[u8]}
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffe<4294967294,-2>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x00[u8]}
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffd<4294967293,-3>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x00[u8]}
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffc<4294967292,-4>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x03[u8]}

0x08048103: je 0x080480a2<end>
Symbolic: startInstruction(0x08048103: je 0x080480a2<end>)
Symbolic insn@0x08048103[3]: number_(32, 134512899) = {defs={0x08048103}, expr=0x08048103<134512899>[u32]}
Symbolic insn@0x08048103[3]: number_(32, 2) = {defs={0x08048103}, expr=0x00000002[u32]}
Symbolic insn@0x08048103[3]: add({defs={0x08048103}, expr=0x08048103<134512899>[u32]}, {defs={0x08048103}, expr=0x00000002[u32]}) = {defs={0x08048103}, expr=0x08048105<134512901>[u32]}
Symbolic insn@0x08048103[3]: writeRegister(eip, {defs={0x08048103}, expr=0x08048105<134512901>[u32]})
Symbolic insn@0x08048103[3]: undefined_(1) = V4[u1]
Symbolic insn@0x08048103[3]: readRegister(zf, V4[u1]) = zf_0[u1]
Symbolic insn@0x08048103[3]: undefined_(32) = V5[u32]
Symbolic insn@0x08048103[3]: readRegister(eip, V5[u32]) = {defs={0x08048103}, expr=0x08048105<134512901>[u32]}
Symbolic insn@0x08048103[3]: number_(32, 134512802) = {defs={0x08048103}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x08048103[3]: unsignedExtend({defs={0x08048103}, expr=0x080480a2<134512802>[u32]}, 32) = {defs={0x08048103}, expr=0x080480a2<134512802>[u32]}
Symbolic insn@0x08048103[3]: ite(zf_0[u1], {defs={0x08048103}, expr=0x080480a2<134512802>[u32]}, {defs={0x08048103}, expr=0x08048105<134512901>[u32]}) = {defs={0x08048103}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x08048105<134512901>[u32])}
Symbolic insn@0x08048103[3]: writeRegister(eip, {defs={0x08048103}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x08048105<134512901>[u32])})
Symbolic insn@0x08048103[3]: finishInstruction(je 0x080480a2<end>)
registers:
 eax [writer=0x080480fd] = {defs={0x080480fd}, expr=0x00000007[u32]}
 esp [writer=0x08048102] read-before-write = {defs={0x080480f8,0x08048102}, expr=(add[u32] esp_0[u32] 0xfffffff8<4294967288,-8>[u32])}
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss read-before-write = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x08048103] = {defs={0x08048103}, expr=(ite[u32] zf_0[u1] 0x080480a2<134512802>[u32] 0x08048105<134512901>[u32])}
 fpstatus_top = 0x0[u3]
memory:
 addr={defs={0x080480f8,0x08048102}, expr=(add[u32] esp_0[u32] 0xfffffffb<4294967291,-5>[u32])} writer=0x08048102 write-only value={defs={0x080480fd}, expr=0x00[u8]}
 addr={defs={0x080480f8,0x08048102}, expr=(add[u32] esp_0[u32] 0xfffffffa<4294967290,-6>[u32])} writer=0x08048102 write-only value={defs={0x080480fd}, expr=0x00[u8]}
 addr={defs={0x080480f8,0x08048102}, expr=(add[u32] esp_0[u32] 0xfffffff9<4294967289,-7>[u32])} writer=0x08048102 write-only value={defs={0x080480fd}, expr=0x00[u8]}
 addr={defs={0x080480f8,0x08048102}, expr=(add[u32] esp_0[u32] 0xfffffff8<4294967288,-8>[u32])} writer=0x08048102 write-only value={defs={0x080480fd}, expr=0x07[u8]}
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xffffffff<4294967295,-1>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x00[u8]}
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffe<4294967294,-2>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x00[u8]}
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffd<4294967293,-3>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x00[u8]}
 addr={defs={0x080480f8}, expr=(add[u32] esp_0[u32] 0xfffffffc<4294967292,-4>[u32])} writer=0x080480f8 write-only value={defs={0x080480f8}, expr=0x03[u8]}
Symbolic: operators destroyed
=====================================================================================
=== Starting a new basic block ===
=====================================================================================
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]
Symbolic: number_(16, 0) = 0x0000[u16]

0x08048105: hlt 
Symbolic: startInstruction(0x08048105: hlt)
Symbolic insn@0x08048105[0]: number_(32, 134512901) = {defs={0x08048105}, expr=0x08048105<134512901>[u32]}
Symbolic insn@0x08048105[0]: number_(32, 1) = {defs={0x08048105}, expr=0x00000001[u32]}
Symbolic insn@0x08048105[0]: add({defs={0x08048105}, expr=0x08048105<134512901>[u32]}, {defs={0x08048105}, expr=0x00000001[u32]}) = {defs={0x08048105}, expr=0x08048106<134512902>[u32]}
Symbolic insn@0x08048105[0]: writeRegister(eip, {defs={0x08048105}, expr=0x08048106<134512902>[u32]})
Symbolic insn@0x08048105[0]: hlt()
Symbolic insn@0x08048105[0]: number_(32, 134512901) = {defs={0x08048105}, expr=0x08048105<134512901>[u32]}
Symbolic insn@0x08048105[0]: writeRegister(eip, {defs={0x08048105}, expr=0x08048105<134512901>[u32]})
Symbolic insn@0x08048105[0]: finishInstruction(hlt)
registers:
 es = 0x0000[u16]
 cs = 0x0000[u16]
 ss = 0x0000[u16]
 ds = 0x0000[u16]
 eip [writer=0x08048105] write-only = {defs={0x08048105}, expr=0x08048105<134512901>[u32]}
 fpstatus_top = 0x0[u3]
memory:
Symbolic: operators destroyed
analyzed headers: 1
