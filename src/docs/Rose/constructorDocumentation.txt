SgStatement::SgStatement (  )
SgExprStatement::SgExprStatement ( SgExpression* expression )
SgLabelStatement::SgLabelStatement ( SgName label )
SgCaseOptionStmt::SgCaseOptionStmt ( SgExpression* key, SgBasicBlock* body )
SgTryStmt::SgTryStmt ( SgBasicBlock* body )
SgDefaultOptionStmt::SgDefaultOptionStmt ( SgBasicBlock* body )
SgBreakStmt::SgBreakStmt (  )
SgContinueStmt::SgContinueStmt (  )
SgReturnStmt::SgReturnStmt ( SgExpression* expression )
SgGotoStatement::SgGotoStatement ( SgLabelStatement* label )
SgSpawnStmt::SgSpawnStmt ( SgFunctionCallExp* the_func )
SgNullStatement::SgNullStatement (  )
SgVariantStatement::SgVariantStatement (  )
SgForInitStatement::SgForInitStatement (  )
SgCatchStatementSeq::SgCatchStatementSeq (  )
SgProgramHeaderStatement::SgProgramHeaderStatement (  )
SgProcedureHeaderStatement::SgProcedureHeaderStatement (  )
SgInterfaceStatement::SgInterfaceStatement (  )
SgModuleStatement::SgModuleStatement (  )
SgUseStatement::SgUseStatement (  )
SgStopOrPauseStatement::SgStopOrPauseStatement (  )
SgIOStatement::SgIOStatement (  )
SgFortranDo::SgFortranDo (  )
SgClinkageStartStatement::SgClinkageStartStatement (  )
SgIOControlStatement::SgIOControlStatement (  )
SgInputOutputStatement::SgInputOutputStatement (  )
SgOpenStatement::SgOpenStatement (  )
SgCloseStatement::SgCloseStatement (  )
SgInquireStatement::SgInquireStatement (  )
SgIOFileControlStmt::SgIOFileControlStmt (  )
SgDeclarationStatement::SgDeclarationStatement (  )
SgVariableDeclaration::SgVariableDeclaration (  )
SgVariableDefinition::SgVariableDefinition ( SgInitializedName* vardefn, SgUnsignedLongVal* bitfield )
SgEnumDeclaration::SgEnumDeclaration ( SgName name, SgEnumType* type )
SgAsmStmt::SgAsmStmt (  )
SgTypedefDeclaration::SgTypedefDeclaration ( SgName name, SgType* base_type, SgTypedefType* type, SgDeclarationStatement* declaration, SgSymbol* parent_scope )
SgTemplateDeclaration::SgTemplateDeclaration ( SgName name, SgName string, SgTemplateDeclaration::template_type_enum template_kind, SgTemplateParameterPtrListPtr templateParameters )
SgTemplateInstantiationDirectiveStatement::SgTemplateInstantiationDirectiveStatement ( SgDeclarationStatement* declaration )
SgNamespaceDeclarationStatement::SgNamespaceDeclarationStatement ( SgName name, SgNamespaceDefinitionStatement* definition, bool isUnnamedNamespace )
SgNamespaceAliasDeclarationStatement::SgNamespaceAliasDeclarationStatement ( SgName name, SgNamespaceDeclarationStatement* namespaceDeclaration )
SgUsingDirectiveStatement::SgUsingDirectiveStatement ( SgNamespaceDeclarationStatement* namespaceDeclaration )
SgUsingDeclarationStatement::SgUsingDeclarationStatement ( SgDeclarationStatement* declaration, SgInitializedName* initializedName )
SgFunctionParameterList::SgFunctionParameterList (  )
SgCtorInitializerList::SgCtorInitializerList (  )
SgPragmaDeclaration::SgPragmaDeclaration ( SgPragma* pragma )
SgParameterStatement::SgParameterStatement (  )
SgCommonBlock::SgCommonBlock (  )
SgClassDeclaration::SgClassDeclaration ( SgName name, SgClassDeclaration::class_types class_type, SgClassType* type, SgClassDefinition* definition )
SgTemplateInstantiationDecl::SgTemplateInstantiationDecl ( SgName name, SgClassDeclaration::class_types class_type, SgClassType* type, SgClassDefinition* definition, SgTemplateDeclaration* templateDeclaration, SgTemplateArgumentPtrListPtr templateArguments )
SgFunctionDeclaration::SgFunctionDeclaration ( SgName name, SgFunctionType* type, SgFunctionDefinition* definition )
SgTemplateInstantiationFunctionDecl::SgTemplateInstantiationFunctionDecl ( SgName name, SgFunctionType* type, SgFunctionDefinition* definition, SgTemplateDeclaration* templateDeclaration, SgTemplateArgumentPtrListPtr templateArguments )
SgMemberFunctionDeclaration::SgMemberFunctionDeclaration ( SgName name, SgFunctionType* type, SgFunctionDefinition* definition )
SgTemplateInstantiationMemberFunctionDecl::SgTemplateInstantiationMemberFunctionDecl ( SgName name, SgFunctionType* type, SgFunctionDefinition* definition, SgTemplateDeclaration* templateDeclaration, SgTemplateArgumentPtrListPtr templateArguments )
SgGlobal::SgGlobal (  )
SgIfStmt::SgIfStmt ( SgStatement* conditional, SgBasicBlock* true_body, SgBasicBlock* false_body )
SgForStatement::SgForStatement ( SgStatement* test, SgExpression* increment, SgBasicBlock* loop_body )
SgFunctionDefinition::SgFunctionDefinition ( SgBasicBlock* body )
SgWhileStmt::SgWhileStmt ( SgStatement* condition, SgBasicBlock* body )
SgDoWhileStmt::SgDoWhileStmt ( SgBasicBlock* body, SgStatement* condition )
SgSwitchStatement::SgSwitchStatement ( SgStatement* item_selector, SgBasicBlock* body )
SgCatchOptionStmt::SgCatchOptionStmt ( SgVariableDeclaration* condition, SgBasicBlock* body, SgTryStmt* trystmt )
SgNamespaceDefinitionStatement::SgNamespaceDefinitionStatement ( SgNamespaceDeclarationStatement* namespaceDeclaration )
SgClassDefinition::SgClassDefinition (  )
SgTemplateInstantiationDefn::SgTemplateInstantiationDefn (  )
SgExpression::SgExpression (  )
SgExprListExp::SgExprListExp (  )
SgVarRefExp::SgVarRefExp ( SgVariableSymbol* symbol )
SgClassNameRefExp::SgClassNameRefExp ( SgClassSymbol* symbol )
SgFunctionRefExp::SgFunctionRefExp ( SgFunctionSymbol* symbol_i, SgFunctionType* function_type )
SgMemberFunctionRefExp::SgMemberFunctionRefExp ( SgMemberFunctionSymbol* symbol_i, int virtual_call, SgFunctionType* function_type, int need_qualifier )
SgFunctionCallExp::SgFunctionCallExp ( SgExpression* function, SgExprListExp* args, SgType* expression_type )
SgSizeOfOp::SgSizeOfOp ( SgExpression* operand_expr, SgType* operand_type, SgType* expression_type )
SgTypeIdOp::SgTypeIdOp ( SgExpression* operand_expr, SgType* operand_type, SgType* expression_type )
SgConditionalExp::SgConditionalExp ( SgExpression* conditional_exp, SgExpression* true_exp, SgExpression* false_exp, SgType* expression_type )
SgNewExp::SgNewExp ( SgType* specified_type, SgExprListExp* placement_args, SgConstructorInitializer* constructor_args, SgExpression* builtin_args, short need_global_specifier, SgFunctionDeclaration* newOperatorDeclaration )
SgDeleteExp::SgDeleteExp ( SgExpression* variable, short is_array, short need_global_specifier, SgFunctionDeclaration* deleteOperatorDeclaration )
SgThisExp::SgThisExp ( SgClassSymbol* class_symbol, int pobj_this )
SgRefExp::SgRefExp ( SgType* type_name )
SgVarArgStartOp::SgVarArgStartOp ( SgExpression* lhs_operand, SgExpression* rhs_operand, SgType* expression_type )
SgVarArgOp::SgVarArgOp ( SgExpression* operand_expr, SgType* expression_type )
SgVarArgEndOp::SgVarArgEndOp ( SgExpression* operand_expr, SgType* expression_type )
SgVarArgCopyOp::SgVarArgCopyOp ( SgExpression* lhs_operand, SgExpression* rhs_operand, SgType* expression_type )
SgVarArgStartOneOperandOp::SgVarArgStartOneOperandOp ( SgExpression* operand_expr, SgType* expression_type )
SgNullExpression::SgNullExpression (  )
SgVariantExpression::SgVariantExpression (  )
SgIntrinsicFn::SgIntrinsicFn (  )
SgSubscriptExpression::SgSubscriptExpression (  )
SgSubscriptColon::SgSubscriptColon (  )
SgSubscriptAsterisk::SgSubscriptAsterisk (  )
SgColon::SgColon (  )
SgUseOnlyExpression::SgUseOnlyExpression (  )
SgIOImpliedDo::SgIOImpliedDo (  )
SgIOItemExpression::SgIOItemExpression (  )
SgUseRenameExpression::SgUseRenameExpression (  )
SgStatementExpression::SgStatementExpression ( SgStatement* statement )
SgAsmOp::SgAsmOp ( SgAsmOp::asm_operand_constraint_enum constraint, SgAsmOp::asm_operand_modifier_enum modifiers, SgExpression* expression )
SgInitializer::SgInitializer (  )
SgAggregateInitializer::SgAggregateInitializer ( SgExprListExp* initializers )
SgConstructorInitializer::SgConstructorInitializer ( SgMemberFunctionDeclaration* declaration, SgExprListExp* args, SgType* expression_type, bool need_name, bool need_qualifier, bool need_parenthesis_after_name, bool associated_class_unknown )
SgAssignInitializer::SgAssignInitializer ( SgExpression* operand_i, SgType* expression_type )
SgValueExp::SgValueExp (  )
SgBoolValExp::SgBoolValExp ( int value )
SgStringVal::SgStringVal ( std::string value )
SgShortVal::SgShortVal ( short value, std::string valueString )
SgCharVal::SgCharVal ( char value, std::string valueString )
SgUnsignedCharVal::SgUnsignedCharVal ( unsigned char value, std::string valueString )
SgWcharVal::SgWcharVal ( unsigned long valueUL, std::string valueString )
SgUnsignedShortVal::SgUnsignedShortVal ( unsigned short value, std::string valueString )
SgIntVal::SgIntVal ( int value, std::string valueString )
SgEnumVal::SgEnumVal ( int value, SgEnumDeclaration* declaration, SgName name )
SgUnsignedIntVal::SgUnsignedIntVal ( unsigned int value, std::string valueString )
SgLongIntVal::SgLongIntVal ( long int value, std::string valueString )
SgLongLongIntVal::SgLongLongIntVal ( long long int value, std::string valueString )
SgUnsignedLongLongIntVal::SgUnsignedLongLongIntVal ( unsigned long long int value, std::string valueString )
SgUnsignedLongVal::SgUnsignedLongVal ( unsigned long value, std::string valueString )
SgFloatVal::SgFloatVal ( float value, std::string valueString )
SgDoubleVal::SgDoubleVal ( double value, std::string valueString )
SgLongDoubleVal::SgLongDoubleVal ( long double value, std::string valueString )
SgComplexVal::SgComplexVal ( long double real_value, long double imaginary_value, SgType* precisionType, std::string valueString )
SgBinaryOp::SgBinaryOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgArrowExp::SgArrowExp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgDotExp::SgDotExp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgDotStarOp::SgDotStarOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgArrowStarOp::SgArrowStarOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgEqualityOp::SgEqualityOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgLessThanOp::SgLessThanOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgGreaterThanOp::SgGreaterThanOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgNotEqualOp::SgNotEqualOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgLessOrEqualOp::SgLessOrEqualOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgGreaterOrEqualOp::SgGreaterOrEqualOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgAddOp::SgAddOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgSubtractOp::SgSubtractOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgMultiplyOp::SgMultiplyOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgDivideOp::SgDivideOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgIntegerDivideOp::SgIntegerDivideOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgModOp::SgModOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgAndOp::SgAndOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgOrOp::SgOrOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgBitXorOp::SgBitXorOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgBitAndOp::SgBitAndOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgBitOrOp::SgBitOrOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgCommaOpExp::SgCommaOpExp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgLshiftOp::SgLshiftOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgRshiftOp::SgRshiftOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgPntrArrRefExp::SgPntrArrRefExp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgScopeOp::SgScopeOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgAssignOp::SgAssignOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgPlusAssignOp::SgPlusAssignOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgMinusAssignOp::SgMinusAssignOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgAndAssignOp::SgAndAssignOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgIorAssignOp::SgIorAssignOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgMultAssignOp::SgMultAssignOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgDivAssignOp::SgDivAssignOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgModAssignOp::SgModAssignOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgXorAssignOp::SgXorAssignOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgLshiftAssignOp::SgLshiftAssignOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgRshiftAssignOp::SgRshiftAssignOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgExponentiationOp::SgExponentiationOp ( SgExpression* lhs_operand_i, SgExpression* rhs_operand_i, SgType* expression_type )
SgUnaryOp::SgUnaryOp ( SgExpression* operand_i, SgType* expression_type )
SgExpressionRoot::SgExpressionRoot ( SgExpression* operand_i, SgType* expression_type )
SgMinusOp::SgMinusOp ( SgExpression* operand_i, SgType* expression_type )
SgUnaryAddOp::SgUnaryAddOp ( SgExpression* operand_i, SgType* expression_type )
SgNotOp::SgNotOp ( SgExpression* operand_i, SgType* expression_type )
SgPointerDerefExp::SgPointerDerefExp ( SgExpression* operand_i, SgType* expression_type )
SgAddressOfOp::SgAddressOfOp ( SgExpression* operand_i, SgType* expression_type )
SgMinusMinusOp::SgMinusMinusOp ( SgExpression* operand_i, SgType* expression_type )
SgPlusPlusOp::SgPlusPlusOp ( SgExpression* operand_i, SgType* expression_type )
SgBitComplementOp::SgBitComplementOp ( SgExpression* operand_i, SgType* expression_type )
SgCastExp::SgCastExp ( SgExpression* operand_i, SgType* expression_type, SgCastExp::cast_type_enum cast_type )
SgThrowOp::SgThrowOp ( SgExpression* operand_i, SgType* expression_type, SgTypePtrListPtr typeList, SgThrowOp::e_throw_kind throwKind )
