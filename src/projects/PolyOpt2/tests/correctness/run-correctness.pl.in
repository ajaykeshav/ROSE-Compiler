#! /usr/bin/perl

use warnings;
use strict;

my @benchmarks        = ("datamining/correlation",
                         "datamining/covariance",
                         "image-processing/gauss-filter",
                         "image-processing/reg_detect",
                         "linear-algebra/kernels/atax",
                         "linear-algebra/kernels/bicg",
                         "linear-algebra/kernels/cholesky",
                         "linear-algebra/kernels/dgemm",
                         "linear-algebra/kernels/doitgen",
                         "linear-algebra/kernels/gemm",
                         "linear-algebra/kernels/gemver",
                         "linear-algebra/kernels/gesummv",  
                         "linear-algebra/kernels/mvt",
                         "linear-algebra/kernels/symm",
                         "linear-algebra/kernels/syr2k",
                         "linear-algebra/kernels/syrk",
                         "linear-algebra/kernels/trisolv",
                         "linear-algebra/kernels/trmm",
                         "linear-algebra/solvers/durbin",
                         "linear-algebra/solvers/dynprog",
                         "linear-algebra/solvers/gramschmidt",
                         "linear-algebra/solvers/lu",
                         "linear-algebra/solvers/ludcmp",
                         "stencils/adi",
                         "stencils/fdtd-2d",
                         "stencils/fdtd-apml",
                         "stencils/jacobi-1d-imper",
                         "stencils/jacobi-2d-imper",
                         "stencils/seidel");

my %result;
my $diff              = "diff";
my $tileSizesFile     = "tile.sizes";
my $infoLogFile       = "polybench-correctness-info.log";
my $errorLogFile      = "polybench-correctness-errors.log";

my @compilers         = ("gcc", "icc"); 
my @tileSizesLevel    = (1, 32, 1024);
# The first 3 elements would be filled by permutations of the tilesizes
# in @tileSizesLevel
my @tileSizes         = (1, 1, 1, 32, 32, 32, 32, 32, 32, 32);

my $polyroseRoot      = "@BINARY_DIR@";
my $polyrose          = $polyroseRoot . "/src/PolyRose";
my $benchmarkDir      = $polyroseRoot . "/tests/regression/polybenchs";
my @passthroughFlags  = ("-rose:skipfinalCompileStep",
                         "-I$benchmarkDir/utilities");
my @optPlutoFlags     = ("--polyopt-pluto",
                         @passthroughFlags);
my @optPrevectorFlags = ("--polyopt-pluto-tile",
                         "--polyopt-pluto-prevector",
                         @passthroughFlags);
my @optParallelFlags  = ("--polyopt-pluto-tile",
                         "--polyopt-pluto-parallel",
                         "--polyopt-pluto-prevector",
                         @passthroughFlags);
my @tileFlags         = ("--polyopt-pluto-tile",
                         @passthroughFlags);
my @outputFlags       = ("-DPOLYBENCH_DUMP_ARRAYS");
my @buildFlags        = ("-O0",
                         "-I$benchmarkDir/utilities",
                         "$benchmarkDir/utilities/instrument.c",
                         "-lm",
                         @outputFlags);

sub ZeroPrefixFill
{
  my $number = shift(@_);
  if ($number < 10) {
    return sprintf("0%d", $number);
  }
  else {
    return $number;
  }
}

sub RenameExistingFile
{
  my $file = shift(@_);
  if (-e $file) {
    my $modTime = (stat($file))[9];
    my ($year, $mon, $mday, $hour, $min, $sec) =
      (localtime($modTime))[5, 4, 3, 2, 1, 0];
    $year += 1900;
    $mon += 1;
    $mon = ZeroPrefixFill($mon);
    $mday = ZeroPrefixFill($mday);
    $hour = ZeroPrefixFill($hour);
    $min = ZeroPrefixFill($min);
    $sec = ZeroPrefixFill($sec);

    my $oldFile =  $file . "_" . "$year-$mon-$mday" .
                   "_" . "$hour-$min-$sec";
    
    print "### Moving existing $file to $oldFile\n";
    rename($file, $oldFile);
  }
}

sub WriteInfoLog
{
  my $log = shift(@_);
  print INFO_LOG $log;
  print $log;
}

sub WriteErrorLog
{
  my $log = shift(@_);
  print ERROR_LOG $log;
}

sub TransformSource
{
  my ($benchmarkName, $tileSetting, $source, @polyroseFlags) = @_;
  WriteInfoLog("\n>> $polyrose @polyroseFlags $source\n");
  my $command = `$polyrose @polyroseFlags $source 2>&1`;
  my $returnCode = $?;

  if (0 != $returnCode) {
    my $log = "### $benchmarkName $tileSetting\n" .
              "### Failed Command: $polyrose @polyroseFlags $source 2>&1\n" .
              "### Details:\n$command\n";
    WriteErrorLog($log);
  }

  return $returnCode;
}

sub BuildCode
{
  my ($benchmarkName, $tileSetting, $cc, $source, $binary, @buildFlags) = @_;
  WriteInfoLog("\n>> $cc $source @buildFlags -o $binary\n");
  my $command = `$cc $source @buildFlags -o $binary 2>&1`;
  my $returnCode = $?;

  if (0 != $returnCode) {
    my $log = "### $benchmarkName $tileSetting\n" .
              "### Failed Command: $cc $source @buildFlags -o $binary 2>&1\n" .
              "### Details:\n$command\n";
    WriteErrorLog($log);
  }

  return $returnCode;
}

sub CompareOutput
{
  my $benchmarkName = shift(@_);
  my $tileSetting = shift(@_);
  my $originalBinary = shift(@_);
  my $transformedBinary = shift(@_);
  my $originalResult = "result.orig";
  my $transformedResult = "result.trans";
  WriteInfoLog("\n>> ./$originalBinary 2> $originalResult\n");
  my $command = `./$originalBinary 2> $originalResult`;
  my $returnCode = $?;

  if (0 != $returnCode) {
    my $log = "### $benchmarkName $tileSetting\n" .
              "### Failed Command: ./$originalBinary 2> $originalResult\n" .
              "### Details:\n$command\n";
    WriteErrorLog($log);

    unlink($originalResult);
    return $returnCode;
  }

  if (-z $originalResult) {
    WriteInfoLog("WARNING: The program produced no output\n");
  }

  WriteInfoLog(">> ./$transformedBinary 2> $transformedResult\n");
  $command = `./$transformedBinary 2> $transformedResult`;
  $returnCode = $?;

  if (0 != $returnCode) {
    my $log = "### $benchmarkName $tileSetting\n" .
              "### Failed Command: ./$transformedBinary 2> $transformedResult\n" .
              "### Details:\n$command\n";
    WriteErrorLog($log);

    unlink($originalResult);
    unlink($transformedResult);
    return $returnCode;
  }

  WriteInfoLog("\n>> $diff $originalResult $transformedResult\n");
  $command = `$diff $originalResult $transformedResult 2>&1`;
  $returnCode = $?;

  if (0 != $returnCode) {
    my $log = "### $benchmarkName $tileSetting\n" .
              "### Failed Command: $diff $originalResult $transformedResult 2>&1\n" .
              "### Details:\n$command\n";
    WriteErrorLog($log);
  }

  unlink($originalResult);
  unlink($transformedResult);
  return $returnCode;
}

sub RunBenchmark
{
  my ($benchmarkName, $cc, $source, $transformedSource, $binary,
      $transformedBinary, $tileSetting, @transformFlags) = @_;
  WriteInfoLog("\n@@@ Tile Setting: $tileSetting Compiler: $cc @@@\n");

  if (0 != TransformSource($benchmarkName, $tileSetting, $source,
                           @transformFlags, @outputFlags)) {
    WriteInfoLog("[ERROR] Transforming the source failed\n");
    $result{$benchmarkName}{$cc}{$tileSetting} =
      {"Result" => "FAILURE",
       "Reason" => "Transformation Failed"};
    return;
  }

  if (0 != BuildCode($benchmarkName, $tileSetting, $cc, $transformedSource,
                     $transformedBinary, @buildFlags)) {
    unlink($transformedSource);
    WriteInfoLog("[ERROR] Building the transformed benchmark code failed\n");
    $result{$benchmarkName}{$cc}{$tileSetting} =
      {"Result" => "FAILURE",
       "Reason" => "Building Transformed Code failed"};
    return;
  }

  if (0 != CompareOutput($benchmarkName, $tileSetting, $binary,
                         $transformedBinary)) {
    unlink($transformedSource);
    unlink($transformedBinary);
    WriteInfoLog("[ERROR] Comparing the outputs failed\n");
    $result{$benchmarkName}{$cc}{$tileSetting} =
      {"Result" => "FAILURE",
       "Reason" => "Difference between original and transformed binaries"};
    return;
  }

  $result{$benchmarkName}{$cc}{$tileSetting} = {"Result" => "SUCCESS",
                                                "Reason" => ""};
  unlink($transformedSource);
  unlink($transformedBinary);
  return 0;
}

RenameExistingFile($infoLogFile);
RenameExistingFile($errorLogFile);

open INFO_LOG, ">$infoLogFile"
  or die("FATAL:  Could not open the $infoLogFile file for writing!\n");

open ERROR_LOG, ">$errorLogFile"
  or die("FATAL:  Could not open the $errorLogFile file for writing!\n");

foreach my $benchmark (@benchmarks) {
  my $sourceDir = $benchmarkDir . "/$benchmark";
  my @splitDir = split(/\//, $sourceDir);
  my $benchmarkName = $splitDir[-1];
  my $source = "$sourceDir/$benchmarkName.c";
  my $transformedSource = "rose_$benchmarkName.c";
  my $binary = "program.orig";
  my $transformedBinary = "program.trans";
  my $tileSetting = "NONE";

  foreach my $cc (@compilers) {
    # Build the original source
    WriteInfoLog("\n\n#### $benchmarkName ####\n");
    WriteInfoLog("\nBuilding original code\n");
    if (0 != BuildCode($benchmarkName, $tileSetting, $cc,
                       $source, $binary, @buildFlags)) {
      WriteInfoLog("[ERROR] Building the original benchmark code failed\n");
      $result{$benchmarkName}{$cc}{$tileSetting} =
        {"Result" => "FAILURE",
         "Reason" => "Building original code Failed"};
      next;
    }

    if (-e $tileSizesFile) {
      unlink($tileSizesFile);
    }

    # For each of the 3 different optimization settings
    # "--polyopt-pluto", "--polyopt-pluto-tile --polyopt-pluto-prevector" and
    # "--polyopt-pluto-tile --polyopt-pluto-parallel --polyopt-pluto-prevector"
    # transform the code, and compare the output with the original code
    $tileSetting = "OPT PLUTO";
    RunBenchmark($benchmarkName, $cc, $source, $transformedSource,
                 $binary, $transformedBinary, $tileSetting, @optPlutoFlags);

    $tileSetting = "OPT PREVECTOR";
    RunBenchmark($benchmarkName, $cc, $source, $transformedSource,
                 $binary, $transformedBinary, $tileSetting,
                 @optPrevectorFlags);

    $tileSetting = "OPT PARALLEL";
    RunBenchmark($benchmarkName, $cc, $source, $transformedSource,
                 $binary, $transformedBinary, $tileSetting,
                 @optParallelFlags);

    # For each tile setting, transform the code and comapre the output with
    # the original one
    foreach my $tileSize1 (@tileSizesLevel) {
      foreach my $tileSize2 (@tileSizesLevel) {
        foreach my $tileSize3 (@tileSizesLevel) {

          $tileSizes[0] = $tileSize1;
          $tileSizes[1] = $tileSize2;
          $tileSizes[2] = $tileSize3;

          if (-e $tileSizesFile) {
            unlink($tileSizesFile);
          }

          open TILESIZESFILE, ">", $tileSizesFile or die $!;
          print TILESIZESFILE "@tileSizes";
          close TILESIZESFILE;

          $tileSetting = "$tileSize1 $tileSize2 $tileSize3";
          RunBenchmark($benchmarkName, $cc, $source, $transformedSource,
                       $binary, $transformedBinary, $tileSetting, @tileFlags);
        }
      }
    }

    if (-e $binary) {
      unlink($binary);
    }
  }
}

if (-e $tileSizesFile) {
  unlink($tileSizesFile);
}

WriteInfoLog("\n\nCorrectness Check Results:\n");

foreach my $benchmark (sort keys %result) {
  my $benchmarkResult = $result{$benchmark};
  foreach my $compiler (sort keys %$benchmarkResult) {
    my $tileResult = $result{$benchmark}{$compiler};
    foreach my $tileSetting (sort keys %$tileResult) {
      my $resultLine =
        sprintf("  %-18s  %-5s  %-10s  %-10s  %-30s",
                $benchmark,
                $compiler,
                $tileSetting,
                $result{$benchmark}{$compiler}{$tileSetting}{"Result"},
                $result{$benchmark}{$compiler}{$tileSetting}{"Reason"});
      WriteInfoLog("\n $resultLine");

      if ($result{$benchmark}{$compiler}{$tileSetting}{"Result"}
          ne "SUCCESS") {
        WriteErrorLog("\n $resultLine");
      }
    }
  }
}

WriteInfoLog("\n");
WriteErrorLog("\n");
close INFO_LOG;
close ERROR_LOG;
