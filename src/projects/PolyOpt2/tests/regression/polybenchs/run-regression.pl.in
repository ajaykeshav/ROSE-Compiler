#
# Regression Test Script for PolyRose
#
# This script performs regression testing on PolyRose by transforming the
# Polybench benchmark suite with PolyRose and verifying the output code against
# reference C files and comparing the output of the transformed programs against
# the output of the original benchmark source.
#


use strict;

####################
# Configuration
####################

# Variables enclosed in @..@ will be replaced at configure-time by autoconf.

# Location of PolyRose binary.
my $polyrose              = "@BINARY_DIR@/src/PolyRose";

# Flags for pass-through compilation with PolyRose.
my @pass_flags            = ("-rose:skipfinalCompileStep", "-I@BINARY_DIR@/tests/regression/polybenchs/utilities");
my @opt_flags             = ("--polyopt-pluto", @pass_flags);
my @tile_flags            = ("--polyopt-pluto-tile", @pass_flags);
my @time_flags            = ("-DPOLYBENCH_TIME");
my @output_flags          = ("-DPOLYBENCH_DUMP_ARRAYS");

# C compiler
#my $cc                    = "@CC@";
my $cc                    = "icc";

# Diff utility
my $diff                  = "diff";

# Native compiler flags
my @verify_output_flags   = ("-O0", "-I@BINARY_DIR@/tests/regression/polybenchs/utilities", "@BINARY_DIR@/tests/regression/polybenchs/utilities/instrument.c", "-lm", "-DPOLYBENCH_DUMP_ARRAYS");
my @check_time_flags      = ("-fast", "-I@BINARY_DIR@/tests/regression/polybenchs/utilities", "@BINARY_DIR@/tests/regression/polybenchs/utilities/instrument.c", "-lm", "-DPOLYBENCH_TIME");

# Absolute path to benchmark directory.
my $benchmark_path        = "@BINARY_DIR@/tests/regression/polybenchs";

my $num_timed_runs        = 3;


# List of benchmarks to run.
my @benchmarks =
(

  # relative path to benchmark
  "datamining/correlation",
  "datamining/covariance",
  "image-processing/gauss-filter",
  "image-processing/reg_detect",
  "linear-algebra/kernels/atax",
  "linear-algebra/kernels/bicg",
  "linear-algebra/kernels/cholesky",
  "linear-algebra/kernels/dgemm",
  "linear-algebra/kernels/doitgen",
  "linear-algebra/kernels/gemm",
  "linear-algebra/kernels/gemver",
  "linear-algebra/kernels/gesummv",  
  "linear-algebra/kernels/mvt",
  "linear-algebra/kernels/symm",
  "linear-algebra/kernels/syr2k",
  "linear-algebra/kernels/syrk",
  "linear-algebra/kernels/trisolv",
  "linear-algebra/kernels/trmm",
  "linear-algebra/solvers/durbin",
  "linear-algebra/solvers/dynprog",
  "linear-algebra/solvers/gramschmidt",
  "linear-algebra/solvers/lu",
  "linear-algebra/solvers/ludcmp",
  "stencils/adi",
  "stencils/fdtd-2d",
  "stencils/fdtd-apml",
  "stencils/jacobi-1d-imper",
  "stencils/jacobi-2d-imper",
  "stencils/seidel",
);

# Global counters for successes/failures.
my $successes             = 0;
my $failures              = 0;

# Hash to store benchmark results.
my %status;

# Open the log file.
open(logfile, ">polybench-regression.log") or die("FATAL:  Could not open the polybench-regression.log file for writing!\n");


##############################
# Subroutines
##############################

#
# transform_source($source, @polyrose_flags)
#
# Invokes PolyRose on the given source file using the provided transformation
# flags.  The PolyRose result code is returned.
#
# $source           - The source file to transform.
# @polyrose_flags   - The flags to pass to PolyRose.
#
sub transform_source
{
  my ($source, @polyrose_flags)   = @_;
  my $result;
  my $out;
  
  # Invoke PolyRose
  print_log(">> PolyRose:  @polyrose_flags $source\n", 1);
  $out      = `$polyrose @polyrose_flags $source 2>&1`;
  $result   = $?;
  print_log($out . "\n", 0);
  print_log(">>>> Result Code:  $result\n", 1);
  
  return $result;
}

#
# verify_source($original_source, $transformed_source)
#
# Performs a diff between two files and returns the result code.
#
# $original_source      - The first file.
# $transformed_source   - The second file.
#
sub verify_source
{
  my ($original_source, $transformed_source)   = @_;
  my $result;
  my $out;
  
  # Perform a diff.
  print_log(">> Diff:  $original_source $transformed_source\n", 1);
  $out      = `$diff $original_source $transformed_source 2>&1`;
  $result   = $?;
  print_log(">>>> Result Code:  $result\n", 1);
  
  return $result;
}

#
# verify_output($original_source, $transformed_source, @cc_flags)
#
# Compiles the provided source files, executes the resulting programs, and
# compares the output.  If any command fails, the result code of that command
# is returned.
#
# $original_source      - The first source file to compile.
# $transformed_source   - The second source file to compile.
# @cc_flags             - The flags to pass to the native compiler.
#
sub verify_output
{
  my ($original_source, $transformed_source, @cc_flags)   = @_;
  my $result;
  my $out;
  
  # Compile the original source.
  print_log(">> $cc @cc_flags $original_source -o program.orig\n", 1);
  $out      = `$cc @cc_flags $original_source -o program.orig 2>&1`;
  $result   = $?;
  print_log($out . "\n", 0);
  print_log(">>>> Result Code:  $result\n", 1);
  
  if($result != 0)
  {
    return $result;
  }
  
  # Compile the transformed source.
  print_log(">> $cc @cc_flags $transformed_source -o program.trans\n", 1);
  $out      = `$cc @cc_flags $transformed_source -o program.trans 2>&1`;
  $result   = $?;
  print_log($out . "\n", 0);
  print_log(">>>> Result Code:  $result\n", 1);
  
  if($result != 0)
  {
    unlink("program.original");
    return $result;
  }
  
  # Run the original source.
  print_log(">> ./program.orig 2> results.orig\n", 1);
  $out      = `./program.orig 2> results.orig`;
  $result   = $?;
  print_log($out . "\n", 0);
  print ">>>> Result Code:  $result\n";
  
  if($result != 0)
  {
    unlink("program.orig");
    unlink("program.trans");
    unlink("results.orig");
    return $result;
  }
  
  # Check for non-empty output.
  if(-s "results.orig" == 0)
  {
    print_log("WARNING:  Program produced no output.\n", 1);
  }
  
  # Run the transformed source.
  print_log(">> ./program.trans 2> results.trans\n", 1);
  $out      = `./program.trans 2> results.trans`;
  $result   = $?;
  print_log($out . "\n", 0);
  print_log(">>>> Result Code:  $result\n", 1);
  
  if($result != 0)
  {
    unlink("program.orig");
    unlink("program.trans");
    unlink("results.orig");
    unlink("results.trans");
    return $result;
  }
  
  # Diff the outputs.
  $result   = verify_source("results.orig", "results.trans");

  # Delete the intermediate files.
  unlink("program.original");
  unlink("program.opt");
  unlink("results.original");
  unlink("results.opt");
  
  return $result;
}

#
# time_benchmark($source, @cc_flags)
#
# Compiles and executes the provided source file.  The return value is a tuple
# of the form ($result, $time), where $result is the result code of the last
# executed command and $time is the reported benchmark execution time if the
# benchmark successfully executed (i.e. $result == 0).
#
# $source     - The source file to compile.
# @cc_flags   - The flags to pass to the native compiler.
#
sub time_benchmark
{
  my ($source, @cc_flags)   = @_;
  my $result;
  my $out;
  
  # Compile the source.
  print_log(">> $cc @cc_flags $source -o program.timing\n", 1);
  $out      = `$cc @cc_flags $source -o program.timing 2>&1`;
  $result   = $?;
  print_log($out . "\n", 0);
  print_log(">>>> Result Code:  $result\n", 1);
  
  if($result != 0)
  {
    return ($result, "");
  }
  
  # Run the original source.
  $out = 0.0;
  
  for (my $i = 0;
       $i < $num_timed_runs;
       $i = $i + 1)
  {
    print_log(">> ./program.timing\n", 1);
    my $this_run_out = `./program.timing`;
    $result = $?;
    if($result != 0)
    {
      print_log("Run failed.");
      return ($result, "");
    }
    else
    {
      print_log(">> Run Time: $this_run_out\n", 1);
      $out = $out + $this_run_out;
    }
  }

  $out = $out / $num_timed_runs;
  

  print_log($out . "\n", 0);  
  print_log(">>>> Result Code:  $result\n", 1);
  unlink("program.timing");
  
  if($result == 0)
  {
    # Strip newline from time string.
    $out    =~ s/\n/ /g;
    print_log(">>>> Time:  $out\n", 1);
    return ($result, $out);
  }
  else
  {
    return ($result, "");
  }
}

#
# print_log($msg)
#
# Prints a log message, which will be written to the log file, and stdout if
# $console is non-zero.
#
# $msg        - The message to log.
# $console    - Non-zero if the message should also be written to stdout.
#
sub print_log
{
  my ($msg, $console)   = @_;
  
  print($msg) unless $console == 0;
  print logfile $msg;
}


#############################
# Main Script
#############################


if(@ARGV > 0)
{
  @benchmarks = @ARGV;
}

# Process each benchmark.
foreach my $reldir (@benchmarks)
{
  my $dir           = $benchmark_path . "/" . $reldir;
  my @splitDir      = split(/\//, $dir);
  my $name          = $splitDir[-1];
  my $source        = $dir . "/" . $name . ".c";
  my $source_out    = "rose_" . $name . ".c";
  my $source_ref    = $dir . "/" . $name . ".reference.c";
  my $scop_ref      = $dir . "/" . $name . ".reference.scop";
  my $result;
  my @orig_time;
  my @opt_time;
  my @tiled_time;

  
  print_log("\n", 1);
  print_log("==============================\n", 1);
  print_log("\U$name\n", 1);
  print_log("==============================\n\n", 1);
  
  # Time the original source.
  @orig_time    = time_benchmark($source, @check_time_flags);
  if($orig_time[0] != 0)
  {
    $failures   = $failures + 1;
    $status{$name}  = {"Result" => "FAILURE", "Reason" => "original exec", "OriginalTime" => "", "OptTime" => "", "TiledTime" => ""};
    next;
  }
  
  
  # Transform the benchmark source in pass-through mode.
  if(transform_source($source, @pass_flags) != 0)
  {
    $failures   = $failures + 1;
    unlink($source_out);
    $status{$name}  = {"Result" => "FAILURE", "Reason" => "pass-through transform", "OriginalTime" => "", "OptTime" => "", "TiledTime" => ""};
    next;
  }
  
  # Compare the transformed source with the reference source.
  if(verify_source($source_out, $source_ref) != 0)
  {
    $failures   = $failures + 1;
    unlink($source_out);
    $status{$name}  = {"Result" => "FAILURE", "Reason" => "pass-through source verify", "OriginalTime" => "", "OptTime" => "", "TiledTime" => ""};
    next;
  }
  
  # Transform the benchmark source in pass-through mode with array dumping enabled.
  if(transform_source($source, @pass_flags, @output_flags) != 0)
  {
    $failures   = $failures + 1;
    unlink($source_out);
    $status{$name}  = {"Result" => "FAILURE", "Reason" => "pass-through transform (2)", "OriginalTime" => "", "OptTime" => "", "TiledTime" => ""};
    next;
  }
  
  # Compare the output of the original and transformed source.
  if(verify_output($source, $source_out, @verify_output_flags) != 0)
  {
    $failures   = $failures + 1;
    unlink($source_out);
    $status{$name}  = {"Result" => "FAILURE", "Reason" => "pass-through output verify", "OriginalTime" => "", "OptTime" => "", "TiledTime" => ""};
    next;
  }
  
  
  # Transform the benchmark source in pluto-opt mode.
  if(transform_source($source, @opt_flags, @output_flags) != 0)
  {
    $failures   = $failures + 1;
    unlink($source_out);
    $status{$name}  = {"Result" => "FAILURE", "Reason" => "opt transform", "OriginalTime" => "", "OptTime" => "", "TiledTime" => ""};
    next;
  }
  
  # Compare the output of the original and transformed source.
  if(verify_output($source, $source_out, @verify_output_flags) != 0)
  {
    $failures   = $failures + 1;
    unlink($source_out);
    $status{$name}  = {"Result" => "FAILURE", "Reason" => "opt output verify", "OriginalTime" => "", "OptTime" => "", "TiledTime" => ""};
    next;
  }
  
  # Transform the benchmark source in pluto-opt mode with timing enabled.
  if(transform_source($source, @opt_flags, @time_flags) != 0)
  {
    $failures   = $failures + 1;
    unlink($source_out);
    $status{$name}  = {"Result" => "FAILURE", "Reason" => "opt transform (2)", "OriginalTime" => "", "OptTime" => "", "TiledTime" => ""};
    next;
  }
  
  # Time the transformed source.
  @opt_time     = time_benchmark($source_out, @check_time_flags);
  if($opt_time[0] != 0)
  {
    $failures   = $failures + 1;
    unlink($source_out);
    $status{$name}  = {"Result" => "FAILURE", "Reason" => "opt exec", "OriginalTime" => "", "OptTime" => "", "TiledTime" => ""};
    next;
  }
  
  
  
  # Transform the benchmark source in pluto-tile mode.
  if(transform_source($source, @tile_flags, @output_flags) != 0)
  {
    $failures   = $failures + 1;
    unlink($source_out);
    $status{$name}  = {"Result" => "FAILURE", "Reason" => "tiled transform", "OriginalTime" => "", "OptTime" => "", "TiledTime" => ""};
    next;
  }
  
  # Compare the output of the original and transformed source.
  if(verify_output($source, $source_out, @verify_output_flags) != 0)
  {
    $failures   = $failures + 1;
    unlink($source_out);
    $status{$name}  = {"Result" => "FAILURE", "Reason" => "tiled output verify", "OriginalTime" => "", "OptTime" => "", "TiledTime" => ""};
    next;
  }
  
  # Transform the benchmark source in pluto-tile mode with timing enabled.
  if(transform_source($source, @tile_flags, @time_flags) != 0)
  {
    $failures   = $failures + 1;
    unlink($source_out);
    $status{$name}  = {"Result" => "FAILURE", "Reason" => "tiled transform (2)", "OriginalTime" => "", "OptTime" => "", "TiledTime" => ""};
    next;
  }
  
  # Time the transformed source.
  @tiled_time   = time_benchmark($source_out, @check_time_flags);
  if($tiled_time[0] != 0)
  {
    $failures   = $failures + 1;
    unlink($source_out);
    $status{$name}  = {"Result" => "FAILURE", "Reason" => "tiled exec", "OriginalTime" => "", "OptTime" => "", "TiledTime" => ""};
    next;
  }
  
  unlink($source_out);
  
  $status{$name}  = {"Result" => "SUCCESS", "Reason" => "", "OriginalTime" => "$orig_time[1]", "OptTime" => "$opt_time[1]", "TiledTime" => "$tiled_time[1]"};
  $successes      = $successes + 1;
}

# Print a report of the benchmark status.
print_log("\n\n", 1);
print_log("*==============================\n", 1);
print_log("| REPORT                      |\n", 1);
print_log("*==============================\n\n", 1);
print_log("  Successes:  " . $successes . "\n", 1);
print_log("  Failures:   " . $failures . "\n", 1);
print_log("\n", 1);
print_log("  Benchmark           Result      Reason                       Original-Time        Opt-Time     Opt-Speedup      Tiled-Time   Tiled-Speedup\n", 1);
print_log("  ------------------  ----------  --------------------------  --------------  --------------  --------------  --------------  --------------\n", 1);
while(my ($key, $value) = each %status)
{
  my $opt_speedup;
  my $tiled_speedup;
  
  if($status{$key}{"Result"} == "SUCCESS")
  {
    # Calculate the speed-up factors.
    if($status{$key}{"OptTime"} != 0.0)
    {
      $opt_speedup      = sprintf("%.6f", $status{$key}{"OriginalTime"} / $status{$key}{"OptTime"});
    }
    else
    {
      $opt_speedup      = "";
    }
    
    if($status{$key}{"TiledTime"} != 0.0)
    {
      $tiled_speedup    = sprintf("%.6f", $status{$key}{"OriginalTime"} / $status{$key}{"TiledTime"});
    }
    else
    {
      $tiled_speedup    = "";
    }
  }
  else
  {
    $opt_speedup        = "";
    $tiled_speedup      = "";
  }
  
  my $line    = sprintf("  %-18s  %-10s  %-26s   %14f  %14f %14s   %14f %14s\n", $key, $status{$key}{"Result"}, $status{$key}{"Reason"}, $status{$key}{"OriginalTime"}, $status{$key}{"OptTime"}, $opt_speedup, $status{$key}{"TiledTime"}, $tiled_speedup);
  
  print_log($line, 1);
}

# Close the log file.
close(logfile);


