# Makefile.in generated by automake 1.16.2 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2020 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# These definitions are for the benefit of independent software contained			-*- makefile -*-
# in ROSE.  (Currently, this means SAGE and ROSETTA.)
# It defines ROSE_INCLUDES and ROSE_LIBS so they can use the ROSE codes.

# ROSE_INCLUDES contains the include flags for compiling with ROSE code.
# (ROSE software should set the include paths in their respective Makefile.am
# files, since they are expected to know the ROSE source tree structure.)
# To use ROSE_INCLUDES, the independent software packages contained in ROSE
# should define the variable ROSE_HOME to be the relative path to the root
# of the ROSE directory tree.

# This fixes some problem caused by automake or autoconf
# (detailed documentation is in the ChangeLog)
# MAKE=gmake

# DQ (8/10/2007): Valentin suggested this be commented out.
# DQ (4/23/2006): This is the default when build using automake version 1.6.3 but it
# causes errors so we would like to specify --run automake instead
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake-1.6
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake

# force ranlib to just call touch so that *.so (dynamic libraries) will not
# be run with ranlib (which is a error).  This allows us to use dynamic
# libraries as the default within ROSE.
# JJW 7/25/2008: Do we really need this?



VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
@ROSE_USE_CLANG_FRONTEND_TRUE@am__append_1 = $(CLANG_LDFLAGS) -ltinfo
bin_PROGRAMS = codethorn$(EXEEXT) equithorn$(EXEEXT) memthorn$(EXEEXT) \
	parprothorn$(EXEEXT) ltlthorn$(EXEEXT) woodpecker$(EXEEXT) \
	analyterix$(EXEEXT) addressTakenAnalysis$(EXEEXT) \
	cldemo$(EXEEXT)
noinst_PROGRAMS = addressTakenAnalysis$(EXEEXT) cldemo$(EXEEXT)
subdir = projects/CodeThorn/src
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acmacros/canonicalize-symlink.m4 \
	$(top_srcdir)/acmacros/compiler-ar.m4 \
	$(top_srcdir)/acmacros/compiler-id.m4 \
	$(top_srcdir)/acmacros/configure-log.m4 \
	$(top_srcdir)/acmacros/pkg.m4 $(top_srcdir)/acmacros/upc.m4 \
	$(top_srcdir)/config/EDG.m4 $(top_srcdir)/config/ROSE.m4 \
	$(top_srcdir)/config/ac_pkg_swig.m4 \
	$(top_srcdir)/config/acinclude.m4 \
	$(top_srcdir)/config/ax_boost_base.m4 \
	$(top_srcdir)/config/ax_boost_chrono.m4 \
	$(top_srcdir)/config/ax_boost_date_time.m4 \
	$(top_srcdir)/config/ax_boost_filesystem.m4 \
	$(top_srcdir)/config/ax_boost_iostreams.m4 \
	$(top_srcdir)/config/ax_boost_program_options.m4 \
	$(top_srcdir)/config/ax_boost_random.m4 \
	$(top_srcdir)/config/ax_boost_regex.m4 \
	$(top_srcdir)/config/ax_boost_serialization.m4 \
	$(top_srcdir)/config/ax_boost_system.m4 \
	$(top_srcdir)/config/ax_boost_thread.m4 \
	$(top_srcdir)/config/ax_boost_wave.m4 \
	$(top_srcdir)/config/ax_compare_version.m4 \
	$(top_srcdir)/config/ax_compiler_vendor.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_11.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_14.m4 \
	$(top_srcdir)/config/ax_lib_mysql.m4 \
	$(top_srcdir)/config/ax_lib_sqlite3.m4 \
	$(top_srcdir)/config/ax_lib_xerces.m4 \
	$(top_srcdir)/config/ax_prog_bison_version.m4 \
	$(top_srcdir)/config/ax_python_devel.m4 \
	$(top_srcdir)/config/ax_with_prog.m4 \
	$(top_srcdir)/config/choose-backend-compiler.m4 \
	$(top_srcdir)/config/compiler-defs.m4 \
	$(top_srcdir)/config/determine-os.m4 \
	$(top_srcdir)/config/enable-rosehpct.m4 \
	$(top_srcdir)/config/generate-backend-compiler-specific-headers.m4 \
	$(top_srcdir)/config/libtool.m4 $(top_srcdir)/config/libxml.m4 \
	$(top_srcdir)/config/ltargz.m4 $(top_srcdir)/config/ltdl.m4 \
	$(top_srcdir)/config/ltoptions.m4 \
	$(top_srcdir)/config/ltsugar.m4 \
	$(top_srcdir)/config/ltversion.m4 \
	$(top_srcdir)/config/lt~obsolete.m4 \
	$(top_srcdir)/config/mdl_have_opengl_2014.m4 \
	$(top_srcdir)/config/qrose_indigo_1.m4 \
	$(top_srcdir)/config/qrose_indigo_1_windows.m4 \
	$(top_srcdir)/config/support-GraphViz.m4 \
	$(top_srcdir)/config/support-IntelPin.m4 \
	$(top_srcdir)/config/support-accelerator.m4 \
	$(top_srcdir)/config/support-aterm.m4 \
	$(top_srcdir)/config/support-backend-x10.m4 \
	$(top_srcdir)/config/support-bddbddb.m4 \
	$(top_srcdir)/config/support-binary.m4 \
	$(top_srcdir)/config/support-bison.m4 \
	$(top_srcdir)/config/support-blacklist.m4 \
	$(top_srcdir)/config/support-boost.m4 \
	$(top_srcdir)/config/support-capstone.m4 \
	$(top_srcdir)/config/support-clang.m4 \
	$(top_srcdir)/config/support-cobol.m4 \
	$(top_srcdir)/config/support-compass2.m4 \
	$(top_srcdir)/config/support-compiler-features.m4 \
	$(top_srcdir)/config/support-cuda.m4 \
	$(top_srcdir)/config/support-doxygen.m4 \
	$(top_srcdir)/config/support-dwarf.m4 \
	$(top_srcdir)/config/support-edg-debugging.m4 \
	$(top_srcdir)/config/support-edg.m4 \
	$(top_srcdir)/config/support-elf.m4 \
	$(top_srcdir)/config/support-fatal-rose-warnings.m4 \
	$(top_srcdir)/config/support-flang.m4 \
	$(top_srcdir)/config/support-gcc-omp.m4 \
	$(top_srcdir)/config/support-gcrypt.m4 \
	$(top_srcdir)/config/support-gmp.m4 \
	$(top_srcdir)/config/support-gnat.m4 \
	$(top_srcdir)/config/support-gomp-omp.m4 \
	$(top_srcdir)/config/support-haskell.m4 \
	$(top_srcdir)/config/support-i386.m4 \
	$(top_srcdir)/config/support-ida.m4 \
	$(top_srcdir)/config/support-insure.m4 \
	$(top_srcdir)/config/support-isl.m4 \
	$(top_srcdir)/config/support-java.m4 \
	$(top_srcdir)/config/support-languages.m4 \
	$(top_srcdir)/config/support-lcov.m4 \
	$(top_srcdir)/config/support-libffi.m4 \
	$(top_srcdir)/config/support-libharu.m4 \
	$(top_srcdir)/config/support-libpqxx.m4 \
	$(top_srcdir)/config/support-llvm.m4 \
	$(top_srcdir)/config/support-magic.m4 \
	$(top_srcdir)/config/support-maple.m4 \
	$(top_srcdir)/config/support-mint.m4 \
	$(top_srcdir)/config/support-mpi.m4 \
	$(top_srcdir)/config/support-octave.m4 \
	$(top_srcdir)/config/support-ofp.m4 \
	$(top_srcdir)/config/support-omp.m4 \
	$(top_srcdir)/config/support-php.m4 \
	$(top_srcdir)/config/support-pocc.m4 \
	$(top_srcdir)/config/support-projects.m4 \
	$(top_srcdir)/config/support-purify.m4 \
	$(top_srcdir)/config/support-python-api.m4 \
	$(top_srcdir)/config/support-python.m4 \
	$(top_srcdir)/config/support-readline.m4 \
	$(top_srcdir)/config/support-rose.m4 \
	$(top_srcdir)/config/support-rted.m4 \
	$(top_srcdir)/config/support-rtedupc.m4 \
	$(top_srcdir)/config/support-sanitizer.m4 \
	$(top_srcdir)/config/support-sat.m4 \
	$(top_srcdir)/config/support-spot.m4 \
	$(top_srcdir)/config/support-ssl.m4 \
	$(top_srcdir)/config/support-stratego.m4 \
	$(top_srcdir)/config/support-summary.m4 \
	$(top_srcdir)/config/support-swipl.m4 \
	$(top_srcdir)/config/support-valgrind.m4 \
	$(top_srcdir)/config/support-vectorization.m4 \
	$(top_srcdir)/config/support-visualization.m4 \
	$(top_srcdir)/config/support-windows.m4 \
	$(top_srcdir)/config/support-x10.m4 \
	$(top_srcdir)/config/support-yaml.m4 \
	$(top_srcdir)/config/support-yices.m4 \
	$(top_srcdir)/config/support-z3.m4 \
	$(top_srcdir)/config/support_POET.m4 \
	$(top_srcdir)/config/swig_enable_cxx.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(codethorninclude_HEADERS) \
	$(am__DIST_COMMON)
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/rose_config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(libdir)" \
	"$(DESTDIR)$(codethornincludedir)"
PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
LTLIBRARIES = $(lib_LTLIBRARIES)
libcodethorn_la_LIBADD =
am__dirstamp = $(am__leading_dot)dirstamp
am__objects_1 = libcodethorn_la-AbstractValue.lo \
	libcodethorn_la-addressTakenAnalysis.lo \
	libcodethorn_la-AliasAnalysis.lo libcodethorn_la-AstUtility.lo \
	libcodethorn_la-AnalysisAstAnnotator.lo \
	libcodethorn_la-AnalysisReporting.lo \
	libcodethorn_la-Analyzer.lo \
	libcodethorn_la-ArrayElementAccessData.lo \
	libcodethorn_la-AstNodeInfo.lo \
	libcodethorn_la-AstTermRepresentation.lo \
	libcodethorn_la-BoolLattice.lo libcodethorn_la-CallString.lo \
	libcodethorn_la-CFAnalysis.lo libcodethorn_la-CodeThornLib.lo \
	libcodethorn_la-CommandLineOptions.lo \
	libcodethorn_la-ConstraintRepresentation.lo \
	libcodethorn_la-ContNodeAttribute.lo \
	libcodethorn_la-CounterexampleGenerator.lo \
	libcodethorn_la-CPAstAttribute.lo \
	libcodethorn_la-CppExprEvaluator.lo \
	libcodethorn_la-CppStdUtilities.lo \
	libcodethorn_la-CTIOLabeler.lo \
	libcodethorn_la-CtxCallStrings.lo \
	libcodethorn_la-CtxPrioritySolver.lo \
	libcodethorn_la-CtxReachabilityAnalysis.lo \
	libcodethorn_la-CtxReachabilityLattice.lo \
	libcodethorn_la-CtxSolver0.lo \
	libcodethorn_la-DataDependenceVisualizer.lo \
	libcodethorn_la-defUseQuery.lo \
	libcodethorn_la-DataRaceDetection.lo \
	libcodethorn_la-DFAnalysisBase.lo \
	libcodethorn_la-DFTransferFunctions.lo \
	libcodethorn_la-DotGraphCfgFrontend.lo \
	libcodethorn_la-EquivalenceChecking.lo \
	libcodethorn_la-EState.lo libcodethorn_la-EStateAnalysis.lo \
	libcodethorn_la-EStateFactory.lo \
	libcodethorn_la-EStateTransferFunctions.lo \
	libcodethorn_la-EStateWorkList.lo \
	libcodethorn_la-EStatePriorityWorkList.lo \
	libcodethorn_la-ExprAnalyzer.lo \
	libcodethorn_la-FIConstAnalysis.lo libcodethorn_la-Flow.lo \
	libcodethorn_la-FunctionCallMapping.lo \
	libcodethorn_la-FunctionCallMapping2.lo \
	libcodethorn_la-FunctionCallTarget.lo \
	libcodethorn_la-FunctionId.lo \
	libcodethorn_la-FunctionIdMapping.lo \
	libcodethorn_la-InputOutput.lo \
	libcodethorn_la-InternalChecks.lo \
	libcodethorn_la-IntervalAnalysis.lo \
	libcodethorn_la-IntervalAstAttribute.lo \
	libcodethorn_la-IntervalAstAttributeInterface.lo \
	libcodethorn_la-IntervalPropertyStateFactory.lo \
	libcodethorn_la-IntervalPropertyState.lo \
	libcodethorn_la-IntervalTransferFunctions.lo \
	libcodethorn_la-IOAnalyzer.lo \
	libcodethorn_la-IOSequenceGenerator.lo \
	libcodethorn_la-IOSolver.lo \
	libcodethorn_la-LanguageRestrictorCollection.lo \
	libcodethorn_la-LanguageRestrictor.lo \
	libcodethorn_la-Lattice.lo libcodethorn_la-LoopInfo.lo \
	libcodethorn_la-CodeThornOptions.lo \
	libcodethorn_la-LTLOptions.lo \
	ltlthorn-lib/libcodethorn_la-ParProOptions.lo \
	libcodethorn_la-LVAnalysis.lo \
	libcodethorn_la-LVAstAttribute.lo \
	libcodethorn_la-LVAstAttributeInterface.lo \
	libcodethorn_la-LVLattice.lo \
	libcodethorn_la-LVTransferFunctions.lo \
	libcodethorn_la-MemAnalysis.lo \
	libcodethorn_la-MemTransferFunctions.lo \
	libcodethorn_la-MemPropertyState.lo \
	libcodethorn_la-MemPropertyStateFactory.lo \
	libcodethorn_la-Miscellaneous2.lo \
	libcodethorn_la-Miscellaneous.lo \
	libcodethorn_la-Normalization.lo \
	libcodethorn_la-NormalizationCxx.lo \
	libcodethorn_la-NormalizationInliner.lo \
	libcodethorn_la-NormalizationOp.lo \
	libcodethorn_la-NumberIntervalLattice.lo \
	libcodethorn_la-PASolver1.lo \
	libcodethorn_la-PointerAnalysisInterface.lo \
	libcodethorn_la-PragmaHandler.lo \
	libcodethorn_la-PredefinedSemanticFunctions.lo \
	libcodethorn_la-ProgramAbstractionLayer.lo \
	libcodethorn_la-ProgramInfo.lo \
	libcodethorn_la-ProgramLocationsReport.lo \
	libcodethorn_la-ProgramLocationsAnalysis.lo \
	libcodethorn_la-PropertyState.lo \
	libcodethorn_la-PropertyStateFactory.lo \
	libcodethorn_la-PropertyValueTable.lo \
	libcodethorn_la-PState.lo libcodethorn_la-RDAnalysis.lo \
	libcodethorn_la-RDAstAttribute.lo libcodethorn_la-RDLattice.lo \
	libcodethorn_la-RDTransferFunctions.lo \
	libcodethorn_la-ReachabilityAnalysis.lo \
	libcodethorn_la-ReadWriteAnalyzer.lo \
	libcodethorn_la-ReadWriteHistory.lo \
	libcodethorn_la-RERS_empty_specialization.lo \
	libcodethorn_la-RersCounterexample.lo \
	libcodethorn_la-RewriteStatistics.lo \
	libcodethorn_la-RewriteSystem.lo libcodethorn_la-RWState.lo \
	libcodethorn_la-Solver5.lo libcodethorn_la-Solver8.lo \
	libcodethorn_la-Solver.lo libcodethorn_la-Specialization.lo \
	libcodethorn_la-SvcompWitness.lo \
	libcodethorn_la-TimeMeasurement.lo \
	libcodethorn_la-TopologicalSort.lo \
	libcodethorn_la-TransitionGraph.lo \
	libcodethorn_la-TransitionGraphReducer.lo \
	libcodethorn_la-TypeSizeMapping.lo \
	libcodethorn_la-UDAstAttribute.lo \
	libcodethorn_la-VariableIdUtils.lo \
	libcodethorn_la-VariableIdMappingExtended.lo \
	libcodethorn_la-VariableValueMonitor.lo \
	libcodethorn_la-Visualizer.lo
am_libcodethorn_la_OBJECTS = $(am__objects_1)
libcodethorn_la_OBJECTS = $(am_libcodethorn_la_OBJECTS)
AM_V_lt = $(am__v_lt_@AM_V@)
am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
am__v_lt_0 = --silent
am__v_lt_1 = 
libcodethorn_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) \
	$(libcodethorn_la_LDFLAGS) $(LDFLAGS) -o $@
libltlthorn_la_LIBADD =
am__objects_2 =  \
	z3-prover-connection/libltlthorn_la-ReachabilityAnalyzerZ3.lo \
	z3-prover-connection/libltlthorn_la-SSAGenerator.lo \
	z3-prover-connection/libltlthorn_la-PhiAttribute.lo \
	z3-prover-connection/libltlthorn_la-PhiStatement.lo \
	ltlthorn-lib/libltlthorn_la-CounterexampleAnalyzer.lo \
	ltlthorn-lib/libltlthorn_la-LtsminConnection.lo \
	ltlthorn-lib/libltlthorn_la-ParProAutomataGenerator.lo \
	ltlthorn-lib/libltlthorn_la-ParProAutomata.lo \
	ltlthorn-lib/libltlthorn_la-ParProAnalyzer.lo \
	ltlthorn-lib/libltlthorn_la-ParProEState.lo \
	ltlthorn-lib/libltlthorn_la-ParProExplorer.lo \
	ltlthorn-lib/libltlthorn_la-ParProLtlMiner.lo \
	ltlthorn-lib/libltlthorn_la-ParProSpotState.lo \
	ltlthorn-lib/libltlthorn_la-ParProSpotSuccIter.lo \
	ltlthorn-lib/libltlthorn_la-ParProSpotTgba.lo \
	ltlthorn-lib/libltlthorn_la-ParProTransitionGraph.lo \
	ltlthorn-lib/libltlthorn_la-PromelaCodeGenerator.lo \
	ltlthorn-lib/libltlthorn_la-Solver10.lo \
	ltlthorn-lib/libltlthorn_la-Solver11.lo \
	ltlthorn-lib/libltlthorn_la-Solver12.lo \
	ltlthorn-lib/libltlthorn_la-SpotConnection.lo \
	ltlthorn-lib/libltlthorn_la-SpotMiscellaneous.lo \
	ltlthorn-lib/libltlthorn_la-SpotRenameVisitor.lo \
	ltlthorn-lib/libltlthorn_la-SpotState.lo \
	ltlthorn-lib/libltlthorn_la-SpotSuccIter.lo \
	ltlthorn-lib/libltlthorn_la-SpotTgba.lo
am_libltlthorn_la_OBJECTS = $(am__objects_2) \
	libltlthorn_la-LTLThornLib.lo
libltlthorn_la_OBJECTS = $(am_libltlthorn_la_OBJECTS)
libltlthorn_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) \
	$(libltlthorn_la_LDFLAGS) $(LDFLAGS) -o $@
am_addressTakenAnalysis_OBJECTS =  \
	addressTakenAnalysis-addressTakenAnalysisDriver.$(OBJEXT)
addressTakenAnalysis_OBJECTS = $(am_addressTakenAnalysis_OBJECTS)
am__DEPENDENCIES_1 =
@ROSE_USE_SQLITE_DATABASE_TRUE@am__DEPENDENCIES_2 =  \
@ROSE_USE_SQLITE_DATABASE_TRUE@	$(am__DEPENDENCIES_1)
am__DEPENDENCIES_3 = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
@ROSE_USE_PHP_TRUE@am__DEPENDENCIES_4 = $(php_path)/lib/libphc.so \
@ROSE_USE_PHP_TRUE@	$(php_path)/lib/libphp5.so \
@ROSE_USE_PHP_TRUE@	$(am__DEPENDENCIES_1)
@ROSE_USE_QT_TRUE@am__DEPENDENCIES_5 = $(am__DEPENDENCIES_1)
@ROSE_WITH_LIBREADLINE_TRUE@am__DEPENDENCIES_6 =  \
@ROSE_WITH_LIBREADLINE_TRUE@	$(am__DEPENDENCIES_1)
@ROSE_USE_CLANG_FRONTEND_TRUE@am__DEPENDENCIES_7 =  \
@ROSE_USE_CLANG_FRONTEND_TRUE@	$(am__DEPENDENCIES_1)
am__DEPENDENCIES_8 = $(abspath $(top_builddir)/src/librose.la) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_2) \
	$(am__DEPENDENCIES_3) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(ROSE_YICES_LIBS_WITH_PATH) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_4) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(ROSE_GUI_LIBS_WITH_PATH) $(am__DEPENDENCIES_5) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_6) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(ROSE_ADA_LIBS_WITH_PATH) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_7)
addressTakenAnalysis_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(addressTakenAnalysis_CXXFLAGS) $(CXXFLAGS) \
	$(addressTakenAnalysis_LDFLAGS) $(LDFLAGS) -o $@
am_analyterix_OBJECTS = shared-src/analyterix-ProgramStats.$(OBJEXT) \
	analyterix-src/analyterix-DFAstAttributeConversion.$(OBJEXT) \
	analyterix-src/analyterix-DeadCodeAnalysis.$(OBJEXT) \
	analyterix-src/analyterix-FIPointerAnalysis.$(OBJEXT) \
	analyterix-src/analyterix-RoseRDAnalysis.$(OBJEXT) \
	analyterix-src/analyterix-TransformationOperators.$(OBJEXT) \
	analyterix-src/analyterix-analyterix.$(OBJEXT)
analyterix_OBJECTS = $(am_analyterix_OBJECTS)
analyterix_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(analyterix_CXXFLAGS) \
	$(CXXFLAGS) $(analyterix_LDFLAGS) $(LDFLAGS) -o $@
am_cldemo_OBJECTS = cldemo.$(OBJEXT)
cldemo_OBJECTS = $(am_cldemo_OBJECTS)
cldemo_DEPENDENCIES = $(am__DEPENDENCIES_8)
am_codethorn_OBJECTS = codethorn-codethorn-LTLParser.$(OBJEXT) \
	codethorn-CodeThornCommandLineOptions.$(OBJEXT) \
	codethorn-codethorn.$(OBJEXT)
codethorn_OBJECTS = $(am_codethorn_OBJECTS)
codethorn_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(codethorn_CXXFLAGS) \
	$(CXXFLAGS) $(codethorn_LDFLAGS) $(LDFLAGS) -o $@
am_equithorn_OBJECTS = equithorn-equithorn-LTLParser.$(OBJEXT) \
	equithorn-EquiThornCommandLineOptions.$(OBJEXT) \
	equithorn-equithorn.$(OBJEXT)
equithorn_OBJECTS = $(am_equithorn_OBJECTS)
equithorn_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(equithorn_CXXFLAGS) \
	$(CXXFLAGS) $(equithorn_LDFLAGS) $(LDFLAGS) -o $@
am_ltlthorn_OBJECTS = ltlthorn-ltlthorn-LTLParser.$(OBJEXT) \
	ltlthorn-LTLThornCommandLineOptions.$(OBJEXT) \
	ltlthorn-ltlthorn.$(OBJEXT)
ltlthorn_OBJECTS = $(am_ltlthorn_OBJECTS)
ltlthorn_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(ltlthorn_CXXFLAGS) \
	$(CXXFLAGS) $(ltlthorn_LDFLAGS) $(LDFLAGS) -o $@
am_memthorn_OBJECTS = memthorn-memthorn-LTLParser.$(OBJEXT) \
	memthorn-MemThornCommandLineOptions.$(OBJEXT) \
	memthorn-memthorn.$(OBJEXT)
memthorn_OBJECTS = $(am_memthorn_OBJECTS)
memthorn_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(memthorn_CXXFLAGS) \
	$(CXXFLAGS) $(memthorn_LDFLAGS) $(LDFLAGS) -o $@
am_parprothorn_OBJECTS = parprothorn-parprothorn-LTLParser.$(OBJEXT) \
	parprothorn-ParProThornCommandLineOptions.$(OBJEXT) \
	parprothorn-parprothorn.$(OBJEXT)
parprothorn_OBJECTS = $(am_parprothorn_OBJECTS)
parprothorn_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(parprothorn_CXXFLAGS) \
	$(CXXFLAGS) $(parprothorn_LDFLAGS) $(LDFLAGS) -o $@
am_woodpecker_OBJECTS = shared-src/woodpecker-ProgramStats.$(OBJEXT) \
	woodpecker-src/woodpecker-Threadification.$(OBJEXT) \
	woodpecker-src/woodpecker-TrivialInlining.$(OBJEXT) \
	woodpecker-src/woodpecker-DeadCodeElimination.$(OBJEXT) \
	woodpecker-src/woodpecker-ConversionFunctionsGenerator.$(OBJEXT) \
	woodpecker-src/woodpecker-woodpecker.$(OBJEXT)
woodpecker_OBJECTS = $(am_woodpecker_OBJECTS)
woodpecker_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(woodpecker_CXXFLAGS) \
	$(CXXFLAGS) $(woodpecker_LDFLAGS) $(LDFLAGS) -o $@
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp =
am__maybe_remake_depfiles =
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_@AM_V@)
am__v_CXX_ = $(am__v_CXX_@AM_DEFAULT_V@)
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_@AM_V@)
am__v_CXXLD_ = $(am__v_CXXLD_@AM_DEFAULT_V@)
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
am__yacc_c2h = sed -e s/cc$$/hh/ -e s/cpp$$/hpp/ -e s/cxx$$/hxx/ \
		   -e s/c++$$/h++/ -e s/c$$/h/
YACCCOMPILE = $(YACC) $(AM_YFLAGS) $(YFLAGS)
LTYACCCOMPILE = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(YACC) $(AM_YFLAGS) $(YFLAGS)
AM_V_YACC = $(am__v_YACC_@AM_V@)
am__v_YACC_ = $(am__v_YACC_@AM_DEFAULT_V@)
am__v_YACC_0 = @echo "  YACC    " $@;
am__v_YACC_1 = 
YLWRAP = $(top_srcdir)/config/ylwrap
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_@AM_V@)
am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_@AM_V@)
am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(libcodethorn_la_SOURCES) $(libltlthorn_la_SOURCES) \
	$(addressTakenAnalysis_SOURCES) $(analyterix_SOURCES) \
	$(cldemo_SOURCES) $(codethorn_SOURCES) $(equithorn_SOURCES) \
	$(ltlthorn_SOURCES) $(memthorn_SOURCES) $(parprothorn_SOURCES) \
	$(woodpecker_SOURCES)
DIST_SOURCES = $(libcodethorn_la_SOURCES) $(libltlthorn_la_SOURCES) \
	$(addressTakenAnalysis_SOURCES) $(analyterix_SOURCES) \
	$(cldemo_SOURCES) $(codethorn_SOURCES) $(equithorn_SOURCES) \
	$(ltlthorn_SOURCES) $(memthorn_SOURCES) $(parprothorn_SOURCES) \
	$(woodpecker_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
HEADERS = $(codethorninclude_HEADERS)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__DIST_COMMON = $(srcdir)/Makefile.in \
	$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs \
	$(top_srcdir)/config/mkinstalldirs $(top_srcdir)/config/ylwrap \
	TODO codethorn-LTLParser.c++ equithorn-LTLParser.c++ \
	ltlthorn-LTLParser.c++ memthorn-LTLParser.c++ \
	parprothorn-LTLParser.c++
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ABS_COMPASS2_XML_SRCDIR = @ABS_COMPASS2_XML_SRCDIR@
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AR = @AR@
ARMA_PREFIX = @ARMA_PREFIX@
ATERM_BIN_PATH = @ATERM_BIN_PATH@
ATERM_INSTALL_PATH = @ATERM_INSTALL_PATH@
ATERM_LIBRARY_PATH = @ATERM_LIBRARY_PATH@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AUX_LINKER = @AUX_LINKER@
AWK = @AWK@
Axx_INCLUDES = @Axx_INCLUDES@
Axx_LIBS = @Axx_LIBS@
BACKEND_ADA_COMPILER = @BACKEND_ADA_COMPILER@
BACKEND_COBOL_COMPILER = @BACKEND_COBOL_COMPILER@
BACKEND_COMPILER_VERSION_MAJOR_NUMBER = @BACKEND_COMPILER_VERSION_MAJOR_NUMBER@
BACKEND_COMPILER_VERSION_MINOR_NUMBER = @BACKEND_COMPILER_VERSION_MINOR_NUMBER@
BACKEND_COMPILER_VERSION_NAME = @BACKEND_COMPILER_VERSION_NAME@
BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER = @BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER@
BACKEND_CSHARP_COMPILER = @BACKEND_CSHARP_COMPILER@
BACKEND_CXX_COMPILER = @BACKEND_CXX_COMPILER@
BACKEND_CXX_VENDOR_AND_VERSION2 = @BACKEND_CXX_VENDOR_AND_VERSION2@
BACKEND_CXX_VENDOR_AND_VERSION3 = @BACKEND_CXX_VENDOR_AND_VERSION3@
BACKEND_C_COMPILER = @BACKEND_C_COMPILER@
BACKEND_FORTRAN_COMPILER = @BACKEND_FORTRAN_COMPILER@
BACKEND_JAVA_COMPILER = @BACKEND_JAVA_COMPILER@
BACKEND_JOVIAL_COMPILER = @BACKEND_JOVIAL_COMPILER@
BACKEND_MATLAB_COMPILER = @BACKEND_MATLAB_COMPILER@
BACKEND_X10_COMPILER = @BACKEND_X10_COMPILER@
BISON = @BISON@
BISON_VERSION = @BISON_VERSION@
BOOST_CHRONO_LIB = @BOOST_CHRONO_LIB@
BOOST_CPPFLAGS = @BOOST_CPPFLAGS@
BOOST_DATE_TIME_LIB = @BOOST_DATE_TIME_LIB@
BOOST_FILESYSTEM_LIB = @BOOST_FILESYSTEM_LIB@
BOOST_IOSTREAMS_LIB = @BOOST_IOSTREAMS_LIB@
BOOST_LDFLAGS = @BOOST_LDFLAGS@
BOOST_PROGRAM_OPTIONS_LIB = @BOOST_PROGRAM_OPTIONS_LIB@
BOOST_RANDOM_LIB = @BOOST_RANDOM_LIB@
BOOST_REGEX_LIB = @BOOST_REGEX_LIB@
BOOST_SERIALIZATION_LIB = @BOOST_SERIALIZATION_LIB@
BOOST_SYSTEM_LIB = @BOOST_SYSTEM_LIB@
BOOST_THREAD_LIB = @BOOST_THREAD_LIB@
BOOST_WAVE_LIB = @BOOST_WAVE_LIB@
CANDL_PATH = @CANDL_PATH@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CCLD = @CCLD@
CFLAGS = @CFLAGS@
CFLAGS32 = @CFLAGS32@
CLANG_CXXFLAGS = @CLANG_CXXFLAGS@
CLANG_LDFLAGS = @CLANG_LDFLAGS@
CLANG_LIBDIR = @CLANG_LIBDIR@
CLASSPATH = @CLASSPATH@
CLOOG_PATH = @CLOOG_PATH@
COBPT_INSTALL_PATH = @COBPT_INSTALL_PATH@
COBPT_LIBRARY_PATH = @COBPT_LIBRARY_PATH@
CPP = @CPP@

# DQ (9/27/2015): Added to support new use of AM_CPPFLAGS instead of INCLUDES
# (depreicated in automake and for which many warnings are generated).
CPPFLAGS = $(AM_CPPFLAGS)
CUDA_BIN_DIR = @CUDA_BIN_DIR@
CUDA_INC_DIR = @CUDA_INC_DIR@
CUDA_LIB_DIR = @CUDA_LIB_DIR@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CXXLD = @CXXLD@
CXX_DEBUG = @CXX_DEBUG@
CXX_OPTIMIZE = @CXX_OPTIMIZE@
CXX_SHARED_LIB_UPDATE = @CXX_SHARED_LIB_UPDATE@
CXX_STATIC_LIB_UPDATE = @CXX_STATIC_LIB_UPDATE@
CXX_TEMPLATE_OBJECTS = @CXX_TEMPLATE_OBJECTS@
CXX_TEMPLATE_REPOSITORY_PATH = @CXX_TEMPLATE_REPOSITORY_PATH@
CXX_WARNINGS = @CXX_WARNINGS@
CYGPATH_W = @CYGPATH_W@
C_DEBUG = @C_DEBUG@
C_OPTIMIZE = @C_OPTIMIZE@
C_WARNINGS = @C_WARNINGS@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DLIB_PREFIX = @DLIB_PREFIX@
DLLTOOL = @DLLTOOL@
DOXYGEN = @DOXYGEN@
DOXYGEN_ADDED_DIRECTORY_1 = @DOXYGEN_ADDED_DIRECTORY_1@
DOXYGEN_ADDED_DIRECTORY_2 = @DOXYGEN_ADDED_DIRECTORY_2@
DOXYGEN_ENABLED_SECTIONS = @DOXYGEN_ENABLED_SECTIONS@
DOXYGEN_EXTRACT_ALL = @DOXYGEN_EXTRACT_ALL@
DOXYGEN_EXTRACT_PRIVATE = @DOXYGEN_EXTRACT_PRIVATE@
DOXYGEN_EXTRACT_STATIC = @DOXYGEN_EXTRACT_STATIC@
DOXYGEN_HIDE_FRIEND_COMPOUNDS = @DOXYGEN_HIDE_FRIEND_COMPOUNDS@
DOXYGEN_HIDE_UNDOC_CLASSES = @DOXYGEN_HIDE_UNDOC_CLASSES@
DOXYGEN_HIDE_UNDOC_MEMBERS = @DOXYGEN_HIDE_UNDOC_MEMBERS@
DOXYGEN_INTERNAL_DOCS = @DOXYGEN_INTERNAL_DOCS@
DOXYGEN_USE_TAG_FILE = @DOXYGEN_USE_TAG_FILE@
DOXYINDEXER = @DOXYINDEXER@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ETHER_PREFIX = @ETHER_PREFIX@
EXE = @EXE@
EXEEXT = @EXEEXT@
F77 = @F77@
FC = @FC@
FCFLAGS = @FCFLAGS@
FFLAGS = @FFLAGS@
FGREP = @FGREP@
FLANG_INSTALL_PATH = @FLANG_INSTALL_PATH@
FLANG_SOURCE_PATH = @FLANG_SOURCE_PATH@
FLTK_include_path = @FLTK_include_path@
FLTK_libs_path = @FLTK_libs_path@
FRONTEND_CXX_VENDOR_AND_VERSION2 = @FRONTEND_CXX_VENDOR_AND_VERSION2@
FRONTEND_CXX_VENDOR_AND_VERSION3 = @FRONTEND_CXX_VENDOR_AND_VERSION3@
GCC_MINOR_VERSION = @GCC_MINOR_VERSION@
GCC_VERSION = @GCC_VERSION@
GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX = @GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX@
GEN_BE = @GEN_BE@
GFORTRAN_PATH = @GFORTRAN_PATH@
GHCBIN = @GHCBIN@
GLUT_CFLAGS = @GLUT_CFLAGS@
GLUT_LIBS = ${glut_path}
GLUT_include_path = @GLUT_include_path@
GLUT_libs_path = @GLUT_libs_path@
GL_CFLAGS = @GL_CFLAGS@
GL_LIBS = @GL_LIBS@
GMP_INCLUDE_PATH = @GMP_INCLUDE_PATH@
GMP_INSTALL_PATH = @GMP_INSTALL_PATH@
GMP_LIBRARY_PATH = @GMP_LIBRARY_PATH@
GNAT_INCLUDES = @GNAT_INCLUDES@
GREP = @GREP@
GraphViz_include_path = @GraphViz_include_path@
GraphViz_libs_path = @GraphViz_libs_path@
HAVE_CXX11 = @HAVE_CXX11@
HAVE_CXX14 = @HAVE_CXX14@
HS_CONFIG_OPTS = @HS_CONFIG_OPTS@
INCLTDL = @INCLTDL@
INCLUDE_COMPASS_MAKEFILE_INC = @INCLUDE_COMPASS_MAKEFILE_INC@
INDENT = @INDENT@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
INSURE_OPTIONS = @INSURE_OPTIONS@
INTEL_FPP_PATH = @INTEL_FPP_PATH@
ISL_INCLUDE_PATH = @ISL_INCLUDE_PATH@
ISL_INSTALL_PATH = @ISL_INSTALL_PATH@
ISL_LIBRARY_PATH = @ISL_LIBRARY_PATH@
IntelPin_path = @IntelPin_path@
JAR = @JAR@
JAVA = @JAVA@
JAVAC = @JAVAC@
JAVA_JVM_INCLUDE = @JAVA_JVM_INCLUDE@
JAVA_JVM_LINK = @JAVA_JVM_LINK@
JAVA_JVM_PATH = @JAVA_JVM_PATH@
JAVA_PATH = @JAVA_PATH@
LD = @LD@
LDFLAGS = @LDFLAGS@
LEX = @LEX@
LEXLIB = @LEXLIB@
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@
LIBADD_DL = @LIBADD_DL@
LIBADD_DLD_LINK = @LIBADD_DLD_LINK@
LIBADD_DLOPEN = @LIBADD_DLOPEN@
LIBADD_SHL_LOAD = @LIBADD_SHL_LOAD@
LIBDWARF_CPPFLAGS = @LIBDWARF_CPPFLAGS@
LIBDWARF_LDFLAGS = @LIBDWARF_LDFLAGS@
LIBDWARF_PREFIX = @LIBDWARF_PREFIX@
LIBELF_CPPFLAGS = @LIBELF_CPPFLAGS@
LIBELF_LDFLAGS = @LIBELF_LDFLAGS@
LIBELF_PREFIX = @LIBELF_PREFIX@
LIBFFI_CFLAGS = @LIBFFI_CFLAGS@
LIBFFI_LIBS = @LIBFFI_LIBS@
LIBGCRYPT_CPPFLAGS = @LIBGCRYPT_CPPFLAGS@
LIBGCRYPT_LDFLAGS = @LIBGCRYPT_LDFLAGS@
LIBGCRYPT_PREFIX = @LIBGCRYPT_PREFIX@
LIBLTDL = @LIBLTDL@
LIBOBJS = @LIBOBJS@
LIBREADLINE_INCLUDE_PATH = @LIBREADLINE_INCLUDE_PATH@
LIBREADLINE_INSTALL_PATH = @LIBREADLINE_INSTALL_PATH@
LIBREADLINE_LIBRARY_PATH = @LIBREADLINE_LIBRARY_PATH@
LIBREADLINE_LIBS = @LIBREADLINE_LIBS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIPO = @LIPO@
LLVM_CONFIG = @LLVM_CONFIG@
LLVM_CPPFLAGS = @LLVM_CPPFLAGS@
LLVM_LDFLAGS = @LLVM_LDFLAGS@
LLVM_LIBS = @LLVM_LIBS@
LN_S = @LN_S@
LTDLDEPS = @LTDLDEPS@
LTDLINCL = @LTDLINCL@
LTDLOPEN = @LTDLOPEN@
LTLIBOBJS = @LTLIBOBJS@
LT_ARGZ_H = @LT_ARGZ_H@
LT_CONFIG_H = @LT_CONFIG_H@
LT_DLLOADERS = @LT_DLLOADERS@
LT_DLPREOPEN = @LT_DLPREOPEN@
LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
MAKEINFO = @MAKEINFO@
MANIFEST_TOOL = @MANIFEST_TOOL@
MAPLE_INCLUDES = @MAPLE_INCLUDES@
MAPLE_LIBDIR = @MAPLE_LIBDIR@
MAPLE_LIBS = @MAPLE_LIBS@
MD5 = @MD5@
MINT = @MINT@
MKDIR_P = @MKDIR_P@
MOC = @MOC@
MPICC = @MPICC@
MPICXX = @MPICXX@
MPIF77 = @MPIF77@
MPIFC = @MPIFC@
MYSQL_CFLAGS = @MYSQL_CFLAGS@
MYSQL_CONFIG = @MYSQL_CONFIG@
MYSQL_INCLUDE = @MYSQL_INCLUDE@
MYSQL_LDFLAGS = @MYSQL_LDFLAGS@
MYSQL_VERSION = @MYSQL_VERSION@
NM = @NM@
NMEDIT = @NMEDIT@
NVCCBIN = @NVCCBIN@
OBJ = @OBJ@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OCTAVE_PARSER_INSTALL_TARFILE = @OCTAVE_PARSER_INSTALL_TARFILE@
OPENCL_INC_DIR = @OPENCL_INC_DIR@
OPENCL_LIB_DIR = @OPENCL_LIB_DIR@
OPEN_FORTRAN_PARSER_PATH = @OPEN_FORTRAN_PARSER_PATH@
OPTIONAL_PROJECTS = @OPTIONAL_PROJECTS@
OS_major_release_number = @OS_major_release_number@
OS_minor_release_number = @OS_minor_release_number@
OS_release = @OS_release@
OS_vendor = @OS_vendor@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PACKAGE_VERSION_NUMERIC = @PACKAGE_VERSION_NUMERIC@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PKG_CONFIG = @PKG_CONFIG@
POET_INCL = @POET_INCL@
POET_LIB = @POET_LIB@
PPL_PATH = @PPL_PATH@
PURIFY_OPTIONS = @PURIFY_OPTIONS@
PYTHON = @PYTHON@
PYTHON_CPPFLAGS = @PYTHON_CPPFLAGS@
PYTHON_EXTRA_LDFLAGS = @PYTHON_EXTRA_LDFLAGS@
PYTHON_EXTRA_LIBS = @PYTHON_EXTRA_LIBS@
PYTHON_LDFLAGS = @PYTHON_LDFLAGS@
PYTHON_ROOT = @PYTHON_ROOT@
PYTHON_SITE_PKG = @PYTHON_SITE_PKG@
PYTHON_VERSION_MM = @PYTHON_VERSION_MM@
Pxx_INCLUDES = @Pxx_INCLUDES@
Pxx_LIBS = @Pxx_LIBS@
QROSE_PREFIX = @QROSE_PREFIX@
QT_INCLUDES = @QT_INCLUDES@
QT_LDFLAGS = @QT_LDFLAGS@
QT_VERSION = @QT_VERSION@
QT_VERSION_MAJOR = @QT_VERSION_MAJOR@
QT_VERSION_MINOR = @QT_VERSION_MINOR@
RANLIB = @RANLIB@
RCC = @RCC@
ROSEHPCT_DEP_INCLUDES = @ROSEHPCT_DEP_INCLUDES@
ROSEHPCT_DEP_LIBS = @ROSEHPCT_DEP_LIBS@
ROSE_BOOST_NORMAL_INCLUDE_PATH = @ROSE_BOOST_NORMAL_INCLUDE_PATH@

# DQ (12/22/2008): Specification of Boost path for use with "-isystem" option (may be GNU
# specific).  We use this option only if the configuration of ROSE has detected a
# previously installed version of Boost (which we do not want to use).
# Note that only one of these will be non-empty makefile variables.
ROSE_BOOST_PREINCLUDE_PATH = @ROSE_BOOST_PREINCLUDE_PATH@
ROSE_CAPSTONE_PREFIX = @ROSE_CAPSTONE_PREFIX@
ROSE_EDG_MAJOR_VERSION_NUMBER = @ROSE_EDG_MAJOR_VERSION_NUMBER@
ROSE_EDG_MINOR_VERSION_NUMBER = @ROSE_EDG_MINOR_VERSION_NUMBER@
ROSE_HOME = @ROSE_HOME@
ROSE_LIBMAGIC_PREFIX = @ROSE_LIBMAGIC_PREFIX@
ROSE_LIBPQXX_PREFIX = @ROSE_LIBPQXX_PREFIX@
ROSE_LSB_RELEASE = @ROSE_LSB_RELEASE@
ROSE_OBJDUMP_PATH = @ROSE_OBJDUMP_PATH@
ROSE_OFP_JAR_FILE = @ROSE_OFP_JAR_FILE@
ROSE_OFP_MAJOR_VERSION_NUMBER = @ROSE_OFP_MAJOR_VERSION_NUMBER@
ROSE_OFP_MINOR_VERSION_NUMBER = @ROSE_OFP_MINOR_VERSION_NUMBER@
ROSE_OFP_PATCH_VERSION_NUMBER = @ROSE_OFP_PATCH_VERSION_NUMBER@
ROSE_OFP_VERSION_NUMBER = @ROSE_OFP_VERSION_NUMBER@
ROSE_PS2PDF_PATH = @ROSE_PS2PDF_PATH@
ROSE_SUPPORT_GNU_EXTENSIONS = @ROSE_SUPPORT_GNU_EXTENSIONS@
ROSE_SUPPORT_MICROSOFT_EXTENSIONS = @ROSE_SUPPORT_MICROSOFT_EXTENSIONS@
ROSE_USE_CANDL = @ROSE_USE_CANDL@
ROSE_USE_CLOOG = @ROSE_USE_CLOOG@
ROSE_USE_EDG_QUAD_FLOAT = @ROSE_USE_EDG_QUAD_FLOAT@
ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT = @ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT@
ROSE_USE_PPL = @ROSE_USE_PPL@
ROSE_USE_SCOPLIB = @ROSE_USE_SCOPLIB@
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT = @ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT@
ROSE_WGET_PATH = @ROSE_WGET_PATH@
ROSE_WITH_MPI_CFLAGS = @ROSE_WITH_MPI_CFLAGS@
ROSE_WITH_MPI_CLDFLAGS = @ROSE_WITH_MPI_CLDFLAGS@
ROSE_WITH_MPI_CXXFLAGS = @ROSE_WITH_MPI_CXXFLAGS@
ROSE_WITH_MPI_CXXLDFLAGS = @ROSE_WITH_MPI_CXXLDFLAGS@
ROSE_WITH_MPI_F77FLAGS = @ROSE_WITH_MPI_F77FLAGS@
ROSE_WITH_MPI_F77LDFLAGS = @ROSE_WITH_MPI_F77LDFLAGS@
ROSE_WITH_MPI_FFLAGS = @ROSE_WITH_MPI_FFLAGS@
ROSE_WITH_MPI_FLDFLAGS = @ROSE_WITH_MPI_FLDFLAGS@
ROSE_YAML_PREFIX = @ROSE_YAML_PREFIX@
ROSE_YICES = @ROSE_YICES@
ROSE_YICES_PREFIX = @ROSE_YICES_PREFIX@
ROSE_Z3_PREFIX = @ROSE_Z3_PREFIX@
RT_LIBS = @RT_LIBS@
SCOPLIB_PATH = @SCOPLIB_PATH@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SPOT_INCLUDE_PATH = @SPOT_INCLUDE_PATH@
SPOT_INSTALL_PATH = @SPOT_INSTALL_PATH@
SPOT_LIBRARY_PATH = @SPOT_LIBRARY_PATH@
SQLITE3_CFLAGS = @SQLITE3_CFLAGS@
SQLITE3_LDFLAGS = @SQLITE3_LDFLAGS@
SQLITE3_VERSION = @SQLITE3_VERSION@
STRATEGO_BIN_PATH = @STRATEGO_BIN_PATH@
STRATEGO_INSTALL_PATH = @STRATEGO_INSTALL_PATH@
STRATEGO_LIBRARY_PATH = @STRATEGO_LIBRARY_PATH@
STRIP = @STRIP@
SWIG = @SWIG@
SWIG_LIB = @SWIG_LIB@
SWIPLBIN = @SWIPLBIN@
TCLSH = @TCLSH@
TEST_SMT_SOLVER = @TEST_SMT_SOLVER@
UIC = @UIC@
UPC = @UPC@
UPCDEPMODE = @UPCDEPMODE@
UPCFLAGS = @UPCFLAGS@
USING_WINDOWS = @USING_WINDOWS@
VALGRIND_BINARY = @VALGRIND_BINARY@
VALGRIND_BIN_PATH = @VALGRIND_BIN_PATH@
VALGRIND_INCLUDE_PATH = @VALGRIND_INCLUDE_PATH@
VALGRIND_INSTALL_PATH = @VALGRIND_INSTALL_PATH@
VALGRIND_LIBRARY_PATH = @VALGRIND_LIBRARY_PATH@
VECTORIZATION = @VECTORIZATION@
VERSION = @VERSION@
WT_PREFIX = @WT_PREFIX@
X10_BIN_PATH = @X10_BIN_PATH@
X10_INSTALL_PATH = @X10_INSTALL_PATH@
X10_LIBRARY_PATH = @X10_LIBRARY_PATH@
X10_VERSION = @X10_VERSION@
XERCES_CPPFLAGS = @XERCES_CPPFLAGS@
XERCES_LDFLAGS = @XERCES_LDFLAGS@
XERCES_LIBS = @XERCES_LIBS@
XERCES_VERSION = @XERCES_VERSION@
XMKMF = @XMKMF@
XML2_CONFIG = @XML2_CONFIG@
XML_CPPFLAGS = @XML_CPPFLAGS@
XML_LIBS = @XML_LIBS@
YACC = @YACC@
YFLAGS = @YFLAGS@
Z3BIN = @Z3BIN@
Z3_INCLUDE_PATH = @Z3_INCLUDE_PATH@
Z3_LIBRARY_PATH = @Z3_LIBRARY_PATH@
Z3_PREFIX = @Z3_PREFIX@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
absolute_path_srcdir = @absolute_path_srcdir@
ac_boost_path = @ac_boost_path@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
ac_ct_F77 = @ac_ct_F77@
ac_ct_FC = @ac_ct_FC@
ac_ct_MPICXX = @ac_ct_MPICXX@
ac_ct_UPC = @ac_ct_UPC@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bddbddb_path = @bddbddb_path@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_triplet_without_redhat = @build_triplet_without_redhat@
build_vendor = @build_vendor@
builddir = @builddir@
configure_date = @configure_date@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
edg_union_struct_debugging_value = @edg_union_struct_debugging_value@
exec_prefix = @exec_prefix@
glut_path = @glut_path@
gnat_home = @gnat_home@
gnat_path = @gnat_path@
gomp_omp_runtime_library_path = @gomp_omp_runtime_library_path@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
ida_path = @ida_path@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
insure_BIN = @insure_BIN@
insure_LIBS = @insure_LIBS@
insure_PREFIX = @insure_PREFIX@
libdir = @libdir@
libexecdir = @libexecdir@
llvm_path = @llvm_path@
localedir = @localedir@
localstatedir = @localstatedir@
ltdl_LIBOBJS = @ltdl_LIBOBJS@
ltdl_LTLIBOBJS = @ltdl_LTLIBOBJS@
mandir = @mandir@
maple_path = @maple_path@
mkdir_p = @mkdir_p@
mono_home = @mono_home@
oldincludedir = @oldincludedir@
omni_omp_runtime_support_path = @omni_omp_runtime_support_path@
optional_Visualization_subdirs = @optional_Visualization_subdirs@
parallel_ast_traversal_omp_path = @parallel_ast_traversal_omp_path@
pdfdir = @pdfdir@
php_path = @php_path@
poet_dir = @poet_dir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
purify_BIN = @purify_BIN@
purify_INCLUDES = @purify_INCLUDES@
purify_LIBS = @purify_LIBS@
purify_PREFIX = @purify_PREFIX@
res_top_src = @res_top_src@
rosyln_home = @rosyln_home@
rted_path = @rted_path@
runstatedir = @runstatedir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
subdirs = @subdirs@
sys_symbol_underscore = @sys_symbol_underscore@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_pwd = @top_pwd@
top_srcdir = @top_srcdir@
wine_path = @wine_path@

# SQLite is a simpler database to use than MySQL
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS)
@ROSE_USE_SQLITE_DATABASE_TRUE@SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS) -I$(top_srcdir)/src/roseExtensions/sqlite3x
@ROSE_USE_SQLITE_DATABASE_TRUE@SQLITE_DATABASE_LIBS = $(SQLITE3_LDFLAGS)
#   ROSE_SQLITE_DATABASE_OBJS     = $(top_builddir)/src/roseExtensions/sqlite3x/*o
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIB_NAME = RoseSQLite3xDatabase
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIB_FILE = lib$(ROSE_SQLITE_DATABASE_LIB_NAME).la
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIBS = -l$(ROSE_SQLITE_DATABASE_LIB_NAME)
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SIDEEFFECT_INCLUDE = -I$(top_srcdir)/src/midend/programAnalysis/sideEffectAnalysis
@ROSE_HAVE_LIBZ3_TRUE@Z3_LIB_NAME = z3
@ROSE_HAVE_LIBZ3_TRUE@Z3_LIB_FILE = lib$(Z3_LIB_NAME).so
@ROSE_HAVE_LIBZ3_TRUE@Z3_LIBS = -l$(Z3_LIB_NAME)
@ROSE_HAVE_LIBZ3_TRUE@Z3_INCLUDES = -I$(Z3_PREFIX)/include
@USE_Z3_FALSE@Z3_INCLUDES = 
@USE_Z3_TRUE@Z3_INCLUDES = -I$(Z3_INCLUDE_PATH)
@ROSE_HAVE_LIBZ3_TRUE@Z3_LIB_INCLUDES = -L$(Z3_PREFIX)/lib
@USE_Z3_FALSE@Z3_LIB_INCLUDES = 
@USE_Z3_TRUE@Z3_LIB_INCLUDES = -L$(Z3_LIBRARY_PATH)
@ROSE_HAVE_LIBZ3_TRUE@ROSE_Z3_INCLUDES = -I@ROSE_Z3_PREFIX@/include
@ROSE_HAVE_LIBZ3_TRUE@ROSE_Z3_LIBS = -lz3
@ROSE_HAVE_LIBZ3_TRUE@ROSE_Z3_LIBS_WITH_PATH = -L@ROSE_Z3_PREFIX@/lib -lz3

# This is properly handled by automake even when specified in an include file
EDG_LIBS = @EDG_LIBS@

# Conditional support for Gabriel's QRose GUI Library
#  ROSE_GUI_INCLUDE =   -I${QROSE_PREFIX}/include
@ROSE_USE_QT_TRUE@ROSE_GUI_INCLUDE = -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/Common -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/TreeBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/SourceBox

# ROSE_GUI_LIBS = -lqrose
#  ROSE_GUI_LIBS_WITH_PATH = -L${QROSE_PREFIX}/lib -lqrose
#  ROSE_GUI_LIBS_WITH_PATH =  -L${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/  -lqrose
@ROSE_USE_QT_TRUE@ROSE_GUI_LIBS_WITH_PATH = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la

# ROSE_GUI_LIB_FILE = libqrose.a
@ROSE_USE_QT_TRUE@ROSE_QT_INCLUDE = $(QT_INCLUDES)
# ROSE_QT_LIBS = -lqt
@ROSE_USE_QT_TRUE@ROSE_QT_LIBS_WITH_PATH = ${QT_LDFLAGS}
# ROSE_QT_LIB_FILE = libqt.a

# ROSE-HPCToolkit module
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_INCLUDES = -I$(top_srcdir)/src/roseExtensions/roseHPCToolkit/include
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_LIBS = -lrosehpct
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_LIBS_WITH_PATH = $(top_builddir)/src/roseExtensions/roseHPCToolkit/src/librosehpct.la
# ROSE_ROSEHPCT_LIB_FILE = librosehpct.so

# ROSE-YICES Package (destributed by SRI as a static library)
@ROSE_HAVE_LIBYICES_TRUE@ROSE_YICES_INCLUDES = -I@ROSE_YICES_PREFIX@/include
@ROSE_HAVE_LIBYICES_TRUE@ROSE_YICES_LIBS = -lyices
@ROSE_HAVE_LIBYICES_TRUE@ROSE_YICES_LIBS_WITH_PATH = @ROSE_YICES_PREFIX@/lib/libyices.a

# YAML-CPP package for parsing YAML/JSON files
@ROSE_HAVE_LIBYAML_TRUE@ROSE_YAML_INCLUDES = -I@ROSE_YAML_PREFIX@/include
@ROSE_HAVE_LIBYAML_TRUE@ROSE_YAML_LIBS = -lyaml-cpp
@ROSE_HAVE_LIBYAML_TRUE@ROSE_YAML_LIBS_WITH_PATH = -L@ROSE_YAML_PREFIX@/lib -lyaml-cpp

# GNU readline
@ROSE_WITH_LIBREADLINE_TRUE@ROSE_READLINE_INCLUDES = -I@LIBREADLINE_INCLUDE_PATH@
@ROSE_WITH_LIBREADLINE_TRUE@ROSE_READLINE_LIBS = @LIBREADLINE_LIBS@
@ROSE_WITH_LIBREADLINE_TRUE@ROSE_READLINE_LIBS_WITH_PATH = -L@LIBREADLINE_LIBRARY_PATH@ $(ROSE_READLINE_LIBS)

# libmagic for identifying file types based on magic numbers
@ROSE_HAVE_LIBMAGIC_TRUE@ROSE_LIBMAGIC_INCLUDES = -I@ROSE_LIBMAGIC_PREFIX@/include
@ROSE_HAVE_LIBMAGIC_TRUE@ROSE_LIBMAGIC_LIBS = -lmagic
@ROSE_HAVE_LIBMAGIC_TRUE@ROSE_LIBMAGIC_LIBS_WITH_PATH = -L@ROSE_LIBMAGIC_PREFIX@/lib -lmagic

# PostgreSQL C++ API
@ROSE_HAVE_LIBPQXX_TRUE@ROSE_LIBPQXX_INCLUDES = -I@ROSE_LIBPQXX_PREFIX@/include
@ROSE_HAVE_LIBPQXX_TRUE@ROSE_LIBPQXX_LIBS = -lpqxx -lpq
@ROSE_HAVE_LIBPQXX_TRUE@ROSE_LIBPQXX_LIBS_WITH_PATH = -L@ROSE_LIBPQXX_PREFIX@/lib -lpqxx -lpq

# Capstone disassembler
@ROSE_HAVE_CAPSTONE_TRUE@ROSE_CAPSTONE_INCLUDES = -I@ROSE_CAPSTONE_PREFIX@/include
@ROSE_HAVE_CAPSTONE_TRUE@ROSE_CAPSTONE_LIBS = -lcapstone
@ROSE_HAVE_CAPSTONE_TRUE@ROSE_CAPSTONE_LIBS_WITH_PATH = -L@ROSE_CAPSTONE_PREFIX@/lib -lcapstone

# Math algorithms from http://dlib.net. This is a headers-only library neede by some binary analyses.
@ROSE_HAVE_DLIB_TRUE@ROSE_DLIB_INCLUDES = -I@DLIB_PREFIX@
@ROSE_HAVE_DLIB_TRUE@ROSE_DLIB_LIBS = 
@ROSE_HAVE_DLIB_TRUE@ROSE_DLIB_LIBS_WITH_PATH = 

# DQ (11/4/2016): Adding support for use of Address Sanitizer (for where the ROSE Test Handler (RTH) is used.
# Note the quotes and escapes that are required:
ADDRESS_SANITIZER_OPTIONS = "ASAN_OPTIONS=symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=\`which llvm-symbolizer\`"

# DQ(11/4/2016): Need a version when not using the ROSE Test Handler (RTH):
NON_RTH_ADDRESS_SANITIZER_OPTIONS = ASAN_OPTIONS=symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=`which llvm-symbolizer`
@ROSE_HAVE_LIBELF_TRUE@ROSE_ELF_INCLUDES = @LIBELF_CPPFLAGS@
@ROSE_HAVE_LIBELF_TRUE@ROSE_ELF_LIBS_WITH_PATH = @LIBELF_LDFLAGS@

# ROSE gcrypt support (for things like md5, sha1, etc)
@ROSE_HAVE_LIBGCRYPT_TRUE@ROSE_GCRYPT_INCLUDES = @LIBGCRYPT_CPPFLAGS@
@ROSE_HAVE_LIBGCRYPT_TRUE@ROSE_GCRYPT_LIBS_WITH_PATH = @LIBGCRYPT_LDFLAGS@

# ROSE-DWARF libdwarf support
@ROSE_HAVE_LIBDWARF_TRUE@ROSE_DWARF_INCLUDES = @LIBDWARF_CPPFLAGS@
@ROSE_HAVE_LIBDWARF_TRUE@@ROSE_USE_INTEL_PIN_FALSE@ROSE_DWARF_LIBS_WITH_PATH = @LIBDWARF_LDFLAGS@

# DQ (3/13/2009):
# If Dwarf is used with Intel Pin then reference the same copy of libdwarf.a (in the same
# directory).  However, it does NOT work to link both references to libdwarf into more
# than one dynamic (shared) library, so we need to link libdwarf dynamically.
# To avoid additional LD_LIBRARY_PATH requirements, we do so using rpath.
# To support this the libdwarf.so should be placed into $(INTEL_PIN_PATH)/intel64/lib-ext
# and the static libdwarf.a moved out (renamed) so that it will not be used.
# Note that this will also cause librose.so to use the shared library for
# dwarf when used with Intel Pin.
@ROSE_HAVE_LIBDWARF_TRUE@@ROSE_USE_INTEL_PIN_TRUE@ROSE_DWARF_LIBS_WITH_PATH = -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
# DQ (3/14/2009): This factors the lib paths.
@ROSE_HAVE_LIBDWARF_TRUE@@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)

# ROSE-WINE Package (Wine is a package to permit execution of Windows binaries under Linux)
@ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE@ROSE_WINE_INCLUDES = -I$(wine_path)/include
@ROSE_USE_PHP_TRUE@ROSE_PHP_INCLUDES = -I$(php_path)/include/phc -I$(php_path)/include/php
@ROSE_USE_PHP_TRUE@ROSE_PHP_LIBS = -lphp5 -lphc -lltdl
@ROSE_USE_PHP_TRUE@ROSE_PHP_LIBS_WITH_PATH = $(php_path)/lib/libphc.so $(php_path)/lib/libphp5.so $(LIBLTDL)

# ASR (06/09/2010): adding llvm support variables
@ROSE_USE_LLVM_TRUE@ROSE_LLVM_INCLUDES = -I$(llvm_path)/include
@ROSE_USE_LLVM_TRUE@ROSE_LLVM_LIBS = -L$(llvm_path)/lib \
@ROSE_USE_LLVM_TRUE@	-lLLVMXCoreCodeGen -lLLVMXCoreAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMXCoreInfo -lLLVMSystemZCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMSystemZAsmPrinter -lLLVMSystemZInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMSparcCodeGen -lLLVMSparcAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMSparcInfo -lLLVMPowerPCCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMPowerPCAsmPrinter -lLLVMPowerPCInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMpic16passes -lLLVMPIC16AsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMPIC16CodeGen -lLLVMPIC16Info \
@ROSE_USE_LLVM_TRUE@	-lLLVMMSP430CodeGen -lLLVMMSP430AsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMMSP430Info -lLLVMMSIL -lLLVMMSILInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMMipsAsmPrinter -lLLVMMipsCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMMipsInfo -lLLVMMBlazeAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMMBlazeCodeGen -lLLVMMBlazeInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMLinker -lLLVMipo -lLLVMInterpreter \
@ROSE_USE_LLVM_TRUE@	-lLLVMInstrumentation -lLLVMJIT \
@ROSE_USE_LLVM_TRUE@	-lLLVMExecutionEngine -lLLVMCppBackend \
@ROSE_USE_LLVM_TRUE@	-lLLVMCppBackendInfo -lLLVMCellSPUCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMCellSPUAsmPrinter -lLLVMCellSPUInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMCBackend -lLLVMCBackendInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinInfo -lLLVMBitWriter \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86Disassembler -lLLVMX86AsmParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86AsmPrinter -lLLVMX86CodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86Info -lLLVMAsmParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMAsmParser -lLLVMMCParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMAsmPrinter -lLLVMARMCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMInfo -lLLVMArchive \
@ROSE_USE_LLVM_TRUE@	-lLLVMBitReader -lLLVMAlphaCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMSelectionDAG -lLLVMAlphaAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMAsmPrinter -lLLVMCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMScalarOpts -lLLVMInstCombine \
@ROSE_USE_LLVM_TRUE@	-lLLVMTransformUtils -lLLVMipa \
@ROSE_USE_LLVM_TRUE@	-lLLVMAnalysis -lLLVMTarget -lLLVMMC \
@ROSE_USE_LLVM_TRUE@	-lLLVMCore -lLLVMAlphaInfo -lLLVMSupport \
@ROSE_USE_LLVM_TRUE@	-lLLVMSystem

# adding all libraries for now

# Python API support
@ROSE_USE_PYTHON_DEV_TRUE@ROSE_PYTHON_INCLUDES = @PYTHON_CPPFLAGS@
@ROSE_USE_PYTHON_DEV_TRUE@ROSE_PYTHON_LIBS_WITH_PATH = @PYTHON_LDFLAGS@

# SSL support permits use of MD5 checksums internally for binary library identification.
@ROSE_USE_SSL_SUPPORT_TRUE@ROSE_SSL_LIBS = -lssl -lcrypto

# support for precompiled headers
@ROSE_PCH_TRUE@ROSE_PCH_INCLUDE = -Winvalid-pch -fPIC -DPIC
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_PATH = @IntelPin_path@
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_INCLUDE_PATHS = -I$(INTEL_PIN_PATH)/source/include -I$(INTEL_PIN_PATH)/source/include/gen -I$(INTEL_PIN_PATH)/extras/xed2-intel64/include -I$(INTEL_PIN_PATH)/source/tools/InstLib

# DQ (3/8/2009): These cause rose/src/testSharedRoseLib to fail, I don't know why (fails in system call to map()).
# INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib -L$(INTEL_PIN_PATH)/intel64/lib-ext
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_LIB_PATHS = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib

# Do we want to handle this differently when Dwarf is used optionally with ROSE.
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_LIBS = -lpin -lxed -ldwarf -lelf -ldl
#if ROSE_HAVE_LIBDWARF
#  INTEL_PIN_LIBS          = -lpin -lxed -lelf -ldl
#else
#  INTEL_PIN_LIBS          = -lpin -lxed -ldwarf -lelf -ldl
#endif
@ROSE_USE_ETHER_TRUE@ROSE_ETHER_INCLUDE = -I$(ETHER_PREFIX)/include
@ROSE_USE_ETHER_TRUE@ROSE_ETHER_LIBS = -L$(ETHER_PREFIX)/lib -lxenctrl
@ROSE_WITH_ATERM_TRUE@ROSE_ATERM_INCLUDE = -I$(ATERM_LIBRARY_PATH)/../include
@ROSE_WITH_ATERM_TRUE@ROSE_ATERM_LIBS = -L$(ATERM_LIBRARY_PATH) -lATerm

# Added support for Fortran front-end development using the flang (F18) compiler [Rasmussen 8/12/2019]
@ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION_TRUE@ROSE_FLANG_INCLUDES = -I$(FLANG_INSTALL_PATH)/include
@ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION_TRUE@ROSE_FLANG_LIBS = -L$(FLANG_INSTALL_PATH)/lib -lLLVMDemangle -lLLVMSupport -lLLVMFrontendOpenMP -lFortranParser -lFortranSemantics -lFortranEvaluate -lFortranCommon -lFortranDecimal -lFortranLower -lncurses

# DQ (5/9/2017): Adding Ada library support.
# ROSE_ADA_INCLUDES = -I$(ada_path)/include_xxx
@ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION_TRUE@ROSE_ADA_INCLUDES = -I$(ada_path)/include_xxx
@ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION_TRUE@ROSE_ADA_LIBS = -ldot_asis
@ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION_TRUE@ROSE_ADA_LIBS_WITH_PATH = $(DOT_ASIS_LIB_DIR_)/libdot_asis.so

# RASMUSSEN (10/24/2017): Adding the GnuCOBOL parse-tree library support.
@ROSE_EXPERIMENTAL_COBOL_ROSE_CONNECTION_TRUE@ROSE_COBOL_PT_LIBS_WITH_PATH = -L$(COBPT_LIBRARY_PATH) -lcob -lcobpt
@ROSE_USE_EDG_QUAD_FLOAT_TRUE@ROSE_QUAD_FLOAT_MATH = -lquadmath

# DQ (1/9/2010): Added use of libimf with libm (the two go together when using Intel icc and icpc)
#  ROSE_INTEL_COMPILER_MATH_LIBS = -limf -lm
# DQ (11/16/2017): We need to link in these Intel specific required libraries to avoid: error hidden symbol `__intel_cpu_features_init_x'
# ROSE_INTEL_COMPILER_MATH_LIBS =
#    ROSE_INTEL_COMPILER_MATH_LIBS += -limf
@USING_INTEL_COMPILER_TRUE@ROSE_INTEL_COMPILER_MATH_LIBS = -limf \
@USING_INTEL_COMPILER_TRUE@	-lirng -lintlc -lsvml -lm
# ROSE_INCLUDES =
#     $(ROSE_BOOST_PREINCLUDE_PATH)
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astMerge \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astFileIO \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/virtualCFG \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astTokenStream \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astHiddenTypeAndDeclarationLists \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/frontend/SageIII/astFileIO \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astFromString \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I"$(JAVA_HOME)/include" \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/PHPFrontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_CLANG_FRONTEND_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/PythonFrontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/BinaryFormats \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/BinaryLoader \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/Disassemblers \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_CLANG_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/formatSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/AdaCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/JovialCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/asmUnparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/graphs  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/stringSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/commandlineProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/abstractHandle \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/abstractMemoryObject \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/abstractLayer \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astDiagnostics \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/astInlining \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/astOutlining  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/transformationTracking \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astMatching \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astQuery \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astRewriteMechanism \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/annotation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/astInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/astSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/symbolicVal \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/BinaryAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/BinaryAnalysis/dataflowanalyses \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/BinaryAnalysis/instructionSemantics \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/computation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depGraph \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depInfo \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/driver \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/outsideInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/prepostTransformation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/ompLowering \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/extractFunctionArgumentsNormalization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/singleStatementToBlockNormalization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/arithmeticIntensity \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/CFG \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/staticSingleAssignment \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/ssaUnfilteredCfg \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/CallGraphAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/OAWrap \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/bitvectorDataflow \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/VirtualFunctionAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/defUseAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/distributedMemoryAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/dominanceAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/pointerAnal \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/staticInterproceduralSlicing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/valuePropagation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/variableRenaming \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_SIDEEFFECTS_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_DATABASE_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_GUI_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_QT_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_SQLITE_DATABASE_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@			$(ROSE_SIDEEFFECT_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(SQLITE_DATABASE_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/partialRedundancyElimination \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/finiteDifferencing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/functionCallNormalization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/constantFolding \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/implicitCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/libharu-2.1.0/include \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/include \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/graphs \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/astInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/libltdl \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/roseExtensions/failSafe \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_PHP_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_PYTHON_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_YICES_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_Z3_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_YAML_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_LIBPQXX_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_CAPSTONE_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_READLINE_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_LIBMAGIC_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_DLIB_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_GCRYPT_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_ELF_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_DWARF_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_WINE_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(VALGRIND_CFLAGS) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(SQLITE3_CFLAGS) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_PCH_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(INTEL_PIN_INCLUDE_PATHS) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_ETHER_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_ATERM_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_FLANG_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_CSHARP_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_ADA_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_JOVIAL_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_COBOL_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(BOOST_CPPFLAGS)


# DQ (4/13/2016): Is there were we put the support to include -lstdc++.so on the link line directly?

# DQ (3/6/2013): We need to build a SWIG path that can't include the isystem option.
# Note use of "-isystem" option in ROSE_BOOST_PREINCLUDE_PATH to have the
# boost specified on the configure
# command-line be used instead of the OS version of boost that is sometimes
# installed with Linux (it is always a version too old to be used with ROSE).
# This is used only when the ROSE configuration detects a previously installed
# version of Boost (e.g /usr/include/boost) that we don't want to use.
# ROSE_INCLUDES =
#    $(ROSE_BOOST_PREINCLUDE_PATH)
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_builddir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_builddir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I"$(JAVA_HOME)/include" \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/BinaryFormats \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/BinaryLoader \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/Disassemblers \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/formatSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/AdaCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/JovialCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/asmUnparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/graphs  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/stringSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/commandlineProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astDiagnostics \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astMatching \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astQuery \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/BinaryAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/programAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/graphs \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/roseExtensions/failSafe \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     $(ROSE_ATERM_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     $(ROSE_FLANG_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     $(ROSE_BOOST_NORMAL_INCLUDE_PATH)


# DQ (10/23/2015): These paths have been replaces with the following variables.
# These variable are empty for now (reflecting the default usage, and need to
# be set properly where ever Clang support is processed as a configure option.
#    -I$(top_srcdir)/src/frontend/CxxFrontend/ClangFrontend
#    -I$(top_srcdir)/src/frontend/CxxFrontend/Clang
#    $(ROSE_CLANG_FRONTEND_INCLUDE)
#    $(ROSE_CLANG_INCLUDE)
SWIG_ROSE_INCLUDES = $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH)
ROSE_INCLUDES = $(ROSE_BOOST_PREINCLUDE_PATH) $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH)

# DQ (8/15/2010): I have removed these directories from the include paths since it no longer exists.
# I expect that the directories were removed and the include list not properly cleaned up.
# -I$(top_srcdir)/src/midend/binaryAnalyses/graph
# -I$(top_srcdir)/src/midend/programTransformation/runtimeTransformation
# -I$(top_srcdir)/projects/dataBase

# DQ (12/22/2008): Move Boost directory to front and used "-isystem" option so
# that a system with a previous (older) installation of boost does not interfer
# with the use of ROSE (and the version of boost specified using "--with-boost").
# $(BOOST_CPPFLAGS)

# DQ (10/28/2008): I think these should be included, I don't know why they
# were removed (used with Microsoft Windows tests, and Yices tests).
# DQ: Not used currently
#     $(ROSE_WINE_INCLUDES)

# DQ (5/3/2007): Removed from ROSE
#     -I$(top_srcdir)/src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers
#     -I$(top_srcdir)/src/midend/programAnalysis/staticProgramSlicing

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly with make distcheck rule
#     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser

# New way using two libraries
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.a $(top_builddir)/src/libedg.a
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.so $(top_builddir)/src/libedg.so
# ROSE_LIBS_WITH_PATH = $(libdir)/librose.so $(libdir)/libedg.so
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la $(JAVA_JVM_LIB)
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_LIBS_WITH_PATH = $(ROSE_LIBS)

# ROSE_LIBS = $(top_builddir)/src/librose.la -lm $(LEXLIB) $(SQLITE_DATABASE_LIBS) $(LIB_QT) $(WAVE_LDFLAGS) $(WAVE_LIBRARIES) $(WAVE_LIBS) $(JAVA_JVM_LIB) $(RT_LIBS)

# MS 10/19/2015: added ROSE_BOOST_LIBS variable to share exact same
# boost libs list in ROSE an in the ROSTTA Makefiles.
ROSE_BOOST_LIBS = $(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) $(BOOST_CHRONO_LIB) \
  $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) $(BOOST_PROGRAM_OPTIONS_LIB) \
  $(BOOST_RANDOM_LIB) $(BOOST_REGEX_LIB)  $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB)  \
  $(BOOST_WAVE_LIB) $(BOOST_IOSTREAMS_LIB) $(BOOST_PYTHON_LIB)

ROSE_LIBS = $(abspath $(top_builddir)/src/librose.la) -lm \
	$(JAVA_JVM_LINK) $(SQLITE_DATABASE_LIBS) $(QT_LIBS) \
	$(ROSE_BOOST_LIBS) $(SQLITE3_LDFLAGS) $(RT_LIBS) \
	$(ROSE_YICES_LIBS_WITH_PATH) $(ROSE_Z3_LIBS_WITH_PATH) \
	$(ROSE_PHP_LIBS_WITH_PATH) $(ROSE_DWARF_LIBS_WITH_PATH) \
	$(ROSE_ELF_LIBS_WITH_PATH) $(ROSE_GUI_LIBS_WITH_PATH) \
	$(ROSE_QT_LIBS_WITH_PATH) $(ROSE_SSL_LIBS) $(ROSE_ETHER_LIBS) \
	$(ROSE_INTEL_COMPILER_MATH_LIBS) $(ROSE_ATERM_LIBS) \
	$(ROSE_FLANG_LIBS) $(ROSE_YAML_LIBS_WITH_PATH) \
	$(ROSE_LIBMAGIC_LIBS_WITH_PATH) \
	$(ROSE_READLINE_LIBS_WITH_PATH) $(ROSE_DLIB_LIBS_WITH_PATH) \
	$(ROSE_GCRYPT_LIBS_WITH_PATH) $(ROSE_LIBPQXX_LIBS_WITH_PATH) \
	$(ROSE_ADA_LIBS_WITH_PATH) $(ROSE_COBOL_PT_LIBS_WITH_PATH) \
	$(ROSE_PYTHON_LIBS_WITH_PATH) $(ROSE_QUAD_FLOAT_MATH) \
	$(ROSE_CAPSTONE_LIBS_WITH_PATH) $(am__append_1)

#========================================================================================================================
# These are the "-R directory" switches that need to be passed to libtool running in link mode to make sure that ROSE
# executables have rpath properties that point to the directories containing the libraries we're using. Do not add
# system directories (or at least not at the front of this list) because that will cause the system-installed version of
# a library to be used rather than some user-specific version.
#
# Here's the motivation for using rpath instead of LD_LIBRARY_PATH: Consider what happens if some ROSE tool, call it
# myTranslator, is compiled and linked against a custom, user-installed version of libz.so (perhaps because myTranslator
# is using a custom version of some graphics library, like libgraphicsmagick.so, that needs a newer libz.so than what's
# installed on the system).  If I then set LD_LIBRARY_PATH to point to the directory with my libz.so I'll be able to run
# myTranslator, however I probably won't be able any system installed tool that uses libz.so. This includes not being
# able to run /usr/bin/as, which might be called indirectly when myTranslator invokes the backend compiler (because
# LD_LIBRARY_PATH overrides the rpath built into /usr/bin/as).  Run-time linking with the wrong dynamic library at best
# produces an error message from the linker, but more often just results in a fault of some sort.
#
# How does rpath fix this problem? It encodes into each executable the list of directories that should be searched when
# the executable is run, similar to LD_LIBRARY_PATH but on a per-executable basis.
#
# The filter-out is removing specific libraries (-lwhatever), the GCC's POSIX thread switch (-pthread), static libraries
# (whatever.a), and various system directories that might have the wrong library versions and which are searched
# automatically anyway. The outer patsubst is changing "-Ldirectory" to just "directory", and the addprefix is changing
# each directory to "-R directory" which is libtool's switch for adding an rpath to an executable.
#
# The inner-most patsubst needs more explanation: Although most low-level libraries like libz, libpng, etc. are normally
# installed in well-known system-wide locations (like /usr/lib), when testing ROSE in matrix testing using RMC, these
# libraries are often compiled and installed locally in such ways that they're not binary compatible with the
# system-installed versions. However, ROSE doesn't have configuration or cmake options for all these libraries because
# there could eventually be far too many. Therefore, we use the fact that RMC has already chosen the correct library
# directories and added their names to various environment variables. The lines of the form
#     $(subst :, ,# $(whatever_LIBDIRS))
# split the named environment variable into individual directory names.  If there's a ROSE configure option to specify
# the library location, then DO NOT list an environment variable here--use the directory from configure instead (which
# goes into ROSE_LIBS above).
ROSE_RPATHS = \
          $(patsubst -L%,-R %,                                                          \
            $(filter-out -L/lib% -L/usr/lib% -L/usr/local/lib% -L/var/lib%,             \
              $(filter -L%,                                                             \
                $(ROSE_LIBS)                                                            \
                $(subst :, , $(GNU_COMPILERS_LIBDIRS))                                  \
                $(subst :, , $(LIBBZ2_LIBDIRS))                                         \
                $(subst :, , $(LIBGRAPHICSMAGICK_LIBDIRS))                              \
                $(subst :, , $(LIBJPEG_LIBDIRS))                                        \
                $(subst :, , $(LIBLCMS_LIBDIRS))                                        \
                $(subst :, , $(LIBLZMA_LIBDIRS))                                        \
                $(subst :, , $(LIBPNG_LIBDIRS))                                         \
                $(subst :, , $(LIBTIFF_LIBDIRS))                                        \
                $(subst :, , $(PYTHON_LIBDIRS))                                         \
                $(subst :, , $(SPOT_LIBDIRS))                                           \
                $(subst :, , $(ZLIB_LIBDIRS))                                           \
                $(subst :, , $(INTEL_COMPILER_RPATHS))                                  \
              )                                                                         \
            )                                                                           \
          )

@OS_MACOSX_FALSE@ROSE_LINK_RPATHS = $(addprefix -Wl$(comma)-rpath , $(filter-out -R , $(ROSE_RPATHS)))

# Rasmussen (3/23/2018): Added ROSE_LINK_RPATHS to enable linking on Mac OSX with ROSE installation
@OS_MACOSX_TRUE@ROSE_LINK_RPATHS = $(addprefix -Xlinker -rpath -Xlinker , $(filter-out -R , $(ROSE_RPATHS)))
@OS_MACOSX_FALSE@comma = ,
INTEL_COMPILER_RPATHS = $(shell $(top_srcdir)/scripts/intel-compiler-rpaths.sh)

# DQ (3/8/2009): This fails when I try to include it (fails in rose/src/testSharedRoseLib).
#  $(INTEL_PIN_LIB_PATHS) $(INTEL_PIN_LIBS)

# DQ (3/14/2009): It is cleaner to just required that Intel Pin support require setting
# the LD_LIBRARYPATH to include: $(INTEL_PIN_PATH)/intel64/lib-ext

# This ROSE_SEPARATE_LIBS is used for the linking of preprocessor.C used within
# development. The use of the seperate libraries make the linking faster where the
# main librose library is not built.  Libtool may have changed this so that we could
# just link to librose now just as easily, but one has to rebuild librose each time
# instead of just the individual shared library.
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_SEPARATE_LIBS = $(ROSE_LIBS)

# QY (11/2/04): removed -lastoutlining from ROSE_SEPARATE_LIBS

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly
# with make distcheck rule
# -lannotationLanguageParser(appears after -lvaluePropagation)

# Test harness variables. See "rth_run.pl --help" for more info.  The RTH_RUN_FLAGS is meant to be set on the
# "make" command-line, but the default depends on the value of the verbosity $(V) flag.
RTH_RUN_FLAGS_V_ = 
RTH_RUN_FLAGS_V_0 = 
RTH_RUN_FLAGS_V_1 = --immediate-output
RTH_RUN_FLAGS = $(RTH_RUN_FLAGS_V_$(V))

# Default timeout that you can override on the "make" commandline. Valid values
# are integers followed by "s" (seconds), "m" (minutes), "h" (hours), or the
# word "never".  See scripts/rth_run.pl for detailed documentation.
RTH_TIMEOUT = 15m
RTH_RUN = $(top_srcdir)/scripts/rth_run.pl $(RTH_RUN_FLAGS) \
	srcdir=$(abspath $(srcdir)) top_srcdir=$(abspath $(top_srcdir)) \
	blddir=$$(pwd) top_blddir=$(abspath $(top_builddir)) \
	VALGRIND=$(VALGRIND) TIMEOUT=$(RTH_TIMEOUT)

RTH_STATS = $(top_srcdir)/scripts/rth_stats.pl

# override ROSE settings from AM_INIT_AUTOMAKE
AUTOMAKE_OPTIONS = subdir-objects
COUNTEREXAMPLES = counterexamples/ltl2haskell.sh counterexamples/Makefile counterexamples/qc.hs counterexamples/log2csv.awk
EXTRA_DIST = Doxyfile $(TESTS) $(COUNTEREXAMPLES)
#noinst_PROGRAMS matcher_demo matcher astinfo cldemo
CLEANFILES = 
@USE_Z3_FALSE@Z3_LINK = 
@USE_Z3_TRUE@Z3_LINK = -lz3
@ROSE_WITH_SPOT_FALSE@AM_LDFLAGS = $(ROSE_LIBS) $(LIBS_WITH_RPATH) -fopenmp $(Z3_LIB_INCLUDES)
@ROSE_WITH_SPOT_TRUE@AM_LDFLAGS = $(ROSE_LIBS) $(LIBS_WITH_RPATH) -fopenmp -L$(SPOT_LIBRARY_PATH)
@ROSE_WITH_SPOT_FALSE@AM_CPPFLAGS = $(ROSE_INCLUDES) -I$(top_srcdir)/projects/Codethorn/src $(Z3_INCLUDES) -g -rdynamic
@ROSE_WITH_SPOT_TRUE@AM_CPPFLAGS = $(ROSE_INCLUDES) -I$(top_srcdir)/projects/Codethorn/src -I$(SPOT_INCLUDE_PATH)/spot -I$(SPOT_INCLUDE_PATH) $(Z3_INCLUDES) -g -rdynamic
MYDATE = $(shell date +%Y_%m_%d)
lib_LTLIBRARIES = libcodethorn.la libltlthorn.la

##############################################################
# LIBRARY: CODETHORN (CORE)
##############################################################

# codethorn liabrary header files without corresponding source files
CODETHORN_SOLO_HEADER_FILES = \
  AnalysisParameters.h \
  CollectionOperators.h \
  CtxAnalysis.h \
  CtxAttribute.h \
  CtxLattice.h \
  CtxPropertyStateFactory.h \
  CtxReachabilityFactory.h \
  CtxReachabilityTransfer.h \
  CtxTransfer.h \
  DataDependenceVisualizer.h \
  EqualityMaintainer.h \
  Evaluator.h \
  ExecutionTrace.h \
  HashFun.h \
  HSetMaintainer.h \
  ReadWriteData.h \
  SetAlgo.h \
  WorkListSeq.h


# codethorn library header files (each with a corresponding source file)
CODETHORN_HEADER_FILES = \
  AbstractValue.h \
  addressTakenAnalysis.h \
  AliasAnalysis.h \
  AstUtility.h \
  AnalysisAstAnnotator.h \
  AnalysisReporting.h \
  Analyzer.h \
  ArrayElementAccessData.h \
  AstNodeInfo.h \
  AstTermRepresentation.h \
  BoolLattice.h \
  CallString.h \
  CFAnalysis.h \
  CodeThornLib.h \
  CommandLineOptions.h \
  ConstraintRepresentation.h \
  ContNodeAttribute.h \
  CounterexampleGenerator.h \
  CPAstAttribute.h \
  CppExprEvaluator.h \
  CppStdUtilities.h \
  CTIOLabeler.h \
  CtxCallStrings.h \
  CtxPrioritySolver.h \
  CtxReachabilityAnalysis.h \
  CtxReachabilityLattice.h \
  CtxSolver0.h \
  DataDependenceVisualizer.h \
  DataRaceDetection.h \
  defUseQuery.h \
  DFAbstractSolver.h \
  DFAnalysisBase.h \
  DFTransferFunctions.h \
  DotGraphCfgFrontend.h \
  EquivalenceChecking.h \
  EState.h \
  EStateAnalysis.h \
  EStateFactory.h \
  EStateTransferFunctions.h \
  EStateWorkList.h \
  EStatePriorityWorkList.h \
  ExprAnalyzer.h \
  FIConstAnalysis.h \
  Flow.h \
  FunctionCallMapping.h \
  FunctionCallMapping2.h \
  FunctionCallTarget.h \
  FunctionId.h \
  FunctionIdMapping.h \
  InputOutput.h \
  InternalChecks.h \
  IntervalAnalysis.h \
  IntervalAstAttribute.h \
  IntervalAstAttributeInterface.h \
  IntervalPropertyStateFactory.h \
  IntervalPropertyState.h \
  IntervalTransferFunctions.h \
  IOAnalyzer.h \
  IOSequenceGenerator.h \
  IOSolver.h \
  LanguageRestrictorCollection.h \
  LanguageRestrictor.h \
  Lattice.h \
  LoopInfo.h \
  LVAnalysis.h \
  LVAstAttribute.h \
  LVAstAttributeInterface.h \
  LVLattice.h \
  LVTransferFunctions.h \
  MemAnalysis.h \
  MemTransferFunctions.h \
  MemPropertyState.h \
  MemPropertyStateFactory.h \
  Miscellaneous2.h \
  Miscellaneous.h \
  Normalization.h \
  NormalizationCxx.h \
  NormalizationInliner.h \
  NormalizationOp.h \
  NumberIntervalLattice.h \
  Options.h \
  CodeThornOptions.h \
  LTLOptions.h \
  ltlthorn-lib/ParProOptions.h \
  PASolver1.h \
  PointerAnalysisInterface.h \
  PragmaHandler.h \
  PredefinedSemanticFunctions.h \
  ProgramAbstractionLayer.h \
  ProgramInfo.h \
  ProgramLocationsReport.h \
  ProgramLocationsAnalysis.h \
  PropertyState.h \
  PropertyStateFactory.h \
  PropertyValueTable.h \
  PState.h \
  RDAnalysis.h \
  RDAstAttribute.h \
  RDLattice.h \
  RDTransferFunctions.h \
  ReachabilityAnalysis.h \
  ReadWriteAnalyzer.h \
  ReadWriteHistory.h \
  RERS_empty_specialization.h \
  RersCounterexample.h \
  RewriteStatistics.h \
  RewriteSystem.h \
  RWState.h \
  Solver5.h \
  Solver8.h \
  Solver.h \
  Specialization.h \
  SvcompWitness.h \
  TimeMeasurement.h \
  TopologicalSort.h \
  TransitionGraph.h \
  TransitionGraphReducer.h \
  TypeSizeMapping.h \
  UDAstAttribute.h \
  VariableIdUtils.h \
  VariableIdMappingExtended.h \
  VariableValueMonitor.h \
  Visualizer.h


# codethorn library source files (each with a corresponding header file)
CODETHORN_SOURCE_FILES = \
  AbstractValue.C \
  addressTakenAnalysis.C \
  AliasAnalysis.C \
  AstUtility.C \
  AnalysisAstAnnotator.C \
  AnalysisReporting.C \
  Analyzer.C \
  ArrayElementAccessData.C \
  AstNodeInfo.C \
  AstTermRepresentation.C \
  BoolLattice.C \
  CallString.C \
  CFAnalysis.C \
  CodeThornLib.C \
  CommandLineOptions.C \
  ConstraintRepresentation.C \
  ContNodeAttribute.C \
  CounterexampleGenerator.C \
  CPAstAttribute.C \
  CppExprEvaluator.C \
  CppStdUtilities.C \
  CTIOLabeler.C \
  CtxCallStrings.C \
  CtxPrioritySolver.C \
  CtxReachabilityAnalysis.C \
  CtxReachabilityLattice.C \
  CtxSolver0.C \
  DataDependenceVisualizer.C \
  defUseQuery.C \
  DataRaceDetection.C \
  DFAnalysisBase.C \
  DFTransferFunctions.C \
  DotGraphCfgFrontend.C \
  EquivalenceChecking.C \
  EState.C \
  EStateAnalysis.C \
  EStateFactory.C \
  EStateTransferFunctions.C \
  EStateWorkList.C \
  EStatePriorityWorkList.C \
  ExprAnalyzer.C \
  FIConstAnalysis.C \
  Flow.C \
  FunctionCallMapping.C \
  FunctionCallMapping2.C \
  FunctionCallTarget.C \
  FunctionId.C \
  FunctionIdMapping.C \
  InputOutput.C \
  InternalChecks.C \
  IntervalAnalysis.C \
  IntervalAstAttribute.C \
  IntervalAstAttributeInterface.C \
  IntervalPropertyStateFactory.C \
  IntervalPropertyState.C \
  IntervalTransferFunctions.C \
  IOAnalyzer.C \
  IOSequenceGenerator.C \
  IOSolver.C \
  LanguageRestrictorCollection.C \
  LanguageRestrictor.C \
  Lattice.C \
  LoopInfo.C \
  CodeThornOptions.C \
  LTLOptions.C \
  ltlthorn-lib/ParProOptions.C \
  LVAnalysis.C \
  LVAstAttribute.C \
  LVAstAttributeInterface.C \
  LVLattice.C \
  LVTransferFunctions.C \
  MemAnalysis.C \
  MemTransferFunctions.C \
  MemPropertyState.C \
  MemPropertyStateFactory.C \
  Miscellaneous2.C \
  Miscellaneous.C \
  Normalization.C \
  NormalizationCxx.C \
  NormalizationInliner.C \
  NormalizationOp.C \
  NumberIntervalLattice.C \
  PASolver1.C \
  PointerAnalysisInterface.C \
  PragmaHandler.C \
  PredefinedSemanticFunctions.C \
  ProgramAbstractionLayer.C \
  ProgramInfo.C \
  ProgramLocationsReport.C \
  ProgramLocationsAnalysis.C \
  PropertyState.C \
  PropertyStateFactory.C \
  PropertyValueTable.C \
  PState.C \
  RDAnalysis.C \
  RDAstAttribute.C \
  RDLattice.C \
  RDTransferFunctions.C \
  ReachabilityAnalysis.C \
  ReadWriteAnalyzer.C \
  ReadWriteHistory.C \
  RERS_empty_specialization.C \
  RersCounterexample.C \
  RewriteStatistics.C \
  RewriteSystem.C \
  RWState.C \
  Solver5.C \
  Solver8.C \
  Solver.C \
  Specialization.C \
  SvcompWitness.C \
  TimeMeasurement.C \
  TopologicalSort.C \
  TransitionGraph.C \
  TransitionGraphReducer.C \
  TypeSizeMapping.C \
  UDAstAttribute.C \
  VariableIdUtils.C \
  VariableIdMappingExtended.C \
  VariableValueMonitor.C \
  Visualizer.C


#libcodethorn_la_LDFLAGS= -no-undefined
libcodethorn_la_LDFLAGS = 
libcodethorn_la_CXXFLAGS = -fopenmp -Wall -O3

# codethorn header files are installed in <installpath>/rose/codethorn
codethornincludedir = $(pkgincludedir)/codethorn
codethorninclude_HEADERS = \
  $(CODETHORN_SOLO_HEADER_FILES) \
  $(CODETHORN_HEADER_FILES) 


# codethorn (core) library sources
libcodethorn_la_SOURCES = \
  $(CODETHORN_SOURCE_FILES)


################################################################
# LIBRARY: LTLTHORN/ (for linear temporal logic verification)
################################################################
libltlthorn_la_LDFLAGS = 
libltlthorn_la_CXXFLAGS = -fopenmp -Wall -O3
LTLTHORN_SOLO_HEADER_FILES = 
LTLTHORN_HEADER_FILES = \
  z3-prover-connection/ReachabilityAnalyzerZ3.h \
  z3-prover-connection/SSAGenerator.h \
  z3-prover-connection/PhiAttribute.h \
  z3-prover-connection/PhiStatement.h \
  ltlthorn-lib/CounterexampleAnalyzer.h \
  ltlthorn-lib/LtsminConnection.h \
  ltlthorn-lib/ParProAutomataGenerator.h \
  ltlthorn-lib/ParProAutomata.h \
  ltlthorn-lib/ParProAnalyzer.h \
  ltlthorn-lib/ParProEState.h \
  ltlthorn-lib/ParProExplorer.h \
  ltlthorn-lib/ParProLtlMiner.h \
  ltlthorn-lib/ParProSpotState.h \
  ltlthorn-lib/ParProSpotSuccIter.h \
  ltlthorn-lib/ParProSpotTgba.h \
  ltlthorn-lib/ParProTransitionGraph.h \
  ltlthorn-lib/PromelaCodeGenerator.h \
  ltlthorn-lib/Solver10.h \
  ltlthorn-lib/Solver11.h \
  ltlthorn-lib/Solver12.h \
  ltlthorn-lib/SpotConnection.h \
  ltlthorn-lib/SpotMiscellaneous.h \
  ltlthorn-lib/SpotRenameVisitor.h \
  ltlthorn-lib/SpotState.h \
  ltlthorn-lib/SpotSuccIter.h \
  ltlthorn-lib/SpotTgba.h

LTLTHORN_SOURCE_FILES = \
  z3-prover-connection/ReachabilityAnalyzerZ3.C \
  z3-prover-connection/SSAGenerator.C \
  z3-prover-connection/PhiAttribute.C \
  z3-prover-connection/PhiStatement.C \
  ltlthorn-lib/CounterexampleAnalyzer.C \
  ltlthorn-lib/LtsminConnection.C \
  ltlthorn-lib/ParProAutomataGenerator.C \
  ltlthorn-lib/ParProAutomata.C \
  ltlthorn-lib/ParProAnalyzer.C \
  ltlthorn-lib/ParProEState.C \
  ltlthorn-lib/ParProExplorer.C \
  ltlthorn-lib/ParProLtlMiner.C \
  ltlthorn-lib/ParProSpotState.C \
  ltlthorn-lib/ParProSpotSuccIter.C \
  ltlthorn-lib/ParProSpotTgba.C \
  ltlthorn-lib/ParProTransitionGraph.C \
  ltlthorn-lib/PromelaCodeGenerator.C \
  ltlthorn-lib/Solver10.C \
  ltlthorn-lib/Solver11.C \
  ltlthorn-lib/Solver12.C \
  ltlthorn-lib/SpotConnection.C \
  ltlthorn-lib/SpotMiscellaneous.C \
  ltlthorn-lib/SpotRenameVisitor.C \
  ltlthorn-lib/SpotState.C \
  ltlthorn-lib/SpotSuccIter.C \
  ltlthorn-lib/SpotTgba.C


# only informative (not installed)
libltlthorn_xHEADERS = \
  $(LTLTHORN_SOLO_HEADER_FILES) \
  $(LTLTHORN_HEADER_FILES) \
  LTLThornLib.h


# library sources
libltlthorn_la_SOURCES = \
  $(LTLTHORN_SOURCE_FILES) \
  LTLThornLib.C


##############################################################
# TOOL: CODETHORN
##############################################################

# yacc flags for LTL parser
codethorn_YFLAGS = -p ltl_ 

# this line creates speparately named object files
codethorn_CXXFLAGS = -fopenmp -Wall -O3 

# codethorn has most of its code organized in two separate libraries
codethorn_DEPENDENCIES = libcodethorn.la libltlthorn.la
@ROSE_WITH_SPOT_FALSE@codethorn_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -lcodethorn -lltlthorn

#spot and bdd need to be linked last with gcc 5.4
@ROSE_WITH_SPOT_TRUE@codethorn_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -lcodethorn -lltlthorn $(Z3_LINK) -lspot -lbdd 
@ROSE_WITH_SPOT_TRUE@codethorn_LDFLAGS = -L$(SPOT_LIBRARY_PATH) $(Z3_LIB_INCLUDES)
codethorndir = .

# only informative
codethorn_xHEADERS = \
  CommandLineOptions.h \
  CodeThornCommandLineOptions.h \
  codethorn.h \
  LTL.h


# codethorn sources in addition to libcodethorn and libltlthorn
codethorn_SOURCES = \
  LTLParser.y++ \
  CodeThornCommandLineOptions.C \
  codethorn.C


##############################################################
# TOOL: LTLTHORN
##############################################################

# yacc flags for LTL parser
ltlthorn_YFLAGS = -p ltl_ 

# this line creates speparately named object files
ltlthorn_CXXFLAGS = -fopenmp -Wall -O3 

# ltlthorn has most of its code organized in two separate libraries
ltlthorn_DEPENDENCIES = libcodethorn.la libltlthorn.la
@ROSE_WITH_SPOT_FALSE@ltlthorn_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -lcodethorn -lltlthorn

#spot and bdd need to be linked last with gcc 5.4
@ROSE_WITH_SPOT_TRUE@ltlthorn_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -lcodethorn -lltlthorn $(Z3_LINK) -lspot -lbdd 
@ROSE_WITH_SPOT_TRUE@ltlthorn_LDFLAGS = -L$(SPOT_LIBRARY_PATH) $(Z3_LIB_INCLUDES)
ltlthorndir = .

# only informative
ltlthorn_xHEADERS = \
  CommandLineOptions.h \
  LTLThornCommandLineOptions.h \
  codethorn.h \
  LTL.h


# codethorn sources in addition to libcodethorn and libltlthorn
ltlthorn_SOURCES = \
  LTLParser.y++ \
  LTLThornCommandLineOptions.C \
  ltlthorn.C


##############################################################
# TOOL: EQUITHORN
##############################################################

# yacc flags for LTL parser
equithorn_YFLAGS = -p ltl_ 

# this line creates speparately named object files
equithorn_CXXFLAGS = -fopenmp -Wall -O3 

# equithorn has most of its code organized in two separate libraries
equithorn_DEPENDENCIES = libcodethorn.la libltlthorn.la
@ROSE_WITH_SPOT_FALSE@equithorn_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -lcodethorn -lltlthorn

#spot and bdd need to be linked last with gcc 5.4
@ROSE_WITH_SPOT_TRUE@equithorn_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -lcodethorn -lltlthorn $(Z3_LINK) -lspot -lbdd 
@ROSE_WITH_SPOT_TRUE@equithorn_LDFLAGS = -L$(SPOT_LIBRARY_PATH) $(Z3_LIB_INCLUDES)
equithorndir = .

# only informative
equithorn_xHEADERS = \
  CommandLineOptions.h \
  EquiThornCommandLineOptions.h \
  codethorn.h \
  LTL.h


# codethorn sources in addition to libcodethorn and libltlthorn
equithorn_SOURCES = \
  LTLParser.y++ \
  EquiThornCommandLineOptions.C \
  equithorn.C


##############################################################
# TOOL: PARPROTHORN
##############################################################

# yacc flags for LTL parser
parprothorn_YFLAGS = -p ltl_ 

# this line creates speparately named object files
parprothorn_CXXFLAGS = -fopenmp -Wall -O3 

# parprothorn has most of its code organized in two separate libraries
parprothorn_DEPENDENCIES = libcodethorn.la libltlthorn.la
@ROSE_WITH_SPOT_FALSE@parprothorn_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -lcodethorn -lltlthorn

#spot and bdd need to be linked last with gcc 5.4
@ROSE_WITH_SPOT_TRUE@parprothorn_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -lcodethorn -lltlthorn $(Z3_LINK) -lspot -lbdd 
@ROSE_WITH_SPOT_TRUE@parprothorn_LDFLAGS = -L$(SPOT_LIBRARY_PATH) $(Z3_LIB_INCLUDES)
parprothorndir = .

# only informative
parprothorn_xHEADERS = \
  CommandLineOptions.h \
  ParProThornCommandLineOptions.h \
  codethorn.h \
  LTL.h


# codethorn sources in addition to libcodethorn and libltlthorn
parprothorn_SOURCES = \
  LTLParser.y++ \
  ParProThornCommandLineOptions.C \
  parprothorn.C


##############################################################
# TOOL: MEMTHORN
##############################################################

# yacc flags for LTL parser
memthorn_YFLAGS = -p ltl_ 

# this line creates speparately named object files
memthorn_CXXFLAGS = -fopenmp -Wall -O3 

# memthorn has most of its code organized in two separate libraries
memthorn_DEPENDENCIES = libcodethorn.la libltlthorn.la
@ROSE_WITH_SPOT_FALSE@memthorn_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -lcodethorn -lltlthorn

#spot and bdd need to be linked last with gcc 5.4
@ROSE_WITH_SPOT_TRUE@memthorn_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -lcodethorn -lltlthorn $(Z3_LINK) -lspot -lbdd 
@ROSE_WITH_SPOT_TRUE@memthorn_LDFLAGS = -L$(SPOT_LIBRARY_PATH) $(Z3_LIB_INCLUDES)
memthorndir = .

# only informative
memthorn_xHEADERS = \
  CommandLineOptions.h \
  MemThornCommandLineOptions.h \
  codethorn.h \
  LTL.h


# codethorn sources in addition to libcodethorn and libltlthorn
memthorn_SOURCES = \
  LTLParser.y++ \
  MemThornCommandLineOptions.C \
  memthorn.C


##############################################################
# TOOL: WOODPECKER
##############################################################
woodpecker_DEPENDENCIES = libcodethorn.la
@ROSE_WITH_SPOT_FALSE@woodpecker_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)  -lcodethorn
@ROSE_WITH_SPOT_TRUE@woodpecker_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)  -lcodethorn
@ROSE_WITH_SPOT_TRUE@woodpecker_LDFLAGS = -L$(SPOT_LIBRARY_PATH)
woodpecker_CXXFLAGS = -fopenmp -Wall -O3
woodpecker_SOURCES = \
  shared-src/ProgramStats.h \
  shared-src/ProgramStats.C \
  woodpecker-src/Threadification.h \
  woodpecker-src/Threadification.C \
  woodpecker-src/TrivialInlining.C \
  woodpecker-src/TrivialInlining.h \
  woodpecker-src/DeadCodeElimination.C \
  woodpecker-src/DeadCodeElimination.h \
  woodpecker-src/ConversionFunctionsGenerator.h \
  woodpecker-src/ConversionFunctionsGenerator.C \
  woodpecker-src/woodpecker.C


##############################################################
# TOOL: ANALYTERIX
##############################################################
analyterix_DEPENDENCIES = libcodethorn.la
@ROSE_WITH_SPOT_FALSE@analyterix_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)  -lcodethorn
@ROSE_WITH_SPOT_TRUE@analyterix_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)  -lcodethorn
@ROSE_WITH_SPOT_TRUE@analyterix_LDFLAGS = -L$(SPOT_LIBRARY_PATH)
analyterix_CXXFLAGS = -fopenmp -Wall -O3
analyterix_SOURCES = \
  shared-src/ProgramStats.C \
  shared-src/ProgramStats.h \
  analyterix-src/DFAstAttributeConversion.h \
  analyterix-src/DFAstAttributeConversion.C \
  analyterix-src/DeadCodeAnalysis.C \
  analyterix-src/DeadCodeAnalysis.h \
  analyterix-src/FIPointerAnalysis.C \
  analyterix-src/FIPointerAnalysis.h \
  analyterix-src/RoseRDAnalysis.C \
  analyterix-src/RoseRDAnalysis.h \
  analyterix-src/TransformationOperators.h \
  analyterix-src/TransformationOperators.C \
  analyterix-src/analyterix.C

@ROSE_WITH_SPOT_FALSE@addressTakenAnalysis_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)  -lcodethorn -lboost_program_options

##############################################################
# TOOL: ADDRESSTAKENANALYSIS (for testing only)
##############################################################
@ROSE_WITH_SPOT_TRUE@addressTakenAnalysis_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)  -lcodethorn -lboost_program_options
@ROSE_WITH_SPOT_TRUE@addressTakenAnalysis_LDFLAGS = -L$(SPOT_LIBRARY_PATH)
addressTakenAnalysis_CXXFLAGS = -fopenmp -Wall -O3
addressTakenAnalysis_DEPENDENCIES = libcodethorn.la
REGRESSION_DATA_DIR = regressiondata
addressTakenAnalysis_SOURCES = \
  addressTakenAnalysisDriver.C


# obsolete since integration into ROSE
# explicit rules because of multiple bison parser
#matcherparser.C: $(srcdir)/matcherlexer.ll $(srcdir)/matcherparser.yy
#	$(YACC) $(YFLAGS) -d -p matcherparser $(srcdir)/matcherparser.yy # generates y.tab.h/c
#	$(LEX) $(LFLAGS) $(AM_LFLAGS) -Pmatcherparser $(srcdir)/matcherlexer.ll
#	mv y.tab.h matcherparser.h
#	cat lex.yy.c y.tab.c > matcherparser.C
#	rm lex.yy.c y.tab.c

# MS: matcher_demo
#matcher_demo_DEPENDENCIES=libcodethorn.la
#matcher_demo_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -lcodethorn
#matcher_demo__CXXFLAGS = -Wall -O3 -march=native -ftree-vectorize
#matcher_demo_SOURCES = matcher_demo.C
#BUILT_SOURCES =
#AM_YFLAGS =
#AM_LFLAGS =

#matcher_DEPENDENCIES=libcodethorn.la
#matcher_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) -lcodethorn
#matcher__CXXFLAGS = -Wall -O3 -march=native -ftree-vectorize
#matcher_SOURCES = matcher.C
cldemo_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
cldemo__CXXFLAGS = -Wall -O3 -march=native -ftree-vectorize
cldemo_SOURCES = cldemo.C
CHECK_DEFAULT_PASSING = check-codethorn-internal check-domain unit-test check-normalization check-equivalence check-par-cfg
CHECK_DEFAULT_FAILING = check-data-races check-deadcode

#CHECK_WITH_SPOT_ONLY=check-ltl check-ltl-driven
CHECK_WITH_SPOT_ONLY_PASSING = check-svcomp-witness check-ltl check-ltl-driven-reset-analyzer
CHECK_WITH_SPOT_PASSING = $(CHECK_DEFAULT_PASSING) $(CHECK_WITH_SPOT_ONLY_PASSING)

# MS: 1-6 is reasonable for V1.2
RERS = $(patsubst %,Problem%.log, $(shell seq 6))
all: all-am

.SUFFIXES:
.SUFFIXES: .C .c++ .lo .o .obj .y++
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign --ignore-deps projects/CodeThorn/src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign --ignore-deps projects/CodeThorn/src/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;
$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	 || test -f $$p1 \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

clean-noinstPROGRAMS:
	@list='$(noinst_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(MKDIR_P) '$(DESTDIR)$(libdir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(libdir)" || exit 1; \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(libdir)"; \
	}

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; \
	locs=`for p in $$list; do echo $$p; done | \
	      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \
	      sort -u`; \
	test -z "$$locs" || { \
	  echo rm -f $${locs}; \
	  rm -f $${locs}; \
	}
ltlthorn-lib/$(am__dirstamp):
	@$(MKDIR_P) ltlthorn-lib
	@: > ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libcodethorn_la-ParProOptions.lo:  \
	ltlthorn-lib/$(am__dirstamp)

libcodethorn.la: $(libcodethorn_la_OBJECTS) $(libcodethorn_la_DEPENDENCIES) $(EXTRA_libcodethorn_la_DEPENDENCIES) 
	$(AM_V_CXXLD)$(libcodethorn_la_LINK) -rpath $(libdir) $(libcodethorn_la_OBJECTS) $(libcodethorn_la_LIBADD) $(LIBS)
z3-prover-connection/$(am__dirstamp):
	@$(MKDIR_P) z3-prover-connection
	@: > z3-prover-connection/$(am__dirstamp)
z3-prover-connection/libltlthorn_la-ReachabilityAnalyzerZ3.lo:  \
	z3-prover-connection/$(am__dirstamp)
z3-prover-connection/libltlthorn_la-SSAGenerator.lo:  \
	z3-prover-connection/$(am__dirstamp)
z3-prover-connection/libltlthorn_la-PhiAttribute.lo:  \
	z3-prover-connection/$(am__dirstamp)
z3-prover-connection/libltlthorn_la-PhiStatement.lo:  \
	z3-prover-connection/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-CounterexampleAnalyzer.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-LtsminConnection.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-ParProAutomataGenerator.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-ParProAutomata.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-ParProAnalyzer.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-ParProEState.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-ParProExplorer.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-ParProLtlMiner.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-ParProSpotState.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-ParProSpotSuccIter.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-ParProSpotTgba.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-ParProTransitionGraph.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-PromelaCodeGenerator.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-Solver10.lo: ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-Solver11.lo: ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-Solver12.lo: ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-SpotConnection.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-SpotMiscellaneous.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-SpotRenameVisitor.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-SpotState.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-SpotSuccIter.lo:  \
	ltlthorn-lib/$(am__dirstamp)
ltlthorn-lib/libltlthorn_la-SpotTgba.lo: ltlthorn-lib/$(am__dirstamp)

libltlthorn.la: $(libltlthorn_la_OBJECTS) $(libltlthorn_la_DEPENDENCIES) $(EXTRA_libltlthorn_la_DEPENDENCIES) 
	$(AM_V_CXXLD)$(libltlthorn_la_LINK) -rpath $(libdir) $(libltlthorn_la_OBJECTS) $(libltlthorn_la_LIBADD) $(LIBS)

addressTakenAnalysis$(EXEEXT): $(addressTakenAnalysis_OBJECTS) $(addressTakenAnalysis_DEPENDENCIES) $(EXTRA_addressTakenAnalysis_DEPENDENCIES) 
	@rm -f addressTakenAnalysis$(EXEEXT)
	$(AM_V_CXXLD)$(addressTakenAnalysis_LINK) $(addressTakenAnalysis_OBJECTS) $(addressTakenAnalysis_LDADD) $(LIBS)
shared-src/$(am__dirstamp):
	@$(MKDIR_P) shared-src
	@: > shared-src/$(am__dirstamp)
shared-src/analyterix-ProgramStats.$(OBJEXT):  \
	shared-src/$(am__dirstamp)
analyterix-src/$(am__dirstamp):
	@$(MKDIR_P) analyterix-src
	@: > analyterix-src/$(am__dirstamp)
analyterix-src/analyterix-DFAstAttributeConversion.$(OBJEXT):  \
	analyterix-src/$(am__dirstamp)
analyterix-src/analyterix-DeadCodeAnalysis.$(OBJEXT):  \
	analyterix-src/$(am__dirstamp)
analyterix-src/analyterix-FIPointerAnalysis.$(OBJEXT):  \
	analyterix-src/$(am__dirstamp)
analyterix-src/analyterix-RoseRDAnalysis.$(OBJEXT):  \
	analyterix-src/$(am__dirstamp)
analyterix-src/analyterix-TransformationOperators.$(OBJEXT):  \
	analyterix-src/$(am__dirstamp)
analyterix-src/analyterix-analyterix.$(OBJEXT):  \
	analyterix-src/$(am__dirstamp)

analyterix$(EXEEXT): $(analyterix_OBJECTS) $(analyterix_DEPENDENCIES) $(EXTRA_analyterix_DEPENDENCIES) 
	@rm -f analyterix$(EXEEXT)
	$(AM_V_CXXLD)$(analyterix_LINK) $(analyterix_OBJECTS) $(analyterix_LDADD) $(LIBS)

cldemo$(EXEEXT): $(cldemo_OBJECTS) $(cldemo_DEPENDENCIES) $(EXTRA_cldemo_DEPENDENCIES) 
	@rm -f cldemo$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(cldemo_OBJECTS) $(cldemo_LDADD) $(LIBS)

codethorn$(EXEEXT): $(codethorn_OBJECTS) $(codethorn_DEPENDENCIES) $(EXTRA_codethorn_DEPENDENCIES) 
	@rm -f codethorn$(EXEEXT)
	$(AM_V_CXXLD)$(codethorn_LINK) $(codethorn_OBJECTS) $(codethorn_LDADD) $(LIBS)

equithorn$(EXEEXT): $(equithorn_OBJECTS) $(equithorn_DEPENDENCIES) $(EXTRA_equithorn_DEPENDENCIES) 
	@rm -f equithorn$(EXEEXT)
	$(AM_V_CXXLD)$(equithorn_LINK) $(equithorn_OBJECTS) $(equithorn_LDADD) $(LIBS)

ltlthorn$(EXEEXT): $(ltlthorn_OBJECTS) $(ltlthorn_DEPENDENCIES) $(EXTRA_ltlthorn_DEPENDENCIES) 
	@rm -f ltlthorn$(EXEEXT)
	$(AM_V_CXXLD)$(ltlthorn_LINK) $(ltlthorn_OBJECTS) $(ltlthorn_LDADD) $(LIBS)

memthorn$(EXEEXT): $(memthorn_OBJECTS) $(memthorn_DEPENDENCIES) $(EXTRA_memthorn_DEPENDENCIES) 
	@rm -f memthorn$(EXEEXT)
	$(AM_V_CXXLD)$(memthorn_LINK) $(memthorn_OBJECTS) $(memthorn_LDADD) $(LIBS)

parprothorn$(EXEEXT): $(parprothorn_OBJECTS) $(parprothorn_DEPENDENCIES) $(EXTRA_parprothorn_DEPENDENCIES) 
	@rm -f parprothorn$(EXEEXT)
	$(AM_V_CXXLD)$(parprothorn_LINK) $(parprothorn_OBJECTS) $(parprothorn_LDADD) $(LIBS)
shared-src/woodpecker-ProgramStats.$(OBJEXT):  \
	shared-src/$(am__dirstamp)
woodpecker-src/$(am__dirstamp):
	@$(MKDIR_P) woodpecker-src
	@: > woodpecker-src/$(am__dirstamp)
woodpecker-src/woodpecker-Threadification.$(OBJEXT):  \
	woodpecker-src/$(am__dirstamp)
woodpecker-src/woodpecker-TrivialInlining.$(OBJEXT):  \
	woodpecker-src/$(am__dirstamp)
woodpecker-src/woodpecker-DeadCodeElimination.$(OBJEXT):  \
	woodpecker-src/$(am__dirstamp)
woodpecker-src/woodpecker-ConversionFunctionsGenerator.$(OBJEXT):  \
	woodpecker-src/$(am__dirstamp)
woodpecker-src/woodpecker-woodpecker.$(OBJEXT):  \
	woodpecker-src/$(am__dirstamp)

woodpecker$(EXEEXT): $(woodpecker_OBJECTS) $(woodpecker_DEPENDENCIES) $(EXTRA_woodpecker_DEPENDENCIES) 
	@rm -f woodpecker$(EXEEXT)
	$(AM_V_CXXLD)$(woodpecker_LINK) $(woodpecker_OBJECTS) $(woodpecker_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)
	-rm -f analyterix-src/*.$(OBJEXT)
	-rm -f ltlthorn-lib/*.$(OBJEXT)
	-rm -f ltlthorn-lib/*.lo
	-rm -f shared-src/*.$(OBJEXT)
	-rm -f woodpecker-src/*.$(OBJEXT)
	-rm -f z3-prover-connection/*.$(OBJEXT)
	-rm -f z3-prover-connection/*.lo

distclean-compile:
	-rm -f *.tab.c

.C.o:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ $<

.C.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.C.lo:
	$(AM_V_CXX)$(LTCXXCOMPILE) -c -o $@ $<

libcodethorn_la-AbstractValue.lo: AbstractValue.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-AbstractValue.lo `test -f 'AbstractValue.C' || echo '$(srcdir)/'`AbstractValue.C

libcodethorn_la-addressTakenAnalysis.lo: addressTakenAnalysis.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-addressTakenAnalysis.lo `test -f 'addressTakenAnalysis.C' || echo '$(srcdir)/'`addressTakenAnalysis.C

libcodethorn_la-AliasAnalysis.lo: AliasAnalysis.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-AliasAnalysis.lo `test -f 'AliasAnalysis.C' || echo '$(srcdir)/'`AliasAnalysis.C

libcodethorn_la-AstUtility.lo: AstUtility.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-AstUtility.lo `test -f 'AstUtility.C' || echo '$(srcdir)/'`AstUtility.C

libcodethorn_la-AnalysisAstAnnotator.lo: AnalysisAstAnnotator.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-AnalysisAstAnnotator.lo `test -f 'AnalysisAstAnnotator.C' || echo '$(srcdir)/'`AnalysisAstAnnotator.C

libcodethorn_la-AnalysisReporting.lo: AnalysisReporting.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-AnalysisReporting.lo `test -f 'AnalysisReporting.C' || echo '$(srcdir)/'`AnalysisReporting.C

libcodethorn_la-Analyzer.lo: Analyzer.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-Analyzer.lo `test -f 'Analyzer.C' || echo '$(srcdir)/'`Analyzer.C

libcodethorn_la-ArrayElementAccessData.lo: ArrayElementAccessData.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-ArrayElementAccessData.lo `test -f 'ArrayElementAccessData.C' || echo '$(srcdir)/'`ArrayElementAccessData.C

libcodethorn_la-AstNodeInfo.lo: AstNodeInfo.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-AstNodeInfo.lo `test -f 'AstNodeInfo.C' || echo '$(srcdir)/'`AstNodeInfo.C

libcodethorn_la-AstTermRepresentation.lo: AstTermRepresentation.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-AstTermRepresentation.lo `test -f 'AstTermRepresentation.C' || echo '$(srcdir)/'`AstTermRepresentation.C

libcodethorn_la-BoolLattice.lo: BoolLattice.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-BoolLattice.lo `test -f 'BoolLattice.C' || echo '$(srcdir)/'`BoolLattice.C

libcodethorn_la-CallString.lo: CallString.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-CallString.lo `test -f 'CallString.C' || echo '$(srcdir)/'`CallString.C

libcodethorn_la-CFAnalysis.lo: CFAnalysis.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-CFAnalysis.lo `test -f 'CFAnalysis.C' || echo '$(srcdir)/'`CFAnalysis.C

libcodethorn_la-CodeThornLib.lo: CodeThornLib.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-CodeThornLib.lo `test -f 'CodeThornLib.C' || echo '$(srcdir)/'`CodeThornLib.C

libcodethorn_la-CommandLineOptions.lo: CommandLineOptions.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-CommandLineOptions.lo `test -f 'CommandLineOptions.C' || echo '$(srcdir)/'`CommandLineOptions.C

libcodethorn_la-ConstraintRepresentation.lo: ConstraintRepresentation.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-ConstraintRepresentation.lo `test -f 'ConstraintRepresentation.C' || echo '$(srcdir)/'`ConstraintRepresentation.C

libcodethorn_la-ContNodeAttribute.lo: ContNodeAttribute.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-ContNodeAttribute.lo `test -f 'ContNodeAttribute.C' || echo '$(srcdir)/'`ContNodeAttribute.C

libcodethorn_la-CounterexampleGenerator.lo: CounterexampleGenerator.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-CounterexampleGenerator.lo `test -f 'CounterexampleGenerator.C' || echo '$(srcdir)/'`CounterexampleGenerator.C

libcodethorn_la-CPAstAttribute.lo: CPAstAttribute.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-CPAstAttribute.lo `test -f 'CPAstAttribute.C' || echo '$(srcdir)/'`CPAstAttribute.C

libcodethorn_la-CppExprEvaluator.lo: CppExprEvaluator.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-CppExprEvaluator.lo `test -f 'CppExprEvaluator.C' || echo '$(srcdir)/'`CppExprEvaluator.C

libcodethorn_la-CppStdUtilities.lo: CppStdUtilities.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-CppStdUtilities.lo `test -f 'CppStdUtilities.C' || echo '$(srcdir)/'`CppStdUtilities.C

libcodethorn_la-CTIOLabeler.lo: CTIOLabeler.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-CTIOLabeler.lo `test -f 'CTIOLabeler.C' || echo '$(srcdir)/'`CTIOLabeler.C

libcodethorn_la-CtxCallStrings.lo: CtxCallStrings.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-CtxCallStrings.lo `test -f 'CtxCallStrings.C' || echo '$(srcdir)/'`CtxCallStrings.C

libcodethorn_la-CtxPrioritySolver.lo: CtxPrioritySolver.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-CtxPrioritySolver.lo `test -f 'CtxPrioritySolver.C' || echo '$(srcdir)/'`CtxPrioritySolver.C

libcodethorn_la-CtxReachabilityAnalysis.lo: CtxReachabilityAnalysis.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-CtxReachabilityAnalysis.lo `test -f 'CtxReachabilityAnalysis.C' || echo '$(srcdir)/'`CtxReachabilityAnalysis.C

libcodethorn_la-CtxReachabilityLattice.lo: CtxReachabilityLattice.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-CtxReachabilityLattice.lo `test -f 'CtxReachabilityLattice.C' || echo '$(srcdir)/'`CtxReachabilityLattice.C

libcodethorn_la-CtxSolver0.lo: CtxSolver0.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-CtxSolver0.lo `test -f 'CtxSolver0.C' || echo '$(srcdir)/'`CtxSolver0.C

libcodethorn_la-DataDependenceVisualizer.lo: DataDependenceVisualizer.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-DataDependenceVisualizer.lo `test -f 'DataDependenceVisualizer.C' || echo '$(srcdir)/'`DataDependenceVisualizer.C

libcodethorn_la-defUseQuery.lo: defUseQuery.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-defUseQuery.lo `test -f 'defUseQuery.C' || echo '$(srcdir)/'`defUseQuery.C

libcodethorn_la-DataRaceDetection.lo: DataRaceDetection.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-DataRaceDetection.lo `test -f 'DataRaceDetection.C' || echo '$(srcdir)/'`DataRaceDetection.C

libcodethorn_la-DFAnalysisBase.lo: DFAnalysisBase.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-DFAnalysisBase.lo `test -f 'DFAnalysisBase.C' || echo '$(srcdir)/'`DFAnalysisBase.C

libcodethorn_la-DFTransferFunctions.lo: DFTransferFunctions.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-DFTransferFunctions.lo `test -f 'DFTransferFunctions.C' || echo '$(srcdir)/'`DFTransferFunctions.C

libcodethorn_la-DotGraphCfgFrontend.lo: DotGraphCfgFrontend.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-DotGraphCfgFrontend.lo `test -f 'DotGraphCfgFrontend.C' || echo '$(srcdir)/'`DotGraphCfgFrontend.C

libcodethorn_la-EquivalenceChecking.lo: EquivalenceChecking.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-EquivalenceChecking.lo `test -f 'EquivalenceChecking.C' || echo '$(srcdir)/'`EquivalenceChecking.C

libcodethorn_la-EState.lo: EState.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-EState.lo `test -f 'EState.C' || echo '$(srcdir)/'`EState.C

libcodethorn_la-EStateAnalysis.lo: EStateAnalysis.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-EStateAnalysis.lo `test -f 'EStateAnalysis.C' || echo '$(srcdir)/'`EStateAnalysis.C

libcodethorn_la-EStateFactory.lo: EStateFactory.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-EStateFactory.lo `test -f 'EStateFactory.C' || echo '$(srcdir)/'`EStateFactory.C

libcodethorn_la-EStateTransferFunctions.lo: EStateTransferFunctions.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-EStateTransferFunctions.lo `test -f 'EStateTransferFunctions.C' || echo '$(srcdir)/'`EStateTransferFunctions.C

libcodethorn_la-EStateWorkList.lo: EStateWorkList.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-EStateWorkList.lo `test -f 'EStateWorkList.C' || echo '$(srcdir)/'`EStateWorkList.C

libcodethorn_la-EStatePriorityWorkList.lo: EStatePriorityWorkList.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-EStatePriorityWorkList.lo `test -f 'EStatePriorityWorkList.C' || echo '$(srcdir)/'`EStatePriorityWorkList.C

libcodethorn_la-ExprAnalyzer.lo: ExprAnalyzer.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-ExprAnalyzer.lo `test -f 'ExprAnalyzer.C' || echo '$(srcdir)/'`ExprAnalyzer.C

libcodethorn_la-FIConstAnalysis.lo: FIConstAnalysis.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-FIConstAnalysis.lo `test -f 'FIConstAnalysis.C' || echo '$(srcdir)/'`FIConstAnalysis.C

libcodethorn_la-Flow.lo: Flow.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-Flow.lo `test -f 'Flow.C' || echo '$(srcdir)/'`Flow.C

libcodethorn_la-FunctionCallMapping.lo: FunctionCallMapping.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-FunctionCallMapping.lo `test -f 'FunctionCallMapping.C' || echo '$(srcdir)/'`FunctionCallMapping.C

libcodethorn_la-FunctionCallMapping2.lo: FunctionCallMapping2.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-FunctionCallMapping2.lo `test -f 'FunctionCallMapping2.C' || echo '$(srcdir)/'`FunctionCallMapping2.C

libcodethorn_la-FunctionCallTarget.lo: FunctionCallTarget.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-FunctionCallTarget.lo `test -f 'FunctionCallTarget.C' || echo '$(srcdir)/'`FunctionCallTarget.C

libcodethorn_la-FunctionId.lo: FunctionId.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-FunctionId.lo `test -f 'FunctionId.C' || echo '$(srcdir)/'`FunctionId.C

libcodethorn_la-FunctionIdMapping.lo: FunctionIdMapping.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-FunctionIdMapping.lo `test -f 'FunctionIdMapping.C' || echo '$(srcdir)/'`FunctionIdMapping.C

libcodethorn_la-InputOutput.lo: InputOutput.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-InputOutput.lo `test -f 'InputOutput.C' || echo '$(srcdir)/'`InputOutput.C

libcodethorn_la-InternalChecks.lo: InternalChecks.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-InternalChecks.lo `test -f 'InternalChecks.C' || echo '$(srcdir)/'`InternalChecks.C

libcodethorn_la-IntervalAnalysis.lo: IntervalAnalysis.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-IntervalAnalysis.lo `test -f 'IntervalAnalysis.C' || echo '$(srcdir)/'`IntervalAnalysis.C

libcodethorn_la-IntervalAstAttribute.lo: IntervalAstAttribute.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-IntervalAstAttribute.lo `test -f 'IntervalAstAttribute.C' || echo '$(srcdir)/'`IntervalAstAttribute.C

libcodethorn_la-IntervalAstAttributeInterface.lo: IntervalAstAttributeInterface.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-IntervalAstAttributeInterface.lo `test -f 'IntervalAstAttributeInterface.C' || echo '$(srcdir)/'`IntervalAstAttributeInterface.C

libcodethorn_la-IntervalPropertyStateFactory.lo: IntervalPropertyStateFactory.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-IntervalPropertyStateFactory.lo `test -f 'IntervalPropertyStateFactory.C' || echo '$(srcdir)/'`IntervalPropertyStateFactory.C

libcodethorn_la-IntervalPropertyState.lo: IntervalPropertyState.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-IntervalPropertyState.lo `test -f 'IntervalPropertyState.C' || echo '$(srcdir)/'`IntervalPropertyState.C

libcodethorn_la-IntervalTransferFunctions.lo: IntervalTransferFunctions.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-IntervalTransferFunctions.lo `test -f 'IntervalTransferFunctions.C' || echo '$(srcdir)/'`IntervalTransferFunctions.C

libcodethorn_la-IOAnalyzer.lo: IOAnalyzer.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-IOAnalyzer.lo `test -f 'IOAnalyzer.C' || echo '$(srcdir)/'`IOAnalyzer.C

libcodethorn_la-IOSequenceGenerator.lo: IOSequenceGenerator.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-IOSequenceGenerator.lo `test -f 'IOSequenceGenerator.C' || echo '$(srcdir)/'`IOSequenceGenerator.C

libcodethorn_la-IOSolver.lo: IOSolver.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-IOSolver.lo `test -f 'IOSolver.C' || echo '$(srcdir)/'`IOSolver.C

libcodethorn_la-LanguageRestrictorCollection.lo: LanguageRestrictorCollection.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-LanguageRestrictorCollection.lo `test -f 'LanguageRestrictorCollection.C' || echo '$(srcdir)/'`LanguageRestrictorCollection.C

libcodethorn_la-LanguageRestrictor.lo: LanguageRestrictor.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-LanguageRestrictor.lo `test -f 'LanguageRestrictor.C' || echo '$(srcdir)/'`LanguageRestrictor.C

libcodethorn_la-Lattice.lo: Lattice.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-Lattice.lo `test -f 'Lattice.C' || echo '$(srcdir)/'`Lattice.C

libcodethorn_la-LoopInfo.lo: LoopInfo.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-LoopInfo.lo `test -f 'LoopInfo.C' || echo '$(srcdir)/'`LoopInfo.C

libcodethorn_la-CodeThornOptions.lo: CodeThornOptions.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-CodeThornOptions.lo `test -f 'CodeThornOptions.C' || echo '$(srcdir)/'`CodeThornOptions.C

libcodethorn_la-LTLOptions.lo: LTLOptions.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-LTLOptions.lo `test -f 'LTLOptions.C' || echo '$(srcdir)/'`LTLOptions.C

ltlthorn-lib/libcodethorn_la-ParProOptions.lo: ltlthorn-lib/ParProOptions.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libcodethorn_la-ParProOptions.lo `test -f 'ltlthorn-lib/ParProOptions.C' || echo '$(srcdir)/'`ltlthorn-lib/ParProOptions.C

libcodethorn_la-LVAnalysis.lo: LVAnalysis.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-LVAnalysis.lo `test -f 'LVAnalysis.C' || echo '$(srcdir)/'`LVAnalysis.C

libcodethorn_la-LVAstAttribute.lo: LVAstAttribute.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-LVAstAttribute.lo `test -f 'LVAstAttribute.C' || echo '$(srcdir)/'`LVAstAttribute.C

libcodethorn_la-LVAstAttributeInterface.lo: LVAstAttributeInterface.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-LVAstAttributeInterface.lo `test -f 'LVAstAttributeInterface.C' || echo '$(srcdir)/'`LVAstAttributeInterface.C

libcodethorn_la-LVLattice.lo: LVLattice.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-LVLattice.lo `test -f 'LVLattice.C' || echo '$(srcdir)/'`LVLattice.C

libcodethorn_la-LVTransferFunctions.lo: LVTransferFunctions.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-LVTransferFunctions.lo `test -f 'LVTransferFunctions.C' || echo '$(srcdir)/'`LVTransferFunctions.C

libcodethorn_la-MemAnalysis.lo: MemAnalysis.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-MemAnalysis.lo `test -f 'MemAnalysis.C' || echo '$(srcdir)/'`MemAnalysis.C

libcodethorn_la-MemTransferFunctions.lo: MemTransferFunctions.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-MemTransferFunctions.lo `test -f 'MemTransferFunctions.C' || echo '$(srcdir)/'`MemTransferFunctions.C

libcodethorn_la-MemPropertyState.lo: MemPropertyState.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-MemPropertyState.lo `test -f 'MemPropertyState.C' || echo '$(srcdir)/'`MemPropertyState.C

libcodethorn_la-MemPropertyStateFactory.lo: MemPropertyStateFactory.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-MemPropertyStateFactory.lo `test -f 'MemPropertyStateFactory.C' || echo '$(srcdir)/'`MemPropertyStateFactory.C

libcodethorn_la-Miscellaneous2.lo: Miscellaneous2.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-Miscellaneous2.lo `test -f 'Miscellaneous2.C' || echo '$(srcdir)/'`Miscellaneous2.C

libcodethorn_la-Miscellaneous.lo: Miscellaneous.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-Miscellaneous.lo `test -f 'Miscellaneous.C' || echo '$(srcdir)/'`Miscellaneous.C

libcodethorn_la-Normalization.lo: Normalization.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-Normalization.lo `test -f 'Normalization.C' || echo '$(srcdir)/'`Normalization.C

libcodethorn_la-NormalizationCxx.lo: NormalizationCxx.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-NormalizationCxx.lo `test -f 'NormalizationCxx.C' || echo '$(srcdir)/'`NormalizationCxx.C

libcodethorn_la-NormalizationInliner.lo: NormalizationInliner.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-NormalizationInliner.lo `test -f 'NormalizationInliner.C' || echo '$(srcdir)/'`NormalizationInliner.C

libcodethorn_la-NormalizationOp.lo: NormalizationOp.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-NormalizationOp.lo `test -f 'NormalizationOp.C' || echo '$(srcdir)/'`NormalizationOp.C

libcodethorn_la-NumberIntervalLattice.lo: NumberIntervalLattice.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-NumberIntervalLattice.lo `test -f 'NumberIntervalLattice.C' || echo '$(srcdir)/'`NumberIntervalLattice.C

libcodethorn_la-PASolver1.lo: PASolver1.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-PASolver1.lo `test -f 'PASolver1.C' || echo '$(srcdir)/'`PASolver1.C

libcodethorn_la-PointerAnalysisInterface.lo: PointerAnalysisInterface.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-PointerAnalysisInterface.lo `test -f 'PointerAnalysisInterface.C' || echo '$(srcdir)/'`PointerAnalysisInterface.C

libcodethorn_la-PragmaHandler.lo: PragmaHandler.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-PragmaHandler.lo `test -f 'PragmaHandler.C' || echo '$(srcdir)/'`PragmaHandler.C

libcodethorn_la-PredefinedSemanticFunctions.lo: PredefinedSemanticFunctions.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-PredefinedSemanticFunctions.lo `test -f 'PredefinedSemanticFunctions.C' || echo '$(srcdir)/'`PredefinedSemanticFunctions.C

libcodethorn_la-ProgramAbstractionLayer.lo: ProgramAbstractionLayer.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-ProgramAbstractionLayer.lo `test -f 'ProgramAbstractionLayer.C' || echo '$(srcdir)/'`ProgramAbstractionLayer.C

libcodethorn_la-ProgramInfo.lo: ProgramInfo.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-ProgramInfo.lo `test -f 'ProgramInfo.C' || echo '$(srcdir)/'`ProgramInfo.C

libcodethorn_la-ProgramLocationsReport.lo: ProgramLocationsReport.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-ProgramLocationsReport.lo `test -f 'ProgramLocationsReport.C' || echo '$(srcdir)/'`ProgramLocationsReport.C

libcodethorn_la-ProgramLocationsAnalysis.lo: ProgramLocationsAnalysis.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-ProgramLocationsAnalysis.lo `test -f 'ProgramLocationsAnalysis.C' || echo '$(srcdir)/'`ProgramLocationsAnalysis.C

libcodethorn_la-PropertyState.lo: PropertyState.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-PropertyState.lo `test -f 'PropertyState.C' || echo '$(srcdir)/'`PropertyState.C

libcodethorn_la-PropertyStateFactory.lo: PropertyStateFactory.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-PropertyStateFactory.lo `test -f 'PropertyStateFactory.C' || echo '$(srcdir)/'`PropertyStateFactory.C

libcodethorn_la-PropertyValueTable.lo: PropertyValueTable.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-PropertyValueTable.lo `test -f 'PropertyValueTable.C' || echo '$(srcdir)/'`PropertyValueTable.C

libcodethorn_la-PState.lo: PState.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-PState.lo `test -f 'PState.C' || echo '$(srcdir)/'`PState.C

libcodethorn_la-RDAnalysis.lo: RDAnalysis.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-RDAnalysis.lo `test -f 'RDAnalysis.C' || echo '$(srcdir)/'`RDAnalysis.C

libcodethorn_la-RDAstAttribute.lo: RDAstAttribute.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-RDAstAttribute.lo `test -f 'RDAstAttribute.C' || echo '$(srcdir)/'`RDAstAttribute.C

libcodethorn_la-RDLattice.lo: RDLattice.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-RDLattice.lo `test -f 'RDLattice.C' || echo '$(srcdir)/'`RDLattice.C

libcodethorn_la-RDTransferFunctions.lo: RDTransferFunctions.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-RDTransferFunctions.lo `test -f 'RDTransferFunctions.C' || echo '$(srcdir)/'`RDTransferFunctions.C

libcodethorn_la-ReachabilityAnalysis.lo: ReachabilityAnalysis.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-ReachabilityAnalysis.lo `test -f 'ReachabilityAnalysis.C' || echo '$(srcdir)/'`ReachabilityAnalysis.C

libcodethorn_la-ReadWriteAnalyzer.lo: ReadWriteAnalyzer.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-ReadWriteAnalyzer.lo `test -f 'ReadWriteAnalyzer.C' || echo '$(srcdir)/'`ReadWriteAnalyzer.C

libcodethorn_la-ReadWriteHistory.lo: ReadWriteHistory.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-ReadWriteHistory.lo `test -f 'ReadWriteHistory.C' || echo '$(srcdir)/'`ReadWriteHistory.C

libcodethorn_la-RERS_empty_specialization.lo: RERS_empty_specialization.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-RERS_empty_specialization.lo `test -f 'RERS_empty_specialization.C' || echo '$(srcdir)/'`RERS_empty_specialization.C

libcodethorn_la-RersCounterexample.lo: RersCounterexample.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-RersCounterexample.lo `test -f 'RersCounterexample.C' || echo '$(srcdir)/'`RersCounterexample.C

libcodethorn_la-RewriteStatistics.lo: RewriteStatistics.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-RewriteStatistics.lo `test -f 'RewriteStatistics.C' || echo '$(srcdir)/'`RewriteStatistics.C

libcodethorn_la-RewriteSystem.lo: RewriteSystem.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-RewriteSystem.lo `test -f 'RewriteSystem.C' || echo '$(srcdir)/'`RewriteSystem.C

libcodethorn_la-RWState.lo: RWState.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-RWState.lo `test -f 'RWState.C' || echo '$(srcdir)/'`RWState.C

libcodethorn_la-Solver5.lo: Solver5.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-Solver5.lo `test -f 'Solver5.C' || echo '$(srcdir)/'`Solver5.C

libcodethorn_la-Solver8.lo: Solver8.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-Solver8.lo `test -f 'Solver8.C' || echo '$(srcdir)/'`Solver8.C

libcodethorn_la-Solver.lo: Solver.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-Solver.lo `test -f 'Solver.C' || echo '$(srcdir)/'`Solver.C

libcodethorn_la-Specialization.lo: Specialization.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-Specialization.lo `test -f 'Specialization.C' || echo '$(srcdir)/'`Specialization.C

libcodethorn_la-SvcompWitness.lo: SvcompWitness.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-SvcompWitness.lo `test -f 'SvcompWitness.C' || echo '$(srcdir)/'`SvcompWitness.C

libcodethorn_la-TimeMeasurement.lo: TimeMeasurement.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-TimeMeasurement.lo `test -f 'TimeMeasurement.C' || echo '$(srcdir)/'`TimeMeasurement.C

libcodethorn_la-TopologicalSort.lo: TopologicalSort.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-TopologicalSort.lo `test -f 'TopologicalSort.C' || echo '$(srcdir)/'`TopologicalSort.C

libcodethorn_la-TransitionGraph.lo: TransitionGraph.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-TransitionGraph.lo `test -f 'TransitionGraph.C' || echo '$(srcdir)/'`TransitionGraph.C

libcodethorn_la-TransitionGraphReducer.lo: TransitionGraphReducer.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-TransitionGraphReducer.lo `test -f 'TransitionGraphReducer.C' || echo '$(srcdir)/'`TransitionGraphReducer.C

libcodethorn_la-TypeSizeMapping.lo: TypeSizeMapping.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-TypeSizeMapping.lo `test -f 'TypeSizeMapping.C' || echo '$(srcdir)/'`TypeSizeMapping.C

libcodethorn_la-UDAstAttribute.lo: UDAstAttribute.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-UDAstAttribute.lo `test -f 'UDAstAttribute.C' || echo '$(srcdir)/'`UDAstAttribute.C

libcodethorn_la-VariableIdUtils.lo: VariableIdUtils.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-VariableIdUtils.lo `test -f 'VariableIdUtils.C' || echo '$(srcdir)/'`VariableIdUtils.C

libcodethorn_la-VariableIdMappingExtended.lo: VariableIdMappingExtended.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-VariableIdMappingExtended.lo `test -f 'VariableIdMappingExtended.C' || echo '$(srcdir)/'`VariableIdMappingExtended.C

libcodethorn_la-VariableValueMonitor.lo: VariableValueMonitor.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-VariableValueMonitor.lo `test -f 'VariableValueMonitor.C' || echo '$(srcdir)/'`VariableValueMonitor.C

libcodethorn_la-Visualizer.lo: Visualizer.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libcodethorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libcodethorn_la-Visualizer.lo `test -f 'Visualizer.C' || echo '$(srcdir)/'`Visualizer.C

z3-prover-connection/libltlthorn_la-ReachabilityAnalyzerZ3.lo: z3-prover-connection/ReachabilityAnalyzerZ3.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o z3-prover-connection/libltlthorn_la-ReachabilityAnalyzerZ3.lo `test -f 'z3-prover-connection/ReachabilityAnalyzerZ3.C' || echo '$(srcdir)/'`z3-prover-connection/ReachabilityAnalyzerZ3.C

z3-prover-connection/libltlthorn_la-SSAGenerator.lo: z3-prover-connection/SSAGenerator.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o z3-prover-connection/libltlthorn_la-SSAGenerator.lo `test -f 'z3-prover-connection/SSAGenerator.C' || echo '$(srcdir)/'`z3-prover-connection/SSAGenerator.C

z3-prover-connection/libltlthorn_la-PhiAttribute.lo: z3-prover-connection/PhiAttribute.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o z3-prover-connection/libltlthorn_la-PhiAttribute.lo `test -f 'z3-prover-connection/PhiAttribute.C' || echo '$(srcdir)/'`z3-prover-connection/PhiAttribute.C

z3-prover-connection/libltlthorn_la-PhiStatement.lo: z3-prover-connection/PhiStatement.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o z3-prover-connection/libltlthorn_la-PhiStatement.lo `test -f 'z3-prover-connection/PhiStatement.C' || echo '$(srcdir)/'`z3-prover-connection/PhiStatement.C

ltlthorn-lib/libltlthorn_la-CounterexampleAnalyzer.lo: ltlthorn-lib/CounterexampleAnalyzer.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-CounterexampleAnalyzer.lo `test -f 'ltlthorn-lib/CounterexampleAnalyzer.C' || echo '$(srcdir)/'`ltlthorn-lib/CounterexampleAnalyzer.C

ltlthorn-lib/libltlthorn_la-LtsminConnection.lo: ltlthorn-lib/LtsminConnection.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-LtsminConnection.lo `test -f 'ltlthorn-lib/LtsminConnection.C' || echo '$(srcdir)/'`ltlthorn-lib/LtsminConnection.C

ltlthorn-lib/libltlthorn_la-ParProAutomataGenerator.lo: ltlthorn-lib/ParProAutomataGenerator.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-ParProAutomataGenerator.lo `test -f 'ltlthorn-lib/ParProAutomataGenerator.C' || echo '$(srcdir)/'`ltlthorn-lib/ParProAutomataGenerator.C

ltlthorn-lib/libltlthorn_la-ParProAutomata.lo: ltlthorn-lib/ParProAutomata.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-ParProAutomata.lo `test -f 'ltlthorn-lib/ParProAutomata.C' || echo '$(srcdir)/'`ltlthorn-lib/ParProAutomata.C

ltlthorn-lib/libltlthorn_la-ParProAnalyzer.lo: ltlthorn-lib/ParProAnalyzer.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-ParProAnalyzer.lo `test -f 'ltlthorn-lib/ParProAnalyzer.C' || echo '$(srcdir)/'`ltlthorn-lib/ParProAnalyzer.C

ltlthorn-lib/libltlthorn_la-ParProEState.lo: ltlthorn-lib/ParProEState.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-ParProEState.lo `test -f 'ltlthorn-lib/ParProEState.C' || echo '$(srcdir)/'`ltlthorn-lib/ParProEState.C

ltlthorn-lib/libltlthorn_la-ParProExplorer.lo: ltlthorn-lib/ParProExplorer.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-ParProExplorer.lo `test -f 'ltlthorn-lib/ParProExplorer.C' || echo '$(srcdir)/'`ltlthorn-lib/ParProExplorer.C

ltlthorn-lib/libltlthorn_la-ParProLtlMiner.lo: ltlthorn-lib/ParProLtlMiner.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-ParProLtlMiner.lo `test -f 'ltlthorn-lib/ParProLtlMiner.C' || echo '$(srcdir)/'`ltlthorn-lib/ParProLtlMiner.C

ltlthorn-lib/libltlthorn_la-ParProSpotState.lo: ltlthorn-lib/ParProSpotState.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-ParProSpotState.lo `test -f 'ltlthorn-lib/ParProSpotState.C' || echo '$(srcdir)/'`ltlthorn-lib/ParProSpotState.C

ltlthorn-lib/libltlthorn_la-ParProSpotSuccIter.lo: ltlthorn-lib/ParProSpotSuccIter.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-ParProSpotSuccIter.lo `test -f 'ltlthorn-lib/ParProSpotSuccIter.C' || echo '$(srcdir)/'`ltlthorn-lib/ParProSpotSuccIter.C

ltlthorn-lib/libltlthorn_la-ParProSpotTgba.lo: ltlthorn-lib/ParProSpotTgba.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-ParProSpotTgba.lo `test -f 'ltlthorn-lib/ParProSpotTgba.C' || echo '$(srcdir)/'`ltlthorn-lib/ParProSpotTgba.C

ltlthorn-lib/libltlthorn_la-ParProTransitionGraph.lo: ltlthorn-lib/ParProTransitionGraph.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-ParProTransitionGraph.lo `test -f 'ltlthorn-lib/ParProTransitionGraph.C' || echo '$(srcdir)/'`ltlthorn-lib/ParProTransitionGraph.C

ltlthorn-lib/libltlthorn_la-PromelaCodeGenerator.lo: ltlthorn-lib/PromelaCodeGenerator.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-PromelaCodeGenerator.lo `test -f 'ltlthorn-lib/PromelaCodeGenerator.C' || echo '$(srcdir)/'`ltlthorn-lib/PromelaCodeGenerator.C

ltlthorn-lib/libltlthorn_la-Solver10.lo: ltlthorn-lib/Solver10.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-Solver10.lo `test -f 'ltlthorn-lib/Solver10.C' || echo '$(srcdir)/'`ltlthorn-lib/Solver10.C

ltlthorn-lib/libltlthorn_la-Solver11.lo: ltlthorn-lib/Solver11.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-Solver11.lo `test -f 'ltlthorn-lib/Solver11.C' || echo '$(srcdir)/'`ltlthorn-lib/Solver11.C

ltlthorn-lib/libltlthorn_la-Solver12.lo: ltlthorn-lib/Solver12.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-Solver12.lo `test -f 'ltlthorn-lib/Solver12.C' || echo '$(srcdir)/'`ltlthorn-lib/Solver12.C

ltlthorn-lib/libltlthorn_la-SpotConnection.lo: ltlthorn-lib/SpotConnection.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-SpotConnection.lo `test -f 'ltlthorn-lib/SpotConnection.C' || echo '$(srcdir)/'`ltlthorn-lib/SpotConnection.C

ltlthorn-lib/libltlthorn_la-SpotMiscellaneous.lo: ltlthorn-lib/SpotMiscellaneous.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-SpotMiscellaneous.lo `test -f 'ltlthorn-lib/SpotMiscellaneous.C' || echo '$(srcdir)/'`ltlthorn-lib/SpotMiscellaneous.C

ltlthorn-lib/libltlthorn_la-SpotRenameVisitor.lo: ltlthorn-lib/SpotRenameVisitor.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-SpotRenameVisitor.lo `test -f 'ltlthorn-lib/SpotRenameVisitor.C' || echo '$(srcdir)/'`ltlthorn-lib/SpotRenameVisitor.C

ltlthorn-lib/libltlthorn_la-SpotState.lo: ltlthorn-lib/SpotState.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-SpotState.lo `test -f 'ltlthorn-lib/SpotState.C' || echo '$(srcdir)/'`ltlthorn-lib/SpotState.C

ltlthorn-lib/libltlthorn_la-SpotSuccIter.lo: ltlthorn-lib/SpotSuccIter.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-SpotSuccIter.lo `test -f 'ltlthorn-lib/SpotSuccIter.C' || echo '$(srcdir)/'`ltlthorn-lib/SpotSuccIter.C

ltlthorn-lib/libltlthorn_la-SpotTgba.lo: ltlthorn-lib/SpotTgba.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-lib/libltlthorn_la-SpotTgba.lo `test -f 'ltlthorn-lib/SpotTgba.C' || echo '$(srcdir)/'`ltlthorn-lib/SpotTgba.C

libltlthorn_la-LTLThornLib.lo: LTLThornLib.C
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libltlthorn_la_CXXFLAGS) $(CXXFLAGS) -c -o libltlthorn_la-LTLThornLib.lo `test -f 'LTLThornLib.C' || echo '$(srcdir)/'`LTLThornLib.C

addressTakenAnalysis-addressTakenAnalysisDriver.o: addressTakenAnalysisDriver.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(addressTakenAnalysis_CXXFLAGS) $(CXXFLAGS) -c -o addressTakenAnalysis-addressTakenAnalysisDriver.o `test -f 'addressTakenAnalysisDriver.C' || echo '$(srcdir)/'`addressTakenAnalysisDriver.C

addressTakenAnalysis-addressTakenAnalysisDriver.obj: addressTakenAnalysisDriver.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(addressTakenAnalysis_CXXFLAGS) $(CXXFLAGS) -c -o addressTakenAnalysis-addressTakenAnalysisDriver.obj `if test -f 'addressTakenAnalysisDriver.C'; then $(CYGPATH_W) 'addressTakenAnalysisDriver.C'; else $(CYGPATH_W) '$(srcdir)/addressTakenAnalysisDriver.C'; fi`

shared-src/analyterix-ProgramStats.o: shared-src/ProgramStats.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(analyterix_CXXFLAGS) $(CXXFLAGS) -c -o shared-src/analyterix-ProgramStats.o `test -f 'shared-src/ProgramStats.C' || echo '$(srcdir)/'`shared-src/ProgramStats.C

shared-src/analyterix-ProgramStats.obj: shared-src/ProgramStats.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(analyterix_CXXFLAGS) $(CXXFLAGS) -c -o shared-src/analyterix-ProgramStats.obj `if test -f 'shared-src/ProgramStats.C'; then $(CYGPATH_W) 'shared-src/ProgramStats.C'; else $(CYGPATH_W) '$(srcdir)/shared-src/ProgramStats.C'; fi`

analyterix-src/analyterix-DFAstAttributeConversion.o: analyterix-src/DFAstAttributeConversion.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(analyterix_CXXFLAGS) $(CXXFLAGS) -c -o analyterix-src/analyterix-DFAstAttributeConversion.o `test -f 'analyterix-src/DFAstAttributeConversion.C' || echo '$(srcdir)/'`analyterix-src/DFAstAttributeConversion.C

analyterix-src/analyterix-DFAstAttributeConversion.obj: analyterix-src/DFAstAttributeConversion.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(analyterix_CXXFLAGS) $(CXXFLAGS) -c -o analyterix-src/analyterix-DFAstAttributeConversion.obj `if test -f 'analyterix-src/DFAstAttributeConversion.C'; then $(CYGPATH_W) 'analyterix-src/DFAstAttributeConversion.C'; else $(CYGPATH_W) '$(srcdir)/analyterix-src/DFAstAttributeConversion.C'; fi`

analyterix-src/analyterix-DeadCodeAnalysis.o: analyterix-src/DeadCodeAnalysis.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(analyterix_CXXFLAGS) $(CXXFLAGS) -c -o analyterix-src/analyterix-DeadCodeAnalysis.o `test -f 'analyterix-src/DeadCodeAnalysis.C' || echo '$(srcdir)/'`analyterix-src/DeadCodeAnalysis.C

analyterix-src/analyterix-DeadCodeAnalysis.obj: analyterix-src/DeadCodeAnalysis.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(analyterix_CXXFLAGS) $(CXXFLAGS) -c -o analyterix-src/analyterix-DeadCodeAnalysis.obj `if test -f 'analyterix-src/DeadCodeAnalysis.C'; then $(CYGPATH_W) 'analyterix-src/DeadCodeAnalysis.C'; else $(CYGPATH_W) '$(srcdir)/analyterix-src/DeadCodeAnalysis.C'; fi`

analyterix-src/analyterix-FIPointerAnalysis.o: analyterix-src/FIPointerAnalysis.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(analyterix_CXXFLAGS) $(CXXFLAGS) -c -o analyterix-src/analyterix-FIPointerAnalysis.o `test -f 'analyterix-src/FIPointerAnalysis.C' || echo '$(srcdir)/'`analyterix-src/FIPointerAnalysis.C

analyterix-src/analyterix-FIPointerAnalysis.obj: analyterix-src/FIPointerAnalysis.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(analyterix_CXXFLAGS) $(CXXFLAGS) -c -o analyterix-src/analyterix-FIPointerAnalysis.obj `if test -f 'analyterix-src/FIPointerAnalysis.C'; then $(CYGPATH_W) 'analyterix-src/FIPointerAnalysis.C'; else $(CYGPATH_W) '$(srcdir)/analyterix-src/FIPointerAnalysis.C'; fi`

analyterix-src/analyterix-RoseRDAnalysis.o: analyterix-src/RoseRDAnalysis.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(analyterix_CXXFLAGS) $(CXXFLAGS) -c -o analyterix-src/analyterix-RoseRDAnalysis.o `test -f 'analyterix-src/RoseRDAnalysis.C' || echo '$(srcdir)/'`analyterix-src/RoseRDAnalysis.C

analyterix-src/analyterix-RoseRDAnalysis.obj: analyterix-src/RoseRDAnalysis.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(analyterix_CXXFLAGS) $(CXXFLAGS) -c -o analyterix-src/analyterix-RoseRDAnalysis.obj `if test -f 'analyterix-src/RoseRDAnalysis.C'; then $(CYGPATH_W) 'analyterix-src/RoseRDAnalysis.C'; else $(CYGPATH_W) '$(srcdir)/analyterix-src/RoseRDAnalysis.C'; fi`

analyterix-src/analyterix-TransformationOperators.o: analyterix-src/TransformationOperators.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(analyterix_CXXFLAGS) $(CXXFLAGS) -c -o analyterix-src/analyterix-TransformationOperators.o `test -f 'analyterix-src/TransformationOperators.C' || echo '$(srcdir)/'`analyterix-src/TransformationOperators.C

analyterix-src/analyterix-TransformationOperators.obj: analyterix-src/TransformationOperators.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(analyterix_CXXFLAGS) $(CXXFLAGS) -c -o analyterix-src/analyterix-TransformationOperators.obj `if test -f 'analyterix-src/TransformationOperators.C'; then $(CYGPATH_W) 'analyterix-src/TransformationOperators.C'; else $(CYGPATH_W) '$(srcdir)/analyterix-src/TransformationOperators.C'; fi`

analyterix-src/analyterix-analyterix.o: analyterix-src/analyterix.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(analyterix_CXXFLAGS) $(CXXFLAGS) -c -o analyterix-src/analyterix-analyterix.o `test -f 'analyterix-src/analyterix.C' || echo '$(srcdir)/'`analyterix-src/analyterix.C

analyterix-src/analyterix-analyterix.obj: analyterix-src/analyterix.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(analyterix_CXXFLAGS) $(CXXFLAGS) -c -o analyterix-src/analyterix-analyterix.obj `if test -f 'analyterix-src/analyterix.C'; then $(CYGPATH_W) 'analyterix-src/analyterix.C'; else $(CYGPATH_W) '$(srcdir)/analyterix-src/analyterix.C'; fi`

codethorn-codethorn-LTLParser.o: codethorn-LTLParser.c++
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(codethorn_CXXFLAGS) $(CXXFLAGS) -c -o codethorn-codethorn-LTLParser.o `test -f 'codethorn-LTLParser.c++' || echo '$(srcdir)/'`codethorn-LTLParser.c++

codethorn-codethorn-LTLParser.obj: codethorn-LTLParser.c++
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(codethorn_CXXFLAGS) $(CXXFLAGS) -c -o codethorn-codethorn-LTLParser.obj `if test -f 'codethorn-LTLParser.c++'; then $(CYGPATH_W) 'codethorn-LTLParser.c++'; else $(CYGPATH_W) '$(srcdir)/codethorn-LTLParser.c++'; fi`

codethorn-CodeThornCommandLineOptions.o: CodeThornCommandLineOptions.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(codethorn_CXXFLAGS) $(CXXFLAGS) -c -o codethorn-CodeThornCommandLineOptions.o `test -f 'CodeThornCommandLineOptions.C' || echo '$(srcdir)/'`CodeThornCommandLineOptions.C

codethorn-CodeThornCommandLineOptions.obj: CodeThornCommandLineOptions.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(codethorn_CXXFLAGS) $(CXXFLAGS) -c -o codethorn-CodeThornCommandLineOptions.obj `if test -f 'CodeThornCommandLineOptions.C'; then $(CYGPATH_W) 'CodeThornCommandLineOptions.C'; else $(CYGPATH_W) '$(srcdir)/CodeThornCommandLineOptions.C'; fi`

codethorn-codethorn.o: codethorn.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(codethorn_CXXFLAGS) $(CXXFLAGS) -c -o codethorn-codethorn.o `test -f 'codethorn.C' || echo '$(srcdir)/'`codethorn.C

codethorn-codethorn.obj: codethorn.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(codethorn_CXXFLAGS) $(CXXFLAGS) -c -o codethorn-codethorn.obj `if test -f 'codethorn.C'; then $(CYGPATH_W) 'codethorn.C'; else $(CYGPATH_W) '$(srcdir)/codethorn.C'; fi`

equithorn-equithorn-LTLParser.o: equithorn-LTLParser.c++
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(equithorn_CXXFLAGS) $(CXXFLAGS) -c -o equithorn-equithorn-LTLParser.o `test -f 'equithorn-LTLParser.c++' || echo '$(srcdir)/'`equithorn-LTLParser.c++

equithorn-equithorn-LTLParser.obj: equithorn-LTLParser.c++
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(equithorn_CXXFLAGS) $(CXXFLAGS) -c -o equithorn-equithorn-LTLParser.obj `if test -f 'equithorn-LTLParser.c++'; then $(CYGPATH_W) 'equithorn-LTLParser.c++'; else $(CYGPATH_W) '$(srcdir)/equithorn-LTLParser.c++'; fi`

equithorn-EquiThornCommandLineOptions.o: EquiThornCommandLineOptions.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(equithorn_CXXFLAGS) $(CXXFLAGS) -c -o equithorn-EquiThornCommandLineOptions.o `test -f 'EquiThornCommandLineOptions.C' || echo '$(srcdir)/'`EquiThornCommandLineOptions.C

equithorn-EquiThornCommandLineOptions.obj: EquiThornCommandLineOptions.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(equithorn_CXXFLAGS) $(CXXFLAGS) -c -o equithorn-EquiThornCommandLineOptions.obj `if test -f 'EquiThornCommandLineOptions.C'; then $(CYGPATH_W) 'EquiThornCommandLineOptions.C'; else $(CYGPATH_W) '$(srcdir)/EquiThornCommandLineOptions.C'; fi`

equithorn-equithorn.o: equithorn.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(equithorn_CXXFLAGS) $(CXXFLAGS) -c -o equithorn-equithorn.o `test -f 'equithorn.C' || echo '$(srcdir)/'`equithorn.C

equithorn-equithorn.obj: equithorn.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(equithorn_CXXFLAGS) $(CXXFLAGS) -c -o equithorn-equithorn.obj `if test -f 'equithorn.C'; then $(CYGPATH_W) 'equithorn.C'; else $(CYGPATH_W) '$(srcdir)/equithorn.C'; fi`

ltlthorn-ltlthorn-LTLParser.o: ltlthorn-LTLParser.c++
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(ltlthorn_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-ltlthorn-LTLParser.o `test -f 'ltlthorn-LTLParser.c++' || echo '$(srcdir)/'`ltlthorn-LTLParser.c++

ltlthorn-ltlthorn-LTLParser.obj: ltlthorn-LTLParser.c++
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(ltlthorn_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-ltlthorn-LTLParser.obj `if test -f 'ltlthorn-LTLParser.c++'; then $(CYGPATH_W) 'ltlthorn-LTLParser.c++'; else $(CYGPATH_W) '$(srcdir)/ltlthorn-LTLParser.c++'; fi`

ltlthorn-LTLThornCommandLineOptions.o: LTLThornCommandLineOptions.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(ltlthorn_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-LTLThornCommandLineOptions.o `test -f 'LTLThornCommandLineOptions.C' || echo '$(srcdir)/'`LTLThornCommandLineOptions.C

ltlthorn-LTLThornCommandLineOptions.obj: LTLThornCommandLineOptions.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(ltlthorn_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-LTLThornCommandLineOptions.obj `if test -f 'LTLThornCommandLineOptions.C'; then $(CYGPATH_W) 'LTLThornCommandLineOptions.C'; else $(CYGPATH_W) '$(srcdir)/LTLThornCommandLineOptions.C'; fi`

ltlthorn-ltlthorn.o: ltlthorn.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(ltlthorn_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-ltlthorn.o `test -f 'ltlthorn.C' || echo '$(srcdir)/'`ltlthorn.C

ltlthorn-ltlthorn.obj: ltlthorn.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(ltlthorn_CXXFLAGS) $(CXXFLAGS) -c -o ltlthorn-ltlthorn.obj `if test -f 'ltlthorn.C'; then $(CYGPATH_W) 'ltlthorn.C'; else $(CYGPATH_W) '$(srcdir)/ltlthorn.C'; fi`

memthorn-memthorn-LTLParser.o: memthorn-LTLParser.c++
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(memthorn_CXXFLAGS) $(CXXFLAGS) -c -o memthorn-memthorn-LTLParser.o `test -f 'memthorn-LTLParser.c++' || echo '$(srcdir)/'`memthorn-LTLParser.c++

memthorn-memthorn-LTLParser.obj: memthorn-LTLParser.c++
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(memthorn_CXXFLAGS) $(CXXFLAGS) -c -o memthorn-memthorn-LTLParser.obj `if test -f 'memthorn-LTLParser.c++'; then $(CYGPATH_W) 'memthorn-LTLParser.c++'; else $(CYGPATH_W) '$(srcdir)/memthorn-LTLParser.c++'; fi`

memthorn-MemThornCommandLineOptions.o: MemThornCommandLineOptions.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(memthorn_CXXFLAGS) $(CXXFLAGS) -c -o memthorn-MemThornCommandLineOptions.o `test -f 'MemThornCommandLineOptions.C' || echo '$(srcdir)/'`MemThornCommandLineOptions.C

memthorn-MemThornCommandLineOptions.obj: MemThornCommandLineOptions.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(memthorn_CXXFLAGS) $(CXXFLAGS) -c -o memthorn-MemThornCommandLineOptions.obj `if test -f 'MemThornCommandLineOptions.C'; then $(CYGPATH_W) 'MemThornCommandLineOptions.C'; else $(CYGPATH_W) '$(srcdir)/MemThornCommandLineOptions.C'; fi`

memthorn-memthorn.o: memthorn.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(memthorn_CXXFLAGS) $(CXXFLAGS) -c -o memthorn-memthorn.o `test -f 'memthorn.C' || echo '$(srcdir)/'`memthorn.C

memthorn-memthorn.obj: memthorn.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(memthorn_CXXFLAGS) $(CXXFLAGS) -c -o memthorn-memthorn.obj `if test -f 'memthorn.C'; then $(CYGPATH_W) 'memthorn.C'; else $(CYGPATH_W) '$(srcdir)/memthorn.C'; fi`

parprothorn-parprothorn-LTLParser.o: parprothorn-LTLParser.c++
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(parprothorn_CXXFLAGS) $(CXXFLAGS) -c -o parprothorn-parprothorn-LTLParser.o `test -f 'parprothorn-LTLParser.c++' || echo '$(srcdir)/'`parprothorn-LTLParser.c++

parprothorn-parprothorn-LTLParser.obj: parprothorn-LTLParser.c++
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(parprothorn_CXXFLAGS) $(CXXFLAGS) -c -o parprothorn-parprothorn-LTLParser.obj `if test -f 'parprothorn-LTLParser.c++'; then $(CYGPATH_W) 'parprothorn-LTLParser.c++'; else $(CYGPATH_W) '$(srcdir)/parprothorn-LTLParser.c++'; fi`

parprothorn-ParProThornCommandLineOptions.o: ParProThornCommandLineOptions.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(parprothorn_CXXFLAGS) $(CXXFLAGS) -c -o parprothorn-ParProThornCommandLineOptions.o `test -f 'ParProThornCommandLineOptions.C' || echo '$(srcdir)/'`ParProThornCommandLineOptions.C

parprothorn-ParProThornCommandLineOptions.obj: ParProThornCommandLineOptions.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(parprothorn_CXXFLAGS) $(CXXFLAGS) -c -o parprothorn-ParProThornCommandLineOptions.obj `if test -f 'ParProThornCommandLineOptions.C'; then $(CYGPATH_W) 'ParProThornCommandLineOptions.C'; else $(CYGPATH_W) '$(srcdir)/ParProThornCommandLineOptions.C'; fi`

parprothorn-parprothorn.o: parprothorn.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(parprothorn_CXXFLAGS) $(CXXFLAGS) -c -o parprothorn-parprothorn.o `test -f 'parprothorn.C' || echo '$(srcdir)/'`parprothorn.C

parprothorn-parprothorn.obj: parprothorn.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(parprothorn_CXXFLAGS) $(CXXFLAGS) -c -o parprothorn-parprothorn.obj `if test -f 'parprothorn.C'; then $(CYGPATH_W) 'parprothorn.C'; else $(CYGPATH_W) '$(srcdir)/parprothorn.C'; fi`

shared-src/woodpecker-ProgramStats.o: shared-src/ProgramStats.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(woodpecker_CXXFLAGS) $(CXXFLAGS) -c -o shared-src/woodpecker-ProgramStats.o `test -f 'shared-src/ProgramStats.C' || echo '$(srcdir)/'`shared-src/ProgramStats.C

shared-src/woodpecker-ProgramStats.obj: shared-src/ProgramStats.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(woodpecker_CXXFLAGS) $(CXXFLAGS) -c -o shared-src/woodpecker-ProgramStats.obj `if test -f 'shared-src/ProgramStats.C'; then $(CYGPATH_W) 'shared-src/ProgramStats.C'; else $(CYGPATH_W) '$(srcdir)/shared-src/ProgramStats.C'; fi`

woodpecker-src/woodpecker-Threadification.o: woodpecker-src/Threadification.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(woodpecker_CXXFLAGS) $(CXXFLAGS) -c -o woodpecker-src/woodpecker-Threadification.o `test -f 'woodpecker-src/Threadification.C' || echo '$(srcdir)/'`woodpecker-src/Threadification.C

woodpecker-src/woodpecker-Threadification.obj: woodpecker-src/Threadification.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(woodpecker_CXXFLAGS) $(CXXFLAGS) -c -o woodpecker-src/woodpecker-Threadification.obj `if test -f 'woodpecker-src/Threadification.C'; then $(CYGPATH_W) 'woodpecker-src/Threadification.C'; else $(CYGPATH_W) '$(srcdir)/woodpecker-src/Threadification.C'; fi`

woodpecker-src/woodpecker-TrivialInlining.o: woodpecker-src/TrivialInlining.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(woodpecker_CXXFLAGS) $(CXXFLAGS) -c -o woodpecker-src/woodpecker-TrivialInlining.o `test -f 'woodpecker-src/TrivialInlining.C' || echo '$(srcdir)/'`woodpecker-src/TrivialInlining.C

woodpecker-src/woodpecker-TrivialInlining.obj: woodpecker-src/TrivialInlining.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(woodpecker_CXXFLAGS) $(CXXFLAGS) -c -o woodpecker-src/woodpecker-TrivialInlining.obj `if test -f 'woodpecker-src/TrivialInlining.C'; then $(CYGPATH_W) 'woodpecker-src/TrivialInlining.C'; else $(CYGPATH_W) '$(srcdir)/woodpecker-src/TrivialInlining.C'; fi`

woodpecker-src/woodpecker-DeadCodeElimination.o: woodpecker-src/DeadCodeElimination.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(woodpecker_CXXFLAGS) $(CXXFLAGS) -c -o woodpecker-src/woodpecker-DeadCodeElimination.o `test -f 'woodpecker-src/DeadCodeElimination.C' || echo '$(srcdir)/'`woodpecker-src/DeadCodeElimination.C

woodpecker-src/woodpecker-DeadCodeElimination.obj: woodpecker-src/DeadCodeElimination.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(woodpecker_CXXFLAGS) $(CXXFLAGS) -c -o woodpecker-src/woodpecker-DeadCodeElimination.obj `if test -f 'woodpecker-src/DeadCodeElimination.C'; then $(CYGPATH_W) 'woodpecker-src/DeadCodeElimination.C'; else $(CYGPATH_W) '$(srcdir)/woodpecker-src/DeadCodeElimination.C'; fi`

woodpecker-src/woodpecker-ConversionFunctionsGenerator.o: woodpecker-src/ConversionFunctionsGenerator.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(woodpecker_CXXFLAGS) $(CXXFLAGS) -c -o woodpecker-src/woodpecker-ConversionFunctionsGenerator.o `test -f 'woodpecker-src/ConversionFunctionsGenerator.C' || echo '$(srcdir)/'`woodpecker-src/ConversionFunctionsGenerator.C

woodpecker-src/woodpecker-ConversionFunctionsGenerator.obj: woodpecker-src/ConversionFunctionsGenerator.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(woodpecker_CXXFLAGS) $(CXXFLAGS) -c -o woodpecker-src/woodpecker-ConversionFunctionsGenerator.obj `if test -f 'woodpecker-src/ConversionFunctionsGenerator.C'; then $(CYGPATH_W) 'woodpecker-src/ConversionFunctionsGenerator.C'; else $(CYGPATH_W) '$(srcdir)/woodpecker-src/ConversionFunctionsGenerator.C'; fi`

woodpecker-src/woodpecker-woodpecker.o: woodpecker-src/woodpecker.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(woodpecker_CXXFLAGS) $(CXXFLAGS) -c -o woodpecker-src/woodpecker-woodpecker.o `test -f 'woodpecker-src/woodpecker.C' || echo '$(srcdir)/'`woodpecker-src/woodpecker.C

woodpecker-src/woodpecker-woodpecker.obj: woodpecker-src/woodpecker.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(woodpecker_CXXFLAGS) $(CXXFLAGS) -c -o woodpecker-src/woodpecker-woodpecker.obj `if test -f 'woodpecker-src/woodpecker.C'; then $(CYGPATH_W) 'woodpecker-src/woodpecker.C'; else $(CYGPATH_W) '$(srcdir)/woodpecker-src/woodpecker.C'; fi`

.c++.o:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ $<

.c++.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.c++.lo:
	$(AM_V_CXX)$(LTCXXCOMPILE) -c -o $@ $<

.y++.c++:
	$(AM_V_YACC)$(am__skipyacc) $(SHELL) $(YLWRAP) $< y.tab.c $@ y.tab.h `echo $@ | $(am__yacc_c2h)` y.output $*.output -- $(YACCCOMPILE)

codethorn-LTLParser.c++: LTLParser.y++
	$(AM_V_YACC) \
	$(am__skipyacc) \
	$(SHELL) $(YLWRAP) `test -f 'LTLParser.y++' || echo '$(srcdir)/'`LTLParser.y++ y.tab.c codethorn-LTLParser.c++ y.tab.h `echo codethorn-LTLParser.c++ | $(am__yacc_c2h)` y.output codethorn-LTLParser.output -- $(YACC) $(codethorn_YFLAGS) $(YFLAGS)

equithorn-LTLParser.c++: LTLParser.y++
	$(AM_V_YACC) \
	$(am__skipyacc) \
	$(SHELL) $(YLWRAP) `test -f 'LTLParser.y++' || echo '$(srcdir)/'`LTLParser.y++ y.tab.c equithorn-LTLParser.c++ y.tab.h `echo equithorn-LTLParser.c++ | $(am__yacc_c2h)` y.output equithorn-LTLParser.output -- $(YACC) $(equithorn_YFLAGS) $(YFLAGS)

ltlthorn-LTLParser.c++: LTLParser.y++
	$(AM_V_YACC) \
	$(am__skipyacc) \
	$(SHELL) $(YLWRAP) `test -f 'LTLParser.y++' || echo '$(srcdir)/'`LTLParser.y++ y.tab.c ltlthorn-LTLParser.c++ y.tab.h `echo ltlthorn-LTLParser.c++ | $(am__yacc_c2h)` y.output ltlthorn-LTLParser.output -- $(YACC) $(ltlthorn_YFLAGS) $(YFLAGS)

memthorn-LTLParser.c++: LTLParser.y++
	$(AM_V_YACC) \
	$(am__skipyacc) \
	$(SHELL) $(YLWRAP) `test -f 'LTLParser.y++' || echo '$(srcdir)/'`LTLParser.y++ y.tab.c memthorn-LTLParser.c++ y.tab.h `echo memthorn-LTLParser.c++ | $(am__yacc_c2h)` y.output memthorn-LTLParser.output -- $(YACC) $(memthorn_YFLAGS) $(YFLAGS)

parprothorn-LTLParser.c++: LTLParser.y++
	$(AM_V_YACC) \
	$(am__skipyacc) \
	$(SHELL) $(YLWRAP) `test -f 'LTLParser.y++' || echo '$(srcdir)/'`LTLParser.y++ y.tab.c parprothorn-LTLParser.c++ y.tab.h `echo parprothorn-LTLParser.c++ | $(am__yacc_c2h)` y.output parprothorn-LTLParser.output -- $(YACC) $(parprothorn_YFLAGS) $(YFLAGS)

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
	-rm -rf ltlthorn-lib/.libs ltlthorn-lib/_libs
	-rm -rf z3-prover-connection/.libs z3-prover-connection/_libs
install-codethornincludeHEADERS: $(codethorninclude_HEADERS)
	@$(NORMAL_INSTALL)
	@list='$(codethorninclude_HEADERS)'; test -n "$(codethornincludedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(codethornincludedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(codethornincludedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(codethornincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(codethornincludedir)" || exit $$?; \
	done

uninstall-codethornincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(codethorninclude_HEADERS)'; test -n "$(codethornincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(codethornincludedir)'; $(am__uninstall_files_from_dir)

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-am
all-am: Makefile $(PROGRAMS) $(LTLIBRARIES) $(HEADERS)
install-binPROGRAMS: install-libLTLIBRARIES

installdirs:
	for dir in "$(DESTDIR)$(bindir)" "$(DESTDIR)$(libdir)" "$(DESTDIR)$(codethornincludedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-rm -f analyterix-src/$(am__dirstamp)
	-rm -f ltlthorn-lib/$(am__dirstamp)
	-rm -f shared-src/$(am__dirstamp)
	-rm -f woodpecker-src/$(am__dirstamp)
	-rm -f z3-prover-connection/$(am__dirstamp)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-rm -f codethorn-LTLParser.c++
	-rm -f equithorn-LTLParser.c++
	-rm -f ltlthorn-LTLParser.c++
	-rm -f memthorn-LTLParser.c++
	-rm -f parprothorn-LTLParser.c++
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool clean-local clean-noinstPROGRAMS mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-local distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-codethornincludeHEADERS

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS install-libLTLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-codethornincludeHEADERS \
	uninstall-libLTLIBRARIES

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am check-local clean \
	clean-binPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool clean-local clean-noinstPROGRAMS cscopelist-am \
	ctags ctags-am distclean distclean-compile distclean-generic \
	distclean-libtool distclean-local distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-codethornincludeHEADERS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-libLTLIBRARIES \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags tags-am uninstall \
	uninstall-am uninstall-binPROGRAMS \
	uninstall-codethornincludeHEADERS uninstall-libLTLIBRARIES

.PRECIOUS: Makefile


# JJW (2/25/2008): set a flag (only used when running ROSE applications) to
# have them run using the build tree rather than the install tree -- this is
# important for "make check" in an uninstalled copy of ROSE.
@USE_ROSE_IN_BUILD_TREE_VAR_TRUE@export ROSE_IN_BUILD_TREE=$(top_builddir)

@ROSE_HAVE_LIBZ3_TRUE@  # The previous "Z3_*" variables should have been named "ROSE_Z3_*" following the pattern in the rest of this
@ROSE_HAVE_LIBZ3_TRUE@  # makefile. I don't want to break code that uses the wrong names, so I'll just add the correct ones. [Matzke 2017-10-17]
@ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION_TRUE@  DOT_ASIS_LIB_DIR_ ?= /home/quinlan1/ROSE/ADA/dot_asis/dot_asis_library/lib

show-rpaths:
	@echo "ROSE_LIBS = $(ROSE_LIBS)"
	@echo "ROSE_RPATHS = $(ROSE_RPATHS)"
	@echo "ROSE_LINK_RPATHS = $(ROSE_LINK_RPATHS)"

clean-test-targets:
	rm -f $(TEST_TARGETS)
	rm -f $(TEST_TARGETS:.passed=.failed)
	rm -f $(TEST_TARGETS:.passed=.out)
	rm -f $(TEST_TARGETS:.passed=.err)

clean-local: clean-test-targets

.PHONY: clean-test-targets

roseonlytools: woodpecker analyterix

check-roseonlytools: check-flow-insensitive

.PHONY: codethorn-dist viz bsps test checkdemos

#MS: iterator_test not ingegrated yet
#iterator_test_SOURCES = iterator_test.C ShowSeq.h
#iterator_test_LDADD = -lrose libmatcher.la

#astinfo_DEPENDENCIES=
#astinfo_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
#astinfo_SOURCES = astinfo.C LineColInfo.C

#MS: ast_demo not integrated yet
#ast_demo_SOURCES = ast_demo.C TimeMeasurement.C TimeMeasurement.h  RoseAst.C RoseAst.h
#ast_demo_LFLAGS = -Pmatcher
#ast_demo_YFLAGS = -d -p matcher

check-astinfo: astinfo
	@echo "-------------------------------------------------------------"
	./astinfo --classname --edg:no_warnings $(srcdir)/tests/bugs/bug1.C
	@echo "-------------------------------------------------------------"
	./astinfo --linecol --edg:no_warnings $(srcdir)/tests/bugs/bug2.C
	@echo "-------------------------------------------------------------"
	./astinfo --linecol --edg:no_warnings $(srcdir)/tests/bugs/bug3.C
	@echo "-------------------------------------------------------------"

check-matcher-demo:
	./matcher_demo  --edg:no_warnings $(srcdir)/tests/basictest5.C < $(srcdir)/tests/matchexpressions/test1.mat
#	./ast_demo $(srcdir)/tests/basictest5.C

check-matcher:
	./matcher_demo  --edg:no_warnings $(srcdir)/tests/basictest5.C < $(srcdir)/tests/matchexpressions/test1.mat

@ROSE_WITH_SPOT_TRUE@check-local: $(CHECK_WITH_SPOT_PASSING)
@ROSE_WITH_SPOT_FALSE@check-local: $(CHECK_DEFAULT_PASSING)

check-default-failing: $(CHECK_DEFAULT_FAILING)

check-svcomp:
	@echo ================================================================
	@echo RUNNING VERIFICATION ERROR TESTS
	@echo ================================================================
	@./codethorn $(srcdir)/tests/svcomp/svcomp-test1.c
	@./codethorn $(srcdir)/tests/svcomp/svcomp-test2.c
	@./codethorn $(srcdir)/tests/svcomp/svcomp-test3.c
	@./codethorn $(srcdir)/tests/svcomp/svcomp-test4.c
	@./codethorn $(srcdir)/tests/svcomp/svcomp-test5.c
	@./codethorn $(srcdir)/tests/svcomp/svcomp-test6.c
	@./codethorn $(srcdir)/tests/svcomp/svcomp-test7.c

check-codethorn-internal:
	@echo ================================================================
	@echo RUNNING CODETHORN INTERNAL CHECKS
	@echo ================================================================
	@./codethorn --internal-checks

check-domain:
	$(srcdir)/scripts/runDomainTests $(srcdir)/tests

unit-test:
	$(srcdir)/scripts/runUnitTests $(srcdir)/tests

check-domain-old:
	@echo ================================================================
	@echo DOMAIN TESTS
	@echo ================================================================
	@echo
	@./codethorn --edg:no_warnings $(srcdir)/tests/domaintest1.C
	@./codethorn --edg:no_warnings $(srcdir)/tests/domaintest2.C
	@./codethorn --edg:no_warnings $(srcdir)/tests/struct1.C
	@./codethorn --edg:no_warnings $(srcdir)/tests/struct2.C
	@./codethorn --edg:no_warnings --stg-trace-file=trace.txt $(srcdir)/tests/struct3.C
	@./codethorn $(srcdir)/tests/intertest14.C --viz && dot -Tpdf transitiongraph1.dot -otransitiongraph1.pdf

check-data-races:
	@echo ================================================================
	@echo RUNNING DATA RACE VERIFICATION TESTS
	@echo ================================================================
	@./codethorn --data-race=yes  $(srcdir)/tests/datarace/anti_dep_1.yes.c --max-time=5 --solver=12
	@./codethorn --data-race=yes  $(srcdir)/tests/datarace/inner_only_1.no.c --max-time=5 --solver=12

#check-flow-insensitive: check-analyterix check-const-analysis
check-flow-insensitive: check-const-analysis

check-analyterix:
	@echo ================================================================
	@echo RUNNING STATIC PROGRAM ANALYSIS TESTS
	@echo ================================================================
	@$(srcdir)/scripts/runAnalyterixTests.sh "$(srcdir)" "$(top_builddir)/projects/CodeThorn/src" "$(clean-only)" "$(skip-analyterix)" # Run analyterix tests

check-const-analysis:
	@echo ================================================================
	@echo RUNNING CONST ANALYSIS CHECK
	@echo ================================================================
	@./woodpecker --csv-const-result=tmp.const.csv $(srcdir)/tests/Problem1401_opt.pp.c
	@diff tmp.const.csv $(srcdir)/tests/Problem1401_opt.pp.const.csv
	@rm tmp.const.csv

check-par-cfg:
	$(srcdir)/scripts/runParCfgTests $(srcdir)/tests/ompcfg

# outdated tests (but still passing)
check-ltl-old: check-ltl-rers-different-versions

# failing tests
#check-failing: 

# failing tests due to changes in domain
#check-ltl-failing: check-ltl-rers-array

# current tests all passing
check-ltl: check-ltl-start check-ltl-rers-timeout check-ltl-rers-arithmetic check-ltl-rers-loop-aware-sync check-ltl-rers-topify check-ltl-cegpra check-ltl-rers-array

check-ltl-start:
	@echo ================================================================
	@echo RUNNING LTL VERIFICATION TESTS
	@echo ================================================================
	@rm -f *.consistent

#run RERS Problem1 from 2012 in several versions and compare to previous results
check-ltl-rers-different-versions:
	@$(srcdir)/scripts/runRersTestsDifferentVersion $(srcdir) $(top_builddir)/projects/CodeThorn/src

#test the parallel analysis of RERS Problem1402 (4 threads, problem features arithmetic)
check-ltl-rers-arithmetic:
	@$(srcdir)/scripts/runRersArithmeticProblemTest $(srcdir) $(top_builddir)/projects/CodeThorn/src 

#test the analysis of RERS Problem1403 (which features arrays)
check-ltl-rers-array:
	@$(srcdir)/scripts/runRersArrayProblemTest $(srcdir) $(top_builddir)/projects/CodeThorn/src

#test the analysis of RERS Problem1403, abstracting from global variables after 10,000 transitions
check-ltl-rers-topify:
	@$(srcdir)/scripts/runRersTopifyTest $(srcdir) $(top_builddir)/projects/CodeThorn/src

# SKIPPED
#test the analysis of RERS Problem1603 while using up to 1GB of RAM up to and including the STG computation (4 threads)
check-ltl-rers-memory-bound:
	@$(srcdir)/scripts/runRersMemoryBoundTest $(srcdir) $(top_builddir)/projects/CodeThorn/src

#test the analysis of RERS Problem1402 and terminate after 5 seconds (4 threads)
check-ltl-rers-timeout:
	@$(srcdir)/scripts/runRersTimeoutTest $(srcdir) $(top_builddir)/projects/CodeThorn/src

#one test for the loop-aware-sync analysis (solver 12, ISoLA'16 paper)
check-ltl-rers-loop-aware-sync:
	@$(srcdir)/scripts/runRersLoopAwareSyncTest $(srcdir) $(top_builddir)/projects/CodeThorn/src

#run CEGPRA tests
check-ltl-cegpra:
	@$(srcdir)/scripts/run_tests_cegpra $(srcdir) $(top_builddir)/projects/CodeThorn/src

# not used
check-arrays:
	./codethorn $(srcdir)/tests/pointer/test48.cpp --explicit-arrays=yes --viz=yes && dot -Tpdf transitiongraph1.dot -otransitiongraph1.pdf

# not used
check-array-bounds: ./codethorn
	./codethorn --explicit-arrays=yes $(srcdir)/tests/arraybounds1.C

# seg-faults with --reset-analyzer=no. Works with --reset-analyzer=yes (see below)
check-ltl-driven:
	./codethorn $(srcdir)/tests/rers/Problem1401_opt.c --rersmode=yes --with-counterexamples=yes --counterexamples-with-output=yes --input-values="{1,2,3,4,5}" --ltl-in-alphabet="{1,2,3,4,5}" --ltl-out-alphabet="{18,19,20,21,22,23,24,25,26}" --check-ltl=$(srcdir)/tests/rers/constraints-RERS14-5.txt  --display-diff=100000 --ltl-driven --reset-analyzer=no

check-ltl-driven-reset-analyzer:
	./codethorn $(srcdir)/tests/rers/Problem1401_opt.c --rersmode=yes --with-counterexamples=yes --counterexamples-with-output=yes --input-values="{1,2,3,4,5}" --ltl-in-alphabet="{1,2,3,4,5}" --ltl-out-alphabet="{18,19,20,21,22,23,24,25,26}" --check-ltl=$(srcdir)/tests/rers/constraints-RERS14-5.txt  --display-diff=100000 --ltl-driven --reset-analyzer=yes

check-svcomp-witness:
	./codethorn $(srcdir)/tests/svcomp/eca-rers2012/Problem01_label15_false-unreach-call.c --svcomp-mode --input-values="{1,2,3,4,5,6}" --witness-file=toBeImplemented.witness --with-counterexamples

check-equivalence:
	@rm -f tmp.nsdump
	@echo ================================================================
	@echo RUNNING UPDATE SEQUENCE VERIFICATION TESTS
	@echo ================================================================
	@./equithorn --edg:no_warnings --normalize-all=off $(srcdir)/tests/jacobi-1d-imper_mod.c --dump-non-sorted=tmp.nsdump --rule-commutative-sort=no --abstraction-mode=0
#	@diff tmp.nsdump $(srcdir)/tests/jacobi-1d-imper_mod.c.nsdump
	@cat tmp.nsdump
	@rm -f tmp.nsdump

check-commandline-options: ./codethorn
	@echo ================================================================
	@echo RUNNING COMMAND LINE OPTION TESTS
	@echo ================================================================
	@./codethorn --cl-options="a bbb cc" $(srcdir)/tests/commandlineoptions1.C --viz
	@dot -Tpdf transitiongraph1.dot -otransitiongraph1.pdf

check-deadcode:
	$(srcdir)/scripts/runDeadCodeTests $(srcdir)/tests

check-normalization:
	$(srcdir)/scripts/runNormalizationTests $(srcdir)/tests
rers: $(RERS)

docs:
	cd "$(srcdir)" && doxygen

clean-local:
	rm -f *.dot
	rm -f *.ps
	rm -f *.jpg
	rm -f viz/*
	rm -f bsps/*
	rm -f *.consistent Problem*.[0-9].csv
	rm -f codethorn-LTLParser.c++
	rm -f tmp.nsdump
	rm -f rose_Problem1401_opt.pp.c
	rm -f Problem1401_assert_results_forcedtop_1000_n_bf.csv
	rm -f transitiongraph1.pdf
	rm -f transitiongraph2.pdf
	rm -f rose_NORM*.[Cc]
	rm -f LTLParser.c++
	rm -f *.cfg.dot # runParCfgTests
	rm -f a.out
	rm -rf ../docs/doxygen
	rm -f *.imout
	rm -f *.exe
	rm -f *.imout.check
	rm -Rf make_check_log_*
	rm -f *-LTLParser.c++

distclean-local: clean
	rm -f *.tgz
	rm -f *~
	rm -f codethornref

codethorn-dist:
	tar cvzf codethorn_$(MYDATE).tgz *.C *cpp *.h *.lxx *.yxx tests/*.C tests/*.c Makefile*

demo:
	$(srcdir)/demodir/rundemo.sh $(srcdir)/demodir $(top_builddir)/projects/CodeThorn

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
