# Script
#       variant2variantT.py
# is a python script of which replace all occurences of the old enum
# variant() with the new way of writing it variantT(). If there is any
# occurences of this outside a switch-statement, those will not be
# converted by this script.
#
# AUTHOR: Saebjornsen

import sys
import re, os


variantList = [
     "BitAttributeTag",
     "AttributeTag",
     "SupportTag",
     "T_CLASS",
     "T_MEMBERFUNCTION",
     "T_FUNCTION",
     "T_POINTER",
     "T_NAME",
     "TypeTag",
     "EXPR_INIT",
     "UNARY_EXPRESSION",
     "BINARY_EXPRESSION",
     "ValueExpTag",
     "ExpressionTag",
     "COMMENT_STMT",
     "CPP_DIRECTIVE_STMT",
     "CLASS_DECL_STMT",
     "CLASS_DEFN_STMT",
     "SCOPE_STMT",
     "FUNC_DECL_STMT",
     "DECL_STMT",
     "StatementTag",
     "FUNCTION_NAME",
     "CLASS_NAME",
     "SymbolTag",
     "LocatedNodeTag",
     "NodeTag",
     "SymbolTableTag",
     "InitializedNameTag",
     "NameTag",
     "PragmaTag",
     "ModifierNodesTag",
     "_File_InfoTag",
     "FileTag",
     "ProjectTag",
     "OptionsTag",
     "Unparse_InfoTag",
     "BaseClassTag",
     "FuncDecl_attrTag",
     "ClassDecl_attrTag",
     "T_TYPEDEF_SEQ",
     "T_FUNCTION_PARAMETER_TYPE_LIST",
     "T_UNKNOWN",
     "T_CHAR",
     "T_SIGNED_CHAR",
     "T_UNSIGNED_CHAR",
     "T_SHORT",
     "T_SIGNED_SHORT",
     "T_UNSIGNED_SHORT",
     "T_INT",
     "T_SIGNED_INT",
     "T_UNSIGNED_INT",
     "T_LONG",
     "T_SIGNED_LONG",
     "T_UNSIGNED_LONG",
     "T_VOID",
     "T_GLOBAL_VOID",
     "T_WCHAR",
     "T_FLOAT",
     "T_DOUBLE",
     "T_LONG_LONG",
     "T_UNSIGNED_LONG_LONG",
     "T_LONG_DOUBLE",
     "T_STRING",
     "T_BOOL",
     "T_COMPLEX",
     "T_DEFAULT",
     "T_MEMBER_POINTER",
     "T_REFERENCE",
     "T_TEMPLATE_INSTANTIATION",
     "T_ENUM",
     "T_TYPEDEF",
     "T_MODIFIER",
     "T_PARTIAL_FUNCTION",
     "T_ARRAY",
     "T_ELLIPSE",
     "UnknownMemberFunctionTag",
     "EXPR_LIST",
     "VAR_REF",
     "CLASSNAME_REF",
     "FUNCTION_REF",
     "MEMBER_FUNCTION_REF",
     "FUNC_CALL",
     "SIZEOF_OP",
     "TYPEID_OP",
     "EXPR_CONDITIONAL",
     "NEW_OP",
     "DELETE_OP",
     "THIS_NODE",
     "TYPE_REF",
     "AGGREGATE_INIT",
     "CONSTRUCTOR_INIT",
     "ASSIGN_INIT",
     "EXPRESSION_ROOT",
     "UNARY_MINUS_OP",
     "UNARY_ADD_OP",
     "NOT_OP",
     "DEREF_OP",
     "ADDRESS_OP",
     "MINUSMINUS_OP",
     "PLUSPLUS_OP",
     "BIT_COMPLEMENT_OP",
     "CAST_OP",
     "THROW_OP",
     "POINTST_OP",
     "RECORD_REF",
     "DOTSTAR_OP",
     "ARROWSTAR_OP",
     "EQ_OP",
     "LT_OP",
     "GT_OP",
     "NE_OP",
     "LE_OP",
     "GE_OP",
     "ADD_OP",
     "SUBT_OP",
     "MULT_OP",
     "DIV_OP",
     "INTEGER_DIV_OP",
     "MOD_OP",
     "AND_OP",
     "OR_OP",
     "BITXOR_OP",
     "BITAND_OP",
     "BITOR_OP",
     "COMMA_OP",
     "LSHIFT_OP",
     "RSHIFT_OP",
     "ARRAY_OP",
     "SCOPE_OP",
     "ASSIGN_OP",
     "PLUS_ASSIGN_OP",
     "MINUS_ASSIGN_OP",
     "AND_ASSIGN_OP",
     "IOR_ASSIGN_OP",
     "MULT_ASSIGN_OP",
     "DIV_ASSIGN_OP",
     "MOD_ASSIGN_OP",
     "XOR_ASSIGN_OP",
     "LSHIFT_ASSIGN_OP",
     "RSHIFT_ASSIGN_OP",
     "BOOL_VAL",
     "STRING_VAL",
     "SHORT_VAL",
     "CHAR_VAL",
     "UNSIGNED_CHAR_VAL",
     "WCHAR_VAL",
     "UNSIGNED_SHORT_VAL",
     "INT_VAL",
     "ENUM_VAL",
     "UNSIGNED_INT_VAL",
     "LONG_INT_VAL",
     "LONG_LONG_INT_VAL",
     "UNSIGNED_LONG_LONG_INT_VAL",
     "UNSIGNED_LONG_INT_VAL",
     "FLOAT_VAL",
     "DOUBLE_VAL",
     "LONG_DOUBLE_VAL",
     "FOR_STMT",
     "FOR_INIT_STMT",
     "CATCH_STATEMENT_SEQ",
     "FUNCTION_PARAMETER_LIST",
     "CTOR_INITIALIZER_LIST",
     "BASIC_BLOCK_STMT",
     "GLOBAL_STMT",
     "IF_STMT",
     "FUNC_DEFN_STMT",
     "WHILE_STMT",
     "DO_WHILE_STMT",
     "SWITCH_STMT",
     "CATCH_STMT",
     "MFUNC_DECL_STMT",
     "VAR_DECL_STMT",
     "VAR_DEFN_STMT",
     "ENUM_DECL_STMT",
     "ASM_STMT",
     "TYPEDEF_STMT",
     "TEMPLATE_DECL_STMT",
     "TEMPLATE_INST_DECL_STMT",
     "TEMPLATE_INST_DEFN_STMT",
     "FUNC_TBL_STMT",
     "EXPR_STMT",
     "LABEL_STMT",
     "CASE_STMT",
     "TRY_STMT",
     "DEFAULT_STMT",
     "BREAK_STMT",
     "CONTINUE_STMT",
     "RETURN_STMT",
     "GOTO_STMT",
     "SPAWN_STMT",
     "PRAGMA_STMT",
     "C_STYLE_COMMENT_STMT",
     "CXX_STYLE_COMMENT_STMT",
     "INCLUDE_DIRECTIVE_STMT",
     "DEFINE_DIRECTIVE_STMT",
     "UNDEF_DIRECTIVE_STMT",
     "IFDEF_DIRECTIVE_STMT",
     "IFNDEF_DIRECTIVE_STMT",
     "IF_DIRECTIVE_STMT",
     "ELSE_DIRECTIVE_STMT",
     "ELSEIF_DIRECTIVE_STMT",
     "ENDIF_DIRECTIVE_STMT",
     "LINE_DIRECTIVE_STMT",
     "ERROR_DIRECTIVE_STMT",
     "C_LINKAGE_START_STMT",
     "VARIABLE_NAME",
     "FUNCTYPE_NAME",
     "TEMPLATE_NAME",
     "TEMPLATE_INSTANTIATION_NAME",
     "ENUM_NAME",
     "FIELD_NAME",
     "TYPEDEF_NAME",
     "MEMBER_FUNC_NAME",
     "LABEL_NAME",
     "DEFAULT_NAME",
     "Cxx_Grammar_UNKNOWN_GRAMMAR",
     "Cxx_Grammar_LAST_TAG" ]
       
variantTList = [
"V_SgBitAttribute",
"V_SgAttribute",
"V_SgSupport",
"V_SgClassType",
"V_SgMemberFunctionType",
"V_SgFunctionType",
"V_SgPointerType",
"V_SgNamedType",
"V_SgType",
"V_SgInitializer",
"V_SgUnaryOp",
"V_SgBinaryOp",
"V_SgValueExp",
"V_SgExpression",
"V_SgCommentStatement",
"V_SgC_PreprocessorDirectiveStatement",
"V_SgClassDeclaration",
"V_SgClassDefinition",
"V_SgScopeStatement",
"V_SgFunctionDeclaration",
"V_SgDeclarationStatement",
"V_SgStatement",
"V_SgFunctionSymbol",
"V_SgClassSymbol",
"V_SgSymbol",
"V_SgLocatedNode",
"V_SgNode",
"V_SgSymbolTable",
"V_SgInitializedName",
"V_SgName",
"V_SgPragma",
"V_SgModifierNodes",
"V_Sg_File_Info",
"V_SgFile",
"V_SgProject",
"V_SgOptions",
"V_SgUnparse_Info",
"V_SgBaseClass",
"V_SgFuncDecl_attr",
"V_SgClassDecl_attr",
"V_SgTypedefSeq",
"V_SgFunctionParameterTypeList",
"V_SgTypeUnknown",
"V_SgTypeChar",
"V_SgTypeSignedChar",
"V_SgTypeUnsignedChar",
"V_SgTypeShort",
"V_SgTypeSignedShort",
"V_SgTypeUnsignedShort",
"V_SgTypeInt",
"V_SgTypeSignedInt",
"V_SgTypeUnsignedInt",
"V_SgTypeLong",
"V_SgTypeSignedLong",
"V_SgTypeUnsignedLong",
"V_SgTypeVoid",
"V_SgTypeGlobalVoid",
"V_SgTypeWchar",
"V_SgTypeFloat",
"V_SgTypeDouble",
"V_SgTypeLongLong",
"V_SgTypeUnsignedLongLong",
"V_SgTypeLongDouble",
"V_SgTypeString",
"V_SgTypeBool",
"V_SgComplex",
"V_SgTypeDefault",
"V_SgPointerMemberType",
"V_SgReferenceType",
"V_SgTemplateInstantiationType",
"V_SgEnumType",
"V_SgTypedefType",
"V_SgModifierType",
"V_SgPartialFunctionType",
"V_SgArrayType",
"V_SgTypeEllipse",
"V_SgUnknownMemberFunctionType",
"V_SgExprListExp",
"V_SgVarRefExp",
"V_SgClassNameRefExp",
"V_SgFunctionRefExp",
"V_SgMemberFunctionRefExp",
"V_SgFunctionCallExp",
"V_SgSizeOfOp",
"V_SgTypeIdOp",
"V_SgConditionalExp",
"V_SgNewExp",
"V_SgDeleteExp",
"V_SgThisExp",
"V_SgRefExp",
"V_SgAggregateInitializer",
"V_SgConstructorInitializer",
"V_SgAssignInitializer",
"V_SgExpressionRoot",
"V_SgMinusOp",
"V_SgUnaryAddOp",
"V_SgNotOp",
"V_SgPointerDerefExp",
"V_SgAddressOfOp",
"V_SgMinusMinusOp",
"V_SgPlusPlusOp",
"V_SgBitComplementOp",
"V_SgCastExp",
"V_SgThrowOp",
"V_SgArrowExp",
"V_SgDotExp",
"V_SgDotStarOp",
"V_SgArrowStarOp",
"V_SgEqualityOp",
"V_SgLessThanOp",
"V_SgGreaterThanOp",
"V_SgNotEqualOp",
"V_SgLessOrEqualOp",
"V_SgGreaterOrEqualOp",
"V_SgAddOp",
"V_SgSubtractOp",
"V_SgMultiplyOp",
"V_SgDivideOp",
"V_SgIntegerDivideOp",
"V_SgModOp",
"V_SgAndOp",
"V_SgOrOp",
"V_SgBitXorOp",
"V_SgBitAndOp",
"V_SgBitOrOp",
"V_SgCommaOpExp",
"V_SgLshiftOp",
"V_SgRshiftOp",
"V_SgPntrArrRefExp",
"V_SgScopeOp",
"V_SgAssignOp",
"V_SgPlusAssignOp",
"V_SgMinusAssignOp",
"V_SgAndAssignOp",
"V_SgIorAssignOp",
"V_SgMultAssignOp",
"V_SgDivAssignOp",
"V_SgModAssignOp",
"V_SgXorAssignOp",
"V_SgLshiftAssignOp",
"V_SgRshiftAssignOp",
"V_SgBoolValExp",
"V_SgStringVal",
"V_SgShortVal",
"V_SgCharVal",
"V_SgUnsignedCharVal",
"V_SgWcharVal",
"V_SgUnsignedShortVal",
"V_SgIntVal",
"V_SgEnumVal",
"V_SgUnsignedIntVal",
"V_SgLongIntVal",
"V_SgLongLongIntVal",
"V_SgUnsignedLongLongIntVal",
"V_SgUnsignedLongVal",
"V_SgFloatVal",
"V_SgDoubleVal",
"V_SgLongDoubleVal",
"V_SgForStatement",
"V_SgForInitStatement",
"V_SgCatchStatementSeq",
"V_SgFunctionParameterList",
"V_SgCtorInitializerList",
"V_SgBasicBlock",
"V_SgGlobal",
"V_SgIfStmt",
"V_SgFunctionDefinition",
"V_SgWhileStmt",
"V_SgDoWhileStmt",
"V_SgSwitchStatement",
"V_SgCatchOptionStmt",
"V_SgMemberFunctionDeclaration",
"V_SgVariableDeclaration",
"V_SgVariableDefinition",
"V_SgEnumDeclaration",
"V_SgAsmStmt",
"V_SgTypedefDeclaration",
"V_SgTemplateDeclaration",
"V_SgTemplateInstantiationDecl",
"V_SgTemplateInstantiationDefn",
"V_SgFunctionTypeTable",
"V_SgExprStatement",
"V_SgLabelStatement",
"V_SgCaseOptionStmt",
"V_SgTryStmt",
"V_SgDefaultOptionStmt",
"V_SgBreakStmt",
"V_SgContinueStmt",
"V_SgReturnStmt",
"V_SgGotoStatement",
"V_SgSpawnStmt",
"V_SgPragmaStatement",
"V_SgC_StyleCommentStatement",
"V_SgCxxStyleCommentStatement",
"V_SgIncludeDirectiveStatement",
"V_SgDefineDirectiveStatement",
"V_SgUndefDirectiveStatement",
"V_SgIfdefDirectiveStatement",
"V_SgIfndefDirectiveStatement",
"V_SgIfDirectiveStatement",
"V_SgElseDirectiveStatement",
"V_SgElseifDirectiveStatement",
"V_SgEndifDirectiveStatement",
"V_SgLineDirectiveStatement",
"V_SgErrorDirectiveStatement",
"V_SgClinkageStartStatement",
"V_SgVariableSymbol",
"V_SgFunctionTypeSymbol",
"V_SgTemplateSymbol",
"V_SgTemplateInstantiationSymbol",
"V_SgEnumSymbol",
"V_SgEnumFieldSymbol",
"V_SgTypedefSymbol",
"V_SgMemberFunctionSymbol",
"V_SgLabelSymbol",
"V_SgDefaultSymbol",
"V_SgNumVariants",
"V_SgNumVariants"
    ]


for file in sys.argv[1:]:
    print """Script for ROSE to replace old enum variant() with new enum variantT()."""
    print """ Filename: """ + file
    print """ WARNING!! This will replace your old file. Old file backuped in: """ + file + '.bak'
    os.system('cp ' + file + ' ' + file + '.bak')
    
    fileContent = open(file, 'r').read()
    
    # Finds all the cases of the enum variant() and replace them with the
    # equivalent enum of variantT()
    for ika in range(len(variantList)):
        pattern1 = re.compile('case\s*'+ variantList[ika] + '\s*:')
        fileContent = re.sub(pattern1, 'case ' + variantTList[ika] + ':', fileContent)

    output = open(file, 'w')
    output.write(fileContent)
    output.close()

    # Finds all switch statements treating the enum variant()
    lines = open(file, 'r').readlines()
    pattern2=re.compile('switch\s*' + '\('+ '\s*\w*\W*' + 'variant\s*' + '\('+ '\s*' + '\)\s*\)')

    for line in lines:
        match=pattern2.search(line)
        if match:
            f=re.sub('variant\s*\(\s*\)','variantT()',line)
            lindex=lines.index(line) 
            lines.remove(line)
            lines.insert(lindex,f) 
    write_file=open(file,'w') 

    # Stuffed all buffer lines back to the original file  
    for line in lines: 
        write_file.write(line)
    write_file.close()        

    
    
