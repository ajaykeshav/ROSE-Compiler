#!/usr/bin/perl

# Scans Linux header files to obtain a list of system call numbers and writes C++ code to stdout.

use strict;

sub syscalls {
  my($var,$file) = @_;
  if (open H, $file) {
    while (<H>) {
      if (my($name,$number) = /^#\s*define\s+__NR_(\w+)\s+(\d+)/) {
	print "    ${var}[$number] = \"$name\";\n";
      }
    }
    close H;
  }
}

print <<"EOF";
// -------------------- DO NOT EDIT --------------------
// This file is automatically generated and your changes
// may be overwritten.  See $0
// -------------------- DO NOT EDIT --------------------



#include <map>
#include <string>

std::map<int, std::string> linux32_syscalls, linux64_syscalls;
static bool init_syscall_maps();
bool syscalls_initialized = init_syscall_maps();

static bool init_syscall_maps()
{
EOF

syscalls "linux32_syscalls", "/usr/include/asm/unistd_32.h";
syscalls "linux64_syscalls", "/usr/include/asm/unistd_64.h";

print <<"EOF"

    return true;
}


// -------------------- DO NOT EDIT --------------------
// This file is automatically generated and your changes
// may be overwritten.  See $0
// -------------------- DO NOT EDIT --------------------
EOF

