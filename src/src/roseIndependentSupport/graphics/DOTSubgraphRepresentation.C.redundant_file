/******************************************************************************
 *
 * DOT Graph output, similar to DOTGraphRepresentation
 * also supports subgraph clustering - inc constrast to above it
 * does buffer the graph information until writeDotoutStream is 
 * called
 *
 *****************************************************************************/
// Author: Markus Schordan, Nils Thuerey
// $Id: DOTSubgraphRepresentation.C.redundant_file,v 1.1 2005/02/09 22:07:00 dquinlan Exp $

#ifndef DOTREPRESENTATION_C
#define DOTREPRESENTATION_C

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <iostream>
#include <fstream>
#include <sstream>
#include <typeinfo>
#include "DOTSubgraphRepresentation.h"



	
//-----------------------------------------------------------------------------
template<class NodeType>
DOTSubgraphRepresentation<NodeType>::DOTSubgraphRepresentation() {
  dotout=new ostringstream(); 
	mSubgraphIds = -1;
	mAutoSubgraphIds = false;
	mManualSubgraphIds = false;
}

template<class NodeType>
DOTSubgraphRepresentation<NodeType>::~DOTSubgraphRepresentation() {
  delete dotout;
}

template<class NodeType>
void DOTSubgraphRepresentation<NodeType>::clear() {
  delete dotout; 
  dotout=new ostringstream();
}



//-----------------------------------------------------------------------------
//! main output function of stored graph data
template<class NodeType>
void
DOTSubgraphRepresentation<NodeType>::writeDotoutStream( void ) {

	// default look for subgraphs
	char *defaultSubgraphStyle =  " color=lightgrey; ";

	// clear flags
	for(vector<NodeStorageType>::iterator i=mNodes.begin(); i!=mNodes.end(); i++) {
  	(*i).written = false;
	}
	for(vector<EdgeStorageType>::iterator i=mEdges.begin(); i!=mEdges.end(); i++) {
		(*i).written = false;
	}
	for(vector<NodeAdditionalStorage>::iterator i=mAdds.begin(); i!=mAdds.end(); i++) {
		(*i).written = false;
	}

	// write normally if there are no subgraphs
	if(mSubgraphNames.size() == 0) {
		// write nodes
		for(vector<NodeStorageType>::iterator i=mNodes.begin(); i!=mNodes.end(); i++) {
			(*dotout) << nodeName( (*i).node ) << "[label=\"" <<  (*i).label  << "\" " <<  (*i).option  << "];" << endl;
			(*i).written = true;
		}
		// write edges
		for(vector<EdgeStorageType>::iterator i=mEdges.begin(); i!=mEdges.end(); i++) {
			(*dotout) << nodeName( (*i).node1 )
				<< " -> "
				<< nodeName( (*i).node2 )
				<< "[label=\"" <<  (*i).label << "\" " <<  (*i).option  << " ];" << endl;
			(*i).written = true;
		}
		for(vector<NodeAdditionalStorage>::iterator i=mAdds.begin(); i!=mAdds.end(); i++) {
			(*dotout) << (*i).add;
			(*i).written = true;
		}
	} else {
		// print each subgraph, then other stuff
		for(map<int,string>::iterator i=mSubgraphNames.begin(); i!=mSubgraphNames.end(); i++) {
			int sid = (*i).first;

			// remove possible . from filenames
			string internalName = (*i).second;
			string options = mSubgraphOptions[ sid ];
			if(options.length() == 0) {
				options = defaultSubgraphStyle;
			}
			for(size_t l=0; l<internalName.length(); l++) {
				if(internalName[l]=='.') internalName[l] = '_';
			}

			(*dotout) << "subgraph " << "cluster_"<<sid <<" { " << endl;	
			(*dotout) << "label=\"" << (*i).second << "\"; " << endl;
			(*dotout) << options << endl;
			// write all components of this subgraph
			for(vector<NodeStorageType>::iterator i=mNodes.begin(); i!=mNodes.end(); i++) {
				if( (*i).subgraph == sid ) {
				(*dotout) << nodeName( (*i).node ) << " [label=\"" <<  (*i).label  << "\" " <<  (*i).option  << "];" << endl;
				(*i).written = true; }
			}
			for(vector<EdgeStorageType>::iterator i=mEdges.begin(); i!=mEdges.end(); i++) {
				// check if both nodes are in this subgraph
				bool isinthis = true;
				for(vector<NodeStorageType>::iterator j=mNodes.begin(); j!=mNodes.end(); j++) {
					if( (*j).node == (*i).node1 ) {
						if((*j).subgraph != sid) isinthis = false; } 
				}
				for(vector<NodeStorageType>::iterator j=mNodes.begin(); j!=mNodes.end(); j++) {
					if( (*j).node == (*i).node2 ) {
						if((*j).subgraph != sid) isinthis = false; } 
				}

				if( isinthis  ) {
				(*dotout) << nodeName( (*i).node1 )
					<< " -> "
					<< nodeName( (*i).node2 )
					<< " [label=\"" <<  (*i).label << "\" " <<  (*i).option  << " ];" << endl;
				(*i).written = true; }
			}
			for(vector<NodeAdditionalStorage>::iterator i=mAdds.begin(); i!=mAdds.end(); i++) {
				// check if the node is in this subgraph
				bool isinthis = true;
				for(vector<NodeStorageType>::iterator j=mNodes.begin(); j!=mNodes.end(); j++) {
					if( (*j).node == (*i).node ) {
						if((*j).subgraph != sid) isinthis = false; } 
				}
				if( isinthis  ) {
				(*dotout) << (*i).add;
				(*i).written = true; }
			}
			// end this subgraph
			(*dotout) << "} " << endl;
		}

		// write everything that wasnt written yet
		for(vector<NodeStorageType>::iterator i=mNodes.begin(); i!=mNodes.end(); i++) {
			if(!(*i).written) (*dotout) << nodeName( (*i).node ) << "[label=\"" <<  (*i).label  << "\" " <<  (*i).option  << "];" << endl;
		}
		// write edges
		for(vector<EdgeStorageType>::iterator i=mEdges.begin(); i!=mEdges.end(); i++) {
			if(!(*i).written) (*dotout) << nodeName( (*i).node1 )
				<< " -> "
				<< nodeName( (*i).node2 )
				<< "[label=\"" <<  (*i).label << "\" " <<  (*i).option  << " ];" << endl;
		}
		for(vector<NodeAdditionalStorage>::iterator i=mAdds.begin(); i!=mAdds.end(); i++) {
			if(!(*i).written) (*dotout) << (*i).add;
		}

		// subgraphs done
	}
}

//-----------------------------------------------------------------------------
template<class NodeType>
void
DOTSubgraphRepresentation<NodeType>::writeToFileAsGraph(string filename) {
	writeDotoutStream();
  string graphName="\"G"+filename+"\"";
  ofstream dotfile(filename.c_str());
   dotfile << graphStart(graphName) << (*dotout).str() << graphEnd();
}

template<class NodeType>
void
DOTSubgraphRepresentation<NodeType>::writeToFile(string filename) {
	writeDotoutStream();
  ofstream dotfile(filename.c_str());
  dotfile << (*dotout).str();
}

template<class NodeType>
string
DOTSubgraphRepresentation<NodeType>::graphStart(string graphName) {
  return "digraph " + graphName + " {\n";
}

template<class NodeType>
string
DOTSubgraphRepresentation<NodeType>::graphEnd() {
  return "}\n";
}

template<class NodeType>
void 
DOTSubgraphRepresentation<NodeType>::addNode(NodeType node, string nodelabel, string option) {
	addNode(node,nodelabel,option, -1);
}

template<class NodeType>
void 
DOTSubgraphRepresentation<NodeType>::addNode(NodeType node, string nodelabel, string option, int subgraph) {
	NodeStorageType sn;
	sn.node = node;
	sn.label = nodelabel;
	sn.option = option;
	sn.subgraph = subgraph;
	mNodes.push_back( sn );
	return;
}

template<class NodeType>
void DOTSubgraphRepresentation<NodeType>::
addEdge(NodeType node1, TraceType downtrace, TraceType uptrace, string edgelabel, NodeType node2, string option) {
	EdgeStorageType edge;
	edge.node1 = node1;
	edge.node2 = node2;
	ostringstream strs = downtrace << ":" << uptrace << ":"<< edgelabel;
	edge.label = strs.str();
	string diropt(" dir=both ");
	edge.option = option + diropt;
	mEdges.push_back(edge);
	return;
}
 
// for edges to revisited nodes (there is no uptrace)
template<class NodeType>
void DOTSubgraphRepresentation<NodeType>::
addEdge(NodeType node1, TraceType downtrace, string edgelabel, NodeType node2, string option) {
	EdgeStorageType edge;
	edge.node1 = node1;
	edge.node2 = node2;
	ostringstream strs = downtrace << ":" << edgelabel;
	edge.label = strs.str();
	string diropt(" arrowhead=odot ");
	edge.option = option + diropt;
	mEdges.push_back(edge);
	return;
}
 
// for edges to revisited nodes (there is no uptrace)
template<class NodeType>
void DOTSubgraphRepresentation<NodeType>::
addEdge(NodeType node1, string edgelabel, NodeType node2, string option) {
	EdgeStorageType edge;
	edge.node1 = node1;
	edge.node2 = node2;
	edge.label = edgelabel;
	edge.option = option;
	mEdges.push_back(edge);
	return;
}

// for edges to revisited nodes (there is no uptrace)
template<class NodeType>
void DOTSubgraphRepresentation<NodeType>::
addEdge(NodeType node1, NodeType node2, string option) {
  addEdge(node1,"",node2,option);
}
 
template<class NodeType>
void DOTSubgraphRepresentation<NodeType>::
addNullValue(NodeType node, string nodelabel, string edgelabel, string option) {
	return;
  // a null value is represented by an edge to a diamond node, with the variable name as edge label
  // edge
  (*dotout) << nodeName(node)
	    << " -> "
	    << nullNodeName(node,edgelabel)
	    << "[label=\"" << edgelabel << "\" " << "dir=none "<< option << "];" << endl;
  // node
  (*dotout) << nullNodeName(node,edgelabel)
	    << "[label=\"" << nodelabel << "\" shape=diamond "<< option <<"];" << endl;
}

template<class NodeType>
void DOTSubgraphRepresentation<NodeType>::
addNullValue(NodeType node, TraceType trace, string varname, string option) {
	NodeAdditionalStorage add;
	add.node = node;
	ostringstream strs;
  // a null value is represented by an edge to a diamond node, with the variable name as edge label
  // edge
  (strs) << "n_" << node
	    << " -> "
	    << "n_" << node << "__" << varname << "__null"
	    << "[label=\"" << trace << ":" << varname << "\" " << "dir=none "<< option << "];" << endl;
  // node
  (strs) << "n_" << node << "__" << varname << "__null"
	    << "[label=\""<< trace << ":\" shape=diamond "<< option <<"];" << endl;
	add.add = strs.str();
	mAdds.push_back( add );
	return;
}
 
template<class NodeType>
void DOTSubgraphRepresentation<NodeType>::
addEmptyContainer(NodeType node, TraceType trace, string varname, string option) {
	NodeAdditionalStorage add;
	add.node = node;
	ostringstream strs;
  (strs) << "n_" << node // node: holding null-reference to STL container, using [] to represent container-reference 
	    << " -> "
	    << "n_" << node << "__" << varname << "__null"
	    << "["<< "label=\"" << trace << ":" << varname << "[]\"" << " dir=none ];" << endl;
  (strs) << "n_" << node << "__" << varname << "__null"
	    << "[label=\"\" shape=diamond ];" << endl; // dot-null node
	add.add = strs.str();
	mAdds.push_back( add );
	return;
}

template<class NodeType>
string DOTSubgraphRepresentation<NodeType>::
containerEdgeLabel(string containerVarName, ContainerIndexType count) {
  ostringstream s;
  s << containerVarName << "[" << count << "]";
  return s.str();
}

template<class NodeType>
string DOTSubgraphRepresentation<NodeType>::traceFormat(TraceType td, TraceType bu) {
  ostringstream ss;
  ss << td << ":" << bu;
  return ss.str();
}

template<class NodeType>
string DOTSubgraphRepresentation<NodeType>::traceFormat(TraceType tdPos, TraceType buPos, TraceType tdCount, TraceType buCount) {
  ostringstream ss;
  ss << tdPos << "(" << tdCount << "): " << buPos << "(" << buCount << ")";
  return ss.str();
}

template<class NodeType>
string DOTSubgraphRepresentation<NodeType>::traceFormat(TraceType tracepos) {
  ostringstream ss;
  ss << tracepos;
  return ss.str();
}

template<class NodeType>
string DOTSubgraphRepresentation<NodeType>::nonQuotedNodeName(NodeType node) {
  ostringstream ss;
  ss << node;
  return ss.str();
}

template<class NodeType>
string DOTSubgraphRepresentation<NodeType>::nodeName(NodeType node) {
  return "\"" + nonQuotedNodeName(node) + "\"";

}

template<class NodeType>
string DOTSubgraphRepresentation<NodeType>::nullNodeName(NodeType node, string extention) {
  return "\""+ nonQuotedNodeName(node) + "__" + extention + "__null\"";
}

// add new subgraph, returns id of the subgraph
template<class NodeType>
int DOTSubgraphRepresentation<NodeType>::addSubgraph(string name)
{
	assert(!mManualSubgraphIds);
	mAutoSubgraphIds = true;
	mSubgraphIds++;
	mSubgraphNames[ mSubgraphIds ] = name;
	return mSubgraphIds;	
}

// add new subgraph, manual id assignment
template<class NodeType>
int DOTSubgraphRepresentation<NodeType>::addSubgraph(int id, string name, string opt = "") 
{ 
	assert(!mAutoSubgraphIds);
	mManualSubgraphIds=true; 
	mSubgraphNames[id] = name; 
	mSubgraphOptions[id] = opt; 
	return id;
};

#endif
