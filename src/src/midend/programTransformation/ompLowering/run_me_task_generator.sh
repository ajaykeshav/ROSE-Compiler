#!/bin/bash
# A code generator to generate multiple instances of run_me ()
# which glues the XOMP runtime library and Fortran 77 outlined functions

# Liao 12/13/2010

# max number of subroutine parameters
# this number should be the same value as MAX_OUTLINED_FUNC_PARAMETER_COUNT
# from libxomp.h

MAX_PARAMETER_COUNT=256
echo "/* This file is automatically generated from $0 "
echo " * Maximum number of subroutine parameters is $MAX_PARAMETER_COUNT "
echo " * To regenerate run_me_task_defs.inc, type $0 > run_me_task_defs.inc */"

for ((c=1; c<=$MAX_PARAMETER_COUNT; c++))
do
  echo "static void run_me_task_$c (void*);"
  echo "void run_me_task_$c (void * data)"
  echo "{"
  echo "  typedef void (*FUNC_P)("
  for ((d=1; d<=$c;d++ ))
  do
    if [ $d -ne $c ] ; then
      echo "              void *,"
    else
      echo "              void *);"
    fi
  done  
  echo "  FUNC_P func;"
#  echo "  func =(FUNC_P) (((void**)data)[0]);"
  echo "  int offset =0 ;"

  echo "  memcpy (&func, data, sizeof(FUNC_P));"
  echo "  offset +=  sizeof(FUNC_P);"
  echo "  char * p[$c];"

  echo "  int i;"
  echo "  // Decode the remaining of void* data to be individual parameters one by one"
  echo "  for (i=0; i<$c; i++)"
  echo "  {"
  echo "     // 1. Decode the pass-by-value flag" 
  echo "     bool bValue;"
  echo "     memcpy(&bValue, &(((char*)data)[offset]), sizeof(bool)); // we use 1 byte to store the by-value flag"
  echo "     offset+= sizeof(bool);"
    
  echo "     // 2. Decode the size of the parameter"
  echo "     int v_size; "
  echo "     memcpy (&v_size, &(((char*)data)[offset]),sizeof(int)); // we use 4 byte to store the size "
  echo "     offset+= sizeof(int);"
  echo "     "
  echo "     // 3. Copy the address/value"
  echo "     if (bValue)"
  echo "     {// Must allocate memory to copy value parameter"
  echo "       p[i] = malloc (v_size); "
  echo "       if (p[i] == NULL) printf (\"Fatal error in xomp, run_me_task_(). Cannot allocate memory for a value parameter!\\n \");"
  echo "       memcpy (p[i], &( ((char*)data)[offset]), v_size);"
  echo "     }  "
  echo "     else"
  echo "     {"
  echo "       // copy address"
  echo "       // No allocation is needed for address parameter"
  echo "       assert (v_size == sizeof (void*));"
  echo "       memcpy (&(p[i]), &( ((char*)data)[offset]), v_size);"
  echo "     }"
  echo "     offset += sizeof(v_size);"
  echo "    "
  echo "   } // end for loop"

# call the function-------
  TTT=""
  let TTT+="$c-1"
#  echo $TTT
  echo "  func("
  for ((e=0; e<$c;e++ ))
  do
    if [ $e -ne $TTT ] ; then
      echo "              p[$e],"
    else
      echo "              p[$e]);"
    fi

  done  
  echo "}"

done  
