m4trace:/usr/share/aclocal-1.16/amversion.m4:14: -1- AC_DEFUN([AM_AUTOMAKE_VERSION], [am__api_version='1.16'
dnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to
dnl require some minimum version.  Point them to the right macro.
m4_if([$1], [1.16.2], [],
      [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl
])
m4trace:/usr/share/aclocal-1.16/amversion.m4:33: -1- AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION], [AM_AUTOMAKE_VERSION([1.16.2])dnl
m4_ifndef([AC_AUTOCONF_VERSION],
  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl
_AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])
m4trace:/usr/share/aclocal-1.16/auxdir.m4:47: -1- AC_DEFUN([AM_AUX_DIR_EXPAND], [AC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl
# Expand $ac_aux_dir to an absolute path.
am_aux_dir=`cd "$ac_aux_dir" && pwd`
])
m4trace:/usr/share/aclocal-1.16/cond-if.m4:23: -1- AC_DEFUN([AM_COND_IF], [m4_ifndef([_AM_COND_VALUE_$1],
	   [m4_fatal([$0: no such condition "$1"])])dnl
_AM_COND_IF([$1])dnl
if test -z "$$1_TRUE"; then :
  m4_n([$2])[]dnl
m4_ifval([$3],
[_AM_COND_ELSE([$1])dnl
else
  $3
])dnl
_AM_COND_ENDIF([$1])dnl
fi[]dnl
])
m4trace:/usr/share/aclocal-1.16/cond.m4:12: -1- AC_DEFUN([AM_CONDITIONAL], [AC_PREREQ([2.52])dnl
 m4_if([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],
       [$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl
AC_SUBST([$1_TRUE])dnl
AC_SUBST([$1_FALSE])dnl
_AM_SUBST_NOTMAKE([$1_TRUE])dnl
_AM_SUBST_NOTMAKE([$1_FALSE])dnl
m4_define([_AM_COND_VALUE_$1], [$2])dnl
if $2; then
  $1_TRUE=
  $1_FALSE='#'
else
  $1_TRUE='#'
  $1_FALSE=
fi
AC_CONFIG_COMMANDS_PRE(
[if test -z "${$1_TRUE}" && test -z "${$1_FALSE}"; then
  AC_MSG_ERROR([[conditional "$1" was never defined.
Usually this means the macro was only invoked conditionally.]])
fi])])
m4trace:/usr/share/aclocal-1.16/depend.m4:26: -1- AC_DEFUN([_AM_DEPENDENCIES], [AC_REQUIRE([AM_SET_DEPDIR])dnl
AC_REQUIRE([AM_OUTPUT_DEPENDENCY_COMMANDS])dnl
AC_REQUIRE([AM_MAKE_INCLUDE])dnl
AC_REQUIRE([AM_DEP_TRACK])dnl

m4_if([$1], [CC],   [depcc="$CC"   am_compiler_list=],
      [$1], [CXX],  [depcc="$CXX"  am_compiler_list=],
      [$1], [OBJC], [depcc="$OBJC" am_compiler_list='gcc3 gcc'],
      [$1], [OBJCXX], [depcc="$OBJCXX" am_compiler_list='gcc3 gcc'],
      [$1], [UPC],  [depcc="$UPC"  am_compiler_list=],
      [$1], [GCJ],  [depcc="$GCJ"  am_compiler_list='gcc3 gcc'],
                    [depcc="$$1"   am_compiler_list=])

AC_CACHE_CHECK([dependency style of $depcc],
               [am_cv_$1_dependencies_compiler_type],
[if test -z "$AMDEP_TRUE" && test -f "$am_depcomp"; then
  # We make a subdir and do the tests there.  Otherwise we can end up
  # making bogus files that we don't know about and never remove.  For
  # instance it was reported that on HP-UX the gcc test will end up
  # making a dummy file named 'D' -- because '-MD' means "put the output
  # in D".
  rm -rf conftest.dir
  mkdir conftest.dir
  # Copy depcomp to subdir because otherwise we won't find it if we're
  # using a relative directory.
  cp "$am_depcomp" conftest.dir
  cd conftest.dir
  # We will build objects and dependencies in a subdirectory because
  # it helps to detect inapplicable dependency modes.  For instance
  # both Tru64's cc and ICC support -MD to output dependencies as a
  # side effect of compilation, but ICC will put the dependencies in
  # the current directory while Tru64 will put them in the object
  # directory.
  mkdir sub

  am_cv_$1_dependencies_compiler_type=none
  if test "$am_compiler_list" = ""; then
     am_compiler_list=`sed -n ['s/^#*\([a-zA-Z0-9]*\))$/\1/p'] < ./depcomp`
  fi
  am__universal=false
  m4_case([$1], [CC],
    [case " $depcc " in #(
     *\ -arch\ *\ -arch\ *) am__universal=true ;;
     esac],
    [CXX],
    [case " $depcc " in #(
     *\ -arch\ *\ -arch\ *) am__universal=true ;;
     esac])

  for depmode in $am_compiler_list; do
    # Setup a source with many dependencies, because some compilers
    # like to wrap large dependency lists on column 80 (with \), and
    # we should not choose a depcomp mode which is confused by this.
    #
    # We need to recreate these files for each test, as the compiler may
    # overwrite some of them when testing with obscure command lines.
    # This happens at least with the AIX C compiler.
    : > sub/conftest.c
    for i in 1 2 3 4 5 6; do
      echo '#include "conftst'$i'.h"' >> sub/conftest.c
      # Using ": > sub/conftst$i.h" creates only sub/conftst1.h with
      # Solaris 10 /bin/sh.
      echo '/* dummy */' > sub/conftst$i.h
    done
    echo "${am__include} ${am__quote}sub/conftest.Po${am__quote}" > confmf

    # We check with '-c' and '-o' for the sake of the "dashmstdout"
    # mode.  It turns out that the SunPro C++ compiler does not properly
    # handle '-M -o', and we need to detect this.  Also, some Intel
    # versions had trouble with output in subdirs.
    am__obj=sub/conftest.${OBJEXT-o}
    am__minus_obj="-o $am__obj"
    case $depmode in
    gcc)
      # This depmode causes a compiler race in universal mode.
      test "$am__universal" = false || continue
      ;;
    nosideeffect)
      # After this tag, mechanisms are not by side-effect, so they'll
      # only be used when explicitly requested.
      if test "x$enable_dependency_tracking" = xyes; then
	continue
      else
	break
      fi
      ;;
    msvc7 | msvc7msys | msvisualcpp | msvcmsys)
      # This compiler won't grok '-c -o', but also, the minuso test has
      # not run yet.  These depmodes are late enough in the game, and
      # so weak that their functioning should not be impacted.
      am__obj=conftest.${OBJEXT-o}
      am__minus_obj=
      ;;
    none) break ;;
    esac
    if depmode=$depmode \
       source=sub/conftest.c object=$am__obj \
       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \
       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \
         >/dev/null 2>conftest.err &&
       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&
       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&
       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&
       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
      # icc doesn't choke on unknown options, it will just issue warnings
      # or remarks (even with -Werror).  So we grep stderr for any message
      # that says an option was ignored or not supported.
      # When given -MP, icc 7.0 and 7.1 complain thusly:
      #   icc: Command line warning: ignoring option '-M'; no argument required
      # The diagnosis changed in icc 8.0:
      #   icc: Command line remark: option '-MP' not supported
      if (grep 'ignoring option' conftest.err ||
          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else
        am_cv_$1_dependencies_compiler_type=$depmode
        break
      fi
    fi
  done

  cd ..
  rm -rf conftest.dir
else
  am_cv_$1_dependencies_compiler_type=none
fi
])
AC_SUBST([$1DEPMODE], [depmode=$am_cv_$1_dependencies_compiler_type])
AM_CONDITIONAL([am__fastdep$1], [
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_$1_dependencies_compiler_type" = gcc3])
])
m4trace:/usr/share/aclocal-1.16/depend.m4:163: -1- AC_DEFUN([AM_SET_DEPDIR], [AC_REQUIRE([AM_SET_LEADING_DOT])dnl
AC_SUBST([DEPDIR], ["${am__leading_dot}deps"])dnl
])
m4trace:/usr/share/aclocal-1.16/depend.m4:171: -1- AC_DEFUN([AM_DEP_TRACK], [AC_ARG_ENABLE([dependency-tracking], [dnl
AS_HELP_STRING(
  [--enable-dependency-tracking],
  [do not reject slow dependency extractors])
AS_HELP_STRING(
  [--disable-dependency-tracking],
  [speeds up one-time build])])
if test "x$enable_dependency_tracking" != xno; then
  am_depcomp="$ac_aux_dir/depcomp"
  AMDEPBACKSLASH='\'
  am__nodep='_no'
fi
AM_CONDITIONAL([AMDEP], [test "x$enable_dependency_tracking" != xno])
AC_SUBST([AMDEPBACKSLASH])dnl
_AM_SUBST_NOTMAKE([AMDEPBACKSLASH])dnl
AC_SUBST([am__nodep])dnl
_AM_SUBST_NOTMAKE([am__nodep])dnl
])
m4trace:/usr/share/aclocal-1.16/depout.m4:11: -1- AC_DEFUN([_AM_OUTPUT_DEPENDENCY_COMMANDS], [{
  # Older Autoconf quotes --file arguments for eval, but not when files
  # are listed without --file.  Let's play safe and only enable the eval
  # if we detect the quoting.
  # TODO: see whether this extra hack can be removed once we start
  # requiring Autoconf 2.70 or later.
  AS_CASE([$CONFIG_FILES],
          [*\'*], [eval set x "$CONFIG_FILES"],
          [*], [set x $CONFIG_FILES])
  shift
  # Used to flag and report bootstrapping failures.
  am_rc=0
  for am_mf
  do
    # Strip MF so we end up with the name of the file.
    am_mf=`AS_ECHO(["$am_mf"]) | sed -e 's/:.*$//'`
    # Check whether this is an Automake generated Makefile which includes
    # dependency-tracking related rules and includes.
    # Grep'ing the whole file directly is not great: AIX grep has a line
    # limit of 2048, but all sed's we know have understand at least 4000.
    sed -n 's,^am--depfiles:.*,X,p' "$am_mf" | grep X >/dev/null 2>&1 \
      || continue
    am_dirpart=`AS_DIRNAME(["$am_mf"])`
    am_filepart=`AS_BASENAME(["$am_mf"])`
    AM_RUN_LOG([cd "$am_dirpart" \
      && sed -e '/# am--include-marker/d' "$am_filepart" \
        | $MAKE -f - am--depfiles]) || am_rc=$?
  done
  if test $am_rc -ne 0; then
    AC_MSG_FAILURE([Something went wrong bootstrapping makefile fragments
    for automatic dependency tracking.  If GNU make was not used, consider
    re-running the configure script with MAKE="gmake" (or whatever is
    necessary).  You can also try re-running configure with the
    '--disable-dependency-tracking' option to at least be able to build
    the package (albeit without support for automatic dependency tracking).])
  fi
  AS_UNSET([am_dirpart])
  AS_UNSET([am_filepart])
  AS_UNSET([am_mf])
  AS_UNSET([am_rc])
  rm -f conftest-deps.mk
}
])
m4trace:/usr/share/aclocal-1.16/depout.m4:64: -1- AC_DEFUN([AM_OUTPUT_DEPENDENCY_COMMANDS], [AC_CONFIG_COMMANDS([depfiles],
     [test x"$AMDEP_TRUE" != x"" || _AM_OUTPUT_DEPENDENCY_COMMANDS],
     [AMDEP_TRUE="$AMDEP_TRUE" MAKE="${MAKE-make}"])])
m4trace:/usr/share/aclocal-1.16/init.m4:29: -1- AC_DEFUN([AM_INIT_AUTOMAKE], [AC_PREREQ([2.65])dnl
dnl Autoconf wants to disallow AM_ names.  We explicitly allow
dnl the ones we care about.
m4_pattern_allow([^AM_[A-Z]+FLAGS$])dnl
AC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl
AC_REQUIRE([AC_PROG_INSTALL])dnl
if test "`cd $srcdir && pwd`" != "`pwd`"; then
  # Use -I$(srcdir) only when $(srcdir) != ., so that make's output
  # is not polluted with repeated "-I."
  AC_SUBST([am__isrc], [' -I$(srcdir)'])_AM_SUBST_NOTMAKE([am__isrc])dnl
  # test to see if srcdir already configured
  if test -f $srcdir/config.status; then
    AC_MSG_ERROR([source directory already configured; run "make distclean" there first])
  fi
fi

# test whether we have cygpath
if test -z "$CYGPATH_W"; then
  if (cygpath --version) >/dev/null 2>/dev/null; then
    CYGPATH_W='cygpath -w'
  else
    CYGPATH_W=echo
  fi
fi
AC_SUBST([CYGPATH_W])

# Define the identity of the package.
dnl Distinguish between old-style and new-style calls.
m4_ifval([$2],
[AC_DIAGNOSE([obsolete],
             [$0: two- and three-arguments forms are deprecated.])
m4_ifval([$3], [_AM_SET_OPTION([no-define])])dnl
 AC_SUBST([PACKAGE], [$1])dnl
 AC_SUBST([VERSION], [$2])],
[_AM_SET_OPTIONS([$1])dnl
dnl Diagnose old-style AC_INIT with new-style AM_AUTOMAKE_INIT.
m4_if(
  m4_ifdef([AC_PACKAGE_NAME], [ok]):m4_ifdef([AC_PACKAGE_VERSION], [ok]),
  [ok:ok],,
  [m4_fatal([AC_INIT should be called with package and version arguments])])dnl
 AC_SUBST([PACKAGE], ['AC_PACKAGE_TARNAME'])dnl
 AC_SUBST([VERSION], ['AC_PACKAGE_VERSION'])])dnl

_AM_IF_OPTION([no-define],,
[AC_DEFINE_UNQUOTED([PACKAGE], ["$PACKAGE"], [Name of package])
 AC_DEFINE_UNQUOTED([VERSION], ["$VERSION"], [Version number of package])])dnl

# Some tools Automake needs.
AC_REQUIRE([AM_SANITY_CHECK])dnl
AC_REQUIRE([AC_ARG_PROGRAM])dnl
AM_MISSING_PROG([ACLOCAL], [aclocal-${am__api_version}])
AM_MISSING_PROG([AUTOCONF], [autoconf])
AM_MISSING_PROG([AUTOMAKE], [automake-${am__api_version}])
AM_MISSING_PROG([AUTOHEADER], [autoheader])
AM_MISSING_PROG([MAKEINFO], [makeinfo])
AC_REQUIRE([AM_PROG_INSTALL_SH])dnl
AC_REQUIRE([AM_PROG_INSTALL_STRIP])dnl
AC_REQUIRE([AC_PROG_MKDIR_P])dnl
# For better backward compatibility.  To be removed once Automake 1.9.x
# dies out for good.  For more background, see:
# <https://lists.gnu.org/archive/html/automake/2012-07/msg00001.html>
# <https://lists.gnu.org/archive/html/automake/2012-07/msg00014.html>
AC_SUBST([mkdir_p], ['$(MKDIR_P)'])
# We need awk for the "check" target (and possibly the TAP driver).  The
# system "awk" is bad on some platforms.
AC_REQUIRE([AC_PROG_AWK])dnl
AC_REQUIRE([AC_PROG_MAKE_SET])dnl
AC_REQUIRE([AM_SET_LEADING_DOT])dnl
_AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])],
	      [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],
			     [_AM_PROG_TAR([v7])])])
_AM_IF_OPTION([no-dependencies],,
[AC_PROVIDE_IFELSE([AC_PROG_CC],
		  [_AM_DEPENDENCIES([CC])],
		  [m4_define([AC_PROG_CC],
			     m4_defn([AC_PROG_CC])[_AM_DEPENDENCIES([CC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_CXX],
		  [_AM_DEPENDENCIES([CXX])],
		  [m4_define([AC_PROG_CXX],
			     m4_defn([AC_PROG_CXX])[_AM_DEPENDENCIES([CXX])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJC],
		  [_AM_DEPENDENCIES([OBJC])],
		  [m4_define([AC_PROG_OBJC],
			     m4_defn([AC_PROG_OBJC])[_AM_DEPENDENCIES([OBJC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJCXX],
		  [_AM_DEPENDENCIES([OBJCXX])],
		  [m4_define([AC_PROG_OBJCXX],
			     m4_defn([AC_PROG_OBJCXX])[_AM_DEPENDENCIES([OBJCXX])])])dnl
])
AC_REQUIRE([AM_SILENT_RULES])dnl
dnl The testsuite driver may need to know about EXEEXT, so add the
dnl 'am__EXEEXT' conditional if _AM_COMPILER_EXEEXT was seen.  This
dnl macro is hooked onto _AC_COMPILER_EXEEXT early, see below.
AC_CONFIG_COMMANDS_PRE(dnl
[m4_provide_if([_AM_COMPILER_EXEEXT],
  [AM_CONDITIONAL([am__EXEEXT], [test -n "$EXEEXT"])])])dnl

# POSIX will say in a future version that running "rm -f" with no argument
# is OK; and we want to be able to make that assumption in our Makefile
# recipes.  So use an aggressive probe to check that the usage we want is
# actually supported "in the wild" to an acceptable degree.
# See automake bug#10828.
# To make any issue more visible, cause the running configure to be aborted
# by default if the 'rm' program in use doesn't match our expectations; the
# user can still override this though.
if rm -f && rm -fr && rm -rf; then : OK; else
  cat >&2 <<'END'
Oops!

Your 'rm' program seems unable to run without file operands specified
on the command line, even when the '-f' option is present.  This is contrary
to the behaviour of most rm programs out there, and not conforming with
the upcoming POSIX standard: <http://austingroupbugs.net/view.php?id=542>

Please tell bug-automake@gnu.org about your system, including the value
of your $PATH and any error possibly output before this message.  This
can help us improve future automake versions.

END
  if test x"$ACCEPT_INFERIOR_RM_PROGRAM" = x"yes"; then
    echo 'Configuration will proceed anyway, since you have set the' >&2
    echo 'ACCEPT_INFERIOR_RM_PROGRAM variable to "yes"' >&2
    echo >&2
  else
    cat >&2 <<'END'
Aborting the configuration process, to ensure you take notice of the issue.

You can download and install GNU coreutils to get an 'rm' implementation
that behaves properly: <https://www.gnu.org/software/coreutils/>.

If you want to complete the configuration process using your problematic
'rm' anyway, export the environment variable ACCEPT_INFERIOR_RM_PROGRAM
to "yes", and re-run configure.

END
    AC_MSG_ERROR([Your 'rm' program is bad, sorry.])
  fi
fi
dnl The trailing newline in this macro's definition is deliberate, for
dnl backward compatibility and to allow trailing 'dnl'-style comments
dnl after the AM_INIT_AUTOMAKE invocation. See automake bug#16841.
])
m4trace:/usr/share/aclocal-1.16/init.m4:186: -1- AC_DEFUN([_AC_AM_CONFIG_HEADER_HOOK], [# Compute $1's index in $config_headers.
_am_arg=$1
_am_stamp_count=1
for _am_header in $config_headers :; do
  case $_am_header in
    $_am_arg | $_am_arg:* )
      break ;;
    * )
      _am_stamp_count=`expr $_am_stamp_count + 1` ;;
  esac
done
echo "timestamp for $_am_arg" >`AS_DIRNAME(["$_am_arg"])`/stamp-h[]$_am_stamp_count])
m4trace:/usr/share/aclocal-1.16/install-sh.m4:11: -1- AC_DEFUN([AM_PROG_INSTALL_SH], [AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl
if test x"${install_sh+set}" != xset; then
  case $am_aux_dir in
  *\ * | *\	*)
    install_sh="\${SHELL} '$am_aux_dir/install-sh'" ;;
  *)
    install_sh="\${SHELL} $am_aux_dir/install-sh"
  esac
fi
AC_SUBST([install_sh])])
m4trace:/usr/share/aclocal-1.16/lead-dot.m4:10: -1- AC_DEFUN([AM_SET_LEADING_DOT], [rm -rf .tst 2>/dev/null
mkdir .tst 2>/dev/null
if test -d .tst; then
  am__leading_dot=.
else
  am__leading_dot=_
fi
rmdir .tst 2>/dev/null
AC_SUBST([am__leading_dot])])
m4trace:/usr/share/aclocal-1.16/lex.m4:13: -1- AC_DEFUN([AM_PROG_LEX], [AC_PREREQ([2.50])dnl
AC_REQUIRE([AM_MISSING_HAS_RUN])dnl
AC_REQUIRE([AC_PROG_LEX])dnl
if test "$LEX" = :; then
  LEX=${am_missing_run}flex
fi])
m4trace:/usr/share/aclocal-1.16/make.m4:13: -1- AC_DEFUN([AM_MAKE_INCLUDE], [AC_MSG_CHECKING([whether ${MAKE-make} supports the include directive])
cat > confinc.mk << 'END'
am__doit:
	@echo this is the am__doit target >confinc.out
.PHONY: am__doit
END
am__include="#"
am__quote=
# BSD make does it like this.
echo '.include "confinc.mk" # ignored' > confmf.BSD
# Other make implementations (GNU, Solaris 10, AIX) do it like this.
echo 'include confinc.mk # ignored' > confmf.GNU
_am_result=no
for s in GNU BSD; do
  AM_RUN_LOG([${MAKE-make} -f confmf.$s && cat confinc.out])
  AS_CASE([$?:`cat confinc.out 2>/dev/null`],
      ['0:this is the am__doit target'],
      [AS_CASE([$s],
          [BSD], [am__include='.include' am__quote='"'],
          [am__include='include' am__quote=''])])
  if test "$am__include" != "#"; then
    _am_result="yes ($s style)"
    break
  fi
done
rm -f confinc.* confmf.*
AC_MSG_RESULT([${_am_result}])
AC_SUBST([am__include])])
m4trace:/usr/share/aclocal-1.16/make.m4:42: -1- m4_pattern_allow([^am__quote$])
m4trace:/usr/share/aclocal-1.16/missing.m4:11: -1- AC_DEFUN([AM_MISSING_PROG], [AC_REQUIRE([AM_MISSING_HAS_RUN])
$1=${$1-"${am_missing_run}$2"}
AC_SUBST($1)])
m4trace:/usr/share/aclocal-1.16/missing.m4:20: -1- AC_DEFUN([AM_MISSING_HAS_RUN], [AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl
AC_REQUIRE_AUX_FILE([missing])dnl
if test x"${MISSING+set}" != xset; then
  case $am_aux_dir in
  *\ * | *\	*)
    MISSING="\${SHELL} \"$am_aux_dir/missing\"" ;;
  *)
    MISSING="\${SHELL} $am_aux_dir/missing" ;;
  esac
fi
# Use eval to expand $SHELL
if eval "$MISSING --is-lightweight"; then
  am_missing_run="$MISSING "
else
  am_missing_run=
  AC_MSG_WARN(['missing' script is too old or missing])
fi
])
m4trace:/usr/share/aclocal-1.16/obsolete.m4:11: -1- AC_DEFUN([AM_CONFIG_HEADER], [AC_DIAGNOSE([obsolete],
['$0': this macro is obsolete.
You should use the 'AC][_CONFIG_HEADERS' macro instead.])dnl
AC_CONFIG_HEADERS($@)])
m4trace:/usr/share/aclocal-1.16/obsolete.m4:17: -1- AC_DEFUN([AM_PROG_CC_STDC], [AC_PROG_CC
am_cv_prog_cc_stdc=$ac_cv_prog_cc_stdc
AC_DIAGNOSE([obsolete],
['$0': this macro is obsolete.
You should simply use the 'AC][_PROG_CC' macro instead.
Also, your code should no longer depend upon 'am_cv_prog_cc_stdc',
but upon 'ac_cv_prog_cc_stdc'.])])
m4trace:/usr/share/aclocal-1.16/obsolete.m4:26: -1- AC_DEFUN([AM_C_PROTOTYPES], [AC_FATAL([automatic de-ANSI-fication support has been removed])])
m4trace:/usr/share/aclocal-1.16/obsolete.m4:28: -1- AU_DEFUN([fp_C_PROTOTYPES], [AM_C_PROTOTYPES])
m4trace:/usr/share/aclocal-1.16/obsolete.m4:28: -1- AC_DEFUN([fp_C_PROTOTYPES], [AC_DIAGNOSE([obsolete], [The macro `fp_C_PROTOTYPES' is obsolete.
You should run autoupdate.])dnl
AM_C_PROTOTYPES])
m4trace:/usr/share/aclocal-1.16/options.m4:11: -1- AC_DEFUN([_AM_MANGLE_OPTION], [[_AM_OPTION_]m4_bpatsubst($1, [[^a-zA-Z0-9_]], [_])])
m4trace:/usr/share/aclocal-1.16/options.m4:17: -1- AC_DEFUN([_AM_SET_OPTION], [m4_define(_AM_MANGLE_OPTION([$1]), [1])])
m4trace:/usr/share/aclocal-1.16/options.m4:23: -1- AC_DEFUN([_AM_SET_OPTIONS], [m4_foreach_w([_AM_Option], [$1], [_AM_SET_OPTION(_AM_Option)])])
m4trace:/usr/share/aclocal-1.16/options.m4:29: -1- AC_DEFUN([_AM_IF_OPTION], [m4_ifset(_AM_MANGLE_OPTION([$1]), [$2], [$3])])
m4trace:/usr/share/aclocal-1.16/prog-cc-c-o.m4:12: -1- AC_DEFUN([_AM_PROG_CC_C_O], [AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl
AC_REQUIRE_AUX_FILE([compile])dnl
AC_LANG_PUSH([C])dnl
AC_CACHE_CHECK(
  [whether $CC understands -c and -o together],
  [am_cv_prog_cc_c_o],
  [AC_LANG_CONFTEST([AC_LANG_PROGRAM([])])
  # Make sure it works both with $CC and with simple cc.
  # Following AC_PROG_CC_C_O, we do the test twice because some
  # compilers refuse to overwrite an existing .o file with -o,
  # though they will create one.
  am_cv_prog_cc_c_o=yes
  for am_i in 1 2; do
    if AM_RUN_LOG([$CC -c conftest.$ac_ext -o conftest2.$ac_objext]) \
         && test -f conftest2.$ac_objext; then
      : OK
    else
      am_cv_prog_cc_c_o=no
      break
    fi
  done
  rm -f core conftest*
  unset am_i])
if test "$am_cv_prog_cc_c_o" != yes; then
   # Losing compiler, so override with the script.
   # FIXME: It is wrong to rewrite CC.
   # But if we don't then we get into trouble of one sort or another.
   # A longer-term fix would be to have automake use am__CC in this case,
   # and then we could set am__CC="\$(top_srcdir)/compile \$(CC)"
   CC="$am_aux_dir/compile $CC"
fi
AC_LANG_POP([C])])
m4trace:/usr/share/aclocal-1.16/prog-cc-c-o.m4:47: -1- AC_DEFUN_ONCE([AM_PROG_CC_C_O], [AC_REQUIRE([AC_PROG_CC])])
m4trace:/usr/share/aclocal-1.16/runlog.m4:12: -1- AC_DEFUN([AM_RUN_LOG], [{ echo "$as_me:$LINENO: $1" >&AS_MESSAGE_LOG_FD
   ($1) >&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD
   ac_status=$?
   echo "$as_me:$LINENO: \$? = $ac_status" >&AS_MESSAGE_LOG_FD
   (exit $ac_status); }])
m4trace:/usr/share/aclocal-1.16/sanity.m4:11: -1- AC_DEFUN([AM_SANITY_CHECK], [AC_MSG_CHECKING([whether build environment is sane])
# Reject unsafe characters in $srcdir or the absolute working directory
# name.  Accept space and tab only in the latter.
am_lf='
'
case `pwd` in
  *[[\\\"\#\$\&\'\`$am_lf]]*)
    AC_MSG_ERROR([unsafe absolute working directory name]);;
esac
case $srcdir in
  *[[\\\"\#\$\&\'\`$am_lf\ \	]]*)
    AC_MSG_ERROR([unsafe srcdir value: '$srcdir']);;
esac

# Do 'set' in a subshell so we don't clobber the current shell's
# arguments.  Must try -L first in case configure is actually a
# symlink; some systems play weird games with the mod time of symlinks
# (eg FreeBSD returns the mod time of the symlink's containing
# directory).
if (
   am_has_slept=no
   for am_try in 1 2; do
     echo "timestamp, slept: $am_has_slept" > conftest.file
     set X `ls -Lt "$srcdir/configure" conftest.file 2> /dev/null`
     if test "$[*]" = "X"; then
	# -L didn't work.
	set X `ls -t "$srcdir/configure" conftest.file`
     fi
     if test "$[*]" != "X $srcdir/configure conftest.file" \
	&& test "$[*]" != "X conftest.file $srcdir/configure"; then

	# If neither matched, then we have a broken ls.  This can happen
	# if, for instance, CONFIG_SHELL is bash and it inherits a
	# broken ls alias from the environment.  This has actually
	# happened.  Such a system could not be considered "sane".
	AC_MSG_ERROR([ls -t appears to fail.  Make sure there is not a broken
  alias in your environment])
     fi
     if test "$[2]" = conftest.file || test $am_try -eq 2; then
       break
     fi
     # Just in case.
     sleep 1
     am_has_slept=yes
   done
   test "$[2]" = conftest.file
   )
then
   # Ok.
   :
else
   AC_MSG_ERROR([newly created file is older than distributed files!
Check your system clock])
fi
AC_MSG_RESULT([yes])
# If we didn't sleep, we still need to ensure time stamps of config.status and
# generated files are strictly newer.
am_sleep_pid=
if grep 'slept: no' conftest.file >/dev/null 2>&1; then
  ( sleep 1 ) &
  am_sleep_pid=$!
fi
AC_CONFIG_COMMANDS_PRE(
  [AC_MSG_CHECKING([that generated files are newer than configure])
   if test -n "$am_sleep_pid"; then
     # Hide warnings about reused PIDs.
     wait $am_sleep_pid 2>/dev/null
   fi
   AC_MSG_RESULT([done])])
rm -f conftest.file
])
m4trace:/usr/share/aclocal-1.16/silent.m4:12: -1- AC_DEFUN([AM_SILENT_RULES], [AC_ARG_ENABLE([silent-rules], [dnl
AS_HELP_STRING(
  [--enable-silent-rules],
  [less verbose build output (undo: "make V=1")])
AS_HELP_STRING(
  [--disable-silent-rules],
  [verbose build output (undo: "make V=0")])dnl
])
case $enable_silent_rules in @%:@ (((
  yes) AM_DEFAULT_VERBOSITY=0;;
   no) AM_DEFAULT_VERBOSITY=1;;
    *) AM_DEFAULT_VERBOSITY=m4_if([$1], [yes], [0], [1]);;
esac
dnl
dnl A few 'make' implementations (e.g., NonStop OS and NextStep)
dnl do not support nested variable expansions.
dnl See automake bug#9928 and bug#10237.
am_make=${MAKE-make}
AC_CACHE_CHECK([whether $am_make supports nested variables],
   [am_cv_make_support_nested_variables],
   [if AS_ECHO([['TRUE=$(BAR$(V))
BAR0=false
BAR1=true
V=1
am__doit:
	@$(TRUE)
.PHONY: am__doit']]) | $am_make -f - >/dev/null 2>&1; then
  am_cv_make_support_nested_variables=yes
else
  am_cv_make_support_nested_variables=no
fi])
if test $am_cv_make_support_nested_variables = yes; then
  dnl Using '$V' instead of '$(V)' breaks IRIX make.
  AM_V='$(V)'
  AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'
else
  AM_V=$AM_DEFAULT_VERBOSITY
  AM_DEFAULT_V=$AM_DEFAULT_VERBOSITY
fi
AC_SUBST([AM_V])dnl
AM_SUBST_NOTMAKE([AM_V])dnl
AC_SUBST([AM_DEFAULT_V])dnl
AM_SUBST_NOTMAKE([AM_DEFAULT_V])dnl
AC_SUBST([AM_DEFAULT_VERBOSITY])dnl
AM_BACKSLASH='\'
AC_SUBST([AM_BACKSLASH])dnl
_AM_SUBST_NOTMAKE([AM_BACKSLASH])dnl
])
m4trace:/usr/share/aclocal-1.16/strip.m4:17: -1- AC_DEFUN([AM_PROG_INSTALL_STRIP], [AC_REQUIRE([AM_PROG_INSTALL_SH])dnl
# Installed binaries are usually stripped using 'strip' when the user
# run "make install-strip".  However 'strip' might not be the right
# tool to use in cross-compilation environments, therefore Automake
# will honor the 'STRIP' environment variable to overrule this program.
dnl Don't test for $cross_compiling = yes, because it might be 'maybe'.
if test "$cross_compiling" != no; then
  AC_CHECK_TOOL([STRIP], [strip], :)
fi
INSTALL_STRIP_PROGRAM="\$(install_sh) -c -s"
AC_SUBST([INSTALL_STRIP_PROGRAM])])
m4trace:/usr/share/aclocal-1.16/substnot.m4:12: -1- AC_DEFUN([_AM_SUBST_NOTMAKE])
m4trace:/usr/share/aclocal-1.16/substnot.m4:17: -1- AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])
m4trace:/usr/share/aclocal-1.16/tar.m4:23: -1- AC_DEFUN([_AM_PROG_TAR], [# Always define AMTAR for backward compatibility.  Yes, it's still used
# in the wild :-(  We should find a proper way to deprecate it ...
AC_SUBST([AMTAR], ['$${TAR-tar}'])

# We'll loop over all known methods to create a tar archive until one works.
_am_tools='gnutar m4_if([$1], [ustar], [plaintar]) pax cpio none'

m4_if([$1], [v7],
  [am__tar='$${TAR-tar} chof - "$$tardir"' am__untar='$${TAR-tar} xf -'],

  [m4_case([$1],
    [ustar],
     [# The POSIX 1988 'ustar' format is defined with fixed-size fields.
      # There is notably a 21 bits limit for the UID and the GID.  In fact,
      # the 'pax' utility can hang on bigger UID/GID (see automake bug#8343
      # and bug#13588).
      am_max_uid=2097151 # 2^21 - 1
      am_max_gid=$am_max_uid
      # The $UID and $GID variables are not portable, so we need to resort
      # to the POSIX-mandated id(1) utility.  Errors in the 'id' calls
      # below are definitely unexpected, so allow the users to see them
      # (that is, avoid stderr redirection).
      am_uid=`id -u || echo unknown`
      am_gid=`id -g || echo unknown`
      AC_MSG_CHECKING([whether UID '$am_uid' is supported by ustar format])
      if test $am_uid -le $am_max_uid; then
         AC_MSG_RESULT([yes])
      else
         AC_MSG_RESULT([no])
         _am_tools=none
      fi
      AC_MSG_CHECKING([whether GID '$am_gid' is supported by ustar format])
      if test $am_gid -le $am_max_gid; then
         AC_MSG_RESULT([yes])
      else
        AC_MSG_RESULT([no])
        _am_tools=none
      fi],

  [pax],
    [],

  [m4_fatal([Unknown tar format])])

  AC_MSG_CHECKING([how to create a $1 tar archive])

  # Go ahead even if we have the value already cached.  We do so because we
  # need to set the values for the 'am__tar' and 'am__untar' variables.
  _am_tools=${am_cv_prog_tar_$1-$_am_tools}

  for _am_tool in $_am_tools; do
    case $_am_tool in
    gnutar)
      for _am_tar in tar gnutar gtar; do
        AM_RUN_LOG([$_am_tar --version]) && break
      done
      am__tar="$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - "'"$$tardir"'
      am__tar_="$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - "'"$tardir"'
      am__untar="$_am_tar -xf -"
      ;;
    plaintar)
      # Must skip GNU tar: if it does not support --format= it doesn't create
      # ustar tarball either.
      (tar --version) >/dev/null 2>&1 && continue
      am__tar='tar chf - "$$tardir"'
      am__tar_='tar chf - "$tardir"'
      am__untar='tar xf -'
      ;;
    pax)
      am__tar='pax -L -x $1 -w "$$tardir"'
      am__tar_='pax -L -x $1 -w "$tardir"'
      am__untar='pax -r'
      ;;
    cpio)
      am__tar='find "$$tardir" -print | cpio -o -H $1 -L'
      am__tar_='find "$tardir" -print | cpio -o -H $1 -L'
      am__untar='cpio -i -H $1 -d'
      ;;
    none)
      am__tar=false
      am__tar_=false
      am__untar=false
      ;;
    esac

    # If the value was cached, stop now.  We just wanted to have am__tar
    # and am__untar set.
    test -n "${am_cv_prog_tar_$1}" && break

    # tar/untar a dummy directory, and stop if the command works.
    rm -rf conftest.dir
    mkdir conftest.dir
    echo GrepMe > conftest.dir/file
    AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])
    rm -rf conftest.dir
    if test -s conftest.tar; then
      AM_RUN_LOG([$am__untar <conftest.tar])
      AM_RUN_LOG([cat conftest.dir/file])
      grep GrepMe conftest.dir/file >/dev/null 2>&1 && break
    fi
  done
  rm -rf conftest.dir

  AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])
  AC_MSG_RESULT([$am_cv_prog_tar_$1])])

AC_SUBST([am__tar])
AC_SUBST([am__untar])
])
m4trace:acmacros/canonicalize-symlink.m4:4: -1- AC_DEFUN([ROSE_CANON_SYMLINK], [
	$1=$2
	while test -h "$$1" ; do
		__rose_canon_symlink_base="`readlink "$$1"`"
		AS_SET_CATFILE([__rose_canon_symlink_full_path], ["`dirname "$$1"`"], ["$__rose_canon_symlink_base"])
		__rose_canon_symlink_dir="`dirname "$__rose_canon_symlink_full_path"`"
		__rose_canon_symlink_canon_dir="`cd "$__rose_canon_symlink_dir" && pwd`"
		AS_SET_CATFILE([$1], ["$__rose_canon_symlink_canon_dir"], ["`basename $__rose_canon_symlink_full_path`"])
	done
])
m4trace:acmacros/compiler-ar.m4:11: -1- AC_DEFUN([BTNG_CXX_AR], [
dnl Set the variables CXX_ID and CXX_VERSION.

# Determine what compiler we ar using.
# The library-building command depends on the compiler characteristics.
AC_REQUIRE([BTNG_INFO_CXX_ID])


# Create the command syntax such that they can substitute
# the generic case of using ar, i.e. ar ruv.
# This means that the libraries will be generated using
# "$CXX_STATIC_LIB_UPDATE libxyz.a *.o".
case "$CXX_ID" in
  # Each block here defines CXX_STATIC_LIB_UPDATE and CXX_SHARED_LIB_UPDATE
  # for a specific compiler.
  gnu)
    CXX_STATIC_LIB_UPDATE='${AR} ruv'
    # I tried 'gcc -o' for static libraries, but got unresolved symbols
    # and no library.  BTNG.
    case "$host_os" in
      sun*|solaris*)	CXX_SHARED_LIB_UPDATE='${CC} -shared -o' ;;
      # Note that CC is used instead of CXX if CXX is GNU compiler.
      # Assume that if CXX is g++, then CC had better be gcc.
      # For some reason, running "g++ -shared" on the Sun writes
      # a perfectly good file then due to an error on ld, removes
      # that file.  Maybe a future version will correct this.  BTNG
      *)		CXX_SHARED_LIB_UPDATE='${CXX} -shared -o' ;;
      # Manual says I should also include the compile flags such as
      # -fpic and -fPIC but this seems to be working right now and I
      # fear breaking it.  BTNG
    esac
  ;;
  sunpro)
    CXX_STATIC_LIB_UPDATE='${CXX} -xar -o'
    CXX_SHARED_LIB_UPDATE='${CXX} -G -o'
  ;;
  dec)
    CXX_STATIC_LIB_UPDATE='${AR} ruv'
    # I tried 'cxx -o' for static libraries, but got unresolved symbols
    # and no library.  BTNG.
    CXX_SHARED_LIB_UPDATE='${CXX} -shared -o'
  ;;
  kai)
    CXX_STATIC_LIB_UPDATE='${CXX} -o'
    CXX_SHARED_LIB_UPDATE='${CXX} -o'
    # The KAI compiler generates shared or static based on name of output file.
  ;;
  sgi)
    CXX_STATIC_LIB_UPDATE='${AR} ruv'
    CXX_SHARED_LIB_UPDATE='${CXX} -64 -shared -o'
  ;;
  ibm)
    CXX_STATIC_LIB_UPDATE='${AR} -r -u -v'
    # IBM does not provide a method for creating shared libraries.
  ;;
  *)
    # Set the default values.
    # (These generally do not work well when templates are involved.)
    CXX_STATIC_LIB_UPDATE='${AR} ruv'
    CXX_SHARED_LIB_UPDATE='${CXX} -o'
  ;;
esac


# Let user override.
AC_ARG_WITH(cxx_static_lib_update,
[  --with-cxx_static_lib_update=COMMAND
			Use COMMAND (not 'ar ruv') to make static C++ library.],
CXX_STATIC_LIB_UPDATE=$with_cxx_static_lib_update)
AC_ARG_WITH(cxx_shared_lib_update,
[  --with-cxx_shared_lib_update=COMMAND
			Use COMMAND (not 'ar ruv') to make shared C++ library.],
CXX_SHARED_LIB_UPDATE=$with_cxx_shared_lib_update)

])
m4trace:acmacros/compiler-id.m4:15: -1- AC_DEFUN([BTNG_INFO_CXX_ID], [
  BTNG_INFO_CXX_ID_NAMES(CXX_ID,CXX_VERSION)
])
m4trace:acmacros/compiler-id.m4:18: -1- AC_DEFUN([BTNG_INFO_CC_ID], [
  BTNG_INFO_CC_ID_NAMES(CC_ID,CC_VERSION)
])
m4trace:acmacros/compiler-id.m4:21: -1- AC_DEFUN([BTNG_INFO_CC_CXX_ID], [
  AC_REQUIRE([BTNG_INFO_CC_ID])
  AC_REQUIRE([BTNG_INFO_CXX_ID])
])
m4trace:acmacros/compiler-id.m4:38: -1- AC_DEFUN([BTNG_INFO_CXX_ID_NAMES], [
# Start macro BTNG_INFO_CXX_ID_NAMES
  AC_REQUIRE([AC_PROG_CXXCPP])
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  BTNG_AC_LOG(CXXP is $CXX)
  BTNG_AC_LOG(CXXCPP is $CXXCPP)

  $1=unknown
  $2=unknown

dnl Do not change the following chain of if blocks into a case statement.
dnl We may eventually have a compiler that must be tested in a different
dnl method


  # Check if it is a Sun compiler.
  if test $$1 = unknown; then
    BTNG_AC_LOG(checking if $CXX is sunpro)
changequote(BEG,END)
    AC_EGREP_CPP(^0x[0-9]+,__SUNPRO_CC,
changequote([,])
      $1=sunpro
      # SUN compiler defines __SUNPRO_CC to the version number.
      echo __SUNPRO_CC > conftest.C
      $2=`${CXXCPP} conftest.C | sed -n 2p`
      rm -f conftest.C
    )
  fi


  # Check if it is a GNU compiler.
  if test $$1 = unknown; then
    BTNG_AC_LOG(checking if $CXX is gnu)
    AC_EGREP_CPP(^yes,
#ifdef __GNUC__
yes;
#endif
,
    $1=gnu
    # GNU compilers output version number with option --version.
    # Alternatively, it also defines __GNUC__, GNUC_MINOR__ and
    # __GNUC_PATCHLEVEL__
    [[$2=`$CXX --version | sed -e 's/[^0-9]\{0,\}\([^ ]\{1,\}\).\{0,\}/\1/' -e 1q`]]
    )
  fi


  # Check if it is a DEC compiler.
  if test $$1 = unknown; then
    BTNG_AC_LOG(checking if $CXX is dec)
    AC_EGREP_CPP(^1,__DECCXX,
      $1=dec
      # DEC compiler defines __DECCXX_VER to the version number.
      echo __DECCXX_VER > conftest.C
      $2=`${CXXCPP} conftest.C | sed -n 2p`
      rm -f conftest.C
    )
  fi


  # Check if it is a KAI compiler.
  if test $$1 = unknown; then
    BTNG_AC_LOG(checking if $CXX is kai)
    AC_EGREP_CPP(^1,__KCC,
      $1=kai
      # KCC compiler defines __KCC_VERSION to the version number.
      echo __KCC_VERSION > conftest.C
      $2=`${CXXCPP} conftest.C | sed -n 2p`
      rm -f conftest.C
    )
  fi


  # Check if it is a SGI compiler.
  if test $$1 = unknown; then
    BTNG_AC_LOG(checking if $CXX is sgi)
    AC_EGREP_CPP(^1,__sgi,
      $1=sgi
      # SGI compiler defines _COMPILER_VERSION to the version number.
      echo _COMPILER_VERSION > conftest.C
      $2=`${CXXCPP} conftest.C | sed /^\\#/d`
      rm -f conftest.C
    )
  fi


  # Check if it is a IBM compiler.
  if test $$1 = unknown; then
    BTNG_AC_LOG(checking if $CXX is xlc)
    AC_EGREP_CPP(^yes,
#ifdef __xlC__
yes;
#endif
,
    $1=xlc
    # IBM compiler defines __xlC__ to the version number.
    echo __xlC__ > conftest.C
    $2=`${CXXCPP} conftest.C | sed /^\\#/d`
    rm -f conftest.C
    )
  fi


  AC_LANG_RESTORE
  BTNG_AC_LOG_VAR(CXX_ID CXX_VERSION)
# End macro BTNG_INFO_CXX_ID_NAMES
])
m4trace:acmacros/compiler-id.m4:155: -1- AC_DEFUN([BTNG_INFO_CC_ID_NAMES], [
# Start macro BTNG_INFO_CC_ID_NAMES
  AC_REQUIRE([AC_PROG_CPP])
  AC_LANG_SAVE
  AC_LANG_C
  BTNG_AC_LOG(CC is $CC)
  BTNG_AC_LOG(CPP is $CPP)

  $1=unknown
  $2=unknown

dnl Do not change the following chain of if blocks into a case statement.
dnl We may eventually have a compiler that must be tested in a different
dnl method


  # Check if it is a Sun compiler.
  if test $$1 = unknown; then
    BTNG_AC_LOG(checking if $CC is sunpro)
changequote(BEG,END)
    AC_EGREP_CPP(^ 0x[0-9]+,__SUNPRO_C,
changequote([,])
      $1=sunpro
      # SUN compiler defines __SUNPRO_C to the version number.
      echo __SUNPRO_C > conftest.c
      $2=`${CPP} ${CPPFLAGS} conftest.c | sed -n -e 's/^ //' -e 2p`
      rm -f conftest.c
    )
  fi


  # Check if it is a GNU compiler.
  if test $$1 = unknown; then
    BTNG_AC_LOG(checking if $CC is gnu)
    AC_EGREP_CPP(^yes,
#ifdef __GNUC__
yes;
#endif
,
    $1=gnu
    [[$2=`$CC --version | sed -e 's/[^0-9]\{0,\}\([^ ]\{1,\}\).\{0,\}/\1/' -e 1q`]]
    )
  fi


  # Check if it is a DEC compiler.
  if test $$1 = unknown; then
    BTNG_AC_LOG(checking if $CC is dec)
    AC_EGREP_CPP(^ 1,__DECC,
      $1=dec
      # DEC compiler defines __DECC_VER to the version number.
      echo __DECC_VER > conftest.c
      $2=`${CPP} ${CPPFLAGS} conftest.c | sed -n -e 's/^ //' -e 2p`
      rm -f conftest.c
    )
  fi


  # Check if it is a KAI compiler.
  if test $$1 = unknown; then
    BTNG_AC_LOG(checking if $CC is kai)
    AC_EGREP_CPP(^1,__KCC,
      $1=kai
      # KCC compiler defines __KCC_VERSION to the version number.
      echo __KCC_VERSION > conftest.c
      $2=`${CPP} ${CPPFLAGS} conftest.c | sed -n 2p`
      rm -f conftest.c
    )
  fi


  # Check if it is a SGI compiler.
  if test $$1 = unknown; then
    BTNG_AC_LOG(checking if $CC is sgi)
    AC_EGREP_CPP(^1,__sgi,
      $1=sgi
      # SGI compiler defines _COMPILER_VERSION to the version number.
      echo _COMPILER_VERSION > conftest.c
      $2=`${CPP} ${CPPFLAGS} conftest.c | sed /^\\#/d`
      rm -f conftest.c
    )
  fi


  # Check if it is a IBM compiler.
  if test $$1 = unknown; then
    BTNG_AC_LOG(checking if $CC is xlc)
    if echo "$host_os" | grep "aix" >/dev/null ; then
      # The wretched IBM shell does not eval correctly,
      # so we have to help it with a pre-eval eval statement.
      ac_cpp=`eval "echo $ac_cpp"`
      save_ac_cpp=$ac_cpp
      BTNG_AC_LOG(ac_cpp is temporarily set to $ac_cpp)
    else
      save_ac_cpp=
    fi
    BTNG_AC_LOG(ac_cpp is $ac_cpp)
    AC_EGREP_CPP(^yes,
#ifdef __xlC__
yes;
#endif
,
    $1=xlc
    # IBM compiler defines __xlC__ to the version number.
    echo __xlC__ > conftest.C
    $2=`${CPP} conftest.C | sed /^\\#/d`
    rm -f conftest.C
    )
    test "$save_ac_cpp" && ac_cpp=$save_ac_cpp
    BTNG_AC_LOG(ac_cpp is restored to $ac_cpp)
  fi


  AC_LANG_RESTORE
  BTNG_AC_LOG_VAR(CC_ID CC_VERSION)
# End macro BTNG_INFO_CC_ID_NAMES
])
m4trace:acmacros/configure-log.m4:1: -1- AC_DEFUN([BTNG_AC_LOG], [echo "configure:__oline__:" $1 >&AC_FD_CC])
m4trace:acmacros/configure-log.m4:3: -1- AC_DEFUN([BTNG_AC_LOG_VAR], [
dnl arg1 is list of variables to log.
dnl arg2 (optional) is a label.
dnl
dnl This macro makes code that write out at configure time
dnl label: x is '...'
dnl if x is set and
dnl label: x is unset
dnl otherwise.
define([btng_log_label],ifelse($2,,,[$2: ]))
btng_log_vars="$1"
for btng_log_vars_index in $btng_log_vars ; do
  eval "test \"\${${btng_log_vars_index}+set}\" = set"
  if test $? = 0; then
    btng_log_vars_value="'`eval echo \\${$btng_log_vars_index}`'";
  else
    btng_log_vars_value="unset";
  fi
  BTNG_AC_LOG("btng_log_label$btng_log_vars_index is $btng_log_vars_value");
dnl
dnl This is a shorter version, but it does not work for some Bourne shells
dnl due to misinterpretation of the multiple backslashes
dnl BTNG_AC_LOG("btng_log_label$btng_log_vars_index is `eval if test \\\"\$\{$btng_log_vars_index+set\}\\\"\; then echo \\\""'"\$\{$btng_log_vars_index\}"'"\\\"\; else echo 'unset'\; fi`")
done
undefine([btng_log_label])
])
m4trace:acmacros/pkg.m4:5: -1- AC_DEFUN([PKG_CHECK_MODULES], [
  succeeded=no

  if test -z "$PKG_CONFIG"; then
    AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
  fi

  if test "$PKG_CONFIG" = "no" ; then
     echo "*** The pkg-config script could not be found. Make sure it is"
     echo "*** in your path, or set the PKG_CONFIG environment variable"
     echo "*** to the full path to pkg-config."
     echo "*** Or see http://www.freedesktop.org/software/pkgconfig to get pkg-config."
  else
     PKG_CONFIG_MIN_VERSION=0.9.0
     if $PKG_CONFIG --atleast-pkgconfig-version $PKG_CONFIG_MIN_VERSION; then
        AC_MSG_CHECKING(for $2)

        if $PKG_CONFIG --exists "$2" ; then
            AC_MSG_RESULT(yes)
            succeeded=yes

            AC_MSG_CHECKING($1_CFLAGS)
            $1_CFLAGS=`$PKG_CONFIG --cflags "$2"`
            AC_MSG_RESULT($$1_CFLAGS)

            AC_MSG_CHECKING($1_LIBS)
            $1_LIBS=`$PKG_CONFIG --libs "$2"`
            AC_MSG_RESULT($$1_LIBS)
        else
            $1_CFLAGS=""
            $1_LIBS=""
            ## If we have a custom action on failure, don't print errors, but 
            ## do set a variable so people can do so.
            $1_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "$2"`
            ifelse([$4], ,echo $$1_PKG_ERRORS,)
        fi

        AC_SUBST($1_CFLAGS)
        AC_SUBST($1_LIBS)
     else
        echo "*** Your version of pkg-config is too old. You need version $PKG_CONFIG_MIN_VERSION or newer."
        echo "*** See http://www.freedesktop.org/software/pkgconfig"
     fi
  fi

  if test $succeeded = yes; then
     ifelse([$3], , :, [$3])
  else
     ifelse([$4], , AC_MSG_ERROR([Library requirements ($2) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them.]), [$4])
  fi
])
m4trace:acmacros/upc.m4:9: -1- AC_DEFUN([AM_PROG_UPC], [dnl We need OBJEXT and EXEEXT, but Autoconf doesn't offer any public
dnl macro to compute them.  Use AC_PROG_CC instead.
AC_REQUIRE([AC_PROG_CC])dnl
AC_ARG_VAR([UPC], [Unified Parallel C compiler command])dnl
AC_ARG_VAR([UPCFLAGS], [Unified Parallel C compiler flags])dnl
AC_CHECK_TOOLS([UPC], [m4_default([$1], [upcc upc])], [:])
if test "$UPC" = :; then
  AC_MSG_ERROR([no Unified Parallel C compiler was found], [77])
else
  _AM_IF_OPTION([no-dependencies],, [_AM_DEPENDENCIES([UPC])])dnl
fi
])
m4trace:config/EDG.m4:1: -1- AC_DEFUN([SETUP_EDG], [

# SAGE_VAR_INCLUDES_AND_LIBS
AC_DEFINE([SAGE_TRANSFORM],[1],[Control use of SAGE within EDG.])

# AC_AIX

# Checks for programs.

# LAC_SAGE_PATH
# LAC_COMPILERS_ARGS
# LAC_CXX_TYPE
# LAC_CXX_VERSION
# LAC_COMPILERS_TARGET(no)

# Checks for libraries.

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS(limits.h sys/time.h unistd.h)

# Checks for typedefs, structures, and compiler characteristics.
# George Vulov: This macro seems to cause nothing but trouble and it's only used for ancient compilers
# AC_C_CONST

# This screws up the C++ compiler, it tests to see if the C compiler supports the inline keyword
# (usually not) and then defines inline to be empty which interferes with the processing of inline
# code used with the C++ compiler. So comment it out and handle it within EDG if it is an issue.
# This is also listed as an obsolete construct within the new autoconf 2.52.
# AC_C_INLINE

AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_STRUCT_TM

# AC_DIAGNOSE([obsolete],[instead of using `AC_LANG', `AC_LANG_SAVE',
# and `AC_LANG_RESTORE', you should use `AC_LANG_PUSH' and `AC_LANG_POP'.])

AC_C_CHAR_UNSIGNED
AC_C_LONG_DOUBLE

AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(void *)
AC_CHECK_SIZEOF(long double)
AC_CHECK_SIZEOF(long long)

# Checks for library functions.
AC_FUNC_MEMCMP
AC_FUNC_MMAP
AC_FUNC_SETVBUF_REVERSED
AC_TYPE_SIGNAL
AC_FUNC_STRCOLL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(getcwd getwd mktime strcspn strerror strftime strspn strstr strtod strtol strtoul)

# CC++ specific macros
OBJ=".o"
AC_SUBST(OBJ)

EXE=""
AC_SUBST(EXE)

AC_ARG_ENABLE(purify,
[  --enable-purify        use memory managment that purify can understand],
[if test $enable_purify = yes; then
     AC_DEFINE([USING_PURIFY],[],[Support for PURIFY debugging software.])
 fi])

# AC_ARG_ENABLE(ccpp,
# [  --disable-ccpp don't support CC++ extensions],
# [if test $enable_cc++ = yes; then
#      AC_DEFINE([CCPP_EXTENSIONS_ALLOWED],[],[Support for CC++.])
#  fi],[AC_DEFINE([CCPP_EXTENSIONS_ALLOWED],[],[Support for CC++.])])

consistency_checking_define_value=0
AC_ARG_ENABLE(checking,
[  --disable-checking     don't do EDG specific consistency checking in parser],
[if test $enable_checking = yes; then
    # AC_DEFINE([CHECKING],[1],[Internal consistency tests.])
      consistency_checking_define_value=0
 fi],[
 # AC_DEFINE([CHECKING],[0],[Internal consistency tests.])
   consistency_checking_define_value=1
])

# DQ (1/6/2009): Made the comment more clear that this is an EDG feature.
AC_DEFINE_UNQUOTED([CHECKING],[$consistency_checking_define_value],[Internal EDG specific consistency tests.])

AC_ARG_ENABLE(stand-alone,
	[  --enable-stand-alone compile standalone edgcpfe],
	[standalone="$enableval"],
	[standalone="no"]
)

AC_ARG_ENABLE(cp-backend,
	[  --enable-cp-backend  generate c++ code as output],
	[cp_backend="$enableval"],
	[cp_backend="no"]
)

AC_ARG_ENABLE(sage-backend,
	[  --enable-sage-backend generate sage++ tree],
	[sage_backend="$enableval"],
	[sage_backend="no"]
)

if test "$cp_backend" = "yes" -a "$sage_backend" = "yes"; then 
  AC_MSG_ERROR(cannot have both sage and c++ backend)
fi

# Initialized values
sage_backend_defined_value=0
cp_backend_defined_value=0
build_parser_as_lib_defined_value=0

build_stand_alone_C_generator_defined_value=0
build_stand_alone_CP_generator_defined_value=0
build_stand_alone_SAGE_generator_defined_value=0

if test "$cp_backend" = "yes"; then 
  # AC_DEFINE([BACK_END_IS_CP_GEN_BE],1,[Define use of C++ generating backend (not used except for debugging).])
  GEN_BE="cp_gen_be$OBJ"
  cp_backend_defined_value=1
else
  # AC_DEFINE([BACK_END_IS_SAGE_GEN_BE],1,[Define use of SAGE specific backend to generate the SAGE AST.])
  GEN_BE="sage_gen_be$OBJ"
  sage_backend_defined_value=1
  if test "$standalone"="no"; then
     # AC_DEFINE([BUILDING_PARSER_AS_LIB],[1],[Build parser as a standalone tool (not connected to SAGE).])
     build_parser_as_lib_defined_value=1
  fi
fi

AC_SUBST(GEN_BE)

])
m4trace:config/ROSE.m4:7: -1- AC_DEFUN([ROSE_FLAG_CXX_OPTIONS], [
# Begin macro ROSE_FLAG_CXX.

# We may be asked to guess the correct flags,
# so we must know our host and the compiler used.
AC_REQUIRE([AC_CANONICAL_HOST])
AC_REQUIRE([AC_PROG_CXX])

# DQ (9/26/2015): Commented out to supress warning in aclocal.
# AC_REQUIRE([BTNG_INFO_CXX_ID])

# Given the C++ compiler command-line, create output variables HOST_CXX_VENDOR, HOST_CXX_VERSION, and HOST_CXX_LANGUAGE
# that contain the vendor (gnu, llvm, or intel), the version (as defined by CPP macros, not the --version output), and
# the language dialect (c++17, gnu++11, etc.).
ROSE_COMPILER_FEATURES([c++], [$CXX $CPPFLAGS $CXXFLAGS], [HOST_CXX_])

AC_MSG_NOTICE([in c++ option setting: FRONTEND_CXX_COMPILER_VENDOR = "$FRONTEND_CXX_COMPILER_VENDOR"])

dnl *********************************************************************
dnl * Set up the Preprocessor -D options CXXDEBUG and ARCH_DEFINES
dnl *********************************************************************
# AC_ARG_WITH(CXX_DEBUG, [  --with-CXX_DEBUG=ARG    manually set the C++ compiler debug flags to ARG (leave blank to choose automatically)])
AC_ARG_WITH(CXX_DEBUG, AS_HELP_STRING([--with-CXX_DEBUG], [manually set the C++ compiler debug flags to ARG (leave blank to choose automatically)]),[withval=yes],[withval=yes])

# if test "$with_CXX_DEBUG" = yes; then
#  # CXX_DEBUG was activated but not specified, so set it.
#  case $CXX in
#    *) CXX_DEBUG='-g' ;;
#  esac
#elif test "$with_CXX_DEBUG" = no; then
#  CXX_DEBUG=''
#else
#  CXX_DEBUG=$with_CXX_DEBUG
#fi

AC_MSG_NOTICE([with_CXX_DEBUG = "$with_CXX_DEBUG"])

if test "x$with_CXX_DEBUG" = "x"; then
   if test "x$withval" = "xyes"; then
      with_CXX_DEBUG=$withval
   else 
      if test "x$withval" = "xno"; then
         with_CXX_DEBUG=$withval
      fi
   fi
else
   AC_MSG_NOTICE([with_CXX_DEBUG is explictly set to "$with_CXX_DEBUG"])
fi

AC_MSG_NOTICE([after initialization: with_CXX_DEBUG = "$with_CXX_DEBUG"])

# echo "Setting with_CXX_DEBUG to withval = $withval"
# with_CXX_DEBUG=$withval

if test "x$with_CXX_DEBUG" = "xyes"; then
# CXX_DEBUG was activated but not specified, so set it.
  AC_MSG_NOTICE([using default options for maximal debug (true case)])
  case $CXX in
    g++)
      CXX_DEBUG="-g"
      ;;
    icpc)
      CXX_DEBUG="-g"
      ;;
    KCC | mpKCC)
      CXX_DEBUG="-g"
      ;;
    CC)
      case $host_os in
        solaris*| sun4*)
          CXX_DEBUG="-g"
    esac
    ;;
  esac
elif test "x$with_CXX_DEBUG" = "xno"; then
  CXX_DEBUG=''
# DQ (10/22/2010): turn on debug flags by default.
  AC_MSG_NOTICE([using at least some default (minimal) options for debug flags (currently the same as above) (false case)])
  case $CXX in
    g++)
      CXX_DEBUG=""
      ;;
    icpc)
      CXX_DEBUG=""
      ;;
    "KCC --c" | mpKCC)
      CXX_DEBUG=""
      ;;
    CC)
      case $host_os in
        solaris*| sun4*)
          CXX_DEBUG=""
    esac
    ;;
  esac
else
# Settings specified explicitly by the user.
  AC_MSG_NOTICE([using user provided options for CXX_DEBUG])
  CXX_DEBUG=$with_CXX_DEBUG
fi

AC_SUBST(CXX_DEBUG)
if test -n "$CXX_DEBUG"; then CXXFLAGS="$CXXFLAGS $CXX_DEBUG"; fi

# echo "Am I set: CXX_DEBUG= $CXX_DEBUG"
# echo "CXXFLAGS currently set to $CXXFLAGS"


dnl *********************************************************************
dnl * Set the C++ compiler optimization flags in CXXOPT
dnl *********************************************************************
dnl This should use the AC_ARG_ENABLE not AC_ARC_WITH!

AC_MSG_NOTICE([setup CXX_OPTIMIZE])

AC_ARG_WITH(CXX_OPTIMIZE, [  --with-CXX_OPTIMIZE=ARG   manually set the C++ compiler optimization
                           to ARG (leave blank to choose automatically)])
if test "$with_CXX_OPTIMIZE" = yes; then
# CXX_OPTIMIZE was activated but not specified, so set it.
  case $CXX in
    KCC | mpKCC) CXX_OPTIMIZE='-g +K0 --no_exceptions --no_rtti --keep_gen_c' ;;
    *) CXX_OPTIMIZE='' ;;
  esac
elif test "$with_CXX_OPTIMIZE" = no; then
# use defaults for any compiler compiling ROSE (for g++ this means no optimization).
  CXX_OPTIMIZE=''
# else
elif test "$with_CXX_OPTIMIZE"; then
  CXX_OPTIMIZE=$with_CXX_OPTIMIZE
else
# DQ (6/30/2013): Select optimization level -O2 to be the default for ROSE distributions.
  CXX_OPTIMIZE='-O2'
fi
AC_SUBST(CXX_OPTIMIZE)
if test "$CXX_OPTIMIZE"; then CXXFLAGS="$CXXFLAGS $CXX_OPTIMIZE"; fi

AC_MSG_NOTICE([after initialization: with_CXX_OPTIMIZE = "$with_CXX_OPTIMIZE"])
AC_MSG_NOTICE([after initialization: CXX_OPTIMIZE = "$CXX_OPTIMIZE"])

# echo "After processing CXX_OPTIMIZE: Exiting as a test!"
# exit 1

dnl *********************************************************************
dnl * Set the C++ compiler flags in CXX_WARNINGS
dnl *********************************************************************
dnl This should use the AC_ARG_ENABLE not AC_ARC_WITH!

AC_MSG_NOTICE([setup CXX_WARNING CXX = "$CXX"])

# AC_ARG_ENABLE(warnings, AS_HELP_STRING([--enable-warnings], [Support for a uniform warning level for ROSE development]),[enableval=yes],[enableval=yes])
# AC_ARG_WITH(CXX_WARNINGS, [  --with-CXX_WARNINGS=ARG   manually set the C++ compiler warning flags to ARG (leave blank to choose automatically)])
AC_ARG_WITH(CXX_WARNINGS, AS_HELP_STRING([--with-CXX_WARNINGS], [Support for a uniform warning level for ROSE development]),[withval=yes],[withval=yes])
# AC_ARG_WITH(CXX_WARNINGS, AS_HELP_STRING([--with-CXX_WARNINGS], [Support for a uniform warning level for ROSE development]),[with_CXX_WARNINGS=yes],[with_CXX_WARNINGS=yes])

AC_MSG_NOTICE([with_CXX_WARNINGS = "$with_CXX_WARNINGS"])

if test "x$with_CXX_WARNINGS" = "x"; then
   if test "x$withval" = "xyes"; then
      with_CXX_WARNINGS=$withval
   else 
      if test "x$withval" = "xno"; then
         with_CXX_WARNINGS=$withval
      fi
   fi
else
   AC_MSG_NOTICE([with_CXX_WARNINGS is explictly set to "$with_CXX_WARNINGS"])
fi

AC_MSG_NOTICE([after initialization: with_CXX_WARNINGS = "$with_CXX_WARNINGS"])

# echo "Setting with_CXX_WARNINGS to withval = $withval"
# with_CXX_WARNINGS=$withval

if test "x$with_CXX_WARNINGS" = "xyes"; then
# DQ (12/3/2016): Add these options to what may have been specified using enable_fatal_rose_warnings.
# CXX_WARNINGS was activated but not specified, so set it.
  AC_MSG_NOTICE([using default options for maximal warnings (true case)])
# case $CXX in
  case $FRONTEND_CXX_COMPILER_VENDOR in
#   g++)
    gnu)
    # cc1plus: warning: command line option "-Wstrict-prototypes" is valid for Ada/C/ObjC but not for C++
    # cc1plus: warning: command line option "-Wmissing-prototypes" is valid for Ada/C/ObjC but not for C++
    # CXX_WARNINGS="-Wall -Wstrict-prototypes -Wmissing-prototypes"
    #  CXX_WARNINGS="-Wall"
    # DQ (4/5/2017): Ignore some warnings (GNU feature only meaningful for small codes).
    # CXX_WARNINGS+="-Wall -Wnomisleading-indentation -Wnonnull-compare"
    # DQ (4/5/2017): Note: specification of "-Wnomisleading-indentation" causes errors downstream in boost configuration.
    # CXX_WARNINGS+="-Wall -Wnomisleading-indentation"
      CXX_WARNINGS+="-Wall"
      ;;
#   icpc)
    intel)
    # For Intel turn on 64bit migration/portability warnings
    # CXX_WARNINGS="-w1 -Wall -Wcheck -Wp64"
    # CXX_WARNINGS+="-w1 -Wall -Wcheck -Wp64"
      CXX_WARNINGS+="-Wall"
      ;;
    clang)
    # For Intel turn on 64bit migration/portability warnings
    # CXX_WARNINGS="-w1 -Wall -Wcheck -Wp64"
    # CXX_WARNINGS+="-w1 -Wall -Wcheck -Wp64"
      CXX_WARNINGS+="-Wall -Wno-unused-local-typedefs -Wno-attributes"
      ;;
#   KCC | mpKCC)
    kai)
    # CXX_WARNINGS="--for_init_diff_warning --new_for_init -w"
      CXX_WARNINGS+="--for_init_diff_warning --new_for_init -w"
      ;;
#   CC)
    sun)
      case $host_os in
        solaris*| sun4*)
        # CXX_WARNINGS=""
          CXX_WARNINGS+=""
    esac
    ;;
  esac
elif test "x$with_CXX_WARNINGS" = "xno"; then

  CXX_WARNINGS=''
# DQ (1/15/2007): turn on warnings by default.
  AC_MSG_NOTICE([using at least some default (minimal) options for warnings (false case)])
# case $CXX in
  case $FRONTEND_CXX_COMPILER_VENDOR in
#   g++)
    gnu)
    # CXX_WARNINGS="-Wall -Wstrict-prototypes -Wmissing-prototypes"
      CXX_WARNINGS="-Wall"
      ;;
#   icpc)
    intel)
    # For Intel turn on 64bit migration/portability warnings
      CXX_WARNINGS="-w1 -Wall -Wcheck -Wp64"
      ;;
    clang)
    # CXX_WARNINGS="-Wall -Wstrict-prototypes -Wmissing-prototypes"
      CXX_WARNINGS="-Wall -Wno-unused-local-typedefs -Wno-attributes"
      ;;
#   "KCC --c" | mpKCC)
    kai)
      CXX_WARNINGS="--for_init_diff_warning --new_for_init -w"
      ;;
#   CC)
    sun)
      case $host_os in
        solaris*| sun4*)
          CXX_WARNINGS=""
    esac
    ;;
  esac
else
# Settings specified explicitly by the user.
  AC_MSG_NOTICE([adding explicitly specified warnings to be used for CXX_WARNINGS])
  CXX_WARNINGS+=$with_CXX_WARNINGS
fi

AC_SUBST(CXX_WARNINGS)

if test "$CXX_WARNINGS"; then CXXFLAGS="$CXXFLAGS $CXX_WARNINGS"; fi

# echo "debugging: CXX_ID               = $CXX_ID"
# echo "debugging: CXX_VERSION          = $CXX_VERSION"
# echo "debugging: CXX_TEMPLATE_OBJECTS = $CXX_TEMPLATE_OBJECTS"

CXX_TEMPLATE_REPOSITORY_PATH='$(top_builddir)/src'
CXX_TEMPLATE_OBJECTS= # A bunch of Makefile.ams use this

AC_SUBST(CXX_TEMPLATE_REPOSITORY_PATH)
AC_SUBST(CXX_TEMPLATE_OBJECTS)

## Don't do this here since we have to use the unmodified CXXFLAGS variable for the 
## configure compilation tests (and we want don't want those templates in our repository)
dnl if test "$CXX_TEMPLATES"; then CXXFLAGS="$CXXFLAGS $CXX_TEMPLATES"; fi

AC_MSG_NOTICE([C_DEBUG      = "$C_DEBUG"])
AC_MSG_NOTICE([CXX_DEBUG    = "$CXX_DEBUG"])
AC_MSG_NOTICE([C_WARNINGS   = "$C_WARNINGS"])
AC_MSG_NOTICE([CXX_WARNINGS = "$CXX_WARNINGS"])

# echo "Exiting at the base of ROSE FLAG CXX OPTIONS..."
# exit 1;

# End macro ROSE_FLAG_CXX_OPTIONS.
])
m4trace:config/ROSE.m4:299: -1- AC_DEFUN([ROSE_FLAG_C_OPTIONS], [
# Begin macro ROSE_FLAG_C_OPTIONS.

# We may be asked to guess the correct flags,
# so we must know our host and the compiler used.
AC_REQUIRE([AC_CANONICAL_HOST])
AC_REQUIRE([AC_PROG_CC])
# AC_REQUIRE([BTNG_INFO_CXX_ID])

AC_MSG_NOTICE([in c option setting: FRONTEND_CXX_COMPILER_VENDOR = "$FRONTEND_CXX_COMPILER_VENDOR"])

dnl *********************************************************************
dnl * Set up the C compiler options C_DEBUG
dnl *********************************************************************
# AC_ARG_WITH(C_DEBUG, [  --with-C_DEBUG=ARG    manually set the C compiler debug flags to ARG (leave blank to choose automatically)])
AC_ARG_WITH(C_DEBUG, AS_HELP_STRING([--with-C_DEBUG], [manually set the C compiler debug flags to ARG (leave blank to choose automatically)]),[withval=yes],[withval=yes])

# if test "$with_C_DEBUG" = yes; then
#   # C_DEBUG was activated but not specified, so set it.
#   case $CC in
#     *) C_DEBUG='-g' ;;
#   esac
# elif test "$with_C_DEBUG" = no; then
#   C_DEBUG=''
# else
#   C_DEBUG=$with_C_DEBUG
# fi

AC_MSG_NOTICE([with_C_DEBUG = "$with_C_DEBUG"])

if test "x$with_C_DEBUG" = "x"; then
   if test "x$withval" = "xyes"; then
      with_C_DEBUG=$withval
   else 
      if test "x$withval" = "xno"; then
         with_C_DEBUG=$withval
      fi
   fi
else
   AC_MSG_NOTICE([with_C_DEBUG is explictly set to "$with_C_DEBUG"])
fi

AC_MSG_NOTICE([after initialization: with_C_DEBUG = "$with_C_DEBUG"])

# echo "Setting with_C_DEBUG to withval = $withval"
# with_C_DEBUG=$withval

if test "x$with_C_DEBUG" = "xyes"; then
# C_DEBUG was activated but not specified, so set it.
  AC_MSG_NOTICE([using default options for maximal debug (true case)])
  case $CC in
    gcc)
      C_DEBUG="-g"
      ;;
    icc)
      C_DEBUG="-g"
      ;;
    KCC | mpKCC)
      C_DEBUG="-g"
      ;;
    cc)
      case $host_os in
        solaris*| sun4*)
          C_DEBUG="-g"
    esac
    ;;
  esac
elif test "x$with_C_DEBUG" = "xno"; then
  C_DEBUG=''
# DQ (10/22/2010): turn on debug flags by default.
  AC_MSG_NOTICE([using at least some default (minimal) options for debug flags (currently the same as above) (false case)])
  case $CC in
    gcc)
      C_DEBUG=""
      ;;
    icc)
      C_DEBUG=""
      ;;
    "KCC --c" | mpKCC)
      C_DEBUG=""
      ;;
    cc)
      case $host_os in
        solaris*| sun4*)
          C_DEBUG=""
    esac
    ;;
  esac
else
# Settings specified explicitly by the user.
  AC_MSG_NOTICE([using user provided options for C_DEBUG])
  C_DEBUG=$with_C_DEBUG
fi

AC_SUBST(C_DEBUG)
if test -n "$C_DEBUG"; then CFLAGS="$CFLAGS $C_DEBUG"; fi

# echo "Am I set: C_DEBUG= $C_DEBUG"


dnl *********************************************************************
dnl * Set the C compiler optimization flags in C_OPTIMIZE
dnl *********************************************************************
dnl This should use the AC_ARG_ENABLE not AC_ARC_WITH!

AC_MSG_NOTICE([setup C_OPTIMIZE])

AC_ARG_WITH(C_OPTIMIZE, [  --with-C_OPTIMIZE=ARG   manually set the C compiler optimization
                           to ARG (leave blank to choose automatically)])
if test "$with_C_OPTIMIZE" = yes; then
  # C_OPTIMIZE was activated but not specified, so set it.
  case $CC in
    "KCC --c" | mpKCC) C_OPTIMIZE='-g +K0 --no_exceptions --no_rtti --keep_gen_c' ;;
    *) C_OPTIMIZE='' ;;
  esac
elif test "$with_C_OPTIMIZE" = no; then
  C_OPTIMIZE=''
# else
elif test "$with_C_OPTIMIZE"; then
  C_OPTIMIZE=$with_C_OPTIMIZE
else
# DQ (6/30/2013): Select optimization level -O2 to be the default for ROSE distributions.
  C_OPTIMIZE='-O2'
fi
AC_SUBST(C_OPTIMIZE)
if test "$C_OPTIMIZE"; then CFLAGS="$CFLAGS $C_OPTIMIZE"; fi

AC_MSG_NOTICE([after initialization: with_C_OPTIMIZE = "$with_C_OPTIMIZE"])
AC_MSG_NOTICE([after initialization: C_OPTIMIZE = "$C_OPTIMIZE"])

dnl *********************************************************************
dnl * Set the C++ compiler flags in C_WARNINGS
dnl *********************************************************************
dnl This should use the AC_ARG_ENABLE not AC_ARC_WITH!

AC_MSG_NOTICE([setup C_WARNINGS CC = "$CC"])

# AC_ARG_WITH(C_WARNINGS, [  --with-C_WARNINGS=ARG   manually set the C compiler warning flags to ARG (leave blank to choose automatically)])
# AC_ARG_WITH(C_WARNINGS, AS_HELP_STRING([--with-C_WARNINGS], [Support for a uniform warning level for ROSE development]),[with_C_WARNINGS=yes],[with_C_WARNINGS=yes])
AC_ARG_WITH(C_WARNINGS, AS_HELP_STRING([--with-C_WARNINGS], [Support for a uniform warning level for ROSE development]),[withval=yes],[withval=yes])

AC_MSG_NOTICE([with_C_WARNINGS = "$with_C_WARNINGS"])

if test "x$with_C_WARNINGS" = "x"; then
   if test "x$withval" = "xyes"; then
      with_C_WARNINGS=$withval
   else 
      if test "x$withval" = "xno"; then
         with_C_WARNINGS=$withval
      fi
   fi
else
   AC_MSG_NOTICE([with_C_WARNINGS is explictly set to "$with_C_WARNINGS"])
fi

AC_MSG_NOTICE([after initialization: with_C_WARNINGS = "$with_C_WARNINGS"])

if test "x$with_C_WARNINGS" = "xyes"; then
  # C_WARNINGS was activated but not specified, so set it.
# DQ (3/21/2017): Base the C language warning specification on the vendor for the C++ compiler (same as vendor for C compiler).
# case $CC in
  case $FRONTEND_CXX_COMPILER_VENDOR in
#   gcc)
    gnu)
    # C_WARNINGS="-Wall -Wstrict-prototypes -Wmissing-prototypes"
      C_WARNINGS+="-Wall -Wstrict-prototypes -Wmissing-prototypes"
      ;;
#   icc)
    intel)
    # For Intel turn on 64bit migration/portability warnings
    # C_WARNINGS="-w -Wall -Wcheck -Wp64"
      C_WARNINGS+="-w -Wall -Wcheck -Wp64"
      ;;
    clang)
    # C_WARNINGS="-Wall -Wstrict-prototypes -Wmissing-prototypes"
      C_WARNINGS+="-Wall -Wno-unused-local-typedefs -Wno-attributes"
      ;;
#   "KCC --c" | mpKCC)
    kai)
    # C_WARNINGS="--for_init_diff_warning --new_for_init -w"
      C_WARNINGS+="--for_init_diff_warning --new_for_init -w"
      ;;
#   cc)
    sun)
      case $host_os in
        solaris*| sun4*)
        # C_WARNINGS=""
          C_WARNINGS+=""
    esac
    ;;
  esac
elif test "x$with_C_WARNINGS" = "xno"; then
# DQ (12/3/2016): Ony use default warning when enable_fatal_rose_warnings is not used.
  C_WARNINGS=''
# DQ (1/15/2007): turn on warnings by default.
# case $CC in
  case $FRONTEND_CXX_COMPILER_VENDOR in
#   gcc)
    gnu)
    # C_WARNINGS="-Wall -Wstrict-prototypes -Wmissing-prototypes"
      C_WARNINGS="-Wall"
      ;;
#   icc)
    intel)
    # For Intel turn on 64bit migration/portability warnings
      C_WARNINGS="-w1 -Wall -Wcheck -Wp64"
      ;;
    clang)
    # C_WARNINGS="-Wall -Wstrict-prototypes -Wmissing-prototypes"
      C_WARNINGS="-Wall -Wno-unused-local-typedefs -Wno-attributes"
      ;;
#   "KCC --c" | mpKCC)
    kai)
      C_WARNINGS="--for_init_diff_warning --new_for_init -w"
      ;;
#   cc)
    sun)
      case $host_os in
        solaris*| sun4*)
          C_WARNINGS=""
    esac
    ;;
  esac
else
  AC_MSG_NOTICE([adding explicitly specified warnings to be used.])
  C_WARNINGS+=$with_C_WARNINGS
fi

AC_SUBST(C_WARNINGS)

if test "$C_WARNINGS"; then CFLAGS="$CFLAGS $C_WARNINGS"; fi

AC_MSG_NOTICE([C_DEBUG      = "$C_DEBUG"])
AC_MSG_NOTICE([CXX_DEBUG    = "$CXX_DEBUG"])
AC_MSG_NOTICE([C_WARNINGS   = "$C_WARNINGS"])
AC_MSG_NOTICE([CXX_WARNINGS = "$CXX_WARNINGS"])

# echo "Exiting at the base of ROSE FLAG C OPTIONS..."
# exit 1;

# End macro ROSE_FLAG_C_OPTIONS.
])
m4trace:config/ROSE.m4:547: -1- AC_DEFUN([ROSE_CXX_HEADER_OPTIONS], [
# Begin macro ROSE_CXX_HEADER_OPTIONS.

# DQ (1/15/2007): This is an older discontinued option (when we used to package a 
# set of system header files for use by ROSE.
# This macro is useful if there is a prepared set of system header files that should be
# used instead of the ones that the ROSE configure process will set up automatically.
# such header are specified, they should be put into the srcdir.

AC_MSG_NOTICE([setup ROSE_CXX_HEADERS_DIR])
# echo "GCC_MAJOR = $GCC_MAJOR"

AC_ARG_WITH(GNU_CXX_HEADERS, [  --with-GNU_CXX_HEADERS            use the the directory of included GNU header files in the ROSE source tree])

# For the g++ 3.x compilers we can generally use the 2.96 header files. However
# it does not always work (using namespace std requires a previously defined 
# namespace std which is in the 3.x headers but NOT in the 2.96 headers).
if test "$with_GNU_CXX_HEADERS" = yes; then
# if ((test "$with_GNU_HEADERS" = yes) || (test "$GCC_MAJOR" = 3)); then
  # GNU_HEADERS was activated but not specified, so set it.
    AC_MSG_NOTICE([with-GNU_CXX_HEADERS = yes (use default GNU headers (preprocessed) distributed with ROSE)])
    ROSE_CXX_HEADERS_DIR="${srcdir}/GNU_CXX_HEADERS"
else
    AC_MSG_NOTICE([with_GNU_CXX_HEADERS = "$with_GNU_CXX_HEADERS"])
fi

# echo "with-GNU_CXX_HEADERS = $with_GNU_CXX_HEADERS"
# echo "ROSE_CXX_HEADERS_DIR = $ROSE_CXX_HEADERS_DIR"

AC_ARG_WITH(ROSE_INTERNAL_HEADERS, [  --with-ROSE_INTERNAL_HEADERS=ARG  manually set the directory of header files used internally)])
if test "$with_ROSE_INTERNAL_HEADERS" = ""; then
    AC_MSG_NOTICE([with-ROSE_INTERNAL_HEADERS not set])
else
    AC_MSG_NOTICE([with-ROSE_INTERNAL_HEADERS is a user defined directory])
    ROSE_CXX_HEADERS_DIR=$with_ROSE_INTERNAL_HEADERS
fi

# echo "with-ROSE_INTERNAL_HEADERS = $with_ROSE_INTERNAL_HEADERS"
# echo "ROSE_CXX_HEADERS_DIR = $ROSE_CXX_HEADERS_DIR"

export ROSE_CXX_HEADERS_DIR
# AC_SUBST(ROSE_CXX_HEADERS_DIR)

])
m4trace:config/ROSE.m4:596: -1- AC_DEFUN([ROSE_C_HEADER_OPTIONS], [
# Begin macro ROSE_C_HEADER_OPTIONS.

# DQ (1/15/2007): This is an older discontinued option (when we used to package a 
# set of system header files for use by ROSE.
# This macro is useful if there is a prepared set of system header files that should be
# used instead of the ones that the ROSE configure process will set up automatically.
# such header are specified, they should be put into the srcdir.

AC_MSG_NOTICE([setup ROSE_C_HEADERS_DIR])
# echo "GCC_MAJOR = $GCC_MAJOR"

AC_ARG_WITH(GNU_C_HEADERS, [  --with-GNU_C_HEADERS              use the the directory of included GNU header files in the ROSE source tree])

# For the g++ 3.x compilers we can generally use the 2.96 header files. However
# it does not always work (using namespace std requires a previously defined 
# namespace std which is in the 3.x headers but NOT in the 2.96 headers).
if test "$with_GNU_C_HEADERS" = yes; then
# if ((test "$with_GNU_HEADERS" = yes) || (test "$GCC_MAJOR" = 3)); then
  # GNU_HEADERS was activated but not specified, so set it.
    AC_MSG_NOTICE([with-GNU_C_HEADERS = yes (use default GNU headers (preprocessed) distributed with ROSE)])
    ROSE_C_HEADERS_DIR="${srcdir}/GNU_C_HEADERS"
else
    AC_MSG_NOTICE([with-GNU_C_HEADERS = "$with_GNU_C_HEADERS"])
fi

# echo "with-GNU_C_HEADERS = $with_GNU_C_HEADERS"
# echo "ROSE_C_HEADERS_DIR = $ROSE_C_HEADERS_DIR"

AC_ARG_WITH(ROSE_INTERNAL_HEADERS, [  --with-ROSE_INTERNAL_HEADERS=ARG  manually set the directory of header files used internally)])
if test "$with_ROSE_INTERNAL_HEADERS" = ""; then
    AC_MSG_NOTICE([with-ROSE_INTERNAL_HEADERS not set])
else
    AC_MSG_NOTICE([with-ROSE_INTERNAL_HEADERS is a user defined directory])
    ROSE_C_HEADERS_DIR=$with_ROSE_INTERNAL_HEADERS
fi

# echo "with-ROSE_INTERNAL_HEADERS = $with_ROSE_INTERNAL_HEADERS"
# echo "ROSE_C_HEADERS_DIR = $ROSE_C_HEADERS_DIR"

export ROSE_C_HEADERS_DIR
# AC_SUBST(ROSE_C_HEADERS_DIR)

])
m4trace:config/ROSE.m4:643: -1- AC_DEFUN([ROSE_SUPPORT_LONG_MAKE_CHECK_RULE], [
# Begin macro ROSE_TESTING_OPTIONS.

# This macro defines short and long versions of internla testing
# Most users just require a subset of tests to verify general 
# working behavior.  Current internal ROSE testing can however
# be quite long (particularly on older machines).  Current tests
# can be run with full levels of parallelism for multi-core or
# parallel architectures, significantly reducing the time required
# to test a distribution of ROSE.  The short tests are also used
# to test the automated "make distcheck" process for building 
# distributions.

AC_ARG_ENABLE(ROSE_LONG_MAKE_CHECK_RULE, [  --with-ROSE_LONG_MAKE_CHECK_RULE=yes  specify longer internal testsing by "make check" rule)])
if test "$with_ROSE_LONG_MAKE_CHECK_RULE" = "yes"; then
    AC_MSG_NOTICE([with_ROSE_LONG_MAKE_CHECK_RULE set (long testing used for "make check" rule)])
else
    AC_MSG_NOTICE([with_ROSE_LONG_MAKE_CHECK_RULE not set (short testing used by default)])
fi

])
m4trace:config/ac_pkg_swig.m4:63: -1- AC_DEFUN([AC_PROG_SWIG], [
        AC_PATH_PROG([SWIG],[swig])
        if test -z "$SWIG" ; then
                AC_MSG_WARN([cannot find "swig" program; you should look at http://www.swig.org])
                SWIG='echo "Error: SWIG is not installed. You should look at http://www.swig.org" ; false'
        elif test -n "$1" ; then
                AC_MSG_CHECKING([for SWIG version])
                [swig_version=`$SWIG -version 2>&1 | grep 'SWIG Version' | sed 's/.*\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*/\1/g'`]
                AC_MSG_RESULT([$swig_version])
                if test -n "$swig_version" ; then
                        # Calculate the required version number components
                        [required=$1]
                        [required_major=`echo $required | sed 's/[^0-9].*//'`]
                        if test -z "$required_major" ; then
                                [required_major=0]
                        fi
                        [required=`echo $required | sed 's/[0-9]*[^0-9]//'`]
                        [required_minor=`echo $required | sed 's/[^0-9].*//'`]
                        if test -z "$required_minor" ; then
                                [required_minor=0]
                        fi
                        [required=`echo $required | sed 's/[0-9]*[^0-9]//'`]
                        [required_patch=`echo $required | sed 's/[^0-9].*//'`]
                        if test -z "$required_patch" ; then
                                [required_patch=0]
                        fi
                        # Calculate the available version number components
                        [available=$swig_version]
                        [available_major=`echo $available | sed 's/[^0-9].*//'`]
                        if test -z "$available_major" ; then
                                [available_major=0]
                        fi
                        [available=`echo $available | sed 's/[0-9]*[^0-9]//'`]
                        [available_minor=`echo $available | sed 's/[^0-9].*//'`]
                        if test -z "$available_minor" ; then
                                [available_minor=0]
                        fi
                        [available=`echo $available | sed 's/[0-9]*[^0-9]//'`]
                        [available_patch=`echo $available | sed 's/[^0-9].*//'`]
                        if test -z "$available_patch" ; then
                                [available_patch=0]
                        fi
                        if test $available_major -lt $required_major \
                                -o $available_minor -ne $required_minor \
                                -o $available_patch -lt $required_patch ; then
                                AC_MSG_WARN([SWIG version >= $1 is required.  You have $swig_version.  You should look at http://www.swig.org])
                                SWIG='echo "Error: SWIG version >= $1 is required.  You have '"$swig_version"'.  You should look at http://www.swig.org" ; false'
                        else
                                AC_MSG_NOTICE([SWIG executable is '$SWIG'])
                                SWIG_LIB=`$SWIG -swiglib`
                                AC_MSG_NOTICE([SWIG library directory is '$SWIG_LIB'])
                        fi
                else
                        AC_MSG_WARN([cannot determine SWIG version])
                        SWIG='echo "Error: Cannot determine SWIG version.  You should look at http://www.swig.org" ; false'
                fi
        fi
        AC_SUBST([SWIG_LIB])
])
m4trace:config/acinclude.m4:16: -1- AC_DEFUN([ROSE_HELP_WITH_SEPARATOR], [
AC_ARG_WITH([],[
$1
],[])
])
m4trace:config/acinclude.m4:29: -1- AC_DEFUN([ROSE_HELP_ENABLE_SEPARATOR], [
AC_ARG_ENABLE([],[
$1
],[])
])
m4trace:config/acinclude.m4:40: -1- AC_DEFUN([ROSE_CONFIGURE_SECTION], [
  AC_MSG_RESULT()
  echo "${T_BM}$1${T_NM}"
])
m4trace:config/acinclude.m4:56: -1- AC_DEFUN([ROSE_MSG_ERROR], [
"$rose_shtool" echo "--------------------------------------------------------------------------------"
AC_MSG_ERROR([$1

For assistance, please visit http://rosecompiler.org or contact the rose-public@nersc.gov mailing list.
])
])
m4trace:config/acinclude.m4:69: -1- AC_DEFUN([ROSE_CONFIG_NICE], [
  AC_REQUIRE([AC_PROG_EGREP])
  AC_REQUIRE([LT_AC_PROG_SED])
  cat >$1<<EOF
#! /bin/sh
#
# Created by configure

EOF

  for var in CFLAGS CXXFLAGS CPPFLAGS LDFLAGS EXTRA_LDFLAGS_PROGRAM LIBS CC CXX; do
    eval val=\$$var
    if test -n "$val"; then
      echo "$var='$val' \\" >> $1
    fi
  done

  echo "'[$]0' \\" >> $1
  if test `expr -- [$]0 : "'.*"` = 0; then
    CONFIGURE_COMMAND="$CONFIGURE_COMMAND '[$]0'"
  else
    CONFIGURE_COMMAND="$CONFIGURE_COMMAND [$]0"
  fi
  for arg in $ac_configure_args; do
     if test `expr -- $arg : "'.*"` = 0; then
        if test `expr -- $arg : "--.*"` = 0; then
          break;
        fi
        echo "'[$]arg' \\" >> $1
        CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS '[$]arg'"
     else
        if test `expr -- $arg : "'--.*"` = 0; then
          break;
        fi
        echo "[$]arg \\" >> $1
        CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS [$]arg"
     fi
  done
  echo '"[$]@"' >> $1
  chmod +x $1
  CONFIGURE_COMMAND="$CONFIGURE_COMMAND $CONFIGURE_OPTIONS"
])
m4trace:config/acinclude.m4:122: -1- AC_DEFUN([ROSE_ENV_LOG], [
  if test -z "$1$2"; then
    AC_MSG_FAILURE([ROSE environment log macro takes two arguments: name, value])
  fi

  printf "%30s : %s\n" "$1" "$2" >> "$ENV_LOG"
  #echo "$1" >> $ENV_LOG
])
m4trace:config/acinclude.m4:134: -1- AC_DEFUN([ROSE_CHECK_CONFIGURE_OPTIONS], [
  for arg in $ac_configure_args; do
    dnl Sometimes the args are enclosed in single-quotes.
    arg="$(echo "$arg" | sed -e "s/^'//" -e "s/'$//")"
    case $arg in
      --with-*[)]
        arg_name="`echo [$]arg | $SED -e 's/--with-/with-/g' -e 's/=.*//g'`"
        ;;
      --without-*[)]
        arg_name="`echo [$]arg | $SED -e 's/--without-/with-/g' -e 's/=.*//g'`"
        ;;
      --enable-*[)]
        arg_name="`echo [$]arg | $SED -e 's/--enable-/enable-/g' -e 's/=.*//g'`"
        ;;
      --disable-*[)]
        arg_name="`echo [$]arg | $SED -e 's/--disable-/enable-/g' -e 's/=.*//g'`"
        ;;
      *[)]
        continue
        ;;
    esac
    case $arg_name in
      # Allow certain libtool options
      enable-ltdl-convenience | enable-libtool-lock | with-pic | with-tags | enable-shared | enable-static | enable-fast-install | with-gnu-ld[)];;

      # All the rest must be set using the ROSE_ARG_* macros
      # ROSE_ARG_* macros set rose_enable_<arg_name> or rose_with_<arg_name>
      *[)]
        is_arg_set=rose_[]`echo [$]arg_name | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ-' 'abcdefghijklmnopqrstuvwxyz_'`
        if eval test "x\$$is_arg_set" = "x"; then
          ROSE_UNKNOWN_CONFIGURE_OPTIONS="$ROSE_UNKNOWN_CONFIGURE_OPTIONS
[$]arg"
        fi
        ;;
    esac
  done

  dnl Output unknown configure options
  if test "$ROSE_UNKNOWN_CONFIGURE_OPTIONS"; then
cat <<X
--------------------------------------------------------------------------------
${T_BM}Warning${T_NM}: Unknown configure options were used:
$ROSE_UNKNOWN_CONFIGURE_OPTIONS

Please check '[$]0 --help' for available options.

X
  fi
])
m4trace:config/acinclude.m4:194: -1- AC_DEFUN([ROSE_ARG_WITH], [
rose_with_[]translit($1,A-Z0-9-,a-z0-9_)=ifelse($4,,no,$4)
ROSE_REAL_ARG_WITH([$1],[$2],[$3],[$4],ROSE_WITH_[]translit($1,a-z0-9-,A-Z0-9_))
])
m4trace:config/acinclude.m4:201: -1- AC_DEFUN([ROSE_REAL_ARG_WITH], [
ifelse([$2],,,[AC_MSG_CHECKING([$2])])
AC_ARG_WITH($1,AS_HELP_STRING([--with-$1=PREFIX],[$3]),
[
  CONFIG_HAS_[]$5=yes
  $5=[$]withval
],
[
  CONFIG_HAS_[]$5=no
  $5=ifelse($4,,no,$4)
])
AC_MSG_RESULT([[$]$5])
])
m4trace:config/acinclude.m4:221: -1- AC_DEFUN([ROSE_ARG_ENABLE], [
rose_enable_[]translit($1,A-Z0-9-,a-z0-9_)=ifelse($4,,no,$4)
ROSE_REAL_ARG_ENABLE([$1],[$2],[$3],[$4],ROSE_ENABLE_[]translit($1,a-z0-9-,A-Z0-9_))
])
m4trace:config/acinclude.m4:228: -1- AC_DEFUN([ROSE_REAL_ARG_ENABLE], [
ifelse([$2],,,[AC_MSG_CHECKING([$2])])
AC_ARG_ENABLE($1,AS_HELP_STRING([--enable-$1],[$3]),
[
  CONFIG_HAS_[]$5=yes
  $5=[$]enableval
],
[
  CONFIG_HAS_[]$5=no
  $5=ifelse($4,,no,$4)
])
AC_MSG_RESULT([[$]$5])
])
m4trace:config/ax_boost_base.m4:32: -1- AC_DEFUN([AX_BOOST_BASE], [
AC_ARG_WITH([boost],
	AS_HELP_STRING([--with-boost@<:@=DIR@:>@], [use boost (default is yes) - it is possible to specify the root directory for boost (optional)]),
	[
    if test "$withval" = "no"; then
		want_boost="no"
    elif test "$withval" = "yes"; then
        want_boost="yes"
        ac_boost_path=""
    else
	    want_boost="yes"
        ac_boost_path="$withval"
	fi
    ],
    [want_boost="yes"])


AC_ARG_WITH([boost-libdir],
        AS_HELP_STRING([--with-boost-libdir=LIB_DIR],
        [Force given directory for boost libraries. Note that this will overwrite library path detection, so use this parameter only if default library detection fails and you know exactly where your boost libraries are located.]),
        [
        if test -d $withval
        then
                ac_boost_lib_path="$withval"
        else
                AC_MSG_ERROR([--with-boost-libdir expected directory name])
        fi
        ],
        [ac_boost_lib_path=""]
)

if test "x$want_boost" = "xyes"; then
	boost_lib_version_req=ifelse([$1], ,1.20.0,$1)
	boost_lib_version_req_shorten=`expr $boost_lib_version_req : '\([[0-9]]*\.[[0-9]]*\)'`
	boost_lib_version_req_major=`expr $boost_lib_version_req : '\([[0-9]]*\)'`
	boost_lib_version_req_minor=`expr $boost_lib_version_req : '[[0-9]]*\.\([[0-9]]*\)'`
	boost_lib_version_req_sub_minor=`expr $boost_lib_version_req : '[[0-9]]*\.[[0-9]]*\.\([[0-9]]*\)'`
	if test "x$boost_lib_version_req_sub_minor" = "x" ; then
		boost_lib_version_req_sub_minor="0"
    	fi
	WANT_BOOST_VERSION=`expr $boost_lib_version_req_major \* 100000 \+  $boost_lib_version_req_minor \* 100 \+ $boost_lib_version_req_sub_minor`
	AC_MSG_CHECKING(for boostlib >= $boost_lib_version_req)
	succeeded=no

 # DQ (2/4/2010): Added to support setting Automake conditionals for boost versions.
 # export boost_lib_version_req_major
 # export boost_lib_version_req_minor
 # export boost_lib_version_req_sub_minor

 # echo "In ax boost base macro: boost_lib_version_req_major     = $boost_lib_version_req_major"
 # echo "In ax boost base macro: boost_lib_version_req_minor     = $boost_lib_version_req_minor"
 # echo "In ax boost base macro: boost_lib_version_req_sub_minor = $boost_lib_version_req_sub_minor"

	dnl first we check the system location for boost libraries
	dnl this location ist chosen if boost libraries are installed with the --layout=system option
	dnl or if you install boost with RPM
	if test "$ac_boost_path" != ""; then
		BOOST_LDFLAGS=" -L$ac_boost_path/lib"
		BOOST_CPPFLAGS="-I$ac_boost_path/include"
                ROSE_BOOST_INCLUDE_PATH="$ac_boost_path/include"
	else
		for ac_boost_path_tmp in /usr /usr/local /opt /opt/local ; do
			if test -d "$ac_boost_path_tmp/include/boost" && test -r "$ac_boost_path_tmp/include/boost"; then
				BOOST_LDFLAGS="-L$ac_boost_path_tmp/lib"
				BOOST_CPPFLAGS="-I$ac_boost_path_tmp/include"
                                ROSE_BOOST_INCLUDE_PATH="$ac_boost_path_tmp/include"
				break;
			fi
		done
	fi

# echo "WANT_BOOST_VERSION = $WANT_BOOST_VERSION"
# echo "boost_lib_version_req = $boost_lib_version_req"
# echo "BOOST_LDFLAGS  = $BOOST_LDFLAGS"
# echo "BOOST_CPPFLAGS = $BOOST_CPPFLAGS"

# DQ (1/1/2009): Set the default value based on BOOST_CPPFLAGS
# Liao (1/12/2009): ac_boost_path_tmp is one of the if's branches. 
# Moved the assignment into the two branches above
#   ROSE_BOOST_INCLUDE_PATH="$ac_boost_path_tmp/include"

 # DQ (1/1/2009): Added testing for previously installed Boost (always older version)
 # so that we can trigger the use of "-isystem" option (to g++) only when required
 # (it appears to be a problem for SWIG).
 # Use this set of paths, and the set including "/home/dquinlan" for testing this macro.
 # for ac_boost_path_tmp in /usr /usr/local /opt /opt/local /home/dquinlan; do
   for ac_boost_path_tmp in /usr /usr/local /opt /opt/local ; do
		if test "x${ac_boost_path_tmp}/include" != "x${ROSE_BOOST_INCLUDE_PATH}" && test -d "$ac_boost_path_tmp/include/boost" && test -r "$ac_boost_path_tmp/include/boost"; then
			PREVIOUSLY_INSTALLED_BOOST="$ac_boost_path_tmp/include/boost"
                        AC_MSG_WARN([detected a previously installed version of boost library: "$PREVIOUSLY_INSTALLED_BOOST"])
			break;
		fi
	done

    dnl overwrite ld flags if we have required special directory with
    dnl --with-boost-libdir parameter
    if test "$ac_boost_lib_path" != ""; then
       BOOST_LDFLAGS="-L$ac_boost_lib_path"
    fi

	CPPFLAGS_SAVED="$CPPFLAGS"
	CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS"
	export CPPFLAGS

	LDFLAGS_SAVED="$LDFLAGS"
	LDFLAGS="$LDFLAGS $BOOST_LDFLAGS"
	export LDFLAGS

	AC_LANG_PUSH(C++)
     	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
	@%:@include <boost/version.hpp>
	]], [[
	#if BOOST_VERSION >= $WANT_BOOST_VERSION
	// Everything is okay
	#else
	#  error Boost version is too old
	#endif
	]])],[
        AC_MSG_RESULT(yes)
	succeeded=yes
	found_system=yes
       	],[
       	])
	AC_LANG_POP([C++])

	dnl if we found no boost with system layout we search for boost libraries
	dnl built and installed without the --layout=system option or for a staged(not installed) version
	if test "x$succeeded" != "xyes"; then
		_version=0
		if test "$ac_boost_path" != ""; then
			if test -d "$ac_boost_path" && test -r "$ac_boost_path"; then
				for i in `ls -d $ac_boost_path/include/boost-* 2>/dev/null`; do
					_version_tmp=`echo $i | sed "s#$ac_boost_path##" | sed 's/\/include\/boost-//' | sed 's/_/./'`
					V_CHECK=`expr $_version_tmp \> $_version`
					if test "$V_CHECK" = "1" ; then
						_version=$_version_tmp
					fi
					VERSION_UNDERSCORE=`echo $_version | sed 's/\./_/'`
					BOOST_CPPFLAGS="-I$ac_boost_path/include/boost-$VERSION_UNDERSCORE"
             # DQ (12/22/2008): Modified macro to save the boost path so that it could be used with "-isystem" option (gcc).
					ROSE_BOOST_INCLUDE_PATH="$ac_boost_path/include/boost-$VERSION_UNDERSCORE"
				done
			fi
		else
			for ac_boost_path in /usr /usr/local /opt /opt/local ; do
				if test -d "$ac_boost_path" && test -r "$ac_boost_path"; then
					for i in `ls -d $ac_boost_path/include/boost-* 2>/dev/null`; do
						_version_tmp=`echo $i | sed "s#$ac_boost_path##" | sed 's/\/include\/boost-//' | sed 's/_/./'`
						V_CHECK=`expr $_version_tmp \> $_version`
						if test "$V_CHECK" = "1" ; then
							_version=$_version_tmp
	               					best_path=$ac_boost_path
						fi
					done
				fi
			done

			VERSION_UNDERSCORE=`echo $_version | sed 's/\./_/'`
			BOOST_CPPFLAGS="-I$best_path/include/boost-$VERSION_UNDERSCORE"
            if test "$ac_boost_lib_path" = ""
            then
               BOOST_LDFLAGS="-L$best_path/lib"
            fi

	    		if test "x$BOOST_ROOT" != "x"; then
				if test -d "$BOOST_ROOT" && test -r "$BOOST_ROOT" && test -d "$BOOST_ROOT/stage/lib" && test -r "$BOOST_ROOT/stage/lib"; then
					version_dir=`expr //$BOOST_ROOT : '.*/\(.*\)'`
					stage_version=`echo $version_dir | sed 's/boost_//' | sed 's/_/./g'`
			        	stage_version_shorten=`expr $stage_version : '\([[0-9]]*\.[[0-9]]*\)'`
					V_CHECK=`expr $stage_version_shorten \>\= $_version`
                    if test "$V_CHECK" = "1" -a "$ac_boost_lib_path" = "" ; then
						AC_MSG_NOTICE([will use a staged boost library from $BOOST_ROOT])
						BOOST_CPPFLAGS="-I$BOOST_ROOT"
						BOOST_LDFLAGS="-L$BOOST_ROOT/stage/lib"
					fi
				fi
	    		fi
		fi

    # DQ (12/22/2008): Fixup Boost to not use the system (OS) installation of Boost
    # BOOST_CPPFLAGS="$BOOST_CPPFLAGS/boost"

		CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS"
		export CPPFLAGS
		LDFLAGS="$LDFLAGS $BOOST_LDFLAGS"
		export LDFLAGS

		AC_LANG_PUSH(C++)
	     	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
		@%:@include <boost/version.hpp>
		]], [[
		#if BOOST_VERSION >= $WANT_BOOST_VERSION
		// Everything is okay
		#else
		#  error Boost version is too old
		#endif
		]])],[
        	AC_MSG_RESULT(yes)
		succeeded=yes
		found_system=yes
       		],[
	       	])
		AC_LANG_POP([C++])
	fi

 # DQ (2/4/2010): Added to get version information for what we are using.
   AC_MSG_NOTICE([in boost base macro -- Boost version being used is: "$_version"])
 # rose_boost_version_number=$_version
 # export rose_boost_version_number

	if test "$succeeded" != "yes" ; then
		if test "$_version" = "0" ; then
       # This was always a confusing error message so make it more explicit for users.
       # AC_MSG_ERROR([[We could not detect the boost libraries (version $boost_lib_version_req_shorten or higher). If you have a staged boost library (still not installed) please specify \$BOOST_ROOT in your environment and do not give a PATH to --with-boost option.  If you are sure you have boost installed, then check your version number looking in <boost/version.hpp>. See http://randspringer.de/boost for more documentation.]])
			AC_MSG_ERROR([Boost libraries (version $boost_lib_version_req_shorten or higher) must be specified on the configure line (using the --with-boost switch) and the boost libraries must be in your LD_LIBRARY_PATH])
		else
			AC_MSG_FAILURE([your boost libraries seems to old (version $_version)])
		fi
	else
		AC_SUBST(BOOST_CPPFLAGS)
		AC_SUBST(BOOST_LDFLAGS)
		AC_DEFINE(HAVE_BOOST,,[define if the Boost library is available])
	fi

        CPPFLAGS="$CPPFLAGS_SAVED"
       	LDFLAGS="$LDFLAGS_SAVED"
fi

# DQ (12/22/2008): Modified macro to save the boost path so that it could be used with "-isystem" 
# option to include the boost path specified on the configure command ahead of "/usr/local/include" 
# so that we can get the required version of Boost on systems that have it installed by default.
# echo "Final Test: ROSE_BOOST_INCLUDE_PATH = $ROSE_BOOST_INCLUDE_PATH"
# AC_SUBST(ROSE_BOOST_INCLUDE_PATH)

# DQ (1/1/2009): This use of "-isystem" is not triggered only when there is
# a previously installed version of ROSE detected (e.g. in /usr/liclude/boost).
# Note that use of "-isystem" option with g++ will cause SWIG to fail.
if test "$PREVIOUSLY_INSTALLED_BOOST" != ""; then
 # echo "Using the -isystem option of g++ to force the use of the specified version of Boost ahead of a previously installed version of boost on your system at: $PREVIOUSLY_INSTALLED_BOOST"
   AC_MSG_NOTICE(using the -isystem option of g++ to force the use of the specified version of Boost ahead of a previously installed version of boost on your system at: $PREVIOUSLY_INSTALLED_BOOST)
   AC_MSG_WARN([--with-javaport cannot be used with the -isystem option])
   ROSE_BOOST_PREINCLUDE_PATH="-isystem $ROSE_BOOST_INCLUDE_PATH"
   ROSE_BOOST_NORMAL_INCLUDE_PATH=""
   AC_MSG_WARN([detected previously installed version of boost (please remove older version of Boost before installing ROSE); continuing but expect Boost to be a problem])
 # AC_MSG_ERROR([[Detected previously installed version of boost (please remove older version of Boost before installing ROSE) (continuing but expect Boost to be a problem...)]])
 # Remove this exit (as a test) after detecting what I expect is a problem...
 # exit 1
else
   AC_MSG_NOTICE(no previously installed version of boost detected: using boost include directories with normal -I option)
   ROSE_BOOST_PREINCLUDE_PATH=""
   ROSE_BOOST_NORMAL_INCLUDE_PATH="-I$ROSE_BOOST_INCLUDE_PATH"
fi

AC_SUBST(ROSE_BOOST_PREINCLUDE_PATH)
AC_SUBST(ROSE_BOOST_NORMAL_INCLUDE_PATH)


])
m4trace:config/ax_boost_chrono.m4:34: -1- AC_DEFUN([AX_BOOST_CHRONO], [
	AC_ARG_WITH([boost-chrono],
	AS_HELP_STRING([--with-boost-chrono@<:@=special-lib@:>@],
                   [use the Chrono library from boost - it is possible to specify a certain library for the linker
                        e.g. --with-boost-chrono=boost_chrono-gcc-mt ]),
        [
        if test "$withval" = "no"; then
			want_boost="no"
        elif test "$withval" = "yes"; then
            want_boost="yes"
            ax_boost_user_chrono_lib=""
        else
		    want_boost="yes"
		ax_boost_user_chrono_lib="$withval"
		fi
        ],
        [want_boost="yes"]
	)

	if test "x$want_boost" = "xyes"; then
        AC_REQUIRE([AC_PROG_CC])
        AC_REQUIRE([AC_CANONICAL_BUILD])
		CPPFLAGS_SAVED="$CPPFLAGS"
		CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS"
		export CPPFLAGS

		LDFLAGS_SAVED="$LDFLAGS"
		LDFLAGS="$LDFLAGS $BOOST_LDFLAGS"
		export LDFLAGS

		LIBS_SAVED="$LIBS"
		LIBS="$LIBS $BOOST_SYSTEM_LIB $BOOST_THREAD_LIB"
		export LIBS

        AC_CACHE_CHECK(whether the Boost::Chrono library is available,
					   ax_cv_boost_chrono,
        [AC_LANG_PUSH([C++])
			 CXXFLAGS_SAVE=$CXXFLAGS

			 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/chrono.hpp>]],
                                   [[boost::chrono::system_clock::time_point time;]])],
                   ax_cv_boost_chrono=yes, ax_cv_boost_chrono=no)
			 CXXFLAGS=$CXXFLAGS_SAVE
             AC_LANG_POP([C++])
		])
		if test "x$ax_cv_boost_chrono" = "xyes"; then
			AC_SUBST(BOOST_CPPFLAGS)

			AC_DEFINE(HAVE_BOOST_CHRONO,,[define if the Boost::Chrono library is available])
            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\/@:>@*//'`

			LDFLAGS_SAVE=$LDFLAGS
            if test "x$ax_boost_user_chrono_lib" = "x"; then
                for libextension in `ls $BOOSTLIBDIR/libboost_chrono*.so* $BOOSTLIBDIR/libboost_chrono*.dylib* $BOOSTLIBDIR/libboost_chrono*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\(boost_chrono.*\)\.so.*$;\1;' -e 's;^lib\(boost_chrono.*\)\.dylib.*$;\1;' -e 's;^lib\(boost_chrono.*\)\.a.*$;\1;'` ; do
                     ax_lib=${libextension}
				    AC_CHECK_LIB($ax_lib, exit,
                                 [BOOST_CHRONO_LIB="-l$ax_lib"; AC_SUBST(BOOST_CHRONO_LIB) link_chrono="yes"; break],
                                 [link_chrono="no"])
				done
                if test "x$link_chrono" != "xyes"; then
                for libextension in `ls $BOOSTLIBDIR/boost_chrono*.dll* $BOOSTLIBDIR/boost_chrono*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\(boost_chrono.*\)\.dll.*$;\1;' -e 's;^\(boost_chrono.*\)\.a.*$;\1;'` ; do
                     ax_lib=${libextension}
				    AC_CHECK_LIB($ax_lib, exit,
                                 [BOOST_CHRONO_LIB="-l$ax_lib"; AC_SUBST(BOOST_CHRONO_LIB) link_chrono="yes"; break],
                                 [link_chrono="no"])
				done
                fi

            else
               for ax_lib in $ax_boost_user_chrono_lib boost_chrono-$ax_boost_user_chrono_lib; do
				      AC_CHECK_LIB($ax_lib, exit,
                                   [BOOST_CHRONO_LIB="-l$ax_lib"; AC_SUBST(BOOST_CHRONO_LIB) link_chrono="yes"; break],
                                   [link_chrono="no"])
                  done

            fi
            if test "x$ax_lib" = "x"; then
                AC_MSG_ERROR([could not find a version of the library])
            fi
			if test "x$link_chrono" = "xno"; then
				AC_MSG_ERROR([could not link against "$ax_lib"])
			fi
		fi

		CPPFLAGS="$CPPFLAGS_SAVED"
	LDFLAGS="$LDFLAGS_SAVED"
	LIBS="$LIBS_SAVED"
	fi
])
m4trace:config/ax_boost_date_time.m4:30: -1- AC_DEFUN([AX_BOOST_DATE_TIME], [
	AC_ARG_WITH([boost-date-time],
	AS_HELP_STRING([--with-boost-date-time@<:@=special-lib@:>@],
                   [use the Date_Time library from boost - it is possible to specify a certain library for the linker
                        e.g. --with-boost-date-time=boost_date_time-gcc-mt-d-1_33_1 ]),
        [
        if test "$withval" = "no"; then
			want_boost="no"
        elif test "$withval" = "yes"; then
            want_boost="yes"
            ax_boost_user_date_time_lib=""
        else
		    want_boost="yes"
        	ax_boost_user_date_time_lib="$withval"
		fi
        ],
        [want_boost="yes"]
	)

	if test "x$want_boost" = "xyes"; then
        AC_REQUIRE([AC_PROG_CC])
		CPPFLAGS_SAVED="$CPPFLAGS"
		CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS"
		export CPPFLAGS

		LDFLAGS_SAVED="$LDFLAGS"
		LDFLAGS="$LDFLAGS $BOOST_LDFLAGS"
		export LDFLAGS

        AC_CACHE_CHECK(whether the Boost::Date_Time library is available,
					   ax_cv_boost_date_time,
        [AC_LANG_PUSH([C++])
		 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/date_time/gregorian/gregorian_types.hpp>]],
                                   [[using namespace boost::gregorian; date d(2002,Jan,10);
                                     return 0;
                                   ]])],
         ax_cv_boost_date_time=yes, ax_cv_boost_date_time=no)
         AC_LANG_POP([C++])
		])
		if test "x$ax_cv_boost_date_time" = "xyes"; then
			AC_DEFINE(HAVE_BOOST_DATE_TIME,,[define if the Boost::Date_Time library is available])
            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\/@:>@*//'`
            if test "x$ax_boost_user_date_time_lib" = "x"; then
                for libextension in `ls $BOOSTLIBDIR/libboost_date_time*.{so,dylib,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\(boost_date_time.*\)\.so.*$;\1;' -e 's;^lib\(boost_date_time.*\)\.a*$;\1;' -e 's;^lib\(boost_date_time.*\)\.dylib$;\1;'` ; do
                     ax_lib=${libextension}
				    AC_CHECK_LIB($ax_lib, toupper,
                                 [BOOST_DATE_TIME_LIB="-l$ax_lib"; AC_SUBST(BOOST_DATE_TIME_LIB) link_date_time="yes"; break],
                                 [link_date_time="no"])
  				done
                if test "x$link_date_time" != "xyes"; then
                for libextension in `ls $BOOSTLIBDIR/boost_date_time*.{dll,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\(boost_date_time.*\)\.dll.*$;\1;' -e 's;^\(boost_date_time.*\)\.a*$;\1;'` ; do
                     ax_lib=${libextension}
				    AC_CHECK_LIB($ax_lib, toupper,
                                 [BOOST_DATE_TIME_LIB="-l$ax_lib"; AC_SUBST(BOOST_DATE_TIME_LIB) link_date_time="yes"; break],
                                 [link_date_time="no"])
  				done
                fi

            else
               for ax_lib in $ax_boost_user_date_time_lib boost_date_time-$ax_boost_user_date_time_lib; do
				      AC_CHECK_LIB($ax_lib, main,
                                   [BOOST_DATE_TIME_LIB="-l$ax_lib"; AC_SUBST(BOOST_DATE_TIME_LIB) link_date_time="yes"; break],
                                   [link_date_time="no"])
                  done

            fi
			if test "x$link_date_time" != "xyes"; then
				AC_MSG_ERROR([could not link against "$ax_lib"])
			fi
		fi

		CPPFLAGS="$CPPFLAGS_SAVED"
    	LDFLAGS="$LDFLAGS_SAVED"
	fi
])
m4trace:config/ax_boost_filesystem.m4:33: -1- AC_DEFUN([AX_BOOST_FILESYSTEM], [
	AC_ARG_WITH([boost-filesystem],
	AS_HELP_STRING([--with-boost-filesystem@<:@=special-lib@:>@],
                   [use the Filesystem library from boost - it is possible to specify a certain library for the linker
                        e.g. --with-boost-filesystem=boost_filesystem-gcc-mt ]),
        [
        if test "$withval" = "no"; then
			want_boost="no"
        elif test "$withval" = "yes"; then
            want_boost="yes"
            ax_boost_user_filesystem_lib=""
        else
		    want_boost="yes"
        	ax_boost_user_filesystem_lib="$withval"
		fi
        ],
        [want_boost="yes"]
	)

	if test "x$want_boost" = "xyes"; then
        AC_REQUIRE([AC_PROG_CC])
		CPPFLAGS_SAVED="$CPPFLAGS"
		CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS"
		export CPPFLAGS

		LDFLAGS_SAVED="$LDFLAGS"
		LDFLAGS="$LDFLAGS $BOOST_LDFLAGS"
		export LDFLAGS
		
		LIBS_SAVED=$LIBS
		LIBS="$LIBS $BOOST_SYSTEM_LIB"
		export LIBS

        AC_CACHE_CHECK(whether the Boost::Filesystem library is available,
					   ax_cv_boost_filesystem,
        [AC_LANG_PUSH([C++])
         AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/filesystem/path.hpp>]],
                                   [[using namespace boost::filesystem;
                                   path my_path( "foo/bar/data.txt" );
                                   return 0;]])],
            				       ax_cv_boost_filesystem=yes, ax_cv_boost_filesystem=no)
         AC_LANG_POP([C++])
		])
		if test "x$ax_cv_boost_filesystem" = "xyes"; then
			AC_DEFINE(HAVE_BOOST_FILESYSTEM,,[define if the Boost::Filesystem library is available])
            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\/@:>@*//'`
            if test "x$ax_boost_user_filesystem_lib" = "x"; then
                for libextension in `ls $BOOSTLIBDIR/libboost_filesystem*.{so,dylib,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\(boost_filesystem.*\)\.so.*$;\1;' -e 's;^lib\(boost_filesystem.*\)\.a*$;\1;' -e 's;^lib\(boost_filesystem.*\)\.dylib$;\1;'` ; do
                     ax_lib=${libextension}
				    AC_CHECK_LIB($ax_lib, toupper,
                                 [BOOST_FILESYSTEM_LIB="-l$ax_lib"; AC_SUBST(BOOST_FILESYSTEM_LIB) link_filesystem="yes"; break],
                                 [link_filesystem="no"])
  				done
                if test "x$link_program_options" != "xyes"; then
                for libextension in `ls $BOOSTLIBDIR/boost_filesystem*.{dll,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\(boost_filesystem.*\)\.dll.*$;\1;' -e 's;^\(boost_filesystem.*\)\.a*$;\1;'` ; do
                     ax_lib=${libextension}
				    AC_CHECK_LIB($ax_lib, toupper,
                                 [BOOST_FILESYSTEM_LIB="-l$ax_lib"; AC_SUBST(BOOST_FILESYSTEM_LIB) link_filesystem="yes"; break],
                                 [link_filesystem="no"])
  				done
	            fi
            else
               for ax_lib in $ax_boost_user_filesystem_lib boost_filesystem-$ax_boost_user_filesystem_lib; do
				      AC_CHECK_LIB($ax_lib, toupper,
                                   [BOOST_FILESYSTEM_LIB="-l$ax_lib"; AC_SUBST(BOOST_FILESYSTEM_LIB) link_filesystem="yes"; break],
                                   [link_filesystem="no"])
                  done

            fi
			if test "x$link_filesystem" != "xyes"; then
				AC_MSG_ERROR([could not link against "$ax_lib"])
			fi
		fi

		CPPFLAGS="$CPPFLAGS_SAVED"
    		LDFLAGS="$LDFLAGS_SAVED"
		LIBS="$LIBS_SAVED"
	fi
])
m4trace:config/ax_boost_iostreams.m4:35: -1- AC_DEFUN([AX_BOOST_IOSTREAMS], [
    AC_ARG_WITH([boost-iostreams],
        AS_HELP_STRING([--with-boost-iostreams@<:@=special-lib@:>@],
            [use the IOStreams library from boost - it is possible to specify a certain library for the linker
                        e.g. --with-boost-iostreams=boost_iostreams-gcc-mt-d-1_33_1 ]),
        [
            if test "$withval" = "no"; then
                want_boost="no"
            elif test "$withval" = "yes"; then
                want_boost="yes"
                ax_boost_user_iostreams_lib=""
            else
                want_boost="yes"
                ax_boost_user_iostreams_lib="$withval"
            fi
        ],
        [want_boost="yes"]
    )

    if test "x$want_boost" = "xyes"; then
        AC_REQUIRE([AC_PROG_CC])
        CPPFLAGS_SAVED="$CPPFLAGS"
        CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS"
        export CPPFLAGS

        LDFLAGS_SAVED="$LDFLAGS"
        LDFLAGS="$LDFLAGS $BOOST_LDFLAGS"
        export LDFLAGS

        AC_CACHE_CHECK([whether the boost::iostreams headers are available],
            ax_cv_boost_iostreams,
            [
                AC_LANG_PUSH([C++])
                AC_COMPILE_IFELSE(
                    [AC_LANG_PROGRAM(
                        [[
                            @%:@include <boost/iostreams/device/mapped_file.hpp>
                        ]],
                        [[
                            boost::iostreams::mapped_file_params params;
                            boost::iostreams::mapped_file f(params);
                            f.const_data();
                            return 0;
                        ]])],
                    ax_cv_boost_iostreams=yes,
                    ax_cv_boost_iostreams=no)
                AC_LANG_POP([C++])
            ])


        if test "x$ax_cv_boost_iostreams" = "xyes"; then
            AC_DEFINE(HAVE_BOOST_IOSTREAMS,,[define if the Boost::IOStreams library is available])
            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\/@:>@*//'`
            if test "x$ax_boost_user_iostreams_lib" = "x"; then
                for libextension in `ls $BOOSTLIBDIR/libboost_iostreams*.{so,dylib,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\(boost_iostreams.*\)\.so.*$;\1;' -e 's;^lib\(boost_iostreams.*\)\.a*$;\1;' -e 's;^lib\(boost_iostreams.*\)\.dylib$;\1;'` ; do
                    ax_lib=${libextension}
                    AC_CHECK_LIB($ax_lib, toupper,
                        [BOOST_IOSTREAMS_LIB="-l$ax_lib"; AC_SUBST(BOOST_IOSTREAMS_LIB) link_iostreams="yes"; break],
                        [link_iostreams="no"])
                done

                if test "x$link_iostreams" != "xyes"; then
                    for libextension in `ls $BOOSTLIBDIR/boost_iostreams*.{dll,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\(boost_iostreams.*\)\.dll.*$;\1;' -e 's;^\(boost_iostreams.*\)\.a*$;\1;'` ; do
                        ax_lib=${libextension}
                        AC_CHECK_LIB($ax_lib, toupper,
                            [BOOST_IOSTREAMS_LIB="-l$ax_lib"; AC_SUBST(BOOST_IOSTREAMS_LIB) link_iostreams="yes"; break],
                            [link_iostreams="no"])
                    done
                fi
            else
                for ax_lib in $ax_boost_user_iostreams_lib boost_iostreams-$ax_boost_user_iostreams_lib; do
                    AC_CHECK_LIB($ax_lib, main,
                        [BOOST_IOSTREAMS_LIB="-l$ax_lib"; AC_SUBST(BOOST_IOSTREAMS_LIB) link_iostreams="yes"; break],
                        [link_iostreams="no"])
                done
            fi
            
            dnl Failing to link against libiostreams should not be an error here; perhaps at a higher level it is.
            if test "x$link_iostreams" != "xyes"; then
                AC_MSG_NOTICE([boost::iostreams headers are available, but not the library])
            fi
        fi

        CPPFLAGS="$CPPFLAGS_SAVED"
        LDFLAGS="$LDFLAGS_SAVED"
    fi
])
m4trace:config/ax_boost_program_options.m4:30: -1- AC_DEFUN([AX_BOOST_PROGRAM_OPTIONS], [
	AC_ARG_WITH([boost-program-options],
		AS_HELP_STRING([--with-boost-program-options@<:@=special-lib@:>@],
                       [use the program options library from boost - it is possible to specify a certain library for the linker
                        e.g. --with-boost-program-options=boost_program_options-gcc-mt-1_33_1 ]),
        [
        if test "$withval" = "no"; then
			want_boost="no"
        elif test "$withval" = "yes"; then
            want_boost="yes"
            ax_boost_user_program_options_lib=""
        else
		    want_boost="yes"
        	ax_boost_user_program_options_lib="$withval"
		fi
        ],
        [want_boost="yes"]
	)

	if test "x$want_boost" = "xyes"; then
        AC_REQUIRE([AC_PROG_CC])
	    export want_boost
		CPPFLAGS_SAVED="$CPPFLAGS"
		CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS"
		export CPPFLAGS
		LDFLAGS_SAVED="$LDFLAGS"
		LDFLAGS="$LDFLAGS $BOOST_LDFLAGS"
		export LDFLAGS
		AC_CACHE_CHECK([whether the Boost::Program_Options library is available],
					   ax_cv_boost_program_options,
					   [AC_LANG_PUSH(C++)
 		                AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/program_options.hpp>
                                                          ]],
                                  [[boost::program_options::options_description generic("Generic options");
                                   return 0;]])],
                           ax_cv_boost_program_options=yes, ax_cv_boost_program_options=no)
			               	AC_LANG_POP([C++])
		])
		if test "$ax_cv_boost_program_options" = yes; then
				AC_DEFINE(HAVE_BOOST_PROGRAM_OPTIONS,,[define if the Boost::PROGRAM_OPTIONS library is available])
                  BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\/@:>@*//'`
                if test "x$ax_boost_user_program_options_lib" = "x"; then
                for libextension in `ls $BOOSTLIBDIR/libboost_program_options*.{so,dylib,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\(boost_program_options.*\)\.so.*$;\1;' -e 's;^lib\(boost_program_options.*\)\.a*$;\1;' -e 's;^lib\(boost_program_options.*\)\.dylib$;\1;'` ; do
                     ax_lib=${libextension}
				    AC_CHECK_LIB($ax_lib, toupper,
                                 [BOOST_PROGRAM_OPTIONS_LIB="-l$ax_lib"; AC_SUBST(BOOST_PROGRAM_OPTIONS_LIB) link_program_options="yes"; break],
                                 [link_program_options="no"])
  				done
                if test "x$link_program_options" != "xyes"; then
                for libextension in `ls $BOOSTLIBDIR/boost_program_options*.{dll,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\(boost_program_options.*\)\.dll.*$;\1;' -e 's;^\(boost_program_options.*\)\.a*$;\1;'` ; do
                     ax_lib=${libextension}
				    AC_CHECK_LIB($ax_lib, toupper,
                                 [BOOST_PROGRAM_OPTIONS_LIB="-l$ax_lib"; AC_SUBST(BOOST_PROGRAM_OPTIONS_LIB) link_program_options="yes"; break],
                                 [link_program_options="no"])
  				done
                fi
                else
                  for ax_lib in $ax_boost_user_program_options_lib boost_program_options-$ax_boost_user_program_options_lib; do
				      AC_CHECK_LIB($ax_lib, main,
                                   [BOOST_PROGRAM_OPTIONS_LIB="-l$ax_lib"; AC_SUBST(BOOST_PROGRAM_OPTIONS_LIB) link_program_options="yes"; break],
                                   [link_program_options="no"])
                  done
                fi
				if test "x$link_program_options" != "xyes"; then
					AC_MSG_ERROR([could not link against "$ax_lib"])
				fi
		fi
		CPPFLAGS="$CPPFLAGS_SAVED"
    	LDFLAGS="$LDFLAGS_SAVED"
	fi
])
m4trace:config/ax_boost_random.m4:8: -1- AC_DEFUN([AX_BOOST_RANDOM], [
	AC_ARG_WITH([boost-random],
	AS_HELP_STRING([--with-boost-random@<:@=special-lib@:>@],
                   [use the Random library from boost - it is possible to specify a certain library for the linker
                        e.g. --with-boost-random=boost_random-gcc-mt ]),
        [
        if test "$withval" = "no"; then
			want_boost="no"
        elif test "$withval" = "yes"; then
            want_boost="yes"
            ax_boost_user_random_lib=""
        else
		    want_boost="yes"
		ax_boost_user_random_lib="$withval"
		fi
        ],
        [want_boost="yes"]
	)

	if test "x$want_boost" = "xyes"; then
        AC_REQUIRE([AC_PROG_CC])
        AC_REQUIRE([AC_CANONICAL_BUILD])
		CPPFLAGS_SAVED="$CPPFLAGS"
		CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS"
		export CPPFLAGS

		LDFLAGS_SAVED="$LDFLAGS"
		LDFLAGS="$LDFLAGS $BOOST_LDFLAGS"
		export LDFLAGS

		LIBS_SAVED="$LIBS"
		LIBS="$LIBS $BOOST_SYSTEM_LIB $BOOST_THREAD_LIB"
		export LIBS

        AC_CACHE_CHECK(whether the Boost::Random library is available,
					   ax_cv_boost_random,
        [AC_LANG_PUSH([C++])
			 CXXFLAGS_SAVE=$CXXFLAGS

			 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/random.hpp>]],
                                   [[boost::random::mt19937 rng;]])],
                   ax_cv_boost_random=yes, ax_cv_boost_random=no)
			 CXXFLAGS=$CXXFLAGS_SAVE
             AC_LANG_POP([C++])
		])
		if test "x$ax_cv_boost_random" = "xyes"; then
			AC_SUBST(BOOST_CPPFLAGS)

			AC_DEFINE(HAVE_BOOST_RANDOM,,[define if the Boost::Random library is available])
            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\/@:>@*//'`

			LDFLAGS_SAVE=$LDFLAGS
            if test "x$ax_boost_user_random_lib" = "x"; then
                for libextension in `ls $BOOSTLIBDIR/libboost_random*.so* $BOOSTLIBDIR/libboost_random*.dylib* $BOOSTLIBDIR/libboost_random*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\(boost_random.*\)\.so.*$;\1;' -e 's;^lib\(boost_random.*\)\.dylib.*$;\1;' -e 's;^lib\(boost_random.*\)\.a.*$;\1;'` ; do
                     ax_lib=${libextension}
				    AC_CHECK_LIB($ax_lib, exit,
                                 [BOOST_RANDOM_LIB="-l$ax_lib"; AC_SUBST(BOOST_RANDOM_LIB) link_random="yes"; break],
                                 [link_random="no"])
				done
                if test "x$link_random" != "xyes"; then
                for libextension in `ls $BOOSTLIBDIR/boost_random*.dll* $BOOSTLIBDIR/boost_random*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\(boost_random.*\)\.dll.*$;\1;' -e 's;^\(boost_random.*\)\.a.*$;\1;'` ; do
                     ax_lib=${libextension}
				    AC_CHECK_LIB($ax_lib, exit,
                                 [BOOST_RANDOM_LIB="-l$ax_lib"; AC_SUBST(BOOST_RANDOM_LIB) link_random="yes"; break],
                                 [link_random="no"])
				done
                fi

            else
               for ax_lib in $ax_boost_user_random_lib boost_random-$ax_boost_user_random_lib; do
				      AC_CHECK_LIB($ax_lib, exit,
                                   [BOOST_RANDOM_LIB="-l$ax_lib"; AC_SUBST(BOOST_RANDOM_LIB) link_random="yes"; break],
                                   [link_random="no"])
                  done

            fi
            if test "x$ax_lib" = "x"; then
                AC_MSG_ERROR([could not find a version of the library])
            fi
			if test "x$link_random" = "xno"; then
				AC_MSG_ERROR([could not link against "$ax_lib"])
			fi
		fi

		CPPFLAGS="$CPPFLAGS_SAVED"
	LDFLAGS="$LDFLAGS_SAVED"
	LIBS="$LIBS_SAVED"
	fi
])
m4trace:config/ax_boost_regex.m4:30: -1- AC_DEFUN([AX_BOOST_REGEX], [
	AC_ARG_WITH([boost-regex],
	     AS_HELP_STRING([--with-boost-regex@<:@=special-lib@:>@],
                   [use the Regex library from boost - it is possible to specify a certain library for the linker
                        e.g. --with-boost-regex=boost_regex-gcc-mt-d-1_33_1 ]),
                   [
                   if test "$withval" = "no"; then
	           		want_boost="no"
                   elif test "$withval" = "yes"; then
                       want_boost="yes"
                       ax_boost_user_regex_lib=""
                   else
	           	    want_boost="yes"
                   	ax_boost_user_regex_lib="$withval"
	           fi
                   ],
                   [want_boost="yes"]
	)

     if test "x$want_boost" = "xyes"; then
         AC_REQUIRE([AC_PROG_CC])
	 CPPFLAGS_SAVED="$CPPFLAGS"
	 CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS"
	 export CPPFLAGS

	 LDFLAGS_SAVED="$LDFLAGS"
	 LDFLAGS="$LDFLAGS $BOOST_LDFLAGS"
         export LDFLAGS

         AC_CACHE_CHECK(whether the Boost::Regex library is available,
					   ax_cv_boost_regex,
                   [AC_LANG_PUSH([C++])
           			 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/regex.hpp> ]],
                                                   [[boost::regex r(); return 0;]])],
                                                    ax_cv_boost_regex=yes, ax_cv_boost_regex=no)
                    AC_LANG_POP([C++])
		])

         if test "x$ax_cv_boost_regex" = "xyes"; then
	        AC_DEFINE(HAVE_BOOST_REGEX,,[define if the Boost::Regex library is available])
                BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\/@:>@*//'`

                if test "x$ax_boost_user_regex_lib" = "x"; then

                    for libextension in `ls $BOOSTLIBDIR/libboost_regex*.{so,dylib,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\(boost_regex.*\)\.so.*$;\1;' -e 's;^lib\(boost_regex.*\)\.a*$;\1;' -e 's;^lib\(boost_regex.*\)\.dylib$;\1;'` ; do
                         ax_lib=${libextension}
	                 AC_CHECK_LIB($ax_lib, toupper,
                                     [BOOST_REGEX_LIB="-l$ax_lib"; AC_SUBST(BOOST_REGEX_LIB) link_regex="yes"; break],
                                     [link_regex="no"])
  	            done

                    if test "x$link_regex" != "xyes"; then
                        for libextension in `ls $BOOSTLIBDIR/boost_regex*.{dll,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\(boost_regex.*\)\.dll.*$;\1;' -e 's;^\(boost_regex.*\)\.a*$;\1;'` ; do
                         ax_lib=${libextension}
	                 AC_CHECK_LIB($ax_lib, toupper,
                                     [BOOST_REGEX_LIB="-l$ax_lib"; AC_SUBST(BOOST_REGEX_LIB) link_regex="yes"; break],
                                     [link_regex="no"])
  	                done
                    fi
                else
                    for ax_lib in $ax_boost_user_regex_lib boost_regex-$ax_boost_user_regex_lib; do
	            	AC_CHECK_LIB($ax_lib, main,
                                    [BOOST_REGEX_LIB="-l$ax_lib"; AC_SUBST(BOOST_REGEX_LIB) link_regex="yes"; break],
                                    [link_regex="no"])
                    done
                fi

	        if test "x$link_regex" != "xyes"; then
	            AC_MSG_ERROR([could not link against "$ax_lib"])
                fi
         fi

         CPPFLAGS="$CPPFLAGS_SAVED"
    	 LDFLAGS="$LDFLAGS_SAVED"
    fi
])
m4trace:config/ax_boost_serialization.m4:32: -1- AC_DEFUN([AX_BOOST_SERIALIZATION], [
    AC_ARG_WITH([boost-serialization],
        AS_HELP_STRING(
            [--with-boost-serialization@<:@=special-lib@:>@],
            [use the Serialization library from boost - it is possible to specify a certain library for the linker
             e.g. --with-boost-serialization=boost_serialization-gcc-mt-d-1_33_1 ]),
            [
                if test "$withval" = "no"; then
                    want_boost="no"
                elif test "$withval" = "yes"; then
                    want_boost="yes"
                    ax_boost_user_serialization_lib=""
                else
                    want_boost="yes"
                    ax_boost_user_serialization_lib="$withval"
                fi
            ],
            [want_boost="maybe"])

    # Boost 1.61 through 1.63 serialization with Intel compilers is broken.
    if test "$FRONTEND_CXX_COMPILER_VENDOR" = "intel" -a \
            "$rose_boost_version" -ge 106100 -a "$rose_boost_version" -le 106300 -a \
            "$support_binaries_frontend" = "yes"; then
        AC_MSG_NOTICE([this combination of boost serialization, intel compiler, and binary analysis is not supported])

    elif test "x$want_boost" = "xyes" -o "$want_boost" = "maybe"; then
        AC_REQUIRE([AC_PROG_CC])
        CPPFLAGS_SAVED="$CPPFLAGS"
        CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS"
        AC_MSG_NOTICE([BOOST_CPPFLAGS = "$BOOST_CPPFLAGS"])
        export CPPFLAGS

        LDFLAGS_SAVED="$LDFLAGS"
        LDFLAGS="$LDFLAGS $BOOST_LDFLAGS"
        export LDFLAGS

        AC_CACHE_CHECK(whether the boost::serialization headers are available,
            ax_cv_boost_serialization,
            [   AC_LANG_PUSH([C++])
                AC_COMPILE_IFELSE(AC_LANG_PROGRAM([[@%:@include <fstream>
                    @%:@include <boost/archive/text_oarchive.hpp>
                    @%:@include <boost/archive/text_iarchive.hpp>
                ]],
                [[  std::ofstream ofs("filename");
                    boost::archive::text_oarchive oa(ofs);
                    return 0;
                ]]),
                ax_cv_boost_serialization=yes, ax_cv_boost_serialization=no)
                AC_LANG_POP([C++])
            ])

        if test "x$ax_cv_boost_serialization" = "xyes"; then
            AC_DEFINE(HAVE_BOOST_SERIALIZATION,,[define if the boost::serialization headers are available])
            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\/@:>@*//'`
            if test "x$ax_boost_user_serialization_lib" = "x"; then
                for libextension in `ls $BOOSTLIBDIR/libboost_serialization*.{so,dylib,a}* 2>/dev/null |\
                        sed 's,.*/,,' |\
                        sed -e 's;^lib\(boost_serialization.*\)\.so.*$;\1;' \
                            -e 's;^lib\(boost_serialization.*\)\.a*$;\1;' \
                            -e 's;^lib\(boost_serialization.*\)\.dylib$;\1;'` ; do
                    ax_lib=${libextension}
                    AC_CHECK_LIB($ax_lib, toupper,
                        [   BOOST_SERIALIZATION_LIB="-l$ax_lib";
                            AC_DEFINE(HAVE_BOOST_SERIALIZATION_LIB,,[define if the libboost_serialization is available])
                            AC_SUBST(BOOST_SERIALIZATION_LIB) link_serialization="yes";
                            break],
                        [link_serialization="no"])
                done
                if test "x$link_serialization" != "xyes"; then
                    for libextension in `ls $BOOSTLIBDIR/boost_serialization*.{dll,a}* 2>/dev/null |\
                            sed 's,.*/,,' | \
                            sed -e 's;^\(boost_serialization.*\)\.dll.*$;\1;' \
                                -e 's;^\(boost_serialization.*\)\.a*$;\1;'` ; do
                        ax_lib=${libextension}
                        AC_CHECK_LIB($ax_lib, toupper,
                            [   BOOST_SERIALIZATION_LIB="-l$ax_lib";
                                AC_DEFINE(HAVE_BOOST_SERIALIZATION_LIB,,[define if the libboost_serialization is available])
                                AC_SUBST(BOOST_SERIALIZATION_LIB) link_serialization="yes";
                                break],
                            [link_serialization="no"])
                    done
                fi

            else
                for ax_lib in $ax_boost_user_serialization_lib boost_serialization-$ax_boost_user_serialization_lib; do
                    AC_CHECK_LIB($ax_lib, main,
                        [   BOOST_SERIALIZATION_LIB="-l$ax_lib";
                            AC_DEFINE(HAVE_BOOST_SERIALIZATION_LIB,,[define if the libboost_serialization is available])
                            AC_SUBST(BOOST_SERIALIZATION_LIB) link_serialization="yes";
                            break],
                        [link_serialization="no"])
                done
            fi
            if test "x$link_serialization" != "xyes"; then
                if test "$want_boost" = "yes"; then
                    AC_MSG_ERROR([could not link against "$ax_lib"])
                else
                    AC_MSG_NOTICE([library for boost::serialization was not found])
                fi
            fi
        fi

        CPPFLAGS="$CPPFLAGS_SAVED"
        LDFLAGS="$LDFLAGS_SAVED"
    fi

    AM_CONDITIONAL([ROSE_HAVE_BOOST_SERIALIZATION_LIB], [test "$BOOST_SERIALIZATION_LIB" != "" ])
])
m4trace:config/ax_boost_system.m4:31: -1- AC_DEFUN([AX_BOOST_SYSTEM], [
  AC_BEFORE([$0], [AX_BOOST_THREAD])

	AC_ARG_WITH([boost-system],
	AS_HELP_STRING([--with-boost-system@<:@=special-lib@:>@],
                   [use the System library from boost - it is possible to specify a certain library for the linker
                        e.g. --with-boost-system=boost_system-gcc-mt ]),
        [
        if test "$withval" = "no"; then
			want_boost="no"
        elif test "$withval" = "yes"; then
            want_boost="yes"
            ax_boost_user_system_lib=""
        else
		    want_boost="yes"
        	ax_boost_user_system_lib="$withval"
		fi
        ],
        [want_boost="yes"]
	)

	if test "x$want_boost" = "xyes"; then
        AC_REQUIRE([AC_PROG_CC])
        AC_REQUIRE([AC_CANONICAL_BUILD])
		CPPFLAGS_SAVED="$CPPFLAGS"
		CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS"
		export CPPFLAGS

		LDFLAGS_SAVED="$LDFLAGS"
		LDFLAGS="$LDFLAGS $BOOST_LDFLAGS"
		export LDFLAGS

        AC_CACHE_CHECK(whether the Boost::System library is available,
					   ax_cv_boost_system,
        [AC_LANG_PUSH([C++])
			 CXXFLAGS_SAVE=$CXXFLAGS

			 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/system/error_code.hpp>]],
                                   [[boost::system::system_category]])],
                   ax_cv_boost_system=yes, ax_cv_boost_system=no)
			 CXXFLAGS=$CXXFLAGS_SAVE
             AC_LANG_POP([C++])
		])
		if test "x$ax_cv_boost_system" = "xyes"; then
			AC_SUBST(BOOST_CPPFLAGS)

			AC_DEFINE(HAVE_BOOST_SYSTEM,,[define if the Boost::System library is available])
            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\/@:>@*//'`

			LDFLAGS_SAVE=$LDFLAGS
            if test "x$ax_boost_user_system_lib" = "x"; then
                for libextension in `ls $BOOSTLIBDIR/libboost_system*.{so,dylib,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\(boost_system.*\)\.so.*$;\1;' -e 's;^lib\(boost_system.*\)\.a*$;\1;' -e 's;^lib\(boost_system.*\)\.dylib$;\1;'` ; do
                     ax_lib=${libextension}
				    AC_CHECK_LIB($ax_lib, toupper,
                                 [BOOST_SYSTEM_LIB="-l$ax_lib"; AC_SUBST(BOOST_SYSTEM_LIB) link_system="yes"; break],
                                 [link_system="no"])
  				done
                if test "x$link_system" != "xyes"; then
                for libextension in `ls $BOOSTLIBDIR/boost_system*.{dll,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\(boost_system.*\)\.dll.*$;\1;' -e 's;^\(boost_system.*\)\.a*$;\1;'` ; do
                     ax_lib=${libextension}
				    AC_CHECK_LIB($ax_lib, toupper,
                                 [BOOST_SYSTEM_LIB="-l$ax_lib"; AC_SUBST(BOOST_SYSTEM_LIB) link_system="yes"; break],
                                 [link_system="no"])
  				done
                fi

            else
               for ax_lib in $ax_boost_user_system_lib boost_system-$ax_boost_user_system_lib; do
				      AC_CHECK_LIB($ax_lib, toupper,
                                   [BOOST_SYSTEM_LIB="-l$ax_lib"; AC_SUBST(BOOST_SYSTEM_LIB) link_system="yes"; break],
                                   [link_system="no"])
                  done

            fi
			if test "x$link_system" = "xno"; then
				AC_MSG_ERROR([could not link against "$ax_lib"])
                AC_DEFINE([USE_ROSE_BOOST_WAVE_SUPPORT],1,[Controls use of BOOST WAVE support in ROSE.])
			fi
		fi
		CPPFLAGS="$CPPFLAGS_SAVED"
    	LDFLAGS="$LDFLAGS_SAVED"
	fi
])
m4trace:config/ax_boost_thread.m4:30: -1- AC_DEFUN([AX_BOOST_THREAD], [
    AC_ARG_WITH([boost-thread],
        AS_HELP_STRING([--with-boost-thread@<:@=special-lib@:>@],
                       [Use the Thread library from Boost.  If the value is 'yes' or a certain library then ROSE will
                        incorporate multi-thread support into some of its algorithms. The default is to incorporate
                        multi-thread support into ROSE algorithms since Boost is compiled with thread support by default.
                        If thread support is enabled then user code should also be compiled and linked with switches
                        appropriate for multi-threading e.g., -pthread for GCC.  If the user compiles Boost without
                        thread support, then --without-boost-thread can be given on the ROSE configure commandline. ]),
        [
            if test "$withval" = "no"; then
                want_boost="no"
            elif test "$withval" = "yes"; then
                want_boost="yes"
                ax_boost_user_thread_lib=""
            else
                want_boost="yes"
                ax_boost_user_thread_lib="$withval"
            fi
        ],
        [want_boost="yes"]
    )

    if test "x$want_boost" = "xyes"; then
        AC_REQUIRE([AC_PROG_CC])
        AC_REQUIRE([AC_CANONICAL_BUILD])
        CPPFLAGS_SAVED="$CPPFLAGS"
        CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS"
        export CPPFLAGS

        LDFLAGS_SAVED="$LDFLAGS"
        LDFLAGS="$LDFLAGS $BOOST_LDFLAGS"
        export LDFLAGS

        AC_CACHE_CHECK(whether the boost/thread/thread.hpp header is available,
            ax_cv_boost_thread,
            [
                AC_LANG_PUSH([C++])
                CXXFLAGS_SAVE=$CXXFLAGS

                case "$build_os" in
                    solaris ) CXXFLAGS="-pthreads $CXXFLAGS" ;;
                    ming32 ) CXXFLAGS="-mthreads $CXXFLAGS" ;;
                  # DQ (12/6/2016): Added pthread option since it appears that the default installation of Boost used pthread library.
                  # Note that their is no "s" on the -pthread option for Clang or GNU g++.
                  # Note that since boost appears to not be compiled on OSX with threading enabled, we don't want to specify -pthread option to the compiler.
                  # darwin* ) CXXFLAGS="$CXXFLAGS" ;;
                  # darwin* ) CXXFLAGS="-pthread $CXXFLAGS" ;;
                    darwin* ) CXXFLAGS="$CXXFLAGS" ;;
                    * ) CXXFLAGS="-pthread $CXXFLAGS" ;;
                esac
                AC_COMPILE_IFELSE(
                    [AC_LANG_PROGRAM([[@%:@include <boost/thread/thread.hpp>]],
                                     [[boost::thread_group thrds;
                                     return 0;]])],
                    ax_cv_boost_thread=yes,
                    ax_cv_boost_thread=no)

                CXXFLAGS=$CXXFLAGS_SAVE
                AC_LANG_POP([C++])
            ])

        if test "x$ax_cv_boost_thread" = "xyes"; then
	    AC_MSG_NOTICE([boost thread header found; checking for library...])
            case "$build_os" in
                solaris ) BOOST_CPPFLAGS="-pthreads $BOOST_CPPFLAGS" ;;
                ming32 ) BOOST_CPPFLAGS="-mthreads $BOOST_CPPFLAGS" ;;
                darwin* ) BOOST_CPPFLAGS="$BOOST_CPPFLAGS" ;;
                * ) BOOST_CPPFLAGS="-pthread $BOOST_CPPFLAGS" ;;
            esac

            AC_SUBST(BOOST_CPPFLAGS)

            AC_DEFINE(HAVE_BOOST_THREAD,,[define if the Boost::Thread library is available])
            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\/@:>@*//'`

            LDFLAGS_SAVE=$LDFLAGS
            case "x$build_os" in
                *bsd* ) LDFLAGS="-pthread $LDFLAGS" ;;
            esac
            if test "x$ax_boost_user_thread_lib" = "x"; then
                for libextension in `ls $BOOSTLIBDIR/libboost_thread*.{so,dylib,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\(boost_thread.*\)\.so.*$;\1;' -e 's;^lib\(boost_thread.*\)\.a*$;\1;' -e 's;^lib\(boost_thread.*\)\.dylib$;\1;'` ; do
                    ax_lib=${libextension}
                    AC_CHECK_LIB($ax_lib, toupper,
                        [BOOST_THREAD_LIB="-l$ax_lib"; AC_SUBST(BOOST_THREAD_LIB) link_thread="yes"; break],
                        [link_thread="no"], [${BOOST_SYSTEM_LIB}])
                done
                if test "x$link_thread" != "xyes"; then
                    for libextension in `ls $BOOSTLIBDIR/boost_thread*.{dll,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\(boost_thread.*\)\.dll.*$;\1;' -e 's;^\(boost_thread.*\)\.a*$;\1;'` ; do
                        ax_lib=${libextension}
                        AC_CHECK_LIB($ax_lib, toupper,
                            [BOOST_THREAD_LIB="-l$ax_lib"; AC_SUBST(BOOST_THREAD_LIB) link_thread="yes"; break],
                            [link_thread="no"], [${BOOST_SYSTEM_LIB}])
                    done
                fi
            else
               for ax_lib in $ax_boost_user_thread_lib boost_thread-$ax_boost_user_thread_lib; do
                   AC_CHECK_LIB($ax_lib, toupper,
                       [BOOST_THREAD_LIB="-l$ax_lib"; AC_SUBST(BOOST_THREAD_LIB) link_thread="yes"; break],
                       [link_thread="no"], [${BOOST_SYSTEM_LIB}])
               done
            fi

            if test "x$link_thread" != "xyes"; then
                AC_MSG_ERROR([could not link against -lboost_thread; ROSE requires this library in "$BOOSTLIBDIR"])
            else
                case "x$build_os" in
                    *bsd* ) BOOST_LDFLAGS="-pthread $BOOST_LDFLAGS" ;;
                    *linux-gnu*) BOOST_LDFLAGS="-pthread $BOOST_LDFLAGS" ;;
                esac
                AC_MSG_RESULT([boost thread library found: $BOOST_LDFLAGS])
            fi
        fi

        CPPFLAGS="$CPPFLAGS_SAVED"
        LDFLAGS="$LDFLAGS_SAVED"
    fi
])
m4trace:config/ax_boost_wave.m4:30: -1- AC_DEFUN([AX_BOOST_WAVE], [
	AC_ARG_WITH([boost-wave],
	AS_HELP_STRING([--with-boost-wave@<:@=special-lib@:>@],
                   [use the Wave library from boost - it is possible to specify a certain library for the linker
                        e.g. --with-boost-wave=boost_wave-gcc-mt-d-1_33_1 ]),
        [
        if test "$withval" = "no"; then
			want_boost="no"
        elif test "$withval" = "yes"; then
            want_boost="yes"
            ax_boost_user_wave_lib=""
        else
		    want_boost="yes"
        	ax_boost_user_wave_lib="$withval"
		fi
        ],
        [want_boost="yes"]
	)
    AM_CONDITIONAL(ROSE_USE_BOOST_WAVE, test "x$want_boost" = "xyes"  )

	if test "x$want_boost" = "xyes"; then
        AC_REQUIRE([AC_PROG_CC])
		CPPFLAGS_SAVED="$CPPFLAGS"
		CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS"
		export CPPFLAGS

		LDFLAGS_SAVED="$LDFLAGS"
		LDFLAGS="$LDFLAGS $BOOST_LDFLAGS"
		export LDFLAGS

		LIBS_SAVED=$LIBS
		LIBS="$LIBS $BOOST_SYSTEM_LIB $BOOST_THREAD_LIB"
		export LIBS

        AC_CACHE_CHECK(whether the Boost::Wave library is available,
					   ax_cv_boost_wave,
        [AC_LANG_PUSH([C++])
			 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/wave.hpp>
												]],
                                   [[boost::wave::token_category r; return 0;]])],
                   ax_cv_boost_wave=yes, ax_cv_boost_wave=no)
         AC_LANG_POP([C++])
		])
		if test "x$ax_cv_boost_wave" = "xyes"; then

			AC_DEFINE(HAVE_BOOST_WAVE,,[define if the Boost::Wave library is available])
            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\/@:>@*//'`
            if test "x$ax_boost_user_wave_lib" = "x"; then
                for libextension in `ls $BOOSTLIBDIR/libboost_wave*.{so,dylib,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\(boost_wave.*\)\.so.*$;\1;' -e 's;^lib\(boost_wave.*\)\.a*$;\1;' -e 's;^lib\(boost_wave.*\)\.dylib$;\1;'` ; do
                     ax_lib=${libextension}
				    AC_CHECK_LIB($ax_lib, toupper,
                                 [BOOST_WAVE_LIB="-l$ax_lib"; AC_SUBST(BOOST_WAVE_LIB) link_wave="yes"; break],
                                 [link_wave="no"])
  				done
                if test "x$link_wave" != "xyes"; then
                for libextension in `ls $BOOSTLIBDIR/boost_wave*.{dll,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\(boost_wave.*\)\.dll.*$;\1;' -e 's;^\(boost_wave.*\)\.a*$;\1;'` ; do
                     ax_lib=${libextension}
				    AC_CHECK_LIB($ax_lib, toupper,
                                 [BOOST_WAVE_LIB="-l$ax_lib"; AC_SUBST(BOOST_WAVE_LIB) link_wave="yes"; break],
                                 [link_wave="no"])
  				done
                fi

            else
               for ax_lib in $ax_boost_user_wave_lib boost_wave-$ax_boost_user_wave_lib; do
				      AC_CHECK_LIB($ax_lib, main,
                                   [BOOST_WAVE_LIB="-l$ax_lib"; AC_SUBST(BOOST_WAVE_LIB) link_wave="yes"; break],
                                   [link_wave="no"])
               done
            fi
			if test "x$link_wave" != "xyes"; then
				AC_MSG_ERROR([could not link against "$ax_lib"])
			fi
            # DQ (4/7/2006): build a macro to use in source code to know when WAVE is to be used.
            AC_DEFINE([USE_ROSE_BOOST_WAVE_SUPPORT],1,[Controls use of BOOST WAVE support in ROSE.])
       
		else
            AC_DEFINE([USE_ROSE_BOOST_WAVE_SUPPORT],0,[Controls use of BOOST WAVE support in ROSE.])

		fi



		CPPFLAGS="$CPPFLAGS_SAVED"
           	LDFLAGS="$LDFLAGS_SAVED"
		LIBS="$LIBS_SAVED"

	fi
])
m4trace:config/ax_compare_version.m4:85: -1- AC_DEFUN([AX_COMPARE_VERSION], [
  AC_REQUIRE([AC_PROG_AWK])

  # Used to indicate true or false condition
  ax_compare_version=false

  # Convert the two version strings to be compared into a format that
  # allows a simple string comparison.  The end result is that a version
  # string of the form 1.12.5-r617 will be converted to the form
  # 0001001200050617.  In other words, each number is zero padded to four
  # digits, and non digits are removed.
  AS_VAR_PUSHDEF([A],[ax_compare_version_A])
  A=`echo "$1" | sed -e 's/\([[0-9]]*\)/Z\1Z/g' \
                     -e 's/Z\([[0-9]]\)Z/Z0\1Z/g' \
                     -e 's/Z\([[0-9]][[0-9]]\)Z/Z0\1Z/g' \
                     -e 's/Z\([[0-9]][[0-9]][[0-9]]\)Z/Z0\1Z/g' \
                     -e 's/[[^0-9]]//g'`

  AS_VAR_PUSHDEF([B],[ax_compare_version_B])
  B=`echo "$3" | sed -e 's/\([[0-9]]*\)/Z\1Z/g' \
                     -e 's/Z\([[0-9]]\)Z/Z0\1Z/g' \
                     -e 's/Z\([[0-9]][[0-9]]\)Z/Z0\1Z/g' \
                     -e 's/Z\([[0-9]][[0-9]][[0-9]]\)Z/Z0\1Z/g' \
                     -e 's/[[^0-9]]//g'`

  dnl # In the case of le, ge, lt, and gt, the strings are sorted as necessary
  dnl # then the first line is used to determine if the condition is true.
  dnl # The sed right after the echo is to remove any indented white space.
  m4_case(m4_tolower($2),
  [lt],[
    ax_compare_version=`echo "x$A
x$B" | sed 's/^ *//' | sort -r | sed "s/x${A}/false/;s/x${B}/true/;1q"`
  ],
  [gt],[
    ax_compare_version=`echo "x$A
x$B" | sed 's/^ *//' | sort | sed "s/x${A}/false/;s/x${B}/true/;1q"`
  ],
  [le],[
    ax_compare_version=`echo "x$A
x$B" | sed 's/^ *//' | sort | sed "s/x${A}/true/;s/x${B}/false/;1q"`
  ],
  [ge],[
    ax_compare_version=`echo "x$A
x$B" | sed 's/^ *//' | sort -r | sed "s/x${A}/true/;s/x${B}/false/;1q"`
  ],[
    dnl Split the operator from the subversion count if present.
    m4_bmatch(m4_substr($2,2),
    [0],[
      # A count of zero means use the length of the shorter version.
      # Determine the number of characters in A and B.
      ax_compare_version_len_A=`echo "$A" | $AWK '{print(length)}'`
      ax_compare_version_len_B=`echo "$B" | $AWK '{print(length)}'`

      # Set A to no more than B's length and B to no more than A's length.
      A=`echo "$A" | sed "s/\(.\{$ax_compare_version_len_B\}\).*/\1/"`
      B=`echo "$B" | sed "s/\(.\{$ax_compare_version_len_A\}\).*/\1/"`
    ],
    [[0-9]+],[
      # A count greater than zero means use only that many subversions
      A=`echo "$A" | sed "s/\(\([[0-9]]\{4\}\)\{m4_substr($2,2)\}\).*/\1/"`
      B=`echo "$B" | sed "s/\(\([[0-9]]\{4\}\)\{m4_substr($2,2)\}\).*/\1/"`
    ],
    [.+],[
      AC_WARNING(
        [invalid OP numeric parameter: $2])
    ],[])

    # Pad zeros at end of numbers to make same length.
    ax_compare_version_tmp_A="$A`echo $B | sed 's/./0/g'`"
    B="$B`echo $A | sed 's/./0/g'`"
    A="$ax_compare_version_tmp_A"

    # Check for equality or inequality as necessary.
    m4_case(m4_tolower(m4_substr($2,0,2)),
    [eq],[
      test "x$A" = "x$B" && ax_compare_version=true
    ],
    [ne],[
      test "x$A" != "x$B" && ax_compare_version=true
    ],[
      AC_WARNING([invalid OP parameter: $2])
    ])
  ])

  AS_VAR_POPDEF([A])dnl
  AS_VAR_POPDEF([B])dnl

  dnl # Execute ACTION-IF-TRUE / ACTION-IF-FALSE.
  if test "$ax_compare_version" = "true" ; then
    m4_ifvaln([$4],[$4],[:])dnl
    m4_ifvaln([$5],[else $5])dnl
  fi
])
m4trace:config/ax_compiler_vendor.m4:52: -1- AC_DEFUN([AX_COMPILER_VENDOR], [AC_CACHE_CHECK([for _AC_LANG compiler vendor], ax_cv_[]_AC_LANG_ABBREV[]_compiler_vendor,
  dnl Please add if possible support to ax_compiler_version.m4
  [# note: don't check for gcc first since some other compilers define __GNUC__
  vendors="intel:     __ICC,__ECC,__INTEL_COMPILER
           ibm:       __xlc__,__xlC__,__IBMC__,__IBMCPP__
           pathscale: __PATHCC__,__PATHSCALE__
           clang:     __clang__
           cray:      _CRAYC
           fujitsu:   __FUJITSU
           rose:      USE_ROSE
           gnu:       __GNUC__
           sun:       __SUNPRO_C,__SUNPRO_CC
           hp:        __HP_cc,__HP_aCC
           dec:       __DECC,__DECCXX,__DECC_VER,__DECCXX_VER
           borland:   __BORLANDC__,__CODEGEARC__,__TURBOC__
           comeau:    __COMO__
           kai:       __KCC
           lcc:       __LCC__
           sgi:       __sgi,sgi
           microsoft: _MSC_VER
           metrowerks: __MWERKS__
           watcom:    __WATCOMC__
           portland:  __PGI
           tcc:       __TINYC__
           unknown:   UNKNOWN"
  for ventest in $vendors; do
    case $ventest in
      *:) vendor=$ventest; continue ;;
      *)  vencpp="defined("`echo $ventest | sed 's/,/) || defined(/g'`")" ;;
    esac
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,[
      #if !($vencpp)
        thisisanerror;
      #endif
    ])], [break])
  done
  ax_cv_[]_AC_LANG_ABBREV[]_compiler_vendor=`echo $vendor | cut -d: -f1`
 ])
])
m4trace:config/ax_cxx_compile_stdcxx.m4:49: -1- AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl
  m4_if([$1], [11], [ax_cxx_compile_alternatives="11 0x"],
        [$1], [14], [ax_cxx_compile_alternatives="14 1y"],
        [$1], [17], [ax_cxx_compile_alternatives="17 1z"],
        [m4_fatal([invalid first argument `$1' to AX_CXX_COMPILE_STDCXX])])dnl
  m4_if([$2], [], [],
        [$2], [ext], [],
        [$2], [noext], [],
        [m4_fatal([invalid second argument `$2' to AX_CXX_COMPILE_STDCXX])])dnl
  m4_if([$3], [], [ax_cxx_compile_cxx$1_required=true],
        [$3], [mandatory], [ax_cxx_compile_cxx$1_required=true],
        [$3], [optional], [ax_cxx_compile_cxx$1_required=false],
        [m4_fatal([invalid third argument `$3' to AX_CXX_COMPILE_STDCXX])])
  AC_LANG_PUSH([C++])dnl
  ac_success=no
  rose_frontend_compiler_default_is_cxx$1_success=no
  AC_CACHE_CHECK(whether $CXX supports C++$1 features by default,
  ax_cv_cxx_compile_cxx$1,
  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],
    [ax_cv_cxx_compile_cxx$1=yes],
    [ax_cv_cxx_compile_cxx$1=no])])
  if test x$ax_cv_cxx_compile_cxx$1 = xyes; then
    ac_success=yes
    rose_frontend_compiler_default_is_cxx$1_success=yes
  fi
  AM_CONDITIONAL(ROSE_FRONTEND_COMPILER_DEFAULT_IS_CXX$1, [test "x$ac_success" = xyes])

  m4_if([$2], [noext], [], [dnl
  if test x$ac_success = xno; then
    for alternative in ${ax_cxx_compile_alternatives}; do
      switch="-std=gnu++${alternative}"
      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])
      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,
                     $cachevar,
        [ac_save_CXX="$CXX"
         CXX="$CXX $switch"
         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],
          [eval $cachevar=yes],
          [eval $cachevar=no])
         CXX="$ac_save_CXX"])
      if eval test x\$$cachevar = xyes; then
        CXX="$CXX $switch"
        if test -n "$CXXCPP" ; then
          CXXCPP="$CXXCPP $switch"
        fi
        ac_success=yes
        break
      fi
    done
  fi])

  m4_if([$2], [ext], [], [dnl
  if test x$ac_success = xno; then
    dnl HP's aCC needs +std=c++11 according to:
    dnl http://h21007.www2.hp.com/portal/download/files/unprot/aCxx/PDF_Release_Notes/769149-001.pdf
    dnl Cray's crayCC needs "-h std=c++11"
    for alternative in ${ax_cxx_compile_alternatives}; do
      for switch in -std=c++${alternative} +std=c++${alternative} "-h std=c++${alternative}"; do
        cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])
        AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,
                       $cachevar,
          [ac_save_CXX="$CXX"
           CXX="$CXX $switch"
           AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],
            [eval $cachevar=yes],
            [eval $cachevar=no])
           CXX="$ac_save_CXX"])
        if eval test x\$$cachevar = xyes; then
          CXX="$CXX $switch"
          if test -n "$CXXCPP" ; then
            CXXCPP="$CXXCPP $switch"
          fi
          ac_success=yes
          break
        fi
      done
      if test x$ac_success = xyes; then
        break
      fi
    done
  fi])
  AC_LANG_POP([C++])
  if test x$ax_cxx_compile_cxx$1_required = xtrue; then
    if test x$ac_success = xno; then
      AC_MSG_ERROR([a compiler with support for C++$1 language features is required])
    fi
  fi
  if test x$ac_success = xno; then
    HAVE_CXX$1=0
    AC_MSG_NOTICE([no compiler with C++$1 support was found])
  else
    HAVE_CXX$1=1
    AC_DEFINE(HAVE_CXX$1,1,
              [define if the compiler supports basic C++$1 syntax])
  fi
  AC_SUBST(HAVE_CXX$1)
  m4_if([$1], [17], [AC_MSG_WARN([C++17 is not yet standardized, so the checks may change in incompatible ways anytime])])
])
m4trace:config/ax_cxx_compile_stdcxx_11.m4:39: -1- AC_DEFUN([AX_CXX_COMPILE_STDCXX_11], [AX_CXX_COMPILE_STDCXX([11], [$1], [$2])])
m4trace:config/ax_cxx_compile_stdcxx_14.m4:34: -1- AC_DEFUN([AX_CXX_COMPILE_STDCXX_14], [AX_CXX_COMPILE_STDCXX([14], [$1], [$2])])
m4trace:config/ax_lib_mysql.m4:46: -1- AC_DEFUN([AX_LIB_MYSQL], [
    AC_ARG_WITH([mysql],
        AC_HELP_STRING([--with-mysql=@<:@ARG@:>@],
            [use MySQL client library @<:@default=yes@:>@, optionally specify path to mysql_config]
        ),
        [
        if test "$withval" = "no"; then
            want_mysql="no"
        elif test "$withval" = "yes"; then
            want_mysql="yes"
        else
            want_mysql="yes"
            MYSQL_CONFIG="$withval"
        fi
        ],
        [want_mysql="no"] dnl JJW (7/29/2008): Default should be no MySQL
    )

    MYSQL_INCLUDE=""
    MYSQL_CFLAGS=""
    MYSQL_LDFLAGS=""
    MYSQL_VERSION=""

    dnl
    dnl Check MySQL libraries (libpq)
    dnl

    if test "$want_mysql" = "yes"; then

        if test -z "$MYSQL_CONFIG" -o test; then
            AC_PATH_PROG([MYSQL_CONFIG], [mysql_config], [no])
        fi

        if test "$MYSQL_CONFIG" != "no"; then
            AC_MSG_CHECKING([for MySQL libraries])

            MYSQL_INCLUDE="`$MYSQL_CONFIG --include`"
            MYSQL_CFLAGS="`$MYSQL_CONFIG --cflags`"
            MYSQL_LDFLAGS="`$MYSQL_CONFIG --libs`"

            MYSQL_VERSION=`$MYSQL_CONFIG --version`

            AC_DEFINE([HAVE_MYSQL], [1],
                [Define to 1 if MySQL libraries are available])

            found_mysql="yes"
            AC_MSG_RESULT([yes])
        else
            found_mysql="no"
            AC_MSG_RESULT([no])
        fi
    fi

    dnl
    dnl Check if required version of MySQL is available
    dnl


    mysql_version_req=ifelse([$1], [], [], [$1])

    if test "$found_mysql" = "yes" -a -n "$mysql_version_req"; then

        AC_MSG_CHECKING([if MySQL version is >= $mysql_version_req])

        dnl Decompose required version string of MySQL
        dnl and calculate its number representation
        mysql_version_req_major=`expr $mysql_version_req : '\([[0-9]]*\)'`
        mysql_version_req_minor=`expr $mysql_version_req : '[[0-9]]*\.\([[0-9]]*\)'`
        mysql_version_req_micro=`expr $mysql_version_req : '[[0-9]]*\.[[0-9]]*\.\([[0-9]]*\)'`
        if test "x$mysql_version_req_micro" = "x"; then
            mysql_version_req_micro="0"
        fi

        mysql_version_req_number=`expr $mysql_version_req_major \* 1000000 \
                                   \+ $mysql_version_req_minor \* 1000 \
                                   \+ $mysql_version_req_micro`

        dnl Decompose version string of installed MySQL
        dnl and calculate its number representation
        mysql_version_major=`expr $MYSQL_VERSION : '\([[0-9]]*\)'`
        mysql_version_minor=`expr $MYSQL_VERSION : '[[0-9]]*\.\([[0-9]]*\)'`
        mysql_version_micro=`expr $MYSQL_VERSION : '[[0-9]]*\.[[0-9]]*\.\([[0-9]]*\)'`
        if test "x$mysql_version_micro" = "x"; then
            mysql_version_micro="0"
        fi

        mysql_version_number=`expr $mysql_version_major \* 1000000 \
                                   \+ $mysql_version_minor \* 1000 \
                                   \+ $mysql_version_micro`

        mysql_version_check=`expr $mysql_version_number \>\= $mysql_version_req_number`
        if test "$mysql_version_check" = "1"; then
            AC_MSG_RESULT([yes])
        else
            AC_MSG_RESULT([no])
        fi
    fi

    AC_SUBST([MYSQL_VERSION])
    AC_SUBST([MYSQL_INCLUDE])
    AC_SUBST([MYSQL_CFLAGS])
    AC_SUBST([MYSQL_LDFLAGS])
])
m4trace:config/ax_lib_sqlite3.m4:36: -1- AC_DEFUN([AX_LIB_SQLITE3], [
    AC_ARG_WITH([sqlite3],
        AC_HELP_STRING(
            [--with-sqlite3=@<:@ARG@:>@],
            [use SQLite 3 library @<:@default=yes@:>@, optionally specify the prefix for sqlite3 library]
        ),
        [
        if test "$withval" = "no"; then
            WANT_SQLITE3="no"
        elif test "$withval" = "yes"; then
            WANT_SQLITE3="yes"
            ac_sqlite3_path=""
        else
            WANT_SQLITE3="yes"
            ac_sqlite3_path="$withval"
        fi
        ],
        [WANT_SQLITE3="no"]
    )

    SQLITE3_CFLAGS=""
    SQLITE3_LDFLAGS=""
    SQLITE3_VERSION=""
    if test "x$WANT_SQLITE3" = "xyes"; then

        ac_sqlite3_header="sqlite3.h"

        sqlite3_version_req=ifelse([$1], [], [3.0.0], [$1])
        sqlite3_version_req_shorten=`expr $sqlite3_version_req : '\([[0-9]]*\.[[0-9]]*\)'`
        sqlite3_version_req_major=`expr $sqlite3_version_req : '\([[0-9]]*\)'`
        sqlite3_version_req_minor=`expr $sqlite3_version_req : '[[0-9]]*\.\([[0-9]]*\)'`
        sqlite3_version_req_micro=`expr $sqlite3_version_req : '[[0-9]]*\.[[0-9]]*\.\([[0-9]]*\)'`
        if test "x$sqlite3_version_req_micro" = "x" ; then
            sqlite3_version_req_micro="0"
        fi

        sqlite3_version_req_number=`expr $sqlite3_version_req_major \* 1000000 \
                                   \+ $sqlite3_version_req_minor \* 1000 \
                                   \+ $sqlite3_version_req_micro`

        AC_MSG_CHECKING([for SQLite3 library >= $sqlite3_version_req])

        if test "$ac_sqlite3_path" != ""; then
            ac_sqlite3_ldflags="-L$ac_sqlite3_path/lib"
            ac_sqlite3_cppflags="-I$ac_sqlite3_path/include"
        else
            for ac_sqlite3_path_tmp in /usr /usr/local /opt ; do
                if test -f "$ac_sqlite3_path_tmp/include/$ac_sqlite3_header" \
                    && test -r "$ac_sqlite3_path_tmp/include/$ac_sqlite3_header"; then
                    ac_sqlite3_path=$ac_sqlite3_path_tmp
                    ac_sqlite3_cppflags="-I$ac_sqlite3_path_tmp/include"
                    ac_sqlite3_ldflags="-L$ac_sqlite3_path_tmp/lib"
                    break;
                fi
            done
        fi

        ac_sqlite3_ldflags="$ac_sqlite3_ldflags -lsqlite3"

        saved_CPPFLAGS="$CPPFLAGS"
        CPPFLAGS="$CPPFLAGS $ac_sqlite3_cppflags"

        AC_LANG_PUSH(C++)
        AC_COMPILE_IFELSE(
            [
            AC_LANG_PROGRAM([[@%:@include <sqlite3.h>]],
                [[
#if (SQLITE_VERSION_NUMBER >= $sqlite3_version_req_number)
// Everything is okay
#else
#  error SQLite version is too old
#endif
                ]]
            )
            ],
            [
            AC_MSG_RESULT([yes])
            success="yes"
            ],
            [
            AC_MSG_RESULT([not found])
            succees="no"
            ]
        )
        AC_LANG_POP([C++])

        CPPFLAGS="$saved_CPPFLAGS"

        if test "$success" = "yes"; then

            SQLITE3_CFLAGS="$ac_sqlite3_cppflags"
            SQLITE3_LDFLAGS="$ac_sqlite3_ldflags"

            ac_sqlite3_header_path="$ac_sqlite3_path/include/$ac_sqlite3_header"

            dnl Retrieve SQLite release version
            if test "x$ac_sqlite3_header_path" != "x"; then
                ac_sqlite3_version=`cat $ac_sqlite3_header_path \
                    | grep '#define.*SQLITE_VERSION.*\"' | sed -e 's/.* "//' \
                        | sed -e 's/"//'`
                if test $ac_sqlite3_version != ""; then
                    SQLITE3_VERSION=$ac_sqlite3_version
                else
                    AC_MSG_WARN([cannot find SQLITE_VERSION macro in sqlite3.h header to retrieve SQLite version])
                fi
            fi

            AC_SUBST(SQLITE3_CFLAGS)
            AC_SUBST(SQLITE3_LDFLAGS)
            AC_SUBST(SQLITE3_VERSION)
            AC_DEFINE([HAVE_SQLITE3], [], [Have the SQLITE3 library])
        fi
    fi
    AM_CONDITIONAL(ROSE_USE_SQLITE_DATABASE, [test "$SQLITE3_VERSION" != ""])


])
m4trace:config/ax_lib_xerces.m4:48: -1- AC_DEFUN([AX_LIB_XERCES], [
    AC_REQUIRE([AX_PTHREAD])

    AC_ARG_WITH([xerces],
        AS_HELP_STRING([--with-xerces=@<:@ARG@:>@],
            [use Xerces C++ Parser from given prefix (ARG=path); check standard prefixes (ARG=yes); disable (ARG=no)]
        ),
        [
        if test "$withval" = "yes"; then
            if test -d /usr/local/include/xercesc ; then
                xerces_prefix=/usr/local
            elif test -d /usr/include/xercesc ; then
                xerces_prefix=/usr
            else
                xerces_prefix=""
            fi
            xerces_requested="yes"
        elif test -d "$withval"; then
            xerces_prefix="$withval"
            xerces_requested="yes"
        else
            xerces_prefix=""
            xerces_requested="no"
        fi
        ],
        [
        dnl Default behavior is implicit yes
        if test -d /usr/local/include/xercesc ; then
            xerces_prefix=/usr/local
        elif test -d /usr/include/xercesc ; then
            xerces_prefix=/usr
        else
            xerces_prefix=""
        fi
        ]
    )

    AC_ARG_WITH([xerces-inc],
        AS_HELP_STRING([--with-xerces-inc=@<:@DIR@:>@],
            [path to Xerces C++ Parser headers]
        ),
        [xerces_include_dir="$withval"],
        [xerces_include_dir=""]
    )
    AC_ARG_WITH([xerces-lib],
        AS_HELP_STRING([--with-xerces-lib=@<:@ARG@:>@],
            [link options for Xerces C++ Parser libraries]
        ),
        [xerces_ldflags="$withval"],
        [xerces_ldflags=""]
    )

    XERCES_CPPFLAGS=""
    XERCES_LDFLAGS=""
    XERCES_VERSION=""

    dnl
    dnl Collect include/lib paths and flags
    dnl
    run_xerces_test="no"

    if test -n "$xerces_prefix"; then
        xerces_include_dir="$xerces_prefix/include"
        xerces_include_dir2="$xerces_prefix/include/xercesc"
        xerces_ldflags="-L$xerces_prefix/lib"
        run_xerces_test="yes"
    elif test "$xerces_requested" = "yes"; then
        if test -n "$xerces_include_dir" -a -n "$xerces_lib_flags"; then
            xerces_include_dir2="$xerces_include_dir/xercesc"
            run_xerces_test="yes"
        fi
    else
        run_xerces_test="no"
    fi

    xerces_libs="-lxerces-c"

    dnl
    dnl Check Xerces C++ Parser files
    dnl
    if test "$run_xerces_test" = "yes"; then

        saved_CPPFLAGS="$CPPFLAGS"
        CPPFLAGS="$CPPFLAGS -I$xerces_include_dir -I$xerces_include_dir2"

        saved_LDFLAGS="$LDFLAGS"
        LDFLAGS="$LDFLAGS $xerces_ldflags $PTHREAD_LDFLAGS"

        saved_LIBS="$LIBS"
        LIBS="$xerces_libs $PTHREAD_LIBS $LIBS"

        dnl
        dnl Check Xerces headers
        dnl
        AC_MSG_CHECKING([for Xerces C++ Parser headers in $xerces_include_dir and $xerces_include_dir2])

        AC_LANG_PUSH([C++])
        AC_COMPILE_IFELSE([
            AC_LANG_PROGRAM(
                [[
@%:@include <xercesc/util/XercesDefs.hpp>
@%:@include <xercesc/util/PlatformUtils.hpp>
                ]],
                [[]]
            )],
            [
            XERCES_CPPFLAGS="-I$xerces_include_dir -I$xerces_include_dir2"
            xerces_header_found="yes"
            AC_MSG_RESULT([found])
            ],
            [
            xerces_header_found="no"
            AC_MSG_RESULT([not found])
            ]
        )
        AC_LANG_POP([C++])

        dnl
        dnl Check Xerces libraries
        dnl
        if test "$xerces_header_found" = "yes"; then

            AC_MSG_CHECKING([for Xerces C++ Parser libraries])

            AC_LANG_PUSH([C++])
            AC_LINK_IFELSE([
                AC_LANG_PROGRAM(
                    [[
@%:@include <xercesc/util/XercesDefs.hpp>
@%:@include <xercesc/util/PlatformUtils.hpp>
#if (_XERCES_VERSION >= 20200)
XERCES_CPP_NAMESPACE_USE
#endif
                    ]],
                    [[
XMLPlatformUtils::Initialize();
                    ]]
                )],
                [
                XERCES_LDFLAGS="$xerces_ldflags $PTHREAD_LDFLAGS"
                XERCES_LIBS="$xerces_libs $PTHREAD_LIBS"
                xerces_lib_found="yes"
                AC_MSG_RESULT([found])
                ],
                [
                xerces_lib_found="no"
                AC_MSG_RESULT([not found])
                ]
            )
            AC_LANG_POP([C++])
        fi

        CPPFLAGS="$saved_CPPFLAGS"
        LDFLAGS="$saved_LDFLAGS"
        LIBS="$saved_LIBS"
    fi

    AC_MSG_CHECKING([for Xerces C++ Parser])

    if test "$run_xerces_test" = "yes"; then
        if test "$xerces_header_found" = "yes" -a "$xerces_lib_found" = "yes"; then

            AC_SUBST([XERCES_CPPFLAGS])
            AC_SUBST([XERCES_LDFLAGS])
            AC_SUBST([XERCES_LIBS])

            HAVE_XERCES="yes"
        else
            HAVE_XERCES="no"
        fi

        AC_MSG_RESULT([$HAVE_XERCES])

        dnl
        dnl Check Xerces version
        dnl
        if test "$HAVE_XERCES" = "yes"; then

            xerces_version_req=ifelse([$1], [], [], [$1])

            if test  -n "$xerces_version_req"; then

                AC_MSG_CHECKING([if Xerces C++ Parser version is >= $xerces_version_req])

                if test -f "$xerces_include_dir2/util/XercesVersion.hpp"; then

                    xerces_major=`cat $xerces_include_dir2/util/XercesVersion.hpp | \
                                    grep '^#define.*XERCES_VERSION_MAJOR.*[0-9]$' | \
                                    sed -e 's/#define XERCES_VERSION_MAJOR.//'`

                    xerces_minor=`cat $xerces_include_dir2/util/XercesVersion.hpp | \
                                    grep '^#define.*XERCES_VERSION_MINOR.*[0-9]$' | \
                                    sed -e 's/#define XERCES_VERSION_MINOR.//'`

                    xerces_revision=`cat $xerces_include_dir2/util/XercesVersion.hpp | \
                                    grep '^#define.*XERCES_VERSION_REVISION.*[0-9]$' | \
                                    sed -e 's/#define XERCES_VERSION_REVISION.//'`

                    XERCES_VERSION="$xerces_major.$xerces_minor.$xerces_revision"
                    AC_SUBST([XERCES_VERSION])

                    dnl Decompose required version string and calculate numerical representation
                    xerces_version_req_major=`expr $xerces_version_req : '\([[0-9]]*\)'`
                    xerces_version_req_minor=`expr $xerces_version_req : '[[0-9]]*\.\([[0-9]]*\)'`
                    xerces_version_req_revision=`expr $xerces_version_req : '[[0-9]]*\.[[0-9]]*\.\([[0-9]]*\)'`
                    if test "x$xerces_version_req_revision" = "x"; then
                        xerces_version_req_revision="0"
                    fi

                    xerces_version_req_number=`expr $xerces_version_req_major \* 10000 \
                                               \+ $xerces_version_req_minor \* 100 \
                                               \+ $xerces_version_req_revision`

                    dnl Calculate numerical representation of detected version
                    xerces_version_number=`expr $xerces_major \* 10000 \
                                          \+ $xerces_minor \* 100 \
                                           \+ $xerces_revision`

                    xerces_version_check=`expr $xerces_version_number \>\= $xerces_version_req_number`
                    if test "$xerces_version_check" = "1"; then
                        AC_MSG_RESULT([yes])
                    else
                        AC_MSG_RESULT([no])
                        AC_MSG_WARN([found Xerces C++ Parser $XERCES_VERSION, which is older than required; possible compilation failure])
                    fi
                else
                    AC_MSG_RESULT([no])
                    AC_MSG_WARN([missing header XercesVersion.hpp; unable to determine Xerces version])
                fi
            fi
        fi

    else
        HAVE_XERCES="no"
        AC_MSG_RESULT([$HAVE_XERCES])

        if test "$xerces_requested" = "yes"; then
            AC_MSG_FAILURE([Xerces C++ parser support requested but headers or library not found; specify valid prefix of Xerces C++ using --with-xerces=@<:@DIR@:>@ or provide include directory and linker flags using --with-xerces-inc and --with-xerces-lib])
        fi
    fi
])
m4trace:config/ax_prog_bison_version.m4:39: -1- AC_DEFUN([AX_PROG_BISON_VERSION], [
    AC_REQUIRE([AC_PROG_SED])
    AC_REQUIRE([AC_PROG_GREP])

    AS_IF([test -n "$BISON"],[
        ax_bison_version="$1"

        AC_MSG_CHECKING([for bison version])
        changequote(<<,>>)
        bison_version=`$BISON --version 2>&1 \
          | $SED -n -e '/bison (GNU Bison)/b inspect
b
: inspect
s/.* (\{0,1\}\([0-9]*\.[0-9]*\.[0-9]*\))\{0,1\}.*/\1/;p'`
        changequote([,])
        AC_MSG_RESULT($bison_version)

	AC_SUBST([BISON_VERSION],[$bison_version])

        AX_COMPARE_VERSION([$bison_version],[ge],[$ax_bison_version],[
	    :
            $2
        ],[
	    :
            $3
        ])
    ],[
        AC_MSG_WARN([could not find bison])
        $3
    ])
])
m4trace:config/ax_python_devel.m4:71: -1- AU_DEFUN([AC_PYTHON_DEVEL], [m4_if($#, 0, [AX_PYTHON_DEVEL], [AX_PYTHON_DEVEL($@)])])
m4trace:config/ax_python_devel.m4:71: -1- AC_DEFUN([AC_PYTHON_DEVEL], [AC_DIAGNOSE([obsolete], [The macro `AC_PYTHON_DEVEL' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [AX_PYTHON_DEVEL], [AX_PYTHON_DEVEL($@)])])
m4trace:config/ax_python_devel.m4:72: -1- AC_DEFUN([AX_PYTHON_DEVEL], [
    #
    # Allow the use of a (user set) custom python version
    #
    AC_ARG_WITH(python,
        [  --with-python=PATH   Specify the path to the Python interpreter])

    if test "$with_python" = "no"; then
        # User does not want us to use python even if it's available.
        PYTHON=
    elif test "$with_python" = "yes"; then
        # User wants python, but we should find it ourselves
        AC_PATH_PROG([PYTHON], [python])
        if test "$PYTHON" = ""; then
            AC_MSG_FAILURE(["python" executable not found but "--with-python=yes" was specified])
        fi
    elif test "$with_python" = ""; then
        # User doesn't care if we use python or not
        AC_PATH_PROG([PYTHON], [python])
    else
        # User is telling us where to find the python interpreter
        PYTHON="$with_python"
    fi


    if test "$PYTHON" != ""; then
        AC_SUBST([PYTHON], $PYTHON)

        #
        # determine if python is the right version
        #
        AC_MSG_CHECKING([for a version of Python >= $1, < $2])
        ac_python_version=`$PYTHON -c "import sys; print(sys.version.split()[[0]])"`
        ac_supports_python_ver=`$PYTHON -c "print ('$1' <= '$ac_python_version' < '$2')"`
        if test "$ac_supports_python_ver" = "True"; then
            AC_MSG_RESULT([yes ($ac_python_version)])
            AC_DEFINE([PYTHON_VERSION], ($ac_python_version), "Version of Python selected when building ROSE.")
        else
            AC_MSG_RESULT([no ($ac_python_version)])
            AC_MSG_ERROR([this package requires Python >= $1 and < $2. If you have it installed, but it isn't the default Python interpreter in your system path, please configure --with-python=PATH to select the correct interpreter. See ``configure --help'' for reference.])
        fi

        #
        # Python installation prefix
        #
        AC_MSG_CHECKING([for python instllation prefix])
        PYTHON_ROOT=`$PYTHON -c 'import sys; print(sys.prefix);'`
        AC_MSG_RESULT([$PYTHON_ROOT])
        AC_SUBST(PYTHON_ROOT)

        #
        # Python major.minor version
        #
        AC_MSG_CHECKING([for python two-part version])
        PYTHON_VERSION_MM=`$PYTHON -c 'import sys; print(str.join(".", sys.version.split()[[0]].split(".")[[0:2]]));'`
        AC_MSG_RESULT([$PYTHON_VERSION_MM])
        AC_SUBST(PYTHON_VERSION_MM)
        
        #
        # Check if you have distutils, else fail
        #
        AC_MSG_CHECKING([for the distutils Python package])
        ac_distutils_result=`$PYTHON -c "import distutils" 2>&1`
        if test -z "$ac_distutils_result"; then
            AC_MSG_RESULT([yes])
        else
            AC_MSG_RESULT([no])
            AC_MSG_ERROR([cannot import Python module "distutils". Please check your Python installation. The error was: $ac_distutils_result])
        fi

        #
        # Check for Python include path
        #
        AC_MSG_CHECKING([for Python include path])
        if test -z "$PYTHON_CPPFLAGS"; then
            python_path=`$PYTHON -c "import distutils.sysconfig; \
                print (distutils.sysconfig.get_python_inc ());"`
            if test -n "${python_path}"; then
                python_path="-I$python_path"
            fi
            PYTHON_CPPFLAGS=$python_path
        fi
        AC_MSG_RESULT([$PYTHON_CPPFLAGS])

        #
        # Check for Python library path
        #
        AC_MSG_CHECKING([for Python library path])
        if test -z "$PYTHON_LDFLAGS"; then
            # (makes two attempts to ensure we've got a version number from the interpreter)
            ac_python_version=`cat<<EOD | $PYTHON -

# join all versioning strings, on some systems
# major/minor numbers could be in different list elements
from distutils.sysconfig import *
ret = ''
for e in get_config_vars ('VERSION'):
        if (e != None):
                ret += e
print (ret)
EOD`

            if test -z "$ac_python_version"; then
                ac_python_version=`$PYTHON -c "import sys; \
                    print (sys.version[[:3]])"`
            fi

            # Make the versioning information available to the compiler
            AC_DEFINE_UNQUOTED([HAVE_PYTHON], ["$ac_python_version"],
                               [If available, contains the Python version number currently in use.])

            # First, the library directory:
            ac_python_libdir=`cat<<EOD | $PYTHON -

# There should be only one
import distutils.sysconfig
for e in distutils.sysconfig.get_config_vars ('LIBDIR'):
    if e != None:
        print (e)
        break
EOD`

            # Before checking for libpythonX.Y, we need to know
            # the extension the OS we're on uses for libraries
            # (we take the first one, if there's more than one fix me!):
            ac_python_soext=`$PYTHON -c \
              "import distutils.sysconfig; \
               print (distutils.sysconfig.get_config_vars('SO')[[0]])"`

            # Now, for the library:
            ac_python_soname=`$PYTHON -c \
                "import distutils.sysconfig; \
                 print (distutils.sysconfig.get_config_vars('LDLIBRARY')[[0]])"`

            # Strip away extension from the end to canonicalize its name:
            ac_python_library=`echo "$ac_python_soname" | sed "s/${ac_python_soext}$//"`

            # This small piece shamelessly adapted from PostgreSQL python macro;
            # credits goes to momjian, I think. I'd like to put the right name
            # in the credits, if someone can point me in the right direction... ?
            if test -n "$ac_python_libdir" -a -n "$ac_python_library" -a x"$ac_python_library" != x"$ac_python_soname"; then
                # use the official shared library
                ac_python_library=`echo "$ac_python_library" | sed "s/^lib//"`
                PYTHON_LDFLAGS="-L$ac_python_libdir -l$ac_python_library"
            else
                # old way: use libpython from python_configdir
                ac_python_libdir=`$PYTHON -c \
                    "from distutils.sysconfig import get_python_lib as f; \
                     import os; \
                     print (os.path.join(f(plat_specific=1, standard_lib=1), 'config'));"`
                PYTHON_LDFLAGS="-L$ac_python_libdir -lpython$ac_python_version"
            fi

            if test -z "PYTHON_LDFLAGS"; then
                AC_MSG_ERROR([cannot determine location of your Python DSO. Please check it was installed with dynamic libraries enabled, or try setting PYTHON_LDFLAGS by hand.])
            fi

            # At least on Robb's systems, where python 3 is installed from source code using autoconf's
            # "configure --prefix=$PYTHON_ROOT" followed by "make install", the python library is named
            # $PYTHON_ROOT/lib/libpython3.6m.so and there is no $PYTHON_ROOT/lib/python3.6/config/python3.6
            # even though the previous paragraph "detects" it.
            if test -f "$PYTHON_ROOT/lib/libpython${PYTHON_VERSION_MM}m.so"; then
                PYTHON_LDFLAGS="-L$PYTHON_ROOT/lib -lpython${PYTHON_VERSION_MM}m"
            fi
        fi
        AC_MSG_RESULT([$PYTHON_LDFLAGS])

        #
        # Check for site packages
        #
        AC_MSG_CHECKING([for Python site-packages path])
        if test -z "$PYTHON_SITE_PKG"; then
            PYTHON_SITE_PKG=`$PYTHON -c "import distutils.sysconfig; \
                print (distutils.sysconfig.get_python_lib(0,0));"`
        fi
        AC_MSG_RESULT([$PYTHON_SITE_PKG])
        AC_SUBST([PYTHON_SITE_PKG])

        #
        # libraries which must be linked in when embedding
        #
        AC_MSG_CHECKING(python extra libraries)
        if test -z "$PYTHON_EXTRA_LIBS"; then
           PYTHON_EXTRA_LIBS=`$PYTHON -c "import distutils.sysconfig; \
               conf = distutils.sysconfig.get_config_var; \
               print (conf('LOCALMODLIBS') + ' ' + conf('LIBS'))"`
        fi
        AC_MSG_RESULT([$PYTHON_EXTRA_LIBS])

        #
        # linking flags needed when embedding
        #
        AC_MSG_CHECKING(python extra linking flags)
        if test -z "$PYTHON_EXTRA_LDFLAGS"; then
            PYTHON_EXTRA_LDFLAGS=`$PYTHON -c "import distutils.sysconfig; \
                conf = distutils.sysconfig.get_config_var; \
                print (conf('LINKFORSHARED'))"`
        fi
        AC_MSG_RESULT([$PYTHON_EXTRA_LDFLAGS])

        #
        # final check to see if everything compiles alright
        #
        AC_MSG_CHECKING([consistency of all components of python development environment])
        # save current global flags
        ac_save_LIBS="$LIBS"
        ac_save_CPPFLAGS="$CPPFLAGS"
        LIBS="$ac_save_LIBS $PYTHON_LDFLAGS $PYTHON_EXTRA_LDFLAGS $PYTHON_EXTRA_LIBS"
        CPPFLAGS="$ac_save_CPPFLAGS $PYTHON_CPPFLAGS"
        AC_LANG_PUSH([C])
        AC_LINK_IFELSE([
            AC_LANG_PROGRAM([[#include <Python.h>]],
                            [[Py_Initialize();]])],
            [PYTHON_DEV_EXISTS=yes],
            [PYTHON_DEV_EXISTS=no])
        AC_LANG_POP([C])
        AC_MSG_RESULT([$PYTHON_DEV_EXISTS])


        if test "$OS_vendor" = "apple"; then
            if echo "$PYTHON_EXTRA_LIBS" |grep CoreFoundation >/dev/null; then
                AC_MSG_NOTICE([python API is not supported on macOS (CoreFoundation problems)])
                PYTHON_DEV_EXISTS=no
            fi
        fi      
                
        # If the python development environment exists and seems to work, then keep the
        # compiler flags we detected above, otherwise discard them.
        if test "$PYTHON_DEV_EXISTS" = no; then
            AC_MSG_NOTICE([python development environment is broken; clearing compiler flags])
            CPPFLAGS="$ac_save_CPPFLAGS"
            LIBS="$ac_save_LIBS"
            PYTHON_CPPFLAGS=
            PYTHON_LDFLAGS=
            PYTHON_EXTRA_LIBS=
            PYTHON_EXTRA_LDFLAGS=
        fi

        AC_SUBST([PYTHON_CPPFLAGS])
        AC_SUBST([PYTHON_LDFLAGS])
        AC_SUBST(PYTHON_EXTRA_LIBS)
        AC_SUBST(PYTHON_EXTRA_LDFLAGS)
    fi
])
m4trace:config/ax_with_prog.m4:34: -1- AC_DEFUN([AX_WITH_PROG], [
    AC_PREREQ([2.59])

    pushdef([VARIABLE],$1)
    pushdef([EXECUTABLE],$2)
    pushdef([VALUE_IF_NOT_FOUND],$3)
    pushdef([PATH_PROG],$4)

    AC_ARG_VAR(VARIABLE,Absolute path to EXECUTABLE executable)

    AS_IF(test -z "$VARIABLE",[
    	AC_MSG_CHECKING(whether EXECUTABLE executable path has been provided)
        AC_ARG_WITH(EXECUTABLE,AS_HELP_STRING([--with-EXECUTABLE=[[[[PATH]]]]],absolute path to EXECUTABLE executable), [
	    AS_IF([test "$withval" != "yes"],[
	        VARIABLE="$withval"
		AC_MSG_RESULT($VARIABLE)
	    ],[
		VARIABLE=""
	        AC_MSG_RESULT([no])
	    ])
	],[
	    AC_MSG_RESULT([no])
	])

        AS_IF(test -z "$VARIABLE",[
	    AC_PATH_PROG([]VARIABLE[],[]EXECUTABLE[],[]VALUE_IF_NOT_FOUND[],[]PATH_PROG[])
        ])
    ])

    popdef([PATH_PROG])
    popdef([VALUE_IF_NOT_FOUND])
    popdef([EXECUTABLE])
    popdef([VARIABLE])
])
m4trace:config/choose-backend-compiler.m4:1: -1- AC_DEFUN([CHOOSE_BACKEND_COMPILER], [
# Make sure that we select a backend compiler before building the backend specific header files
# AC_BEFORE([CHOOSE_BACKEND_COMPILER],[GENERATE_BACKEND_COMPILER_SPECIFIC_HEADERS])
  AC_BEFORE([CHOOSE_BACKEND_COMPILER],[GENERATE_BACKEND_CXX_COMPILER_SPECIFIC_HEADERS])

  ROSE_CONFIGURE_SECTION([Checking ROSE backend])
  ROSE_SUPPORT_X10_BACKEND()

  AC_ARG_WITH(alternate_backend_Cxx_compiler,
    [  --with-alternate_backend_Cxx_compiler=<compiler name>
                                Specify an alternative C++ back-end compiler],
    [
    # Use a different compiler for the backend than for the compilation of ROSE source code
      BACKEND_CXX_COMPILER=$with_alternate_backend_Cxx_compiler
      AC_SUBST(BACKEND_CXX_COMPILER)
      AC_MSG_NOTICE(["alternative back-end C++ compiler specified for generated translators to use: "$BACKEND_CXX_COMPILER"])
    ] ,
    [ 
    # Alternatively use the specified C++ compiler
	   BACKEND_CXX_COMPILER="$CXX"
      AC_MSG_NOTICE([default back-end C++ compiler for generated translators to use: "$BACKEND_CXX_COMPILER"])
    ])

  AC_ARG_WITH(alternate_backend_C_compiler,
    [  --with-alternate_backend_C_compiler=<compiler name>
                                Specify an alternative C back-end compiler],
    [
    # Use a different compiler for the backend than for the compilation of ROSE source code
      BACKEND_C_COMPILER=$with_alternate_backend_C_compiler
      AC_SUBST(BACKEND_C_COMPILER)
      AC_MSG_NOTICE([alternative back-end C compiler specified for generated translators to use: "$BACKEND_C_COMPILER"])
    ] ,
    [ 
    # Alternatively use the specified C compiler
	   BACKEND_C_COMPILER="$CC"
      AC_MSG_NOTICE([default back-end C compiler for generated translators to use: "$BACKEND_C_COMPILER"])
    ])

AC_MSG_NOTICE([testing value of FC = "$FC"])

# DQ (10/3/2008): Added option to specify backend fortran compiler
  AC_ARG_WITH(alternate_backend_fortran_compiler,
    [  --with-alternate_backend_fortran_compiler=<compiler name>
                                Specify an alternative fortran back-end compiler],
    [
    # Use a different compiler for the backend than for the compilation of ROSE source code
      BACKEND_FORTRAN_COMPILER=$with_alternate_backend_fortran_compiler
      AC_SUBST(BACKEND_FORTRAN_COMPILER)
      AC_MSG_NOTICE([alternative back-end fortran compiler specified for generated translators to use: "$BACKEND_FORTRAN_COMPILER"])
    ] ,
    [ 
    # Alternatively use the specified fortran compiler
	   BACKEND_FORTRAN_COMPILER="$FC"
	 # BACKEND_FORTRAN_COMPILER="gfortran"
      AC_MSG_NOTICE([default back-end fortran compiler for generated translators to use: "$BACKEND_FORTRAN_COMPILER"])
    ])

# DQ (4/2/2011): Added option to specify backend Java compiler
  AC_ARG_WITH(alternate_backend_java_compiler,
    [  --with-alternate_backend_java_compiler=<compiler name>
                                Specify an alternative java back-end compiler],
    [
    # Use a different compiler for the backend than for the compilation of ROSE source code
      BACKEND_JAVA_COMPILER=$with_alternate_backend_java_compiler
      AC_SUBST(BACKEND_JAVA_COMPILER)
      AC_MSG_NOTICE([alternative back-end java compiler specified for generated translators to use: "$BACKEND_JAVA_COMPILER"])
    ] ,
    [ 
    # Alternatively use the specified java compiler
	   BACKEND_JAVA_COMPILER="javac"
      AC_MSG_NOTICE([default back-end java compiler for generated translators to use: "$BACKEND_JAVA_COMPILER"])
    ])

# DQ (29/8/2017): Added option to specify backend Csharp compiler
  AC_ARG_WITH(alternate_backend_csharp_compiler,
    [  --with-alternate_backend_csharp_compiler=<compiler name>
                                Specify an alternative csharp back-end compiler],
    [
    # Use a different compiler for the backend than for the compilation of ROSE source code
      BACKEND_CSHARP_COMPILER=$with_alternate_backend_csharp_compiler
      AC_SUBST(BACKEND_CSHARP_COMPILER)
      AC_MSG_NOTICE([alternative back-end csharp compiler specified for generated translators to use: "$BACKEND_CSHARP_COMPILER"])
    ] ,
    [ 
    # Alternatively use the specified Mono csharp compiler
	   BACKEND_CSHARP_COMPILER="mcs"
      AC_MSG_NOTICE([default back-end csharp compiler for generated translators to use: "$BACKEND_CSHARP_COMPILER"])
    ])

# DQ (29/8/2017): Added option to specify backend Ada compiler
  AC_ARG_WITH(alternate_backend_ada_compiler,
    [  --with-alternate_backend_ada_compiler=<compiler name>
                                Specify an alternative ada back-end compiler],
    [
    # Use a different compiler for the backend than for the compilation of ROSE source code
      BACKEND_ADA_COMPILER=$with_alternate_backend_ada_compiler
      AC_SUBST(BACKEND_ADA_COMPILER)
      AC_MSG_NOTICE([alternative back-end ada compiler specified for generated translators to use: "$BACKEND_ADA_COMPILER"])
    ] ,
    [ 
    # Alternatively use the specified GNAT Ada compiler

    # DQ (9/12/2017): Note that the command needs to be "gnat" and the "compile" option 
    # must be added into the generated command line for the backend compiler.
    # BACKEND_ADA_COMPILER="gnat compile"
      BACKEND_ADA_COMPILER="gnat"
      AC_MSG_NOTICE([default back-end ada compiler for generated translators to use: "$BACKEND_ADA_COMPILER"])
    ])

# DQ (29/8/2017): Added option to specify backend Jovial compiler
  AC_ARG_WITH(alternate_backend_jovial_compiler,
    [  --with-alternate_backend_jovial_compiler=<compiler name>
                                Specify an alternative jovial back-end compiler],
    [
    # Use a different compiler for the backend than for the compilation of ROSE source code
      BACKEND_ADA_COMPILER=$with_alternate_backend_jovial_compiler
      AC_SUBST(BACKEND_JOVIAL_COMPILER)
      AC_MSG_NOTICE([alternative back-end jovial compiler specified for generated translators to use: "$BACKEND_JOVIAL_COMPILER"])
    ] ,
    [ 
    # Alternatively use the specified Jovial compiler
	   BACKEND_JOVIAL_COMPILER="default_jovial_compiler"
      AC_MSG_NOTICE([default back-end jovial compiler for generated translators to use: "$BACKEND_JOVIAL_COMPILER"])
    ])

# DQ (29/8/2017): Added option to specify backend Cobol compiler
  AC_ARG_WITH(alternate_backend_cobol_compiler,
    [  --with-alternate_backend_cobol_compiler=<compiler name>
                                Specify an alternative cobol back-end compiler],
    [
    # Use a different compiler for the backend than for the compilation of ROSE source code
      BACKEND_COBOL_COMPILER=$with_alternate_backend_cobol_compiler
      AC_SUBST(BACKEND_COBOL_COMPILER)
      AC_MSG_NOTICE([alternative back-end cobol compiler specified for generated translators to use: "$BACKEND_COBOL_COMPILER"])
    ] ,
    [ 
    # Alternatively use the specified GNU Cobol compiler
    # Rasmussen (10/30/2017): Changed name of GNU Cobol compiler to cobc
           BACKEND_COBOL_COMPILER="cobc"
      AC_MSG_NOTICE([default back-end cobol compiler for generated translators to use: "$BACKEND_COBOL_COMPILER"])
    ])

# Rasmussen (10/30/2017): Added option to specify backend MATLAB compiler
  AC_ARG_WITH(alternate_backend_matlab_compiler,
    [  --with-alternate_backend_matlab_compiler=<compiler name>
                                Specify an alternative MATLAB back-end compiler],
    [
    # Use a different compiler for the backend than for the compilation of ROSE source code
      BACKEND_MATLAB_COMPILER=$with_alternate_backend_matlab_compiler
      AC_SUBST(BACKEND_MATLAB_COMPILER)
      AC_MSG_NOTICE([alternative back-end MATLAB compiler specified for generated translators to use: "$BACKEND_MATLAB_COMPILER"])
    ] ,
    [
    # Alternatively use the specified GNU MATLAB compiler
	   BACKEND_MATLAB_COMPILER="octave"
      AC_MSG_NOTICE([default back-end MATLAB compiler for generated translators to use: "$BACKEND_MATLAB_COMPILER"])
    ])

# DQ (8/29/2005): Added support for version numbering of backend compiler
# BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER=`echo|$BACKEND_CXX_COMPILER -dumpversion | cut -d\. -f1`
# BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=`echo|$BACKEND_CXX_COMPILER -dumpversion | cut -d\. -f2`

  AC_MSG_NOTICE([BACKEND_CXX_COMPILER = "$BACKEND_CXX_COMPILER"])
  if test x$BACKEND_CXX_COMPILER == xclang; then
    AC_MSG_NOTICE([detected Clang compiler for backend compiler with ROSE])

    # `echo|clang --version`

  # BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER=`clang --version | grep -Po '(?<=version )[^;]+' | cut -d\. -f1`
  # BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=`clang --version | grep -Po '(?<=version )[^;]+' | cut -d\. -f2`
  # BACKEND_GCC_MAJOR=`echo|$BACKEND_CXX_COMPILER -v |& grep -Po '(?<=version )[^;]+' | cut -d\. -f1 | cut -d\( -f1`
  # BACKEND_GCC_MINOR=`echo|$BACKEND_CXX_COMPILER -v |& grep -Po '(?<=version )[^;]+' | cut -d\. -f2 | cut -d\( -f1`
  # ${srcdir}/config/syntax.sh
    BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER=`${srcdir}/config/getClangMajorVersionNumber.sh`
    BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=`${srcdir}/config/getClangMinorVersionNumber.sh`

    AC_MSG_NOTICE([(clang) C++ back-end compiler major version number = "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER"])
    AC_MSG_NOTICE([(clang) C++ back-end compiler minor version number = "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER"])

   # exit 1
  else

  # DQ (12/3/2016): Note that even if the backend compiler is specified to be GNU, on a Mac OSX system this will be clang.
  # So we can trigger behavior based on the backend compiler name directly when on an OSX system.
    if test "x$OS_vendor" = xapple; then

      # Rasmussen (2/20/2017): The grep -Po option is not available on Mac OSX without installing a new
      # version of grep.  In addition, man pages from gnu.org on grep don't provide confidence in using it:
      #   -P
      #   --perl-regex
      #      Interpret the pattern as a Perl-compatible regular expression (PCRE). This is highly experimental,
      #      particularly when combined with the -z (--null-data) option, and ‘grep -P’ may warn of
      #      unimplemented features.
      #
      # Tnerefore, grep -Po usage has been replaced by shell scripts.

    # DQ (3/31/2020): Bug fix suggested by Pei-Hung.
    # IS_APPLE_GCC=`g++ --version | grep -ci "Apple clang"`
      IS_APPLE_GCC=`g++ --version | grep -ci "Apple "`
      AC_MSG_NOTICE([IS_APPLE_GCC = "$IS_APPLE_GCC"])
      if test $IS_APPLE_GCC -ne 0; then
        BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER=`${srcdir}/config/getAppleClangMajorVersionNumber.sh`
        BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=`${srcdir}/config/getAppleClangMinorVersionNumber.sh`

        AC_MSG_NOTICE([(g++ but really clang) C++ back-end compiler major version number = "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER"])
        AC_MSG_NOTICE([(g++ but really clang) C++ back-end compiler minor version number = "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER"])


        # On an OSX system, the version of Clang is not clear since the "--version" option will report the 
        # version number of XCode (not clang).  So either we map from the version of the OS to the version 
        # of Clang used in it's version of XCode, or we map from the version of XCode (defined by the current 
        # values of (CXX_VERSION_MAJOR,CXX_VERSION_MINOR, and CXX_VERSION_PATCH).  Below I have used the 
        # version of the OS, but I'm not certain that is the best solution.  Perhaps we can asset that
        # the version of the OS indead maps to a specific version of XCode to be more secure in our choice 
        # of Clang version number, or take it directly from the XCode version number if that is a better solution.

          XCODE_VERSION_MAJOR=$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER
          XCODE_VERSION_MINOR=$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER
          XCODE_VERSION_PATCH=$BACKEND_CXX_COMPILER_PATCH_VERSION_NUMBER

        # I think the clang versions all have patch level equal to zero.
          BACKEND_CXX_COMPILER_PATCH_VERSION_NUMBER=0

          if test $XCODE_VERSION_MAJOR -eq 7; then

            # The versions of clang all depend upon the minor version number of XCode (for major version number equal to 7).
              BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER=3
              case "$XCODE_VERSION_MINOR" in
                  0)
                      BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=7
                      ;;
                  3)
                      BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=8
                      ;;
                  *)
                      AC_MSG_FAILURE([unknown or unsupported version of XCode: XCODE_VERSION_MINOR = "$XCODE_VERSION_MINOR"])
                      ;;
              esac
          elif test $XCODE_VERSION_MAJOR -eq 8; then
              BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER=3
            # DQ (3/3//2017): Added latest version information from Craig.
              case "$XCODE_VERSION_MINOR" in
                  0|1)
                      BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=8
                      ;;
                  *)
                      AC_MSG_FAILURE([unknown or unsupported version of XCode: XCODE_VERSION_MINOR = "$XCODE_VERSION_MINOR"])
                      ;;
              esac
          elif test $XCODE_VERSION_MAJOR -eq 9; then
            # Rasmussen (10/27//2017): Added results for clang --version 9.0.0
            # Rasmussen (04/04//2018): Added results for clang --version 9.0.1
            # See https://opensource.apple.com/source/clang/clang-800.0.42.1/src/CMakeLists.txt
            # Pei-Hung (01/16/2019): Revised based on https://en.wikipedia.org/wiki/Xcode#Latest_versions
              case "$XCODE_VERSION_MINOR" in
                  0|1)
                      BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER=4
                      BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=0
                      ;;
                  3|4)
                      BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER=5
                      BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=0
                      ;;
                  *)
                      AC_MSG_FAILURE([unknown or unsupported version of XCode: XCODE_VERSION_MINOR = "$XCODE_VERSION_MINOR"])
                      ;;
              esac
          elif test $XCODE_VERSION_MAJOR -eq 10; then
              BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER=6
            # Rasmussen (11/21/2018): Added results for clang --version 10.0.0
            # see https://gist.github.com/yamaya/2924292
            # see also https://github.com/apple/swift-llvm/blob/swift-4.2-branch/CMakeLists.txt
            # NOTE that this is very tentative and don't know if it will work
              case "$XCODE_VERSION_MINOR" in
                  0|1)
                      BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=0
                      ;;
                  *)
                      AC_MSG_FAILURE([unknown or unsupported version of XCode: XCODE_VERSION_MINOR = "$XCODE_VERSION_MINOR"])
                      ;;
              esac
          elif test $XCODE_VERSION_MAJOR -eq 11; then
              BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER=8
            # Rasmussen (11/18/2019): Added results for clang --version 11.0.0
            # see https://en.wikipedia.org/wiki/Xcode#11.x_series
            # NOTE that this is very tentative and don't know if it will work
              case "$XCODE_VERSION_MINOR" in
                  0|2)
                      BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=0
                      ;;
                  *)
                      AC_MSG_FAILURE([unknown or unsupported version of XCode: XCODE_VERSION_MINOR = "$XCODE_VERSION_MINOR"])
                      ;;
              esac
          else
              AC_MSG_FAILURE([unknown or unsupported version of XCode: XCODE_VERSION_MAJOR = "$XCODE_VERSION_MAJOR"])
          fi

#        # Note "build_os" is a variable determined by autoconf.
#          case $build_os in
#              darwin13*)
#                # This is Mac OSX version 10.9 (not clear on what version of clang this maps to via XCode)
#                  BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER=3
#                  BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=6
#                  BACKEND_CXX_COMPILER_PATCH_VERSION_NUMBER=0
#                  ;;
#              darwin14*)
#                # This is Mac OSX version 10.10 (not clear on what version of clang this maps to via XCode)
#                  BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER=3
#                  BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=8
#                  BACKEND_CXX_COMPILER_PATCH_VERSION_NUMBER=0
#                  ;;
#              darwin15*)
#                # This is Mac OSX version 10.11
#                  BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER=3
#                  BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=8
#                  BACKEND_CXX_COMPILER_PATCH_VERSION_NUMBER=0
#                  ;;
#              *)
#                  echo "Error: Apple Mac OSX version not recognized as either darwin13, 14, or darwin15 ... (build_os = $build_os)";
#                  exit 1;
#          esac

        # DQ (12/3/2016): Added debugging for LLVM on MACOSX.
          AC_MSG_NOTICE([compilerVendorName = "$compilerVendorName"])
	  AC_MSG_NOTICE([BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER = "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER"])
          AC_MSG_NOTICE([BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER = "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER"])
          AC_MSG_NOTICE([BACKEND_CXX_COMPILER_PATCH_VERSION_NUMBER = "$BACKEND_CXX_COMPILER_PATCH_VERSION_NUMBER"])

        # echo "Detected use of GNU backend compiler name on Mac OSX system"
        # exit 1

      else
        AC_MSG_NOTICE([Detected using MacPorts GCC backend compiler])
        BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER=`echo|$BACKEND_CXX_COMPILER -dumpfullversion -dumpversion | cut -d\. -f1`
        BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=`echo|$BACKEND_CXX_COMPILER -dumpfullversion -dumpversion | cut -s -d\. -f2`
      fi

    else
        AC_MSG_NOTICE([else case not using Clang (choose backend compiler)])
        BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER=`echo|$BACKEND_CXX_COMPILER -dumpfullversion -dumpversion | cut -d\. -f1`
        BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER=`echo|$BACKEND_CXX_COMPILER -dumpfullversion -dumpversion | cut -s -d\. -f2`

        AC_MSG_NOTICE([(non-clang) C++ back-end compiler major version number = "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER"])
        AC_MSG_NOTICE([(non-clang) C++ back-end compiler minor version number = "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER"])
    fi
  # exit 1
  fi

# echo "back-end compiler for generated translators to use will be: $BACKEND_CXX_COMPILER"
  AC_MSG_NOTICE([C++ back-end compiler major version number = "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER"])
  AC_MSG_NOTICE([C++ back-end compiler minor version number = "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER"])

# echo "Exiting in computing the c++ compiler version number (which has to be different for Clang)"
# exit 1

# Use this to get the major and minor version numbers for gfortran (which maps --version to -dumpversion, unlike gcc and g++)
# gfortran --version | head -1 | cut -f2 -d\) | tr -d \  | cut -d\. -f2
# Or Jeremiah suggests the alternative:
# gfortran --version | sed -n '1s/.*) //;1p'
  AC_MSG_NOTICE([BACKEND_FORTRAN_COMPILER = "$BACKEND_FORTRAN_COMPILER"])
  FORTRAN_COMPILER_NAME=`basename $BACKEND_FORTRAN_COMPILER`

  if test x$BACKEND_FORTRAN_COMPILER == xpgfortran; then

    BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER=`echo|$BACKEND_FORTRAN_COMPILER --version 2>1 | grep pgfortran | cut -f2 -d\  | tr -d \  | cut -d\. -f1`
    BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER=`echo|$BACKEND_FORTRAN_COMPILER --version 2>1 | grep pgfortran | cut -f2 -d\  | tr -d \  | cut -d\. -f2 | cut -d\- -f1`

  else

 # DQ (9/15/2009): Normally we expect a string such as "GNU Fortran 95 (GCC) 4.1.2", but 
 # the GNU 4.0.x compiler's gfortran outputs a string such as "GNU Fortran 95 (GCC 4.0.2)"
 # So for this case we detect it explicitly and fill in the values directly!
    BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER=`echo|$BACKEND_FORTRAN_COMPILER --version | head -1 | cut -f2 -d\) | tr -d \  | cut -d\. -f1`
    BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER=`echo|$BACKEND_FORTRAN_COMPILER --version | head -1 | cut -f2 -d\) | tr -d \  | cut -d\. -f2`
 
 # Test if we computed the major and minor version numbers correctly...recompute if required
    if test x$BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER == x; then
      AC_MSG_NOTICE([BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER = "$BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER" (blank) so this is likely the GNU 4.0.x version (try again to get the version number)])
      BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER=`echo|$BACKEND_FORTRAN_COMPILER --version | head -1 | sed s/"GNU Fortran 95 (GCC "//g | cut -f1 -d \) | cut -d\. -f1`
      BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER=`echo|$BACKEND_FORTRAN_COMPILER --version | head -1 | sed s/"GNU Fortran 95 (GCC "//g | cut -f1 -d \) | cut -d\. -f2`
    fi
  fi

  case "$BACKEND_FORTRAN_COMPILER" in
  gfortran*)
     AC_DEFINE([BACKEND_FORTRAN_IS_GNU_COMPILER], [1], [Mark that GFORTRAN is used in backend])
     ;;
  ifort*)
     AC_DEFINE([BACKEND_FORTRAN_IS_INTEL_COMPILER], [1], [Mark that Intel Fortran is used in backend])
     AC_DEFINE([BACKEND_FORTRAN_IS_GNU_COMPILER], [0], [Mark that GFORTRAN is not used in backend ])
     AC_CHECK_TOOL(INTEL_FPP_PATH, [fpp], [no])
     if test "$INTEL_FPP_PATH" != "no"; then
       AC_DEFINE([ROSE_USE_INTEL_FPP], [1], [Mark that Intel FPP is used in backend ])
       AC_DEFINE_UNQUOTED([INTEL_FPP_PATH],"$INTEL_FPP_PATH",[Name of Intel Fortran preprocessor])
     fi
     ;;
  pgf*)
     AC_DEFINE([BACKEND_FORTRAN_IS_PGI_COMPILER], [1], [Mark that PGI Fortran is used in backend])
     AC_DEFINE([BACKEND_FORTRAN_IS_GNU_COMPILER], [0], [Mark that GFORTRAN is not used in backend ])
     ;;
  *)
     AC_DEFINE([BACKEND_FORTRAN_IS_GNU_COMPILER], [0], [Mark that GFORTRAN is not used in backend ])
     ;;
  esac

# echo "back-end compiler for generated translators to use will be: $BACKEND_CXX_COMPILER"
  AC_MSG_NOTICE([Fortran back-end compiler major version number = "$BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER"])
  AC_MSG_NOTICE([Fortran back-end compiler minor version number = "$BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER"])

## Test that we have correctly evaluated the major and minor versions numbers...
#  If incorrect better to fail here rather than in build (sage_support.cpp),
#  but only fail if Fortran support is requested [Rasmussen 2019.02.21]
#
  if test "x$support_fortran_frontend" = "xyes" ; then
    if test x$BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER == x; then
      AC_MSG_ERROR([could not compute the major version number of "$BACKEND_FORTRAN_COMPILER"])
    fi
    if test x$BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER == x; then
      AC_MSG_ERROR([could not compute the minor version number of "$BACKEND_FORTRAN_COMPILER"])
    fi
  fi

# DQ (9/16/2009): GNU gfortran 4.0 has special problems so we avoid some tests where it fails.
  gfortran_version_4_0=no
  if test x$BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER == x4; then
     if test x$BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER == x0; then
        AC_MSG_NOTICE([we have identified version 4.0 of gfortran])
        gfortran_version_4_0=yes
     fi
  fi
  AM_CONDITIONAL(ROSE_USING_GFORTRAN_VERSION_4_0, [test "x$gfortran_version_4_0" = "xyes"])

# DQ (9/17/2009): GNU gfortran 4.1 has special problems so we avoid some tests where it fails.
  gfortran_version_4_1=no
  if test x$BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER == x4; then
     if test x$BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER == x1; then
        AC_MSG_NOTICE([we have identified version 4.1 of gfortran])
        gfortran_version_4_1=yes
     fi
  fi
  AM_CONDITIONAL(ROSE_USING_GFORTRAN_VERSION_4_1, [test "x$gfortran_version_4_1" = "xyes"])

# DQ (2/13/2011): GNU gfortran 4.2 is a gnu configuration where I want to have test2010_161.f90 be tested.
# It has previously demonstrated a statistical failure on 4.1.2 and 4.3.2 (running it on 4.2 machines
# is an incremental step to getting it into more uniform testing, since I can't get it to fail locally).
# It also passes valgrind just fine, so this is a bit of a mystery at present.
  gfortran_version_4_2=no
  if test x$BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER == x4; then
     if test x$BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER == x2; then
        AC_MSG_NOTICE([we have identified version 4.2 of gfortran])
        gfortran_version_4_2=yes
     fi
  fi
  AM_CONDITIONAL(ROSE_USING_GFORTRAN_VERSION_4_2, [test "x$gfortran_version_4_2" = "xyes"])

# DQ (2/1/2011): GNU gfortran 4.4 has special problems so we avoid some tests where it fails.
  gfortran_version_4_4=no
  if test x$BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER == x4; then
     if test x$BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER == x4; then
        AC_MSG_NOTICE([we have identified version 4.4 of gfortran])
        gfortran_version_4_4=yes
     fi
  fi
  AM_CONDITIONAL(ROSE_USING_GFORTRAN_VERSION_4_4, [test "x$gfortran_version_4_4" = "xyes"])

# DQ (4/10/2011): GNU gfortran 4.5 has special problems so we avoid some tests where it fails.
  gfortran_version_4_5=no
  if test x$BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER == x4; then
     if test x$BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER == x5; then
        AC_MSG_NOTICE([we have identified version 4.5 of gfortran])
        gfortran_version_4_5=yes
     fi
  fi
  AM_CONDITIONAL(ROSE_USING_GFORTRAN_VERSION_4_5, [test "x$gfortran_version_4_5" = "xyes"])

# DQ (4/10/2011): GNU gfortran 4.6 has special problems so we avoid some tests where it fails.
  gfortran_version_4_6=no
  if test x$BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER == x4; then
     if test x$BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER == x6; then
        AC_MSG_NOTICE([we have identified version 4.6 of gfortran])
        gfortran_version_4_6=yes
     fi
  fi
  AM_CONDITIONAL(ROSE_USING_GFORTRAN_VERSION_4_6, [test "x$gfortran_version_4_6" = "xyes"])

# Phlin (8/23/2012): GNU gfortran 4.5+ has special supports. 
  gfortran_version_later_4_5=no
  if test x$BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER == x4; then
     if test "$BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER" -ge "5"; then
        AC_MSG_NOTICE([we have identified version 4.5+ of gfortran])
        gfortran_version_later_4_5=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "4"; then
        gfortran_version_later_4_5=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GFORTRAN_VERSION_LATER_4_5, [test "x$gfortran_version_later_4_5" = "xyes"])

# Phlin (8/23/2012): GNU gfortran 4.4+ has special supports. 
  gfortran_version_later_4_4=no
  if test x$BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER == x4; then
     if test "$BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER" -ge "4"; then
        AC_MSG_NOTICE([we have identified version 4.4+ of gfortran])
        gfortran_version_later_4_4=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "4"; then
        gfortran_version_later_4_4=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GFORTRAN_VERSION_LATER_4_4, [test "x$gfortran_version_later_4_4" = "xyes"])

# DQ (8/15/2014): GNU GCC 4.4 starts more complex Microsoft C++ support.
  gcc_version_later_4_4=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x4; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "4"; then
        AC_MSG_NOTICE([we have identified version 4.4+ of gcc])
        gcc_version_later_4_4=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "4"; then
        gcc_version_later_4_4=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_4_4, [test "x$gcc_version_later_4_4" = "xyes"])

# DQ (8/15/2014): Added for more complete support of GNU GCC.
  gcc_version_later_4_5=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x4; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "5"; then
        AC_MSG_NOTICE([we have identified version 4.5+ of gcc])
        gcc_version_later_4_5=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "4"; then
        gcc_version_later_4_5=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_4_5, [test "x$gcc_version_later_4_5" = "xyes"])

# Phlin (8/22/2012): GNU GCC 4.6 starts AVX support.
  gcc_version_later_4_6=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x4; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "6"; then
        AC_MSG_NOTICE([we have identified version 4.6+ of gcc])
        gcc_version_later_4_6=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "4"; then
        gcc_version_later_4_6=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_4_6, [test "x$gcc_version_later_4_6" = "xyes"])

# DQ (8/15/2014): Added for more complete support of GNU GCC.
  gcc_version_later_4_7=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x4; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "7"; then
        AC_MSG_NOTICE([we have identified version 4.7+ of gcc])
        gcc_version_later_4_7=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "4"; then
        gcc_version_later_4_7=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_4_7, [test "x$gcc_version_later_4_7" = "xyes"])

# DQ (7/28/2014): GNU GCC 4.8 starts C11 support.
  gcc_version_4_8=no 
  gcc_version_later_4_8=no
 if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x4; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -eq "8"; then
        AC_MSG_NOTICE([we have identified specific version 4.8 of gcc])
        gcc_version_4_8=yes
     fi
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "8"; then
        AC_MSG_NOTICE([we have identified version 4.8+ of gcc])
        gcc_version_later_4_8=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "4"; then
        gcc_version_later_4_8=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_4_8, [test "x$gcc_version_later_4_8" = "xyes"])

# DQ (7/28/2014): GNU GCC 4.9 adds more C11 support (we need this to control what tests are run).
  gcc_version_later_4_9=no
# if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x4; then
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x4; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "9"; then
        AC_MSG_NOTICE([we have identified version 4.9+ of gcc])
        gcc_version_later_4_9=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "4"; then
        gcc_version_later_4_9=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_4_9, [test "x$gcc_version_later_4_9" = "xyes"])

# ROSE-1858: A compass example causes a g++ internal error for gcc 4.9.1
  gcc_version_equal_4_9_1=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x4; then
     if test x$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER == x9; then
       if test x$BACKEND_CXX_COMPILER_PATCH_VERSION_NUMBER == x1; then
         gcc_version_equal_4_9_1=yes
       fi
     fi
   fi
   AM_CONDITIONAL(ROSE_USING_GCC_VERSION_EQUAL_4_9_1, [test "x$gcc_version_equal_4_9_1" = "xyes"])

# DQ (11/9/2016): GNU GCC 5.2 adds more C14 support (we need this to control what tests are run).
  gcc_version_later_5_1=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x5; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "1"; then
        AC_MSG_NOTICE([we have identified version 5.1+ of gcc])
        gcc_version_later_5_1=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "5"; then
        gcc_version_later_5_1=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_5_1, [test "x$gcc_version_later_5_1" = "xyes"])

  gcc_version_later_5_2=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x5; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "2"; then
        AC_MSG_NOTICE([we have identified version 5.2+ of gcc])
        gcc_version_later_5_2=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "5"; then
        gcc_version_later_5_2=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_5_2, [test "x$gcc_version_later_5_2" = "xyes"])

  gcc_version_later_5_3=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x5; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "3"; then
        AC_MSG_NOTICE([we have identified version 5.3+ of gcc])
        gcc_version_later_5_3=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "5"; then
        gcc_version_later_5_3=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_5_3, [test "x$gcc_version_later_5_3" = "xyes"])

  gcc_version_later_6_0=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x6; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "0"; then
        AC_MSG_NOTICE([we have identified version 6.0+ of gcc])
        gcc_version_later_6_0=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "6"; then
        gcc_version_later_6_0=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_6_0, [test "x$gcc_version_later_6_0" = "xyes"])

  gcc_version_later_6_1=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x6; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "1"; then
        AC_MSG_NOTICE([we have identified version 6.1+ of gcc])
        gcc_version_later_6_1=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "6"; then
        gcc_version_later_6_1=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_6_1, [test "x$gcc_version_later_6_1" = "xyes"])

  gcc_version_later_6_2=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x6; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "2"; then
        AC_MSG_NOTICE([we have identified version 6.2+ of gcc])
        gcc_version_later_6_2=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "6"; then
        gcc_version_later_6_2=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_6_2, [test "x$gcc_version_later_6_2" = "xyes"])

  gcc_version_later_6_3=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x6; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "3"; then
        AC_MSG_NOTICE([we have identified version 6.3+ of gcc])
        gcc_version_later_6_3=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "6"; then
        gcc_version_later_6_3=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_6_3, [test "x$gcc_version_later_6_3" = "xyes"])

  gcc_version_later_6_4=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x6; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "4"; then
        AC_MSG_NOTICE([we have identified version 6.4+ of gcc])
        gcc_version_later_6_4=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "6"; then
        gcc_version_later_6_4=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_6_4, [test "x$gcc_version_later_6_4" = "xyes"])

  gcc_version_later_6_5=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x6; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "5"; then
        AC_MSG_NOTICE([we have identified version 6.5+ of gcc])
        gcc_version_later_6_5=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "6"; then
        gcc_version_later_6_5=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_6_5, [test "x$gcc_version_later_6_5" = "xyes"])

  gcc_version_later_7_1=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x7; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "1"; then
        AC_MSG_NOTICE([we have identified version 7.1+ of gcc])
        gcc_version_later_7_1=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "7"; then
        gcc_version_later_7_1=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_7_1, [test "x$gcc_version_later_7_1" = "xyes"])

  gcc_version_later_7_2=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x7; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "2"; then
        AC_MSG_NOTICE([we have identified version 7.2+ of gcc])
        gcc_version_later_7_2=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "7"; then
        gcc_version_later_7_2=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_7_2, [test "x$gcc_version_later_7_2" = "xyes"])

  gcc_version_later_7_3=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x7; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "3"; then
        AC_MSG_NOTICE([we have identified version 7.3+ of gcc])
        gcc_version_later_7_3=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "7"; then
        gcc_version_later_7_3=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_7_3, [test "x$gcc_version_later_7_3" = "xyes"])

  gcc_version_later_7_4=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x7; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "4"; then
        AC_MSG_NOTICE([we have identified version 7.4+ of gcc])
        gcc_version_later_7_4=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "7"; then
        gcc_version_later_7_4=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_7_4, [test "x$gcc_version_later_7_4" = "xyes"])

  gcc_version_later_7_5=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x7; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "5"; then
        AC_MSG_NOTICE([we have identified version 7.5+ of gcc])
        gcc_version_later_7_5=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "7"; then
        gcc_version_later_7_5=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_7_5, [test "x$gcc_version_later_7_5" = "xyes"])

  gcc_version_later_8_1=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x8; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "1"; then
        AC_MSG_NOTICE([we have identified version 8.1+ of gcc])
        gcc_version_later_8_1=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "8"; then
        gcc_version_later_8_1=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_8_1, [test "x$gcc_version_later_8_1" = "xyes"])

  gcc_version_later_8_2=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x8; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "2"; then
        AC_MSG_NOTICE([we have identified version 8.2+ of gcc])
        gcc_version_later_8_2=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "8"; then
        gcc_version_later_8_2=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_8_2, [test "x$gcc_version_later_8_2" = "xyes"])

  gcc_version_later_8_3=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x8; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "3"; then
        AC_MSG_NOTICE([we have identified version 8.3+ of gcc])
        gcc_version_later_8_3=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "8"; then
        gcc_version_later_8_3=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_8_3, [test "x$gcc_version_later_8_3" = "xyes"])

  gcc_version_later_8_4=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x8; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "4"; then
        AC_MSG_NOTICE([we have identified version 8.4+ of gcc])
        gcc_version_later_8_4=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "8"; then
        gcc_version_later_8_4=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_8_4, [test "x$gcc_version_later_8_4" = "xyes"])

  gcc_version_later_9_1=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x9; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "1"; then
        AC_MSG_NOTICE([we have identified version 9.1+ of gcc])
        gcc_version_later_9_1=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "9"; then
        gcc_version_later_9_1=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_9_1, [test "x$gcc_version_later_9_1" = "xyes"])

  gcc_version_later_9_2=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x9; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "2"; then
        AC_MSG_NOTICE([we have identified version 9.2+ of gcc])
        gcc_version_later_9_2=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "9"; then
        gcc_version_later_9_2=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_9_2, [test "x$gcc_version_later_9_2" = "xyes"])

  gcc_version_later_9_3=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x9; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "3"; then
        AC_MSG_NOTICE([we have identified version 9.3+ of gcc])
        gcc_version_later_9_3=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "9"; then
        gcc_version_later_9_3=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_9_3, [test "x$gcc_version_later_9_3" = "xyes"])

  gcc_version_later_10_1=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x10; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "1"; then
        AC_MSG_NOTICE([we have identified version 10.1+ of gcc])
        gcc_version_later_10_1=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "10"; then
        gcc_version_later_10_1=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_10_1, [test "x$gcc_version_later_10_1" = "xyes"])

  gcc_version_later_10_2=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x10; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "2"; then
        AC_MSG_NOTICE([we have identified version 10.2+ of gcc])
        gcc_version_later_10_2=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "10"; then
        gcc_version_later_10_2=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_10_2, [test "x$gcc_version_later_10_2" = "xyes"])

  gcc_version_later_10_3=no
  if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x10; then
     if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "3"; then
        AC_MSG_NOTICE([we have identified version 10.3+ of gcc])
        gcc_version_later_10_3=yes
     fi
  elif test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -gt "10"; then
        gcc_version_later_10_3=yes
  fi
  AM_CONDITIONAL(ROSE_USING_GCC_VERSION_LATER_10_3, [test "x$gcc_version_later_10_3" = "xyes"])

# echo "Exiting after test of backend version number support ..."
# exit 1

# We use the name of the backend C++ compiler to generate a compiler name that will be used
# elsewhere (CXX_ID might be a better name to use, instead we use basename to strip the path).
# compilerName=`basename $BACKEND_CXX_COMPILER`
  C_COMPILER_NAME=`basename $BACKEND_C_COMPILER`
  COMPILER_NAME=`basename $BACKEND_CXX_COMPILER`
# echo "default back-end compiler for generated preprocessors will be: $BACKEND_CXX_COMPILER"
# export BACKEND_CXX_COMPILER
# AC_DEFINE_UNQUOTED([CXX_COMPILER_NAME],"$BACKEND_CXX_COMPILER",[Name of backend C++ compiler.])
# echo "default back-end compiler for generated preprocessors will be: $BACKEND_CXX_COMPILER compiler name = $compilerName"

# DQ (1/15/2007): This does not work, it seems that BACKEND_C_COMPILER must be a simple name not a compound name using an option!
# Specify any option that specific backend compiler require (e.g. -restrict)
  case $COMPILER_NAME in
    gcc*|g++*)
      ;;
    icc|icpc)
    # BACKEND_C_COMPILER="$BACKEND_C_COMPILER -restrict"
    # BACKEND_CXX_COMPILER="$BACKEND_CXX_COMPILER -restrict"
      ;;
    "KCC --c" | mpKCC|KCC)
      ;;
    cc|CC)
    ;;
  esac

  AC_MSG_NOTICE([after adding (required) options BACKEND_C_COMPILER   = "$BACKEND_C_COMPILER"])
  AC_MSG_NOTICE([after adding (required) options BACKEND_CXX_COMPILER = "$BACKEND_CXX_COMPILER"])

  AC_MSG_NOTICE([default back-end compiler for generated preprocessors will be "$BACKEND_CXX_COMPILER", compiler name = "$COMPILER_NAME"])

# export BACKEND_CXX_COMPILER
# AC_DEFINE_UNQUOTED([CXX_COMPILER_NAME],"$BACKEND_CXX_COMPILER",[Name of backend C++ compiler.])

# This will be used to select options based on which backend compiler is used (g++, xlC, icc, etc.)
# we can't use the basename of the compiler to execute because it might be link using a non-standard name (e.g. mpig++-3.4.1)
  export COMPILER_NAME
  AC_DEFINE_UNQUOTED([BACKEND_CXX_COMPILER_NAME_WITHOUT_PATH],"$COMPILER_NAME",[Name of backend C++ compiler excluding path (used to select code generation options).])

  export C_COMPILER_NAME
  AC_DEFINE_UNQUOTED([BACKEND_C_COMPILER_NAME_WITHOUT_PATH],"$C_COMPILER_NAME",[Name of backend C compiler excluding path (used to select code generation options).])

  export FORTRAN_COMPILER_NAME
  AC_DEFINE_UNQUOTED([BACKEND_FORTRAN_COMPILER_NAME_WITHOUT_PATH],"$FORTRAN_COMPILER_NAME",[Name of backend Fortran compiler excluding path (used to select code generation options).])

# This will be called to execute the backend compiler (for C++)
  export BACKEND_CXX_COMPILER
  AC_DEFINE_UNQUOTED([BACKEND_CXX_COMPILER_NAME_WITH_PATH],"$BACKEND_CXX_COMPILER",[Name of backend C++ compiler including path (may or may not explicit include path; used to call backend).])

# This will be called to execute the backend compiler (for C)
  export BACKEND_C_COMPILER
  AC_DEFINE_UNQUOTED([BACKEND_C_COMPILER_NAME_WITH_PATH],"$BACKEND_C_COMPILER",[Name of backend C compiler including path (may or may not explicit include path; used to call backend).])

# This will be called to execute the backend compiler (for Fortran)
  export BACKEND_FORTRAN_COMPILER
  AC_DEFINE_UNQUOTED([BACKEND_FORTRAN_COMPILER_NAME_WITH_PATH],"$BACKEND_FORTRAN_COMPILER",[Name of backend Fortran compiler including path (may or may not explicit include path; used to call backend).])

# DQ (4/2/2011): Added some support for the name of the backend Java compiler.
# This will be called to execute the backend compiler (for Java)
  export BACKEND_JAVA_COMPILER
  AC_DEFINE_UNQUOTED([BACKEND_JAVA_COMPILER_NAME_WITH_PATH],"$BACKEND_JAVA_COMPILER",[Name of backend Java compiler including path (may or may not explicit include path; used to call backend).])

# DQ (29/8/2017): Adding more general language support.
  export BACKEND_CSHARP_COMPILER
  AC_DEFINE_UNQUOTED([BACKEND_CSHARP_COMPILER_NAME_WITH_PATH],"$BACKEND_CSHARP_COMPILER",[Name of backend Csharp compiler including path (may or may not explicit include path; used to call backend).])

# DQ (29/8/2017): Adding more general language support.
  export BACKEND_ADA_COMPILER
  AC_DEFINE_UNQUOTED([BACKEND_ADA_COMPILER_NAME_WITH_PATH],"$BACKEND_ADA_COMPILER",[Name of backend Ada compiler including path (may or may not explicit include path; used to call backend).])

# DQ (29/8/2017): Adding more general language support.
  export BACKEND_JOVIAL_COMPILER
  AC_DEFINE_UNQUOTED([BACKEND_JOVIAL_COMPILER_NAME_WITH_PATH],"$BACKEND_JOVIAL_COMPILER",[Name of backend Jovial compiler including path (may or may not explicit include path; used to call backend).])

# DQ (29/8/2017): Adding more general language support.
  export BACKEND_COBOL_COMPILER
  AC_DEFINE_UNQUOTED([BACKEND_COBOL_COMPILER_NAME_WITH_PATH],"$BACKEND_COBOL_COMPILER",[Name of backend Cobol compiler including path (may or may not explicit include path; used to call backend).])

# DQ (30/8/2017): Testing the new language support.
  AC_MSG_NOTICE([BACKEND_CXX_COMPILER     = "$BACKEND_CXX_COMPILER"])
  AC_MSG_NOTICE([BACKEND_C_COMPILER       = "$BACKEND_C_COMPILER"])
  AC_MSG_NOTICE([BACKEND_FORTRAN_COMPILER = "$BACKEND_FORTRAN_COMPILER"])
  AC_MSG_NOTICE([BACKEND_JAVA_COMPILER    = "$BACKEND_JAVA_COMPILER"])
  AC_MSG_NOTICE([BACKEND_CSHARP_COMPILER  = "$BACKEND_CSHARP_COMPILER"])
  AC_MSG_NOTICE([BACKEND_ADA_COMPILER     = "$BACKEND_ADA_COMPILER"])
  AC_MSG_NOTICE([BACKEND_JOVIAL_COMPILER  = "$BACKEND_JOVIAL_COMPILER"])
  AC_MSG_NOTICE([BACKEND_COBOL_COMPILER   = "$BACKEND_COBOL_COMPILER"])

# These are useful in handling differences between different versions of the backend compiler
# we assume that the C and C++ compiler version number match and only record version information 
# for the backend C++ compiler. (for example, this helps us generated different code for 
# g++ 3.3.x and 3.4.x backend compilers).
  export BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER
  AC_DEFINE_UNQUOTED([BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER],$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER,[Major version number of backend C++ compiler.])
  export BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER
  AC_DEFINE_UNQUOTED([BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER],$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER,[Minor version number of backend C++ compiler.])

  export BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER
  AC_DEFINE_UNQUOTED([BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER],$BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER,[Major version number of backend Fortran compiler.])
  export BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER
  AC_DEFINE_UNQUOTED([BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER],$BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER,[Minor version number of backend Fortran compiler.])

###################################################################################################
# Backend Compiler Support
# TOO (2/15/2011): TODO: create separate macro call to check cross-compilation
    IS_ALTERNATE_BACKEND_C_CROSS_COMPILER=false
    if test "x$with_alternate_backend_C_compiler" != x; then
      AC_LANG_PUSH([C])
      save_cc=$CC
      CC="$with_alternate_backend_C_compiler"
      AC_MSG_NOTICE([checking if the backend C compiler $CC is cross-compiling])
      AC_MSG_NOTICE([running a simple program with the backend C compiler "$CC"])
      AC_RUN_IFELSE([
        AC_LANG_SOURCE([[
          int main (int argc, char* argv[]) {
            return 0;
          }
        ]])
       ],
       [AC_MSG_NOTICE([successfully ran a simple program with the backend C compiler: "$CC"])],
       [AC_MSG_NOTICE([failed to run a simple program with the backend C compiler"])
        IS_ALTERNATE_BACKEND_C_CROSS_COMPILER=true
       ], [])
      CC=$save_cc
      AC_LANG_POP([C])
    fi
AC_MSG_NOTICE([cross-compiling... $IS_ALTERNATE_BACKEND_C_CROSS_COMPILER])
AM_CONDITIONAL(ALTERNATE_BACKEND_C_CROSS_COMPILER, ["$IS_ALTERNATE_BACKEND_C_CROSS_COMPILER"])
AM_CONDITIONAL(ROSE_USING_ALTERNATE_BACKEND_CXX_COMPILER, [test "x$with_alternate_backend_Cxx_compiler" != "x"])
AM_CONDITIONAL(ROSE_USING_ALTERNATE_BACKEND_C_COMPILER, [test "x$with_alternate_backend_C_compiler" != "x"])

# TOO (2/14/2011): Enforce backend C/C++ compilers to be the same version
BACKEND_CXX_COMPILER_VERSION="`echo|$BACKEND_CXX_COMPILER -dumpfullversion -dumpversion`"
BACKEND_C_COMPILER_VERSION="`echo|$BACKEND_C_COMPILER -dumpfullversion -dumpversion`"
BACKEND_C_COMPILER_NAME="`basename $BACKEND_C_COMPILER`"
if test "x$BACKEND_CXX_COMPILER_VERSION" != "x$BACKEND_C_COMPILER_VERSION"; then
  AC_MSG_FAILURE([the backend C++ and C compilers must be the same])
fi
# TOO (2/16/2011): Detect Thrifty (GCC 3.4.4) compiler
AM_CONDITIONAL(USING_GCC_3_4_4_BACKEND_COMPILER, [test "x$BACKEND_C_COMPILER_VERSION" == "x3.4.4"])

# DQ (4/16/2011): Detect the GNU 4.0.4 compilers (used to turn off hanging Haskell support 
# in projects/haskellport/tests/simplify/simplifyTest.C).  This happend twice on tux324
# this must be looked into since it is not clear how this happened and passed commit tests.
AM_CONDITIONAL(USING_GCC_4_0_4_BACKEND_COMPILER, [test "x$BACKEND_C_COMPILER_VERSION" == "x4.0.4"])

# TOO (2/17/2011): Detect Tensilica Xtensa C/C++ compiler
if test "x$BACKEND_C_COMPILER_NAME" == "xxt-xcc"; then
  AM_CONDITIONAL(USING_XTENSA_BACKEND_COMPILER, true)
#  AC_DEFINE_UNQUOTED([USING_XTENSA_BACKEND_COMPILER],true,[Tensilica's Xtensa compiler.])
  AC_MSG_NOTICE([the backend C/C++ compilers have been identified as Tensilica Xtensa compilers])
else
  AM_CONDITIONAL(USING_XTENSA_BACKEND_COMPILER, false)
fi


# AC_LANG_PUSH(C)
AC_MSG_NOTICE([build input file for backend compiler])
echo 'int main(int argc, char** argv){ asm("nop");}' > conftest_asm.c

AC_MSG_NOTICE([run backend compiler on input file: "$BACKEND_C_COMPILER -std=c99 -Werror=implicit-function-declaration -c conftest_asm.c"])
# Handle the 3 cases of true false and cross-compilation
# AC_TRY_RUN(`$BACKEND_C_COMPILER -c conftest_asm.c`,asm_ok=yes,asm_ok=no,asm_ok=no)
# AC_TRY_RUN(conftest_asm.c,asm_ok=yes,asm_ok=no,asm_ok=no)
# ac_compiler_gnu="$BACKEND_C_COMPILER -Werror=implicit-function-declaration"
# AC_TRY_RUN([int main(){ __asm__("nop");}],asm_ok=yes,asm_ok=no,asm_ok=no)
# AC_TRY_COMPILE([],[asm("nop");],asm_ok=yes,asm_ok=no)
# asm_ok=eval($BACKEND_C_COMPILER -Werror=implicit-function-declaration -c conftest_asm.c)
# if test `$BACKEND_C_COMPILER -std=c99 -Werror=implicit-function-declaration -c conftest_asm.c`; then
$BACKEND_C_COMPILER -std=c99 -Werror=implicit-function-declaration -c conftest_asm.c 2>/dev/null
status=$?
if test "x$status" = "x0"; then
    # zero exit code
    AC_MSG_NOTICE([false case: set asm_ok=yes])
    asm_ok=yes
    AC_DEFINE([BACKEND_C_COMPILER_SUPPORTS_ASM],[1],[The backend C compiler might not support asm and might require __asm__ instead (e.g. GNU gcc).])
else
    # non-zero exit code
    AC_MSG_NOTICE([true case: set asm_ok=no])
    asm_ok=no
fi

AC_MSG_CHECKING(does the backend C compiler ($BACKEND_C_COMPILER) support asm statements)
AC_MSG_RESULT($asm_ok)
# AC_DEFINE_UNQUOTED([BACKEND_C_COMPILER_SUPPORTS_ASM],test "x$asm_ok" = "xyes",[The backend C compiler might not support asm and might require __asm__ instead (e.g. GNU gcc).])
# AC_DEFINE([BACKEND_C_COMPILER_SUPPORTS_ASM],[test "x$asm_ok" = "xyes"],[The backend C compiler might not support asm and might require __asm__ instead (e.g. GNU gcc).])
# AC_LANG_POP(C)

# echo "exiting as a test of asm!"
# exit 1

# AC_LANG_PUSH(C)
AC_MSG_NOTICE([build input file for backend compiler])
echo 'int main(int argc, char** argv){ __asm__("nop");}' > conftest_undescore_asm.c

AC_MSG_NOTICE([run backend compiler on input file: "$BACKEND_C_COMPILER -std=c99 -Werror=implicit-function-declaration -c conftest_undescore_asm.c"])
# Handle the 3 cases of true false and cross-compilation
# AC_TRY_RUN(`$BACKEND_C_COMPILER -c conftest_undescore_asm.c`,underscore_asm_ok=yes,underscore_asm_ok=no,underscore_asm_ok=no)
# ac_compiler_gnu="$BACKEND_C_COMPILER -Werror=implicit-function-declaration"
# AC_TRY_COMPILE([],[int main(int,char**){ __asm__("nop");}],underscore_asm_ok=yes,underscore_asm_ok=no)
# AC_TRY_COMPILE([],[__asm__("nop");],underscore_asm_ok=yes,underscore_asm_ok=no)
# if test `$BACKEND_C_COMPILER -std=c99 -Werror=implicit-function-declaration -c conftest_undescore_asm.c`; then
$BACKEND_C_COMPILER -std=c99 -Werror=implicit-function-declaration -c conftest_undescore_asm.c 2>/dev/null
status=$?

if test "x$status" = "x0"; then
    # zero exit code
    AC_MSG_NOTICE([false case: set underscore_asm_ok=yes])
    underscore_asm_ok=yes
    AC_DEFINE([BACKEND_C_COMPILER_SUPPORTS_UNDESCORE_ASM],[1],[The backend C compiler might not support asm and might require __asm__ instead (e.g. GNU gcc).])
else
    # non-zero exit code
    AC_MSG_NOTICE([true case: set underscore_asm_ok=no])
    underscore_asm_ok=no
fi

AC_MSG_CHECKING(does the backend C compiler ($BACKEND_C_COMPILER) support __asm__ statements)
AC_MSG_RESULT($underscore_asm_ok)
# AC_DEFINE_UNQUOTED([BACKEND_C_COMPILER_SUPPORTS_UNDESCORE_ASM],test "x$underscore_asm_ok" = "xyes",[The backend C compiler might not support asm and might require __asm__ instead (e.g. GNU gcc).])
# AC_DEFINE([BACKEND_C_COMPILER_SUPPORTS_UNDESCORE_ASM],[test "x$underscore_asm_ok" = "xyes"],[The backend C compiler might not support asm and might require __asm__ instead (e.g. GNU gcc).])
# AC_LANG_POP(C)



# Also need to test: asm(".symver ff_av_gettime,av_gettime@LIBAVFORMAT_54") which fails better when used with 4.2.4 compiler.
# This test fails for both 4.4 and 4.2 compilers where as the tests above pass for 4.2 and fails for 4.4 compilers.
# The error message is also different for this example using a longer string than thge example above.
# AC_LANG_PUSH(C)
AC_MSG_NOTICE([build input file for backend compiler])
echo 'asm(".symver ff_av_gettime,av_gettime@LIBAVFORMAT_54");' > conftest_long_string_asm.c

AC_MSG_NOTICE([run backend compiler on input file: "$BACKEND_C_COMPILER -std=c99 -Werror=implicit-function-declaration -c conftest_long_string_asm.c"])
# Handle the 3 cases of true false and cross-compilation
# AC_TRY_RUN(`$BACKEND_C_COMPILER -c conftest_asm.c`,asm_ok=yes,asm_ok=no,asm_ok=no)
# AC_TRY_RUN(conftest_asm.c,asm_ok=yes,asm_ok=no,asm_ok=no)
# ac_compiler_gnu="$BACKEND_C_COMPILER -Werror=implicit-function-declaration"
# AC_TRY_RUN([int main(){ __asm__("nop");}],asm_ok=yes,asm_ok=no,asm_ok=no)
# AC_TRY_COMPILE([],[asm("nop");],asm_ok=yes,asm_ok=no)
# asm_ok=eval($BACKEND_C_COMPILER -Werror=implicit-function-declaration -c conftest_asm.c)
# if test `$BACKEND_C_COMPILER -std=c99 -Werror=implicit-function-declaration -c conftest_asm.c`; then
$BACKEND_C_COMPILER -std=c99 -c conftest_long_string_asm.c 2>/dev/null
status=$?
if test "x$status" = "x0"; then
    # zero exit code
    AC_MSG_NOTICE([false case: set long_string_asm_ok=yes])
    long_string_asm_ok=yes
    AC_DEFINE([BACKEND_C_COMPILER_SUPPORTS_LONG_STRING_ASM],[1],[The backend C compiler might not support asm and might require __asm__ instead (e.g. GNU gcc).])
else
    # non-zero exit code
    AC_MSG_NOTICE([true case: set long_string_asm_ok=no])
    long_string_asm_ok=no
fi

AC_MSG_CHECKING(does the backend C compiler ($BACKEND_C_COMPILER) support asm statements)
AC_MSG_RESULT($long_string_asm_ok)
# AC_DEFINE_UNQUOTED([BACKEND_C_COMPILER_SUPPORTS_ASM],test "x$asm_ok" = "xyes",[The backend C compiler might not support asm and might require __asm__ instead (e.g. GNU gcc).])
# AC_DEFINE([BACKEND_C_COMPILER_SUPPORTS_ASM],[test "x$asm_ok" = "xyes"],[The backend C compiler might not support asm and might require __asm__ instead (e.g. GNU gcc).])
# AC_LANG_POP(C)

# echo "exiting as a test of asm!"
# exit 1


# echo "exiting as a test of __asm__!"
# exit 1

###################################################################################################
])
m4trace:config/compiler-defs.m4:18: -1- AC_DEFUN([GET_CXX_VERSION_INFO], [
    AC_LANG_PUSH(C++)

    CXX_COMPILER_COMMAND="$1"
    CXX_COMPILER_VENDOR="$2"

    case "$CXX_COMPILER_VENDOR" in
        clang)

          # Rasmussen (11/19/2019): "grep -Po" not supported on Apple OSX
          if test "x$OS_vendor" != xapple ; then
            CXX_VERSION_MAJOR=$($CXX_COMPILER_COMMAND --version 2>&1 |\
                grep -Po '(?<=version )@<:@^ ;@:>@+' |\
                cut -d. -f1 |\
                cut -d\( -f1)
            CXX_VERSION_MINOR=$($CXX_COMPILER_COMMAND --version 2>&1 |\
                grep -Po '(?<=version )@<:@^ ;@:>@+' |\
                cut -d. -f2 |\
                cut -d\( -f1)
            CXX_VERSION_PATCH=$($CXX_COMPILER_COMMAND --version 2>&1 |\
                grep -Po '(?<=version )@<:@^ ;@:>@+' |\
                cut -d. -f3 |\
                cut -d\( -f1)
          fi

          # DQ (12/3/2016): These variables were previously set in the ROSE configuration.
            #echo "Get CXX Version info: OS_vendor = $OS_vendor"
            #echo "Get CXX Version info: OS_release = $OS_release"

          # DQ (12/3/2016): If we are on a Linux OS then we have the version number of Clang 
          # directly, but if this is on a MAC (OSX) system then this is the version of 
          # XCode and we have to map it to the clang version number.
          # if test "x$build_vendor" = xapple; then
            if test "x$OS_vendor" = xapple && $($CXX_COMPILER_COMMAND --version | grep -q 'Apple'); then

              # On an OSX system, the version of Clang is not clear since the "--version" option will report the 
              # version number of XCode (not clang).  So either we map from the version of the OS to the version 
              # of Clang used in it's version of XCode, or we map from the version of XCode (defined by the current 
              # values of (CXX_VERSION_MAJOR,CXX_VERSION_MINOR, and CXX_VERSION_PATCH).  Below I have used the 
              # version of the OS, but I'm not certain that is the best solution.  Perhaps we can asset that
              # the version of the OS indead maps to a specific version of XCode to be more secure in our choice 
              # of Clang version number, or take it directly from the XCode version number if that is a better solution.

              # Rasmussen (2/20/2017): The grep -Po option is not available on Mac OSX without installing a new
              # version of grep.  In addition, man pages from gnu.org on grep don't provide confidence in using it:
              #   -P
              #   --perl-regex
              #      Interpret the pattern as a Perl-compatible regular expression (PCRE). This is highly experimental,
              #      particularly when combined with the -z (--null-data) option, and ‘grep -P’ may warn of
              #      unimplemented features.
              #
              # Tnerefore, grep -Po usage has been replaced by shell scripts.

                CXX_VERSION_MAJOR=`${srcdir}/config/getAppleCxxMajorVersionNumber.sh`
                CXX_VERSION_MINOR=`${srcdir}/config/getAppleCxxMinorVersionNumber.sh`
                CXX_VERSION_PATCH=`${srcdir}/config/getAppleCxxPatchVersionNumber.sh`

                XCODE_VERSION_MAJOR=$CXX_VERSION_MAJOR
                XCODE_VERSION_MINOR=$CXX_VERSION_MINOR
                XCODE_VERSION_PATCH=$CXX_VERSION_PATCH

              # I think the clang versions all have patch level equal to zero.
                CXX_VERSION_PATCH=0

                if test $XCODE_VERSION_MAJOR -eq 7; then

                  # The versions of clang all depend upon the minor version number of XCode (for major version number equal to 7).
                    CXX_VERSION_MAJOR=3
                    case "$XCODE_VERSION_MINOR" in
                        0)
                            CXX_VERSION_MINOR=7
                            ;;
                        3)
                            CXX_VERSION_MINOR=8
                            ;;
                        *)
                            AC_MSG_FAILURE([unknown or unsupported version of XCode (XCODE_VERSION_MINOR = $XCODE_VERSION_MINOR)])
                            ;;
                    esac
                elif test $XCODE_VERSION_MAJOR -eq 8; then
                    CXX_VERSION_MAJOR=3
                  # DQ (3/3//2017): Added latest version information from Craig.
                    case "$XCODE_VERSION_MINOR" in
                        0|1)
                            CXX_VERSION_MINOR=8
                            ;;
                        *)
                            AC_MSG_FAILURE([unknown or unsupported version of XCode (XCODE_VERSION_MINOR = $XCODE_VERSION_MINOR)])
                            ;;
                    esac
                elif test $XCODE_VERSION_MAJOR -eq 9; then
                  # Rasmussen (10/27//2017): Added results for clang --version 9.0.0
                  # Rasmussen (04/04//2018): Added results for clang --version 9.0.1
                  # See https://opensource.apple.com/source/clang/clang-800.0.42.1/src/CMakeLists.txt
                  # Pei-Hung (01/16/2019): Revised based on https://en.wikipedia.org/wiki/Xcode#Latest_versions
                    case "$XCODE_VERSION_MINOR" in
                        0|1)
                            CXX_VERSION_MAJOR=4
                            CXX_VERSION_MINOR=0
                            ;;
                        3|4)
                            CXX_VERSION_MAJOR=5
                            CXX_VERSION_MINOR=0
                            ;;
                        *)
                            AC_MSG_FAILURE([unknown or unsupported version of XCode (XCODE_VERSION_MINOR = "$XCODE_VERSION_MINOR")])
                            ;;
                    esac
                elif test $XCODE_VERSION_MAJOR -eq 10; then
                    CXX_VERSION_MAJOR=6
                  # Rasmussen (11/21/2018): Added results for clang --version 10.0.0
                  # see https://gist.github.com/yamaya/2924292
                  # see also https://github.com/apple/swift-llvm/blob/swift-4.2-branch/CMakeLists.txt
                  # NOTE that this is very tentative and don't know if it will work
                    case "$XCODE_VERSION_MINOR" in
                        0|1)
                            CXX_VERSION_MINOR=0
                            ;;
                        *)
                            AC_MSG_FAILURE([unknown or unsupported version of XCode (XCODE_VERSION_MINOR = "$XCODE_VERSION_MINOR")])
                            ;;
                    esac
                elif test $XCODE_VERSION_MAJOR -eq 11; then
                    CXX_VERSION_MAJOR=8
                  # Rasmussen (11/19/2019): Added results for clang --version 11.0.0
                  # see https://en.wikipedia.org/wiki/Xcode#11.x_series
                  # NOTE that this is very tentative and don't know if it will work
                    case "$XCODE_VERSION_MINOR" in
                        0|2)
                            CXX_VERSION_MINOR=0
                            ;;
                        *)
                            AC_MSG_FAILURE([unknown or unsupported version of XCode (XCODE_VERSION_MINOR = "$XCODE_VERSION_MINOR")])
                            ;;
                    esac
                else
                    AC_MSG_FAILURE([unknown or unsupported version of XCode (XCODE_VERSION_MAJOR = "$XCODE_VERSION_MAJOR")])
                fi

#              # Note "build_os" is a variable determined by autoconf.
#                case $build_os in
#                    darwin13*)
#                      # This is Mac OSX version 10.9 (not clear on what version of clang this maps to via XCode)
#                        CXX_VERSION_MAJOR=3
#                        CXX_VERSION_MINOR=6
#                        CXX_VERSION_PATCH=0
#                        ;;
#                    darwin14*)
#                      # This is Mac OSX version 10.10 (not clear on what version of clang this maps to via XCode)
#                        CXX_VERSION_MAJOR=3
#                        CXX_VERSION_MINOR=7
#                        CXX_VERSION_PATCH=0
#                        ;;
#                    darwin15*)
#                      # This is Mac OSX version 10.11
#                        CXX_VERSION_MAJOR=3
#                        CXX_VERSION_MINOR=8
#                        CXX_VERSION_PATCH=0
#                        ;;
#                    *)
#                        echo "Error: Apple Mac OSX version not recognized as either darwin13, 14, or darwin15 ... (build_os = $build_os)";
#                        exit 1;
#                esac

              # DQ (12/3/2016): Added debugging for LLVM on MACOSX.
                #echo "compilerVendorName = $compilerVendorName"
                #echo "CXX_VERSION_MAJOR = $CXX_VERSION_MAJOR"
                #echo "CXX_VERSION_MINOR = $CXX_VERSION_MINOR"
                #echo "CXX_VERSION_PATCH = $CXX_VERSION_PATCH"
            fi
            ;;

        gnu)
            # Trying out various way of getting GCC version number: after version 7 "-dumpversion" was replaced by "-dumpfullversion"
            #     CXX_VERSION_TRIPLET=$($CXX_COMPILER_COMMAND --dumpversion | grep "^gcc" | sed 's/^.*[^0-9]\([0-9]*\.[0-9]*\.[0-9]*\).*$/\1/')
            CXX_VERSION_TRIPLET=$($CXX_COMPILER_COMMAND -dumpfullversion -dumpversion 2> /dev/null)
            CXX_VERSION_MAJOR=$(echo $CXX_VERSION_TRIPLET |cut -d. -f1)
            CXX_VERSION_MINOR=$(echo $CXX_VERSION_TRIPLET |cut -s -d. -f2)
            CXX_VERSION_PATCH=$(echo $CXX_VERSION_TRIPLET |cut -s -d. -f3)
            ;;

        intel)
            CXX_VERSION_MAJOR=$($CXX_COMPILER_COMMAND -dumpversion |cut -d. -f1)
            CXX_VERSION_MINOR=$($CXX_COMPILER_COMMAND -dumpversion |cut -s -d. -f2)
            CXX_VERSION_PATCH=$($CXX_COMPILER_COMMAND -dumpversion |cut -s -d. -f3)
            ;;

         rose)
            AC_MSG_ERROR([to compile ROSE using ROSE the backend should be specificed to NOT be ROSE (e.g. use gcc/g++)])
            ;;

         *)
            AC_MSG_ERROR([unknown vendor ($CXX_COMPILER_VENDOR) for backend compiler ($CXX_COMPILER_COMMAND)])
            ;;
    esac

    if test "$CXX_VERSION_MINOR" = ""; then
        AC_MSG_ERROR([cannot extract the version minor level for $CXX_COMPILER_COMMAND])
    fi

    if test "$CXX_VERSION_PATCH" = ""; then
        AC_MSG_WARN([cannot extract the version patch level for $CXX_COMPILER_COMMAND (assuming 0)])
        CXX_VERSION_PATCH=0
    fi

    CXX_VERSION_TRIPLET="$CXX_VERSION_MAJOR.$CXX_VERSION_MINOR.$CXX_VERSION_PATCH"

  # echo "Exiting at base of CXX_VERSION_TRIPLET = $CXX_VERSION_TRIPLET"
  # exit 1

    AC_LANG_POP(C++)
])
m4trace:config/compiler-defs.m4:243: -1- AC_DEFUN([GET_CXX_VERSION_MACROS], [

    # Prior to 2016-05-18 we set various version-related macros using the version information that was detected by the
    # GET_CXX_VERSION_INFO macro. However, that info was sometimes wrong (e.g., "g++ -dumpversion" sometimes doesn't
    # report the patch level, in which case we incorrectly define __GNUC_PATCHLEVEL__ to zero).  Dan determined that
    # the "-dM" switch is accepted by GNU g++, LLVM clang++, and Intel icpc, so we now use that instead. This gives
    # correct values for the macros and it makes this function much smaller.
    tmp_input=/tmp/compiler-defs-$$.C
    tmp_output=/tmp/compiler-defs-$$.out
    touch $tmp_input
    if ! $CXX -E -dM $tmp_input >$tmp_output; then
        AC_MSG_ERROR([compiler command failed: $CXX -E -dM $tmp_input])
    fi

    CXX_VERSION_MACROS=
    for symbol in __GNUG__ __GNUC__ __GNUC_MINOR__ __GNUC_PATCHLEVEL__; do
        value="$(sed -ne "s/#define $symbol //p" <$tmp_output)"
        if test "$value" != ""; then
            if test "$CXX_VERSION_MACROS" = ""; then
                CXX_VERSION_MACROS="-D$symbol=$value"
            else
                CXX_VERSION_MACROS="$CXX_VERSION_MACROS -D$symbol=$value"
            fi
        fi
    done
    
    if test "$CXX_COMPILER_VENDOR" = clang; then
    for symbol in __clang__ __clang_major__ __clang_minor__ __clang_patchlevel__; do
        value="$(sed -ne "s/#define $symbol //p" <$tmp_output)"
        if test "$value" != ""; then
            if test "$CXX_VERSION_MACROS" = ""; then
                CXX_VERSION_MACROS="-D$symbol=$value"
            else
                CXX_VERSION_MACROS="$CXX_VERSION_MACROS -D$symbol=$value"
            fi
        fi
    done

    fi    
    rm -f $tmp_input $tmp_output
])
m4trace:config/compiler-defs.m4:291: -1- AC_DEFUN([SAVE_CXX_VERSION_INFO], [
    AC_MSG_NOTICE([    c++ compiler command         $1[]_CXX_COMPILER_COMMAND = "$CXX_COMPILER_COMMAND"])
    AC_MSG_NOTICE([    c++ compiler vendor           $1[]_CXX_COMPILER_VENDOR = "$CXX_COMPILER_VENDOR"])
    AC_MSG_NOTICE([    c++ compiler version triplet  $1[]_CXX_VERSION_TRIPLET = "$CXX_VERSION_TRIPLET"])
    AC_MSG_NOTICE([    c++ compiler major version      $1[]_CXX_VERSION_MAJOR = "$CXX_VERSION_MAJOR"])
    AC_MSG_NOTICE([    c++ compiler minor version      $1[]_CXX_VERSION_MINOR = "$CXX_VERSION_MINOR"])
    AC_MSG_NOTICE([    c++ compiler patch version      $1[]_CXX_VERSION_PATCH = "$CXX_VERSION_PATCH" (0 means not reported)])
    AC_MSG_NOTICE([    c++ compiler version macros    $1[]_CXX_VERSION_MACROS = "$CXX_VERSION_MACROS"])

    $1[]_CXX_COMPILER_COMMAND="$CXX_COMPILER_COMMAND"
    $1[]_CXX_COMPILER_VENDOR="$CXX_COMPILER_VENDOR"
    $1[]_CXX_VERSION_MAJOR="$CXX_VERSION_MAJOR"
    $1[]_CXX_VERSION_MINOR="$CXX_VERSION_MINOR"
    $1[]_CXX_VERSION_PATCH="$CXX_VERSION_PATCH"
    $1[]_CXX_VERSION_TRIPLET="$CXX_VERSION_TRIPLET"
    $1[]_CXX_VERSION_MACROS="$CXX_VERSION_MACROS"
])
m4trace:config/compiler-defs.m4:338: -1- AC_DEFUN([SAVE_BACKEND_VERSION_INFO], [
    SAVE_CXX_VERSION_INFO(BACKEND)

    BACKEND_VERSION_MAJOR="$CXX_VERSION_MAJOR"
    BACKEND_VERSION_MINOR="$CXX_VERSION_MINOR"
    BACKEND_VERSION_PATCHLEVEL="$CXX_VERSION_PATCH"

    case "$CXX_COMPILER_VENDOR" in
        clang|gnu)
            BACKEND_GCC_MAJOR="$CXX_VERSION_MAJOR"
            BACKEND_GCC_MINOR="$CXX_VERSION_MINOR"
            BACKEND_GCC_PATCHLEVEL="$CXX_VERSION_PATCH"
            ;;
        intel)
            BACKEND_INTEL_MAJOR="$CXX_VERSION_MAJOR"
            BACKEND_INTEL_MINOR="$CXX_VERSION_MINOR"
            BACKEND_INTEL_PATCHLEVEL="$CXX_VERSION_PATCH"
            ;;
    esac
])
m4trace:config/compiler-defs.m4:374: -1- AC_DEFUN([GET_BACKEND_COMPILER_MACROS], [
    if test "$BACKEND_CXX_COMPILER_COMMAND" = ""; then
        AC_MSG_ERROR([should have determined backend compiler characteristics already])
    fi

    # Convert space-separated list of "-Dname=value" pairs to a C++ char*[] initializer stored in macroString
    # E.g., convert:
    #     -Dapple=red -Dbanana=yellow
    # to
    #     {"-Dapple=red", "-Dbanana=yellow"}
    macroString=""
    for macro in $BACKEND_CXX_VERSION_MACROS --preinclude rose_edg_required_macros_and_functions.h; do
        if test "$macroString" = ""; then
            macroString="\"$macro\""
        else
            macroString="$macroString, \"$macro\""
        fi
    done
    macroString="{$macroString}"
    AC_MSG_NOTICE([    c++ backend macros                            macroString = $macroString])
])
m4trace:config/compiler-defs.m4:402: -1- AC_DEFUN([GET_COMPILER_SPECIFIC_DEFINES], [

    dnl ------------------------------------------------
    dnl --- Characteristics of the frontend compiler ---
    dnl ------------------------------------------------

    ROSE_CONFIGURE_SECTION([Checking frontend compiler])
    GET_CXX_VERSION_INFO([$CXX], [$FRONTEND_CXX_COMPILER_VENDOR])
    GET_CXX_VERSION_MACROS
    SAVE_CXX_VERSION_INFO(FRONTEND)

    dnl ------------------------------------------------
    dnl --- Characteristics of the backend compiler  ---
    dnl ------------------------------------------------

    ROSE_CONFIGURE_SECTION([Checking backend compiler])

    backendCompilerBaseName=$(basename "$BACKEND_CXX_COMPILER")
    GET_CXX_VERSION_INFO([$BACKEND_CXX_COMPILER], [$BACKEND_CXX_COMPILER_VENDOR])
    GET_CXX_VERSION_MACROS
    SAVE_BACKEND_VERSION_INFO

    # Use the info from GET_CXX_VERSION_INFO to get a list of backend switches in macroStrings.
    GET_BACKEND_COMPILER_MACROS


    dnl ------------------------------------------------
    dnl --- Results for automake and rose_config.h   ---
    dnl ------------------------------------------------

    # Frontend C++ compiler vendor and version triplet
    FRONTEND_CXX_VENDOR_AND_VERSION3="$FRONTEND_CXX_COMPILER_VENDOR-$FRONTEND_CXX_VERSION_TRIPLET"
    AC_SUBST(FRONTEND_CXX_VENDOR_AND_VERSION3)

    # Frontend C++ compiler vendor and version major.minor
    #echo FRONTEND_CXX_COMPILER_VENDOR=$FRONTEND_CXX_COMPILER_VENDOR
    #echo FRONTEND_CXX_VERSION_MAJOR=$FRONTEND_CXX_VERSION_MAJOR
    #echo FRONTEND_CXX_VERSION_MINOR=$FRONTEND_CXX_VERSION_MINOR
    if test $FRONTEND_CXX_COMPILER_VENDOR == "gnu" && test $FRONTEND_CXX_VERSION_MAJOR -ge 5; then
      FRONTEND_CXX_VENDOR_AND_VERSION2="$FRONTEND_CXX_COMPILER_VENDOR-$FRONTEND_CXX_VERSION_MAJOR"
    elif test $FRONTEND_CXX_COMPILER_VENDOR == "clang" && test $FRONTEND_CXX_VERSION_MAJOR -ge 4; then
      FRONTEND_CXX_VENDOR_AND_VERSION2="$FRONTEND_CXX_COMPILER_VENDOR-$FRONTEND_CXX_VERSION_MAJOR"
    elif test $FRONTEND_CXX_COMPILER_VENDOR == "intel"; then
      FRONTEND_CXX_VENDOR_AND_VERSION2="$FRONTEND_CXX_COMPILER_VENDOR-$FRONTEND_CXX_VERSION_MAJOR"
    else
      FRONTEND_CXX_VENDOR_AND_VERSION2="$FRONTEND_CXX_COMPILER_VENDOR-$FRONTEND_CXX_VERSION_MAJOR.$FRONTEND_CXX_VERSION_MINOR"
    fi
    #echo FRONTEND_CXX_VENDOR_AND_VERSION2=$FRONTEND_CXX_VENDOR_AND_VERSION2
    AC_SUBST(FRONTEND_CXX_VENDOR_AND_VERSION2)

    # Backend C++ compiler vendor and version triplet
    BACKEND_CXX_VENDOR_AND_VERSION3="$BACKEND_CXX_COMPILER_VENDOR-$BACKEND_CXX_VERSION_TRIPLET"
    AC_SUBST(BACKEND_CXX_VENDOR_AND_VERSION3)

    # Backend C++ compiler vendor and version major.minor
    BACKEND_CXX_VENDOR_AND_VERSION2="$BACKEND_CXX_COMPILER_VENDOR-$BACKEND_CXX_VERSION_MAJOR.$BACKEND_CXX_VERSION_MINOR"
    AC_SUBST(BACKEND_CXX_VENDOR_AND_VERSION2)

    AC_DEFINE_UNQUOTED([CXX_SPEC_DEF], $macroString, [-D options to hand to EDG C++ front-end.])

    dnl DQ (2/1/2016): Fixed compiler vendor names to be consistatenyl lower case.
    dnl DQ (1/9/2010): Detect the type of compiler being used. This is used to add the library libimf with libm to support use of
    dnl the Intel compiler.  I have added AM conditional for GNU just for completeness.
    AM_CONDITIONAL(USING_INTEL_COMPILER, [test "$BACKEND_CXX_COMPILER_VENDOR" = "intel"])
    AM_CONDITIONAL(USING_GNU_COMPILER,   [test "$BACKEND_CXX_COMPILER_VENDOR" = "gnu"])
    AM_CONDITIONAL(USING_CLANG_COMPILER, [test "$BACKEND_CXX_COMPILER_VENDOR" = "clang"])

    dnl DQ (1/27/2010): Setup automake conditionals so that we can optionally skip files in ROSE that don't compile.
    if test \
        "$backendCompilerBaseName" = roseTranslator -o \
        "$backendCompilerBaseName" = testTranslator -o \
        "$backendCompilerBaseName" = roseCodeGeneration -o \
        "$backendCompilerBaseName" = testCodeGeneration -o \
        "$backendCompilerBaseName" = roseAnalysis -o \
        "$backendCompilerBaseName" = testAnalysis -o \
        "$backendCompilerBaseName" = roseAstFileIO -o \
        "$backendCompilerBaseName" = testAstFileIO; then
        ROSE_USING_ROSE=yes
    else
        ROSE_USING_ROSE=
    fi
    AM_CONDITIONAL(ROSE_USING_ROSE, [test "ROSE_USING_ROSE" != ""])

    AM_CONDITIONAL(ROSE_USING_ROSE_TRANSLATOR,
        [test "$backendCompilerBaseName" = roseTranslator -o "$backendCompilerBaseName" = testTranslator])

    dnl DQ (2/21/2010): If we are testing AST File I/O then set the flag to indicate that we are testing the code
    dnl generation as well.
    if test \
        "$backendCompilerBaseName" = roseCodeGeneration -o \
        "$backendCompilerBaseName" = testCodeGeneration -o \
        "$backendCompilerBaseName" = roseAstFileIO -o \
        "$backendCompilerBaseName" = testAstFileIO; then
        ROSE_USING_ROSE_CODE_GENERATION=yes
    else
        ROSE_USING_ROSE_CODE_GENERATION=
    fi
    AM_CONDITIONAL(ROSE_USING_ROSE_CODE_GENERATION, [test "$ROSE_USING_ROSE_CODE_GENERATION" != ""])

    dnl DQ (5/29/2010): Set ROSE_USING_ROSE_ANALYSIS automake conditional whenever ROSE_USING_ROSE_CODE_GENERATION is set
    if test \
        "$backendCompilerBaseName" = roseAnalysis -o \
        "$backendCompilerBaseName" = testAnalysis -o \
        "$backendCompilerBaseName" = roseCodeGeneration -o \
        "$backendCompilerBaseName" = testCodeGeneration -o \
        "$backendCompilerBaseName" = roseAstFileIO -o \
        "$backendCompilerBaseName" = testAstFileIO; then
        ROSE_USING_ROSE_ANALYSIS=yes
    else
        ROSE_USING_ROSE_ANALYSIS=
    fi
    AM_CONDITIONAL(ROSE_USING_ROSE_ANALYSIS, [test "$ROSE_USING_ROSE_ANALYSIS" != ""])

    if test \
        "$backendCompilerBaseName" = roseAstFileIO -o \
        "$backendCompilerBaseName" = testAstFileIO; then
        ROSE_USING_ROSE_AST_FILE_IO=yes
    else
        ROSE_USING_ROSE_AST_FILE_IO=
    fi
    AM_CONDITIONAL(ROSE_USING_ROSE_AST_FILE_IO, [test "$ROSE_USING_ROSE_AST_FILE_IO" != ""])

    if test "$backendCompilerBaseName" = roseAnalysis -o "$backendCompilerBaseName" = testAnalysis; then
        AC_MSG_NOTICE([found the ROSE analysis tool being used as compiler for ROSE source code])
        AC_DEFINE(CXX_IS_ROSE_ANALYSIS, 1,
            [Is this the ROSE Analizer (part of tests to compile ROSE for analysis only using ROSE)])
    fi

    dnl DQ (2/20/2010): Support for testing AST File I/O.
    if test "$backendCompilerBaseName" = roseAstFileIO -o "$backendCompilerBaseName" = testAstFileIO; then
        AC_MSG_NOTICE([found the ROSE analysis tool being used as compiler for ROSE source code])
        AC_DEFINE(CXX_IS_ROSE_AST_FILE_IO, 1,
            [Is this the ROSE AST File IO (part of tests to compile ROSE for AST File IO only using ROSE)])
        AC_DEFINE(CXX_IS_ROSE_CODE_GENERATION, 1,
            [Is this the ROSE Code Generator (part of tests to compile ROSE and generate code using ROSE)])
        AC_DEFINE(CXX_IS_ROSE_ANALYSIS, 1,
            [Is this the ROSE Analizer (part of tests to compile ROSE for analysis only using ROSE)])
    fi

    if test "$backendCompilerBaseName" = roseCodeGeneration -o "$backendCompilerBaseName" = testCodeGeneration; then
        AC_MSG_NOTICE([found the ROSE code generation tool being used as compiler for ROSE source code])
        AC_DEFINE(CXX_IS_ROSE_CODE_GENERATION, 1,
            [Is this the ROSE Code Generator (part of tests to compile ROSE and generate code using ROSE)])
        AC_DEFINE(CXX_IS_ROSE_ANALYSIS, 1,
            [Is this the ROSE Analizer (part of tests to compile ROSE for analysis only using ROSE)])
    fi

    if test "$backendCompilerBaseName" = roseTranslator -o "$backendCompilerBaseName" = testTranslator; then
        AC_MSG_NOTICE([found the ROSE translator tool being used as compiler for ROSE source code])
        AC_DEFINE(CXX_IS_ROSE_TRANSLATOR, 1,
            [Is this the ROSE translator (part of tests to compile ROSE using ROSE)])
        AC_DEFINE(CXX_IS_ROSE_CODE_GENERATION, 1,
            [Is this the ROSE Code Generator (part of tests to compile ROSE and generate code using ROSE)])
        AC_DEFINE(CXX_IS_ROSE_ANALYSIS, 1,
            [Is this the ROSE Analizer (part of tests to compile ROSE for analysis only using ROSE)])
    fi

    if test "$CXX_COMPILER_VENDOR" = intel; then
        AC_DEFINE(BACKEND_CXX_IS_INTEL_COMPILER, 1, [Is this an Intel compiler being used to compile ROSE generated code])
    fi

    if test "$CXX_COMPILER_VENDOR" = "gnu"; then
        AC_DEFINE(BACKEND_CXX_IS_GNU_COMPILER, 1, [Is this a GNU compiler being used to compile ROSE generated code])
    fi

    if test "$CXX_COMPILER_VENDOR" = clang; then
        AC_DEFINE(BACKEND_CXX_IS_CLANG_COMPILER, 1, [Is this a Clang compiler being used to compile ROSE generated code])
    fi

    dnl DQ (9/13/2009): Add information about the backend compiler (which matches the associated header files generated).
    dnl These values are used to control tests that are backend compiler and or compiler version dependent.
    dnl Matzke (5/9/2016): Keeping the same names and semantics, although the "GCC" names will be empty for intel compilers.
    BACKEND_COMPILER_VERSION_NAME="$BACKEND_CXX_COMPILER_VENDOR"
    BACKEND_COMPILER_VERSION_MAJOR_NUMBER="$BACKEND_GCC_MAJOR"
    BACKEND_COMPILER_VERSION_MINOR_NUMBER="$BACKEND_GCC_MINOR"
    BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER="$BACKEND_GCC_PATCHLEVEL"
    GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX="$BACKEND_COMPILER_VERSION_NAME-$BACKEND_COMPILER_VERSION_MAJOR_NUMBER.$BACKEND_COMPILER_VERSION_MINOR_NUMBER"
    AC_SUBST(GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX)

    dnl DQ (9/30/2009): Exempt a set of old compiler versions from some testing. This is an attept to define a class of compiler
    dnl versions that we should not test because it can generate internal compiler errors.  Specifically I am turning off the
    dnl projects/interpretation directory when using GNU version 3.4 (this is an example of this class).
    dnl Matzke (5/9/2016): I doubt this is ever defined since vendor names are lower case.
    AM_CONDITIONAL(OLD_COMPILER_VERSION,
        [test "$BACKEND_COMPILER_VERSION_NAME" = "GNU" -a \
              "$BACKEND_COMPILER_VERSION_MAJOR_NUMBER" = 3 -a \
              "$BACKEND_COMPILER_VERSION_MINOR_NUMBER" = 4])

    AC_SUBST(BACKEND_COMPILER_VERSION_NAME)
    AC_SUBST(BACKEND_COMPILER_VERSION_MAJOR_NUMBER)
    AC_SUBST(BACKEND_COMPILER_VERSION_MINOR_NUMBER)
    AC_SUBST(BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER)

])
m4trace:config/determine-os.m4:16: -1- AC_DEFUN([DETERMINE_OS], [
    case $build_os in
        linux*)
            LINUX=yes;
            ;;
        cygwin)
            MINGW=yes
            ;;
        mingw*)
            MINGW32=yes
            ;;
        darwin*)
            MACOSX=yes
            ;;
        msdos*)
            MSDOS=yes
            ;;
        solaris*)
            SOLARIS=yes;
            ;;
    esac
    AM_CONDITIONAL([OS_MACOSX], [ test "x$MACOSX"  = xyes ] )
    AM_CONDITIONAL([OS_LINUX],  [ test "x$LINUX"   = xyes ] )
    AM_CONDITIONAL([OS_MINGW],  [ test "x$MINGW"   = xyes ] )
    AM_CONDITIONAL([OS_MSDOS],  [ test "x$MSDOS"   = xyes ] )
    AM_CONDITIONAL([OS_SOLARIS],[ test "x$SOLARIS" = xyes ] )
])
m4trace:config/determine-os.m4:56: -1- AC_DEFUN([DETERMINE_OS_VENDOR], [
    AC_CHECK_TOOL(ROSE_LSB_RELEASE, [lsb_release], [no])

    OS_vendor="ROSE_unknown_OS";
    OS_release="ROSE_unknown_OS_release";

    if test "x$ROSE_LSB_RELEASE" = xno; then
        dnl Most OS's output their name buried in /etc/issue
        dnl  ls -dl /etc/*-release /etc/*-version;
        dnl  echo "***************************";
        dnl  echo "* Output /etc/issue file: *";
        dnl  cat /etc/issue
        dnl  echo "***************************";

        # PP (05/14/2019) add solaris
        dnl Fix the case of Apple OSX and Sun/Oracle Solaris support.
        dnl
        dnl For at least Apple Mac OSX and Solaris, there is no lsb_release program or /etc/*-release /etc/*-version
        dnl files but autoconf will guess the vendor and the OS release correctly (so use those values).
        case $build_vendor in
            apple)
                OS_vendor=$build_vendor
                case $build_os in
                    darwin13*)
                        OS_release=10.9
                        ;;
                    darwin14*)
                        OS_release=10.10
                        ;;
                    darwin15*)
                        OS_release=10.11
                        ;;
                    darwin16*)
                        OS_release=10.12
                        ;;
                    darwin17*)
                        OS_release=10.13
                        ;;
                    darwin18*)
                        OS_release=10.14
                        ;;
                    darwin19*)
                        OS_release=10.15
                        ;;
                    *)
                        AC_MSG_ERROR([Apple macOS X minor version not recognized as either darwin13 through darwin19 (macOS 10.9-10.15) ... (build_os = $build_os)])
                        ;;
                esac
                ;;

            sun) 
                OS_vendor=$build_vendor
                case $build_os in
                    solaris2.10)                 
                        OS_release=2.10
                        ;;
                    *)
                        AC_MSG_ERROR([Solaris version not supported (only solaris-2.10 is supported, build_os = $build_os)])
                        ;;
                esac
                ;;
        esac  
    else
        OS_vendor=`lsb_release -is`
        OS_release=`lsb_release -rs`
    fi

    AC_MSG_CHECKING([$OS_vendor release version])
    AC_MSG_RESULT([$OS_release])

    case $OS_vendor in
        Debian*)
            DEBIAN=yes
            AC_DEFINE([ROSE_DEBIAN_OS_VENDOR], [] , [Debian Operating System (OS) being used to build ROSE])
            ;;
        RedHat*)
            REDHAT=yes
            AC_DEFINE([ROSE_REDHAT_OS_VENDOR], [] , [RedHat Operating System (OS) being used to build ROSE])
            ;;
        Ubuntu*)
            UBUNTU=yes
            AC_DEFINE([ROSE_UBUNTU_OS_VENDOR], [] , [Ubuntu Operating System (OS) being used to build ROSE])
            ;;
        CentOS*)
            CENTOS=yes
            AC_DEFINE([ROSE_CENTOS_OS_VENDOR], [] , [CentOS Operating System (OS) being used to build ROSE])
            ;;
        apple*)
            APPLE=yes
            AC_DEFINE([ROSE_APPLE_OS_VENDOR], [] , [apple Operating System (OS) being used to build ROSE])
            ;;
    esac



    # Major and minor release numbers for OS.
    OS_major_release_number=`echo "$OS_release" |cut -d. -f1`
    OS_minor_release_number=`echo "$OS_release" |cut -d. -f2`

    AC_MSG_CHECKING([$OS_vendor major release number])
    AC_MSG_RESULT([$OS_major_release_number])
    AC_MSG_CHECKING([$OS_vendor minor release number])
    AC_MSG_RESULT([$OS_minor_release_number])

    AM_CONDITIONAL([OS_VENDOR_DEBIAN],[ test "x$DEBIAN" = xyes ])
    AM_CONDITIONAL([OS_VENDOR_REDHAT],[ test "x$REDHAT" = xyes ])
    AM_CONDITIONAL([OS_VENDOR_UBUNTU],[ test "x$UBUNTU" = xyes ])
    AM_CONDITIONAL([OS_VENDOR_CENTOS],[ test "x$CENTOS" = xyes ])
    AM_CONDITIONAL([OS_VENDOR_APPLE],[ test "x$APPLE"  = xyes ])

    # Conditionals for 32-bit vs. 64-bit OS (used only in the binary analysis work -- and rarely).
    AM_CONDITIONAL([OS_32BIT],[ test "x$build_cpu" = xi686 ])
    AM_CONDITIONAL([OS_64BIT],[ test "x$build_cpu" = xx86_64 ])

    AM_CONDITIONAL([OS_VENDOR_REDHAT_32BIT],[ test "x$REDHAT" = xyes -a "x$build_cpu" = xi686 ])

    # Major and minor release numbers for REDHAT OS.
    AM_CONDITIONAL([OS_VENDOR_REDHAT_REL5],[ test "x$REDHAT" = xyes -a "x$OS_major_release_number" = x5])
    AM_CONDITIONAL([OS_VENDOR_REDHAT_REL6],[ test "x$REDHAT" = xyes -a "x$OS_major_release_number" = x6])

    AC_SUBST(OS_vendor)
    AC_SUBST(OS_release)

    # Major release number for OS.
    AC_DEFINE_UNQUOTED([ROSE_OS_MAJOR_RELEASE_NUMBER], $OS_major_release_number , [RedHat Operating System (OS) major release number being used to build ROSE])
    AC_DEFINE_UNQUOTED([ROSE_OS_MINOR_RELEASE_NUMBER], $OS_minor_release_number , [RedHat Operating System (OS) minor release number being used to build ROSE])

    # Major and minor release numbers for REDHAT OS.
    AC_SUBST(OS_major_release_number)
    AC_SUBST(OS_minor_release_number)
])
m4trace:config/enable-rosehpct.m4:21: -1- AC_DEFUN([ACROSE_ENABLE_ROSEHPCT], [

AC_MSG_CHECKING([whether user wants to build ROSE-HPCT])
AC_ARG_ENABLE([rosehpct],
  AC_HELP_STRING([--enable-rosehpct],
    [enable build of the ROSE-HPCT module]),
  [acrose_enable_rosehpct=$enableval],
  [acrose_enable_rosehpct=yes]
  )
AC_MSG_RESULT([${acrose_enable_rosehpct}])

if test x"${acrose_enable_rosehpct}" = xyes ; then
  ACROSE_CHECK_ROSEHPCT([], [acrose_enable_rosehpct=no])
fi

AM_CONDITIONAL(ROSE_BUILD_ROSEHPCT,
  test x"${acrose_enable_rosehpct}" = xyes)
])
m4trace:config/enable-rosehpct.m4:49: -1- AC_DEFUN([ACROSE_CHECK_ROSEHPCT], [
AC_LANG_PUSH([C++])

AC_MSG_NOTICE([checking for ROSE-HPCT build-prerequisites])

if test x"${with_xml}" = xyes ; then
  AC_MSG_NOTICE([all known ROSE-HPCT build-prerequisites satisfied])
  $1
else  # At least one prerequisite failed
  :
  AC_MSG_NOTICE([one or more ROSE-HPCT build-prerequisites not satisfied])
  $2
fi

ROSEHPCT_DEP_INCLUDES="${XML_CPPFLAGS}"
ROSEHPCT_DEP_LIBS="${XML_LIBS}"

AC_SUBST([ROSEHPCT_DEP_INCLUDES])
AC_SUBST([ROSEHPCT_DEP_LIBS])
AC_LANG_POP([C++])
])
m4trace:config/generate-backend-compiler-specific-headers.m4:1: -1- AC_DEFUN([GENERATE_BACKEND_CXX_COMPILER_SPECIFIC_HEADERS], [
 # BP : 11/20/2001, create a directory to store header files which are compiler specific
   compilerName="`basename $BACKEND_CXX_COMPILER`"

   # echo "In GENERATE BACKEND CXX COMPILER SPECIFIC HEADERS: Using back-end C++ compiler = \"$BACKEND_CXX_COMPILER\" compiler vendor name = $ax_cv_cxx_compiler_vendor for processing of unparsed source files from ROSE preprocessors."

   chmod u+x "${srcdir}/config/create_system_headers"
   if test "$ROSE_CXX_HEADERS_DIR" = ""; then
      dnl AC_MSG_NOTICE([ROSE_CXX_HEADERS_DIR not set ...])
      ROSE_CXX_HEADERS_DIR="${prefix}/include/${compilerName}_HEADERS"
   else
      AC_MSG_NOTICE([ROSE_CXX_HEADERS_DIR = "$ROSE_CXX_HEADERS_DIR"])
   fi

   saveCurrentDirectory="`pwd`"
   cd "$srcdir"
   absolutePath_srcdir="`pwd`"
   cd "$saveCurrentDirectory"

 # DQ (9/1/2009): Output the absolute path
   AC_MSG_NOTICE([absolutePath_srcdir = "${absolutePath_srcdir}"])

 # This is a way to make this a global shaell variable, but it is better to pass it as a parameter to the function.
 # export language="cxx"
 # This language name is used as a parameter to the backend compiler, so it must be "c" or "c++"
   language="c++"
 # echo "In generate backend compiler specific headers: language = $language"

 # Use the full path name to generate the header from the correctly specified version of the backend compiler
   mkdir -p "./include-staging/${compilerName}_HEADERS"

 # DQ (2/2/2016): Adding additional parameters to this function call.
 # "${srcdir}/config/create_system_headers" "${BACKEND_CXX_COMPILER}" "./include-staging/${compilerName}_HEADERS" "${absolutePath_srcdir}"
   VERBOSE="$verbose" "${srcdir}/config/create_system_headers" "${BACKEND_CXX_COMPILER}" "./include-staging/${compilerName}_HEADERS" "${absolutePath_srcdir}" "${language}" "$BACKEND_CXX_COMPILER_VENDOR"

   error_code=$?
   AC_MSG_NOTICE([error_code = "$error_code"])
   if test $error_code != 0; then
        AC_MSG_FAILURE([error in generate backend CXX compiler specific headers: call to ${srcdir}/config/create_system_headers: nonzero exit code returned to caller error_code = "$error_code"])
   fi

   AC_MSG_NOTICE([BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER = "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER"])
   AC_MSG_NOTICE([BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER = "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER"])

 # DQ (8/14/2010): GNU 4.5 includes some code that will not compile and appears to not be valid C++ code.
 # We fixup a specific GNU 4.5 issues use of "return { __mask };"
   if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x4; then
      if test x$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER == x5; then
         AC_MSG_NOTICE([we have identified version 4.5 of GNU C/C++ which triggers use of a modified copy of iomanip header file])
         cp ${srcdir}/config/iomanip-gnu-4.5 ./include-staging/iomanip-gnu-4.5
         AC_MSG_NOTICE([remove the links])
         rm ./include-staging/gcc_HEADERS/hdrs4/c++/4.5.0/iomanip;
         rm ./include-staging/g++_HEADERS/hdrs7/c++/4.5.0/iomanip;
         rm ./include-staging/g++_HEADERS/hdrs3/iomanip;
         AC_MSG_NOTICE([rebuild links to the modified file])
         ln -s ./include-staging/iomanip-gnu-4.5 ./include-staging/gcc_HEADERS/hdrs4/c++/4.5.0/iomanip
         ln -s ./include-staging/iomanip-gnu-4.5 ./include-staging/g++_HEADERS/hdrs7/c++/4.5.0/iomanip
         ln -s ./include-staging/iomanip-gnu-4.5 ./include-staging/g++_HEADERS/hdrs3/iomanip
      fi
   fi

 # DQ (9/19/2010): Copy the upc.h header file from the config directory to our include-staging/${BACKEND_CXX_COMPILER}_HEADERS directory.
 # It might be that these should be put into a UPC specific subdirectory (so that the C compiler can't accedentally find them), but this should be discussed.
   AC_MSG_NOTICE([copying UPC++ header files into ./include-staging/${compilerName}_HEADERS directory])
   cp ${srcdir}/config/upc.h ./include-staging/${compilerName}_HEADERS
   cp ${srcdir}/config/upc_io.h ./include-staging/${compilerName}_HEADERS
   cp ${srcdir}/config/upc_relaxed.h ./include-staging/${compilerName}_HEADERS
   cp ${srcdir}/config/upc_strict.h ./include-staging/${compilerName}_HEADERS
   cp ${srcdir}/config/upc_collective.h ./include-staging/${compilerName}_HEADERS
   cp ${srcdir}/config/bupc_extensions.h ./include-staging/${compilerName}_HEADERS

 # DQ (8/22/2011): Added support for SSE.
 # Copy alternative SSE and MMX headers to be seen by ROSE ahead of the originals.
   cp ${srcdir}/config/rose_specific_emmintrin.h ./include-staging/${compilerName}_HEADERS/emmintrin.h
   cp ${srcdir}/config/rose_specific_xmmintrin.h ./include-staging/${compilerName}_HEADERS/xmmintrin.h
 # DQ (8/29/2015): This file is also required since the one available in the Intel header files will 
 # not compie with EDG (requires MS decl_spec grammar).
   cp ${srcdir}/config/rose_specific_mmintrin.h  ./include-staging/${compilerName}_HEADERS/mmintrin.h

 # Phlin (6/18/2012): Added support for SSE4.2.
   cp ${srcdir}/config/rose_specific_ammintrin.h ./include-staging/${compilerName}_HEADERS/ammintrin.h
   cp ${srcdir}/config/rose_specific_nmmintrin.h ./include-staging/${compilerName}_HEADERS/nmmintrin.h
   cp ${srcdir}/config/rose_specific_pmmintrin.h ./include-staging/${compilerName}_HEADERS/pmmintrin.h
   cp ${srcdir}/config/rose_specific_smmintrin.h ./include-staging/${compilerName}_HEADERS/smmintrin.h
   cp ${srcdir}/config/rose_specific_tmmintrin.h ./include-staging/${compilerName}_HEADERS/tmmintrin.h

 # Phlin (6/18/2012): Added support for AVX.
 # Only GCC 4.6+ supports AVX instructions.
   if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x4; then
    # if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "6"; then
      if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "6"; then
         cp ${srcdir}/config/rose_specific_avxintrin.h ./include-staging/${compilerName}_HEADERS/avxintrin.h
      fi
   else
      if test "$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER" -ge "5"; then
         cp ${srcdir}/config/rose_specific_avxintrin.h ./include-staging/${compilerName}_HEADERS/avxintrin.h
      fi
   fi

 # DQ (11/21/2016): EDG 4.12 can't handle a specific line of the GNU 6.1 vector.h header file. So build a modified version for this case.
 # The function calls: "_M_move_assign();" appear to be a problem for EDG 4.12 (seqfaults internally in il.c).
   if test "x$edg_major_version_number" = "x4"; then
      if test "$edg_minor_version_number" -eq "12"; then
         if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x6; then
            if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "1"; then
               mkdir -p ./include-staging/${compilerName}_HEADERS/bits
               cp ${srcdir}/config/rose_specific_GNU_6_1_stl_vector.h ./include-staging/${compilerName}_HEADERS/bits/stl_vector.h
               cp ${srcdir}/config/rose_specific_GNU_6_1_stl_list.h ./include-staging/${compilerName}_HEADERS/bits/stl_list.h
               cp ${srcdir}/config/rose_specific_GNU_6_1_stl_deque.h ./include-staging/${compilerName}_HEADERS/bits/stl_deque.h
               cp ${srcdir}/config/rose_specific_GNU_6_1_hashtable.h ./include-staging/${compilerName}_HEADERS/bits/hashtable.h
            fi
         fi
      fi
   fi

   error_code=$?
   AC_MSG_NOTICE([error_code = "$error_code"])
   if test $error_code != 0; then
        AC_MSG_FAILURE([error copying upc.h header file: nonzero exit code returned to caller error_code = "$error_code"])
   fi

   if test "x$BACKEND_CXX_COMPILER_VENDOR" = "xclang"; then
      cp ${srcdir}/config/rose_specific_clang_atomic ./include-staging/${compilerName}_HEADERS/atomic
   fi
   
   ${srcdir}/scripts/builtinLlvmFunctions.pl --constexpr=${srcdir}/config/constexpr_builtins.def ${srcdir}/config/Builtins.def > ./include-staging/${compilerName}_HEADERS/rose_generated_builtin_functions.h
   if test "x$build_vendor" = "xapple"; then
     sed -i ".original" "/REPLACE_ME_WITH_GENERATED_BUILTIN_FUNCTIONS/r./include-staging/${compilerName}_HEADERS/rose_generated_builtin_functions.h" "./include-staging/${compilerName}_HEADERS/rose_edg_required_macros_and_functions.h"
   else
     sed -i "/REPLACE_ME_WITH_GENERATED_BUILTIN_FUNCTIONS/r./include-staging/${compilerName}_HEADERS/rose_generated_builtin_functions.h" "./include-staging/${compilerName}_HEADERS/rose_edg_required_macros_and_functions.h"
   fi
])
m4trace:config/generate-backend-compiler-specific-headers.m4:139: -1- AC_DEFUN([SETUP_BACKEND_CXX_COMPILER_SPECIFIC_REFERENCES], [
 # Now setup the include path that we will prepend to any user -I<dir> options so that the 
 # required compiler-specific header files can be found (these are often relocated versions 
 # of the compiler specific header files that have been processed so that EDG can read them)
 # It is unfortunate, but many compiler-specific files include compiler-specific code which
 # will not compile with a standard C++ compiler or can not be processed using a standard
 # C preprocessor (cpp) (an ugly fact of common compilers).

   chmod u+x "${srcdir}/$ROSE_HOME/config/dirincludes"

 #Mac OS X (and possibly other BSD-distros) does not support the echo -n option.
 #We need to detect this special case and use a "\c" in the end of the echo to not print a
 #newline.
   er=`echo -n ""`
   if test "X$er" = "X-n "
   then
     EC="\c"
     EO=""
   else
     EC=""
     EO="-n"
   fi

compilerNameCxx="`basename ${BACKEND_CXX_COMPILER}`"

 # DQ (11/1/2011): We need this same mechanism for C++'s use of EDG 4.x as we did for EDG 3.3 (but for C code this was not required; and was simpler).
 # Include the directory with the subdirectories of header files
 # if test "x$enable_new_edg_interface" = "xyes"; then
 #   includeString="{`${srcdir}/config/get_compiler_header_dirs ${BACKEND_CXX_COMPILER} | while read dir; do echo -n \\\"$dir\\\",\ ; done` \"/usr/include\"}"
 # else
 #   includeString="{\"${compilerNameCxx}_HEADERS\"`${srcdir}/$ROSE_HOME/config/dirincludes "./include-staging/" "${compilerNameCxx}_HEADERS"`, `${srcdir}/config/get_compiler_header_dirs ${BACKEND_CXX_COMPILER} | while read dir; do echo $EO \\\"$dir\\\",$EC\ ; done` \"/usr/include\"}"
 # fi
 # includeString="{\"${compilerNameCxx}_HEADERS\"`${srcdir}/$ROSE_HOME/config/dirincludes "./include-staging/" "${compilerNameCxx}_HEADERS"`, `${srcdir}/config/get_compiler_header_dirs ${BACKEND_CXX_COMPILER} | while read dir; do echo $EO \\\"$dir\\\",$EC\ ; done` \"/usr/include\"}"

 # Set new variables to pass in the function call below.
   compilerVendorName="$BACKEND_CXX_COMPILER_VENDOR"
   language="c++"

 # DQ (2/2/2016): Adding additional parameters to this function call.
 # if ! compilerHeaderDirs="$(${srcdir}/config/get_compiler_header_dirs ${BACKEND_CXX_COMPILER} | while read dir; do echo $EO \"$dir\",$EC\ ; done; exit ${PIPESTATUS[0]})"; then
 # [Matzke 2016-05-18]: Square brackets are quote characters in M4, so use "@<:@" and "@:>@" quadrigraphs instead. Ugly!
   if ! compilerHeaderDirs="$(env VERBOSE="$verbose" ${srcdir}/config/get_compiler_header_dirs ${BACKEND_CXX_COMPILER} ${language} ${compilerVendorName} | while read dir; do echo $EO \"$dir\",$EC\ ; done; exit ${PIPESTATUS@<:@0@:>@})"; then
      AC_MSG_FAILURE([$compilerHeaderDirs])
   fi

 # DQ (2/2/2016): Added error checking (though this already appears to be present).
 # [Matzke 2016-05-18]: Square brackets are quote characters in M4, so use "@<:@" and "@:>@" quadrigraphs instead. Ugly!
   if test "${PIPESTATUS@<:@0@:>@}" -ne 0; then
       AC_MSG_FAILURE([in SETUP BACKEND CXX COMPILER SPECIFIC REFERENCES: get_compiler_header_dirs failed])
   fi

   includeString="{\"${compilerNameCxx}_HEADERS\"`${srcdir}/$ROSE_HOME/config/dirincludes "./include-staging/" "${compilerNameCxx}_HEADERS"`, $compilerHeaderDirs"

   if test "x$build_vendor" = "xapple"; then
     xcodeSDKPath=`xcrun --show-sdk-path`
     includeString="$includeString \"$xcodeSDKPath/usr/include\"}"
   else
     includeString="$includeString \"/usr/include\"}"
   fi

   AC_MSG_NOTICE([includeString = "$includeString"])
   AC_DEFINE_UNQUOTED([CXX_INCLUDE_STRING],$includeString,[Include path for backend C++ compiler.])

 # echo "Exiting in setup backend cxx compiler specific references"
 # exit 1;

])
m4trace:config/generate-backend-compiler-specific-headers.m4:211: -1- AC_DEFUN([GENERATE_BACKEND_C_COMPILER_SPECIFIC_HEADERS], [
   compilerName="`basename $BACKEND_C_COMPILER`"

   # echo "C compilerName = ${compilerName}"
   # echo "In GENERATE BACKEND C COMPILER SPECIFIC HEADERS: Using back-end C++ compiler = \"$BACKEND_CXX_COMPILER\" compiler vendor name = $ax_cv_cxx_compiler_vendor for processing of unparsed source files from ROSE preprocessors."

   chmod u+x "${srcdir}/config/create_system_headers"

   if test "$ROSE_C_HEADERS_DIR" = ""; then
      dnl AC_MSG_NOTICE([ROSE_C_HEADERS_DIR not set ...])
      ROSE_C_HEADERS_DIR="${compilerName}_HEADERS"
   else
      AC_MSG_NOTICE([ROSE_C_HEADERS_DIR = "$ROSE_C_HEADERS_DIR"])
   fi

   saveCurrentDirectory="`pwd`"
   cd "$srcdir"
   absolutePath_srcdir="`pwd`"
   cd "$saveCurrentDirectory"

 # DQ (9/1/2009): Output the absolute path
   AC_MSG_NOTICE([absolutePath_srcdir = "${absolutePath_srcdir}"])

 # This is a way to make this a global shaell variable, but it is better to pass it as a parameter to the function.
 # export language="c"
   language="c"
 # echo "In generate backend compiler specific headers: language = $language"

 # Use the full path name to generate the header from the correctly specified version of the backend compiler
   mkdir -p "./include-staging/${compilerName}_HEADERS"
 # "${srcdir}/config/create_system_headers" "${BACKEND_C_COMPILER}" "./include-staging/${compilerName}_HEADERS" "${absolutePath_srcdir}"
   "${srcdir}/config/create_system_headers" "${BACKEND_C_COMPILER}" "./include-staging/${compilerName}_HEADERS" "${absolutePath_srcdir}" "${language}" "$BACKEND_CXX_COMPILER_VENDOR"

   error_code=$?
   AC_MSG_NOTICE([error_code = "$error_code"])
   if test $error_code != 0; then
        AC_MSG_FAILURE([in generate backend C compiler specific headers: call to ${srcdir}/config/create_system_headers: nonzero exit code returned to caller error_code = "$error_code"])
   fi

 # DQ (2/2/2016): Debugging new support for detected the compiler vendor.
 # echo "Exiting after call to create_system_headers in GENERATE BACKEND C COMPILER SPECIFIC HEADERS"
 # exit 1

 # DQ (9/15/2010): Copy the upc.h header file from the config directory to our include-staging/${compilerName}_HEADERS directory.
 # It might be that these should be put into a UPC specific subdirectory (so that the C compiler can't accedentally find them), but this should be discussed.
   AC_MSG_NOTICE([copying UPC header files into ./include-staging/${compilerName}_HEADERS directory])
   cp ${srcdir}/config/upc.h ./include-staging/${compilerName}_HEADERS
   cp ${srcdir}/config/upc_io.h ./include-staging/${compilerName}_HEADERS
   cp ${srcdir}/config/upc_relaxed.h ./include-staging/${compilerName}_HEADERS
   cp ${srcdir}/config/upc_strict.h ./include-staging/${compilerName}_HEADERS
   cp ${srcdir}/config/upc_collective.h ./include-staging/${compilerName}_HEADERS
   cp ${srcdir}/config/bupc_extensions.h ./include-staging/${compilerName}_HEADERS

 # DQ (8/22/2011): Added support for SSE.
 # Copy alternative SSE and MMX headers to be seen by ROSE ahead of the originals.
   cp ${srcdir}/config/rose_specific_emmintrin.h ./include-staging/${compilerName}_HEADERS/emmintrin.h
   cp ${srcdir}/config/rose_specific_xmmintrin.h ./include-staging/${compilerName}_HEADERS/xmmintrin.h
   cp ${srcdir}/config/rose_specific_mmintrin.h  ./include-staging/${compilerName}_HEADERS/mmintrin.h

 # Phlin (6/18/2012): Added support for SSE4.2.
   cp ${srcdir}/config/rose_specific_ammintrin.h ./include-staging/${compilerName}_HEADERS/ammintrin.h
   cp ${srcdir}/config/rose_specific_nmmintrin.h ./include-staging/${compilerName}_HEADERS/nmmintrin.h
   cp ${srcdir}/config/rose_specific_pmmintrin.h ./include-staging/${compilerName}_HEADERS/pmmintrin.h
   cp ${srcdir}/config/rose_specific_smmintrin.h ./include-staging/${compilerName}_HEADERS/smmintrin.h
   cp ${srcdir}/config/rose_specific_tmmintrin.h ./include-staging/${compilerName}_HEADERS/tmmintrin.h

# Phlin (6/18/2012): Added support for AVX.
# Only GCC 4.6+ supports AVX instructions.
   if test x$BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER == x4; then
      if test "$BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER" -ge "6"; then
         cp ${srcdir}/config/rose_specific_avxintrin.h ./include-staging/${compilerName}_HEADERS/avxintrin.h
      fi
   fi

   error_code=$?
   AC_MSG_NOTICE([error_code = "$error_code"])
   if test $error_code != 0; then
        AC_MSG_FAILURE([in copying of upc.h header file: nonzero exit code returned to caller error_code = "$error_code"])
   fi
])
m4trace:config/generate-backend-compiler-specific-headers.m4:294: -1- AC_DEFUN([SETUP_BACKEND_C_COMPILER_SPECIFIC_REFERENCES], [
 # Now setup the include path that we will prepend to any user -I<dir> options so that the 
 # required compiler-specific header files can be found (these are often relocated versions 
 # of the compiler specific header files that have been processed so that EDG can read them)
 # It is unfortunate, but many compiler-specific files include compiler-specific code which
 # will not compile with a standard C++ compiler or can not be processed using a standard
 # C preprocessor (cpp) (an ugly fact of common compilers).

   chmod u+x ${srcdir}/$ROSE_HOME/config/dirincludes

 #Mac OS X (and possibly other BSD-distros) does not support the echo -n option.
 #We need to detect this special case and use a "\c" in the end of the echo to not print a
 #newline.
   er=`echo -n ""`
   if test "X$er" = "X-n "
   then
     EC="\c"
     EO=""
   else
     EC=""
     EO="-n"
   fi

   compilerNameC="`basename $BACKEND_C_COMPILER`"

 # DQ (11/1/2011): We need this same mechanism for C++'s use of EDG 4.x as we did for EDG 3.3 (but for C code this was not required; and was simpler).
 # Include the directory with the subdirectories of header files
 # if test "x$enable_new_edg_interface" = "xyes"; then
 #   includeString="{`${srcdir}/config/get_compiler_header_dirs ${BACKEND_C_COMPILER} | while read dir; do echo -n \\\"$dir\\\",\ ; done` \"/usr/include\"}"
 # else
 #   includeString="{\"${compilerNameC}_HEADERS\"`${srcdir}/$ROSE_HOME/config/dirincludes "./include-staging/" "${compilerNameC}_HEADERS"`, `${srcdir}/config/get_compiler_header_dirs ${BACKEND_C_COMPILER} | while read dir; do echo $EO \\\"$dir\\\",$EC\ ; done` \"/usr/include\"}"
 # fi
 #  includeString="{\"${compilerNameC}_HEADERS\"`${srcdir}/$ROSE_HOME/config/dirincludes "./include-staging/" "${compilerNameC}_HEADERS"`, `${srcdir}/config/get_compiler_header_dirs ${BACKEND_C_COMPILER} | while read dir; do echo $EO \\\"$dir\\\",$EC\ ; done` \"/usr/include\"}"

   compilerVendorName="$BACKEND_CXX_COMPILER_VENDOR"
   language="c"

 # if ! compilerHeaderDirs="$(${srcdir}/config/get_compiler_header_dirs ${BACKEND_C_COMPILER} | while read dir; do echo $EO \"$dir\",$EC\ ; done; exit ${PIPESTATUS[0]})"; then
 # [Matzke 2016-05-18]: Square brackets are quote characters in M4, so use "@<:@" and "@:>@" quadrigraphs instead. Ugly!
   if ! compilerHeaderDirs="$(env VERBOSE="$verbose" ${srcdir}/config/get_compiler_header_dirs ${BACKEND_C_COMPILER} ${language} ${compilerVendorName} | while read dir; do echo $EO \"$dir\",$EC\ ; done; exit ${PIPESTATUS@<:@0@:>@})"; then
      AC_MSG_FAILURE([$compilerHeaderDirs])
   fi

 # DQ (2/2/2016): Added error checking (though this already appears to be present).
 # [Matzke 2016-05-18]: Square brackets are quote characters in M4, so use "@<:@" and "@:>@" quadrigraphs instead. Ugly!
   if test "${PIPESTATUS@<:@0@:>@}" -ne 0; then
       AC_MSG_FAILURE([in SETUP BACKEND C COMPILER SPECIFIC REFERENCES: get_compiler_header_dirs failed])
   fi

 # temp_includeString="{\"${compilerNameC}_HEADERS\"`${srcdir}/$ROSE_HOME/config/dirincludes "./include-staging/" "${compilerNameC}_HEADERS"`, $compilerHeaderDirs"
 # echo "temp_includeString = $temp_includeString"
 # echo "\n\n"

   includeString="{\"${compilerNameC}_HEADERS\"`${srcdir}/$ROSE_HOME/config/dirincludes "./include-staging/" "${compilerNameC}_HEADERS"`, $compilerHeaderDirs"
   if test "x$build_vendor" = "xapple"; then
     xcodeSDKPath=`xcrun --show-sdk-path`
     includeString="$includeString \"$xcodeSDKPath/usr/include\"}"
   else
     includeString="$includeString \"/usr/include\"}"
   fi

   AC_MSG_NOTICE([includeString = "$includeString"])
   AC_DEFINE_UNQUOTED([C_INCLUDE_STRING],$includeString,[Include path for backend C compiler.])

# DQ (2/21/2017): Need to add required header file to support Intel compiler because we are using 
# the __INTEL_CLANG_COMPILER macro to use EDG with the Intel header files.
   if test "x$BACKEND_CXX_COMPILER_VENDOR" = "xintel"; then
#     echo "SETUP BACKEND C COMPILER: Copying config/rose_specific_tgmath_clang.h to ${compilerNameC}_HEADERS/tgmath_clang.h"
      cp ${srcdir}/config/rose_specific_tgmath_clang.h ./include-staging/${compilerNameC}_HEADERS/tgmath_clang.h
#     echo "DONE: SETUP BACKEND C COMPILER: Copying config/rose_specific_tgmath_clang.h to ${compilerNameC}_HEADERS/tgmath_clang.h"
   fi

# echo "Exiting as a test in SETUP BACKEND C COMPILER SPECIFIC REFERENCES: BACKEND_CXX_COMPILER_VENDOR = $BACKEND_CXX_COMPILER_VENDOR"
# exit 1
])
m4trace:config/libtool.m4:61: -1- AC_DEFUN([LT_INIT], [AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK
AC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl
AC_BEFORE([$0], [LT_LANG])dnl
AC_BEFORE([$0], [LT_OUTPUT])dnl
AC_BEFORE([$0], [LTDL_INIT])dnl
m4_require([_LT_CHECK_BUILDDIR])dnl

dnl Autoconf doesn't catch unexpanded LT_ macros by default:
m4_pattern_forbid([^_?LT_[A-Z_]+$])dnl
m4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl
dnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4
dnl unless we require an AC_DEFUNed macro:
AC_REQUIRE([LTOPTIONS_VERSION])dnl
AC_REQUIRE([LTSUGAR_VERSION])dnl
AC_REQUIRE([LTVERSION_VERSION])dnl
AC_REQUIRE([LTOBSOLETE_VERSION])dnl
m4_require([_LT_PROG_LTMAIN])dnl

_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])

dnl Parse OPTIONS
_LT_SET_OPTIONS([$0], [$1])

# This can be used to rebuild libtool when needed
LIBTOOL_DEPS=$ltmain

# Always use our own libtool.
LIBTOOL='$(SHELL) $(top_builddir)/libtool'
AC_SUBST(LIBTOOL)dnl

_LT_SETUP

# Only expand once:
m4_define([LT_INIT])
])
m4trace:config/libtool.m4:99: -1- AU_DEFUN([AC_PROG_LIBTOOL], [m4_if($#, 0, [LT_INIT], [LT_INIT($@)])])
m4trace:config/libtool.m4:99: -1- AC_DEFUN([AC_PROG_LIBTOOL], [AC_DIAGNOSE([obsolete], [The macro `AC_PROG_LIBTOOL' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_INIT], [LT_INIT($@)])])
m4trace:config/libtool.m4:100: -1- AU_DEFUN([AM_PROG_LIBTOOL], [m4_if($#, 0, [LT_INIT], [LT_INIT($@)])])
m4trace:config/libtool.m4:100: -1- AC_DEFUN([AM_PROG_LIBTOOL], [AC_DIAGNOSE([obsolete], [The macro `AM_PROG_LIBTOOL' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_INIT], [LT_INIT($@)])])
m4trace:config/libtool.m4:619: -1- AC_DEFUN([LT_OUTPUT], [: ${CONFIG_LT=./config.lt}
AC_MSG_NOTICE([creating $CONFIG_LT])
_LT_GENERATED_FILE_INIT(["$CONFIG_LT"],
[# Run this file to recreate a libtool stub with the current configuration.])

cat >>"$CONFIG_LT" <<\_LTEOF
lt_cl_silent=false
exec AS_MESSAGE_LOG_FD>>config.log
{
  echo
  AS_BOX([Running $as_me.])
} >&AS_MESSAGE_LOG_FD

lt_cl_help="\
'$as_me' creates a local libtool stub from the current configuration,
for use in further configure time tests before the real libtool is
generated.

Usage: $[0] [[OPTIONS]]

  -h, --help      print this help, then exit
  -V, --version   print version number, then exit
  -q, --quiet     do not print progress messages
  -d, --debug     don't remove temporary files

Report bugs to <bug-libtool@gnu.org>."

lt_cl_version="\
m4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl
m4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])
configured by $[0], generated by m4_PACKAGE_STRING.

Copyright (C) 2011 Free Software Foundation, Inc.
This config.lt script is free software; the Free Software Foundation
gives unlimited permision to copy, distribute and modify it."

while test 0 != $[#]
do
  case $[1] in
    --version | --v* | -V )
      echo "$lt_cl_version"; exit 0 ;;
    --help | --h* | -h )
      echo "$lt_cl_help"; exit 0 ;;
    --debug | --d* | -d )
      debug=: ;;
    --quiet | --q* | --silent | --s* | -q )
      lt_cl_silent=: ;;

    -*) AC_MSG_ERROR([unrecognized option: $[1]
Try '$[0] --help' for more information.]) ;;

    *) AC_MSG_ERROR([unrecognized argument: $[1]
Try '$[0] --help' for more information.]) ;;
  esac
  shift
done

if $lt_cl_silent; then
  exec AS_MESSAGE_FD>/dev/null
fi
_LTEOF

cat >>"$CONFIG_LT" <<_LTEOF
_LT_OUTPUT_LIBTOOL_COMMANDS_INIT
_LTEOF

cat >>"$CONFIG_LT" <<\_LTEOF
AC_MSG_NOTICE([creating $ofile])
_LT_OUTPUT_LIBTOOL_COMMANDS
AS_EXIT(0)
_LTEOF
chmod +x "$CONFIG_LT"

# configure is writing to config.log, but config.lt does its own redirection,
# appending to config.log, which fails on DOS, as config.log is still kept
# open by configure.  Here we exec the FD to /dev/null, effectively closing
# config.log, so it can be properly (re)opened and appended to by config.lt.
lt_cl_success=:
test yes = "$silent" &&
  lt_config_lt_args="$lt_config_lt_args --quiet"
exec AS_MESSAGE_LOG_FD>/dev/null
$SHELL "$CONFIG_LT" $lt_config_lt_args || lt_cl_success=false
exec AS_MESSAGE_LOG_FD>>config.log
$lt_cl_success || AS_EXIT(1)
])
m4trace:config/libtool.m4:811: -1- AC_DEFUN([LT_SUPPORTED_TAG], [])
m4trace:config/libtool.m4:822: -1- AC_DEFUN([LT_LANG], [AC_BEFORE([$0], [LT_OUTPUT])dnl
m4_case([$1],
  [C],			[_LT_LANG(C)],
  [C++],		[_LT_LANG(CXX)],
  [Go],			[_LT_LANG(GO)],
  [Java],		[_LT_LANG(GCJ)],
  [Fortran 77],		[_LT_LANG(F77)],
  [Fortran],		[_LT_LANG(FC)],
  [Windows Resource],	[_LT_LANG(RC)],
  [m4_ifdef([_LT_LANG_]$1[_CONFIG],
    [_LT_LANG($1)],
    [m4_fatal([$0: unsupported language: "$1"])])])dnl
])
m4trace:config/libtool.m4:914: -1- AU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])
m4trace:config/libtool.m4:914: -1- AC_DEFUN([AC_LIBTOOL_CXX], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_CXX' is obsolete.
You should run autoupdate.])dnl
LT_LANG(C++)])
m4trace:config/libtool.m4:915: -1- AU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])
m4trace:config/libtool.m4:915: -1- AC_DEFUN([AC_LIBTOOL_F77], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_F77' is obsolete.
You should run autoupdate.])dnl
LT_LANG(Fortran 77)])
m4trace:config/libtool.m4:916: -1- AU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])
m4trace:config/libtool.m4:916: -1- AC_DEFUN([AC_LIBTOOL_FC], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_FC' is obsolete.
You should run autoupdate.])dnl
LT_LANG(Fortran)])
m4trace:config/libtool.m4:917: -1- AU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])
m4trace:config/libtool.m4:917: -1- AC_DEFUN([AC_LIBTOOL_GCJ], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_GCJ' is obsolete.
You should run autoupdate.])dnl
LT_LANG(Java)])
m4trace:config/libtool.m4:918: -1- AU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])
m4trace:config/libtool.m4:918: -1- AC_DEFUN([AC_LIBTOOL_RC], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_RC' is obsolete.
You should run autoupdate.])dnl
LT_LANG(Windows Resource)])
m4trace:config/libtool.m4:1246: -1- AC_DEFUN([_LT_WITH_SYSROOT], [AC_MSG_CHECKING([for sysroot])
AC_ARG_WITH([sysroot],
[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],
  [Search for dependent libraries within DIR (or the compiler's sysroot
   if not specified).])],
[], [with_sysroot=no])

dnl lt_sysroot will always be passed unquoted.  We quote it here
dnl in case the user passed a directory name.
lt_sysroot=
case $with_sysroot in #(
 yes)
   if test yes = "$GCC"; then
     lt_sysroot=`$CC --print-sysroot 2>/dev/null`
   fi
   ;; #(
 /*)
   lt_sysroot=`echo "$with_sysroot" | sed -e "$sed_quote_subst"`
   ;; #(
 no|'')
   ;; #(
 *)
   AC_MSG_RESULT([$with_sysroot])
   AC_MSG_ERROR([The sysroot must be an absolute path.])
   ;;
esac

 AC_MSG_RESULT([${lt_sysroot:-no}])
_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl
[dependent libraries, and where our libraries should be installed.])])
m4trace:config/libtool.m4:1577: -1- AC_DEFUN([_LT_COMPILER_OPTION], [m4_require([_LT_FILEUTILS_DEFAULTS])dnl
m4_require([_LT_DECL_SED])dnl
AC_CACHE_CHECK([$1], [$2],
  [$2=no
   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])
   echo "$lt_simple_compile_test_code" > conftest.$ac_ext
   lt_compiler_flag="$3"  ## exclude from sc_useless_quotes_in_assignment
   # Insert the option either (1) after the last *FLAGS variable, or
   # (2) before a word containing "conftest.", or (3) at the end.
   # Note that $ac_compile itself does not contain backslashes and begins
   # with a dollar sign (not a hyphen), so the echo should work correctly.
   # The option is referenced via a variable to avoid confusing sed.
   lt_compile=`echo "$ac_compile" | $SED \
   -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
   -e 's: [[^ ]]*conftest\.: $lt_compiler_flag&:; t' \
   -e 's:$: $lt_compiler_flag:'`
   (eval echo "\"\$as_me:$LINENO: $lt_compile\"" >&AS_MESSAGE_LOG_FD)
   (eval "$lt_compile" 2>conftest.err)
   ac_status=$?
   cat conftest.err >&AS_MESSAGE_LOG_FD
   echo "$as_me:$LINENO: \$? = $ac_status" >&AS_MESSAGE_LOG_FD
   if (exit $ac_status) && test -s "$ac_outfile"; then
     # The compiler can only warn and ignore the option if not recognized
     # So say no if there are warnings other than the usual output.
     $ECHO "$_lt_compiler_boilerplate" | $SED '/^$/d' >conftest.exp
     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2
     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then
       $2=yes
     fi
   fi
   $RM conftest*
])

if test yes = "[$]$2"; then
    m4_if([$5], , :, [$5])
else
    m4_if([$6], , :, [$6])
fi
])
m4trace:config/libtool.m4:1619: -1- AU_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [m4_if($#, 0, [_LT_COMPILER_OPTION], [_LT_COMPILER_OPTION($@)])])
m4trace:config/libtool.m4:1619: -1- AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_COMPILER_OPTION' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [_LT_COMPILER_OPTION], [_LT_COMPILER_OPTION($@)])])
m4trace:config/libtool.m4:1628: -1- AC_DEFUN([_LT_LINKER_OPTION], [m4_require([_LT_FILEUTILS_DEFAULTS])dnl
m4_require([_LT_DECL_SED])dnl
AC_CACHE_CHECK([$1], [$2],
  [$2=no
   save_LDFLAGS=$LDFLAGS
   LDFLAGS="$LDFLAGS $3"
   echo "$lt_simple_link_test_code" > conftest.$ac_ext
   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then
     # The linker can only warn and ignore the option if not recognized
     # So say no if there are warnings
     if test -s conftest.err; then
       # Append any errors to the config.log.
       cat conftest.err 1>&AS_MESSAGE_LOG_FD
       $ECHO "$_lt_linker_boilerplate" | $SED '/^$/d' > conftest.exp
       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2
       if diff conftest.exp conftest.er2 >/dev/null; then
         $2=yes
       fi
     else
       $2=yes
     fi
   fi
   $RM -r conftest*
   LDFLAGS=$save_LDFLAGS
])

if test yes = "[$]$2"; then
    m4_if([$4], , :, [$4])
else
    m4_if([$5], , :, [$5])
fi
])
m4trace:config/libtool.m4:1663: -1- AU_DEFUN([AC_LIBTOOL_LINKER_OPTION], [m4_if($#, 0, [_LT_LINKER_OPTION], [_LT_LINKER_OPTION($@)])])
m4trace:config/libtool.m4:1663: -1- AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_LINKER_OPTION' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [_LT_LINKER_OPTION], [_LT_LINKER_OPTION($@)])])
m4trace:config/libtool.m4:1670: -1- AC_DEFUN([LT_CMD_MAX_LEN], [AC_REQUIRE([AC_CANONICAL_HOST])dnl
# find the maximum length of command line arguments
AC_MSG_CHECKING([the maximum length of command line arguments])
AC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl
  i=0
  teststring=ABCD

  case $build_os in
  msdosdjgpp*)
    # On DJGPP, this test can blow up pretty badly due to problems in libc
    # (any single argument exceeding 2000 bytes causes a buffer overrun
    # during glob expansion).  Even if it were fixed, the result of this
    # check would be larger than it should be.
    lt_cv_sys_max_cmd_len=12288;    # 12K is about right
    ;;

  gnu*)
    # Under GNU Hurd, this test is not required because there is
    # no limit to the length of command line arguments.
    # Libtool will interpret -1 as no limit whatsoever
    lt_cv_sys_max_cmd_len=-1;
    ;;

  cygwin* | mingw* | cegcc*)
    # On Win9x/ME, this test blows up -- it succeeds, but takes
    # about 5 minutes as the teststring grows exponentially.
    # Worse, since 9x/ME are not pre-emptively multitasking,
    # you end up with a "frozen" computer, even though with patience
    # the test eventually succeeds (with a max line length of 256k).
    # Instead, let's just punt: use the minimum linelength reported by
    # all of the supported platforms: 8192 (on NT/2K/XP).
    lt_cv_sys_max_cmd_len=8192;
    ;;

  mint*)
    # On MiNT this can take a long time and run out of memory.
    lt_cv_sys_max_cmd_len=8192;
    ;;

  amigaos*)
    # On AmigaOS with pdksh, this test takes hours, literally.
    # So we just punt and use a minimum line length of 8192.
    lt_cv_sys_max_cmd_len=8192;
    ;;

  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)
    # This has been around since 386BSD, at least.  Likely further.
    if test -x /sbin/sysctl; then
      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`
    elif test -x /usr/sbin/sysctl; then
      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`
    else
      lt_cv_sys_max_cmd_len=65536	# usable default for all BSDs
    fi
    # And add a safety zone
    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \/ 4`
    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \* 3`
    ;;

  interix*)
    # We know the value 262144 and hardcode it with a safety zone (like BSD)
    lt_cv_sys_max_cmd_len=196608
    ;;

  os2*)
    # The test takes a long time on OS/2.
    lt_cv_sys_max_cmd_len=8192
    ;;

  osf*)
    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure
    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not
    # nice to cause kernel panics so lets avoid the loop below.
    # First set a reasonable default.
    lt_cv_sys_max_cmd_len=16384
    #
    if test -x /sbin/sysconfig; then
      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in
        *1*) lt_cv_sys_max_cmd_len=-1 ;;
      esac
    fi
    ;;
  sco3.2v5*)
    lt_cv_sys_max_cmd_len=102400
    ;;
  sysv5* | sco5v6* | sysv4.2uw2*)
    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`
    if test -n "$kargmax"; then
      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[	 ]]//'`
    else
      lt_cv_sys_max_cmd_len=32768
    fi
    ;;
  *)
    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`
    if test -n "$lt_cv_sys_max_cmd_len" && \
       test undefined != "$lt_cv_sys_max_cmd_len"; then
      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \/ 4`
      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \* 3`
    else
      # Make teststring a little bigger before we do anything with it.
      # a 1K string should be a reasonable start.
      for i in 1 2 3 4 5 6 7 8; do
        teststring=$teststring$teststring
      done
      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}
      # If test is not a shell built-in, we'll probably end up computing a
      # maximum length that is only half of the actual maximum length, but
      # we can't tell.
      while { test X`env echo "$teststring$teststring" 2>/dev/null` \
	         = "X$teststring$teststring"; } >/dev/null 2>&1 &&
	      test 17 != "$i" # 1/2 MB should be enough
      do
        i=`expr $i + 1`
        teststring=$teststring$teststring
      done
      # Only check the string length outside the loop.
      lt_cv_sys_max_cmd_len=`expr "X$teststring" : ".*" 2>&1`
      teststring=
      # Add a significant safety factor because C++ compilers can tack on
      # massive amounts of additional arguments before passing them to the
      # linker.  It appears as though 1/2 is a usable value.
      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \/ 2`
    fi
    ;;
  esac
])
if test -n "$lt_cv_sys_max_cmd_len"; then
  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)
else
  AC_MSG_RESULT(none)
fi
max_cmd_len=$lt_cv_sys_max_cmd_len
_LT_DECL([], [max_cmd_len], [0],
    [What is the maximum length of a command?])
])
m4trace:config/libtool.m4:1809: -1- AU_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [m4_if($#, 0, [LT_CMD_MAX_LEN], [LT_CMD_MAX_LEN($@)])])
m4trace:config/libtool.m4:1809: -1- AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_SYS_MAX_CMD_LEN' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_CMD_MAX_LEN], [LT_CMD_MAX_LEN($@)])])
m4trace:config/libtool.m4:1920: -1- AC_DEFUN([LT_SYS_DLOPEN_SELF], [m4_require([_LT_HEADER_DLFCN])dnl
if test yes != "$enable_dlopen"; then
  enable_dlopen=unknown
  enable_dlopen_self=unknown
  enable_dlopen_self_static=unknown
else
  lt_cv_dlopen=no
  lt_cv_dlopen_libs=

  case $host_os in
  beos*)
    lt_cv_dlopen=load_add_on
    lt_cv_dlopen_libs=
    lt_cv_dlopen_self=yes
    ;;

  mingw* | pw32* | cegcc*)
    lt_cv_dlopen=LoadLibrary
    lt_cv_dlopen_libs=
    ;;

  cygwin*)
    lt_cv_dlopen=dlopen
    lt_cv_dlopen_libs=
    ;;

  darwin*)
    # if libdl is installed we need to link against it
    AC_CHECK_LIB([dl], [dlopen],
		[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[
    lt_cv_dlopen=dyld
    lt_cv_dlopen_libs=
    lt_cv_dlopen_self=yes
    ])
    ;;

  tpf*)
    # Don't try to run any link tests for TPF.  We know it's impossible
    # because TPF is a cross-compiler, and we know how we open DSOs.
    lt_cv_dlopen=dlopen
    lt_cv_dlopen_libs=
    lt_cv_dlopen_self=no
    ;;

  *)
    AC_CHECK_FUNC([shl_load],
	  [lt_cv_dlopen=shl_load],
      [AC_CHECK_LIB([dld], [shl_load],
	    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],
	[AC_CHECK_FUNC([dlopen],
	      [lt_cv_dlopen=dlopen],
	  [AC_CHECK_LIB([dl], [dlopen],
		[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],
	    [AC_CHECK_LIB([svld], [dlopen],
		  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],
	      [AC_CHECK_LIB([dld], [dld_link],
		    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])
	      ])
	    ])
	  ])
	])
      ])
    ;;
  esac

  if test no = "$lt_cv_dlopen"; then
    enable_dlopen=no
  else
    enable_dlopen=yes
  fi

  case $lt_cv_dlopen in
  dlopen)
    save_CPPFLAGS=$CPPFLAGS
    test yes = "$ac_cv_header_dlfcn_h" && CPPFLAGS="$CPPFLAGS -DHAVE_DLFCN_H"

    save_LDFLAGS=$LDFLAGS
    wl=$lt_prog_compiler_wl eval LDFLAGS=\"\$LDFLAGS $export_dynamic_flag_spec\"

    save_LIBS=$LIBS
    LIBS="$lt_cv_dlopen_libs $LIBS"

    AC_CACHE_CHECK([whether a program can dlopen itself],
	  lt_cv_dlopen_self, [dnl
	  _LT_TRY_DLOPEN_SELF(
	    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,
	    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)
    ])

    if test yes = "$lt_cv_dlopen_self"; then
      wl=$lt_prog_compiler_wl eval LDFLAGS=\"\$LDFLAGS $lt_prog_compiler_static\"
      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],
	  lt_cv_dlopen_self_static, [dnl
	  _LT_TRY_DLOPEN_SELF(
	    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,
	    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)
      ])
    fi

    CPPFLAGS=$save_CPPFLAGS
    LDFLAGS=$save_LDFLAGS
    LIBS=$save_LIBS
    ;;
  esac

  case $lt_cv_dlopen_self in
  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;
  *) enable_dlopen_self=unknown ;;
  esac

  case $lt_cv_dlopen_self_static in
  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;
  *) enable_dlopen_self_static=unknown ;;
  esac
fi
_LT_DECL([dlopen_support], [enable_dlopen], [0],
	 [Whether dlopen is supported])
_LT_DECL([dlopen_self], [enable_dlopen_self], [0],
	 [Whether dlopen of programs is supported])
_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],
	 [Whether dlopen of statically linked programs is supported])
])
m4trace:config/libtool.m4:2045: -1- AU_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [m4_if($#, 0, [LT_SYS_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF($@)])])
m4trace:config/libtool.m4:2045: -1- AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_DLOPEN_SELF' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF($@)])])
m4trace:config/libtool.m4:3166: -1- AC_DEFUN([_LT_PATH_TOOL_PREFIX], [m4_require([_LT_DECL_EGREP])dnl
AC_MSG_CHECKING([for $1])
AC_CACHE_VAL(lt_cv_path_MAGIC_CMD,
[case $MAGIC_CMD in
[[\\/*] |  ?:[\\/]*])
  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.
  ;;
*)
  lt_save_MAGIC_CMD=$MAGIC_CMD
  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR
dnl $ac_dummy forces splitting on constant user-supplied paths.
dnl POSIX.2 word splitting is done only on the output of word expansions,
dnl not every word.  This closes a longstanding sh security hole.
  ac_dummy="m4_if([$2], , $PATH, [$2])"
  for ac_dir in $ac_dummy; do
    IFS=$lt_save_ifs
    test -z "$ac_dir" && ac_dir=.
    if test -f "$ac_dir/$1"; then
      lt_cv_path_MAGIC_CMD=$ac_dir/"$1"
      if test -n "$file_magic_test_file"; then
	case $deplibs_check_method in
	"file_magic "*)
	  file_magic_regex=`expr "$deplibs_check_method" : "file_magic \(.*\)"`
	  MAGIC_CMD=$lt_cv_path_MAGIC_CMD
	  if eval $file_magic_cmd \$file_magic_test_file 2> /dev/null |
	    $EGREP "$file_magic_regex" > /dev/null; then
	    :
	  else
	    cat <<_LT_EOF 1>&2

*** Warning: the command libtool uses to detect shared libraries,
*** $file_magic_cmd, produces output that libtool cannot recognize.
*** The result is that libtool may fail to recognize shared libraries
*** as such.  This will affect the creation of libtool libraries that
*** depend on shared libraries, but programs linked with such libtool
*** libraries will work regardless of this problem.  Nevertheless, you
*** may want to report the problem to your system manager and/or to
*** bug-libtool@gnu.org

_LT_EOF
	  fi ;;
	esac
      fi
      break
    fi
  done
  IFS=$lt_save_ifs
  MAGIC_CMD=$lt_save_MAGIC_CMD
  ;;
esac])
MAGIC_CMD=$lt_cv_path_MAGIC_CMD
if test -n "$MAGIC_CMD"; then
  AC_MSG_RESULT($MAGIC_CMD)
else
  AC_MSG_RESULT(no)
fi
_LT_DECL([], [MAGIC_CMD], [0],
	 [Used to examine libraries when file_magic_cmd begins with "file"])dnl
])
m4trace:config/libtool.m4:3228: -1- AU_DEFUN([AC_PATH_TOOL_PREFIX], [m4_if($#, 0, [_LT_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX($@)])])
m4trace:config/libtool.m4:3228: -1- AC_DEFUN([AC_PATH_TOOL_PREFIX], [AC_DIAGNOSE([obsolete], [The macro `AC_PATH_TOOL_PREFIX' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [_LT_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX($@)])])
m4trace:config/libtool.m4:3251: -1- AC_DEFUN([LT_PATH_LD], [AC_REQUIRE([AC_PROG_CC])dnl
AC_REQUIRE([AC_CANONICAL_HOST])dnl
AC_REQUIRE([AC_CANONICAL_BUILD])dnl
m4_require([_LT_DECL_SED])dnl
m4_require([_LT_DECL_EGREP])dnl
m4_require([_LT_PROG_ECHO_BACKSLASH])dnl

AC_ARG_WITH([gnu-ld],
    [AS_HELP_STRING([--with-gnu-ld],
	[assume the C compiler uses GNU ld @<:@default=no@:>@])],
    [test no = "$withval" || with_gnu_ld=yes],
    [with_gnu_ld=no])dnl

ac_prog=ld
if test yes = "$GCC"; then
  # Check if gcc -print-prog-name=ld gives a path.
  AC_MSG_CHECKING([for ld used by $CC])
  case $host in
  *-*-mingw*)
    # gcc leaves a trailing carriage return, which upsets mingw
    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\015'` ;;
  *)
    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;
  esac
  case $ac_prog in
    # Accept absolute paths.
    [[\\/]]* | ?:[[\\/]]*)
      re_direlt='/[[^/]][[^/]]*/\.\./'
      # Canonicalize the pathname of ld
      ac_prog=`$ECHO "$ac_prog"| $SED 's%\\\\%/%g'`
      while $ECHO "$ac_prog" | $GREP "$re_direlt" > /dev/null 2>&1; do
	ac_prog=`$ECHO $ac_prog| $SED "s%$re_direlt%/%"`
      done
      test -z "$LD" && LD=$ac_prog
      ;;
  "")
    # If it fails, then pretend we aren't using GCC.
    ac_prog=ld
    ;;
  *)
    # If it is relative, then search for the first ld in PATH.
    with_gnu_ld=unknown
    ;;
  esac
elif test yes = "$with_gnu_ld"; then
  AC_MSG_CHECKING([for GNU ld])
else
  AC_MSG_CHECKING([for non-GNU ld])
fi
AC_CACHE_VAL(lt_cv_path_LD,
[if test -z "$LD"; then
  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR
  for ac_dir in $PATH; do
    IFS=$lt_save_ifs
    test -z "$ac_dir" && ac_dir=.
    if test -f "$ac_dir/$ac_prog" || test -f "$ac_dir/$ac_prog$ac_exeext"; then
      lt_cv_path_LD=$ac_dir/$ac_prog
      # Check to see if the program is GNU ld.  I'd rather use --version,
      # but apparently some variants of GNU ld only accept -v.
      # Break only if it was the GNU/non-GNU ld that we prefer.
      case `"$lt_cv_path_LD" -v 2>&1 </dev/null` in
      *GNU* | *'with BFD'*)
	test no != "$with_gnu_ld" && break
	;;
      *)
	test yes != "$with_gnu_ld" && break
	;;
      esac
    fi
  done
  IFS=$lt_save_ifs
else
  lt_cv_path_LD=$LD # Let the user override the test with a path.
fi])
LD=$lt_cv_path_LD
if test -n "$LD"; then
  AC_MSG_RESULT($LD)
else
  AC_MSG_RESULT(no)
fi
test -z "$LD" && AC_MSG_ERROR([no acceptable ld found in \$PATH])
_LT_PATH_LD_GNU
AC_SUBST([LD])

_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])
])
m4trace:config/libtool.m4:3340: -1- AU_DEFUN([AM_PROG_LD], [m4_if($#, 0, [LT_PATH_LD], [LT_PATH_LD($@)])])
m4trace:config/libtool.m4:3340: -1- AC_DEFUN([AM_PROG_LD], [AC_DIAGNOSE([obsolete], [The macro `AM_PROG_LD' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PATH_LD], [LT_PATH_LD($@)])])
m4trace:config/libtool.m4:3341: -1- AU_DEFUN([AC_PROG_LD], [m4_if($#, 0, [LT_PATH_LD], [LT_PATH_LD($@)])])
m4trace:config/libtool.m4:3341: -1- AC_DEFUN([AC_PROG_LD], [AC_DIAGNOSE([obsolete], [The macro `AC_PROG_LD' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PATH_LD], [LT_PATH_LD($@)])])
m4trace:config/libtool.m4:3670: -1- AC_DEFUN([LT_PATH_NM], [AC_REQUIRE([AC_PROG_CC])dnl
AC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,
[if test -n "$NM"; then
  # Let the user override the test.
  lt_cv_path_NM=$NM
else
  lt_nm_to_check=${ac_tool_prefix}nm
  if test -n "$ac_tool_prefix" && test "$build" = "$host"; then
    lt_nm_to_check="$lt_nm_to_check nm"
  fi
  for lt_tmp_nm in $lt_nm_to_check; do
    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR
    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do
      IFS=$lt_save_ifs
      test -z "$ac_dir" && ac_dir=.
      tmp_nm=$ac_dir/$lt_tmp_nm
      if test -f "$tmp_nm" || test -f "$tmp_nm$ac_exeext"; then
	# Check to see if the nm accepts a BSD-compat flag.
	# Adding the 'sed 1q' prevents false positives on HP-UX, which says:
	#   nm: unknown option "B" ignored
	# Tru64's nm complains that /dev/null is an invalid object file
	# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty
	case $build_os in
	mingw*) lt_bad_file=conftest.nm/nofile ;;
	*) lt_bad_file=/dev/null ;;
	esac
	case `"$tmp_nm" -B $lt_bad_file 2>&1 | sed '1q'` in
	*$lt_bad_file* | *'Invalid file or object type'*)
	  lt_cv_path_NM="$tmp_nm -B"
	  break 2
	  ;;
	*)
	  case `"$tmp_nm" -p /dev/null 2>&1 | sed '1q'` in
	  */dev/null*)
	    lt_cv_path_NM="$tmp_nm -p"
	    break 2
	    ;;
	  *)
	    lt_cv_path_NM=${lt_cv_path_NM="$tmp_nm"} # keep the first match, but
	    continue # so that we can try to find one that supports BSD flags
	    ;;
	  esac
	  ;;
	esac
      fi
    done
    IFS=$lt_save_ifs
  done
  : ${lt_cv_path_NM=no}
fi])
if test no != "$lt_cv_path_NM"; then
  NM=$lt_cv_path_NM
else
  # Didn't find any BSD compatible name lister, look for dumpbin.
  if test -n "$DUMPBIN"; then :
    # Let the user override the test.
  else
    AC_CHECK_TOOLS(DUMPBIN, [dumpbin "link -dump"], :)
    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in
    *COFF*)
      DUMPBIN="$DUMPBIN -symbols -headers"
      ;;
    *)
      DUMPBIN=:
      ;;
    esac
  fi
  AC_SUBST([DUMPBIN])
  if test : != "$DUMPBIN"; then
    NM=$DUMPBIN
  fi
fi
test -z "$NM" && NM=nm
AC_SUBST([NM])
_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl

AC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],
  [lt_cv_nm_interface="BSD nm"
  echo "int some_variable = 0;" > conftest.$ac_ext
  (eval echo "\"\$as_me:$LINENO: $ac_compile\"" >&AS_MESSAGE_LOG_FD)
  (eval "$ac_compile" 2>conftest.err)
  cat conftest.err >&AS_MESSAGE_LOG_FD
  (eval echo "\"\$as_me:$LINENO: $NM \\\"conftest.$ac_objext\\\"\"" >&AS_MESSAGE_LOG_FD)
  (eval "$NM \"conftest.$ac_objext\"" 2>conftest.err > conftest.out)
  cat conftest.err >&AS_MESSAGE_LOG_FD
  (eval echo "\"\$as_me:$LINENO: output\"" >&AS_MESSAGE_LOG_FD)
  cat conftest.out >&AS_MESSAGE_LOG_FD
  if $GREP 'External.*some_variable' conftest.out > /dev/null; then
    lt_cv_nm_interface="MS dumpbin"
  fi
  rm -f conftest*])
])
m4trace:config/libtool.m4:3765: -1- AU_DEFUN([AM_PROG_NM], [m4_if($#, 0, [LT_PATH_NM], [LT_PATH_NM($@)])])
m4trace:config/libtool.m4:3765: -1- AC_DEFUN([AM_PROG_NM], [AC_DIAGNOSE([obsolete], [The macro `AM_PROG_NM' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PATH_NM], [LT_PATH_NM($@)])])
m4trace:config/libtool.m4:3766: -1- AU_DEFUN([AC_PROG_NM], [m4_if($#, 0, [LT_PATH_NM], [LT_PATH_NM($@)])])
m4trace:config/libtool.m4:3766: -1- AC_DEFUN([AC_PROG_NM], [AC_DIAGNOSE([obsolete], [The macro `AC_PROG_NM' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PATH_NM], [LT_PATH_NM($@)])])
m4trace:config/libtool.m4:3837: -1- AC_DEFUN([_LT_DLL_DEF_P], [dnl
  test DEF = "`$SED -n dnl
    -e '\''s/^[[	 ]]*//'\'' dnl Strip leading whitespace
    -e '\''/^\(;.*\)*$/d'\'' dnl      Delete empty lines and comments
    -e '\''s/^\(EXPORTS\|LIBRARY\)\([[	 ]].*\)*$/DEF/p'\'' dnl
    -e q dnl                          Only consider the first "real" line
    $1`" dnl
])
m4trace:config/libtool.m4:3851: -1- AC_DEFUN([LT_LIB_M], [AC_REQUIRE([AC_CANONICAL_HOST])dnl
LIBM=
case $host in
*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)
  # These system don't have libm, or don't need it
  ;;
*-ncr-sysv4.3*)
  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)
  AC_CHECK_LIB(m, cos, LIBM="$LIBM -lm")
  ;;
*)
  AC_CHECK_LIB(m, cos, LIBM=-lm)
  ;;
esac
AC_SUBST([LIBM])
])
m4trace:config/libtool.m4:3870: -1- AU_DEFUN([AC_CHECK_LIBM], [m4_if($#, 0, [LT_LIB_M], [LT_LIB_M($@)])])
m4trace:config/libtool.m4:3870: -1- AC_DEFUN([AC_CHECK_LIBM], [AC_DIAGNOSE([obsolete], [The macro `AC_CHECK_LIBM' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_LIB_M], [LT_LIB_M($@)])])
m4trace:config/libtool.m4:8147: -1- AC_DEFUN([LT_PROG_GCJ], [m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],
  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],
    [AC_CHECK_TOOL(GCJ, gcj,)
      test set = "${GCJFLAGS+set}" || GCJFLAGS="-g -O2"
      AC_SUBST(GCJFLAGS)])])[]dnl
])
m4trace:config/libtool.m4:8156: -1- AU_DEFUN([LT_AC_PROG_GCJ], [m4_if($#, 0, [LT_PROG_GCJ], [LT_PROG_GCJ($@)])])
m4trace:config/libtool.m4:8156: -1- AC_DEFUN([LT_AC_PROG_GCJ], [AC_DIAGNOSE([obsolete], [The macro `LT_AC_PROG_GCJ' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PROG_GCJ], [LT_PROG_GCJ($@)])])
m4trace:config/libtool.m4:8163: -1- AC_DEFUN([LT_PROG_GO], [AC_CHECK_TOOL(GOC, gccgo,)
])
m4trace:config/libtool.m4:8170: -1- AC_DEFUN([LT_PROG_RC], [AC_CHECK_TOOL(RC, windres,)
])
m4trace:config/libtool.m4:8175: -1- AU_DEFUN([LT_AC_PROG_RC], [m4_if($#, 0, [LT_PROG_RC], [LT_PROG_RC($@)])])
m4trace:config/libtool.m4:8175: -1- AC_DEFUN([LT_AC_PROG_RC], [AC_DIAGNOSE([obsolete], [The macro `LT_AC_PROG_RC' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PROG_RC], [LT_PROG_RC($@)])])
m4trace:config/libtool.m4:8295: -1- AU_DEFUN([LT_AC_PROG_SED], [m4_if($#, 0, [AC_PROG_SED], [AC_PROG_SED($@)])])
m4trace:config/libtool.m4:8295: -1- AC_DEFUN([LT_AC_PROG_SED], [AC_DIAGNOSE([obsolete], [The macro `LT_AC_PROG_SED' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [AC_PROG_SED], [AC_PROG_SED($@)])])
m4trace:config/libxml.m4:12: -1- AC_DEFUN([AM_PATH_XML2], [ 
AC_ARG_WITH(xml-prefix,
            [  --with-xml-prefix=PFX   Prefix where libxml is installed (optional)],
            xml_config_prefix="$withval", xml_config_prefix="")
AC_ARG_WITH(xml-exec-prefix,
            [  --with-xml-exec-prefix=PFX Exec prefix where libxml is installed (optional)],
            xml_config_exec_prefix="$withval", xml_config_exec_prefix="")
AC_ARG_ENABLE(xmltest,
              [  --disable-xmltest       Do not try to compile and run a test LIBXML program],,
              enable_xmltest=yes)

  if test x$xml_config_exec_prefix != x ; then
     xml_config_args="$xml_config_args"
     if test x${XML2_CONFIG+set} != xset ; then
        XML2_CONFIG=$xml_config_exec_prefix/bin/xml2-config
     fi
  fi
  if test x$xml_config_prefix != x ; then
     xml_config_args="$xml_config_args --prefix=$xml_config_prefix"
     if test x${XML2_CONFIG+set} != xset ; then
        XML2_CONFIG=$xml_config_prefix/bin/xml2-config
     fi
  fi

  AC_PATH_PROG(XML2_CONFIG, xml2-config, no)
  min_xml_version=ifelse([$1], ,2.0.0,[$1])
  AC_MSG_CHECKING(for libxml - version >= $min_xml_version)
  no_xml=""
  if test "$XML2_CONFIG" = "no" ; then
    no_xml=yes
  else
    XML_CPPFLAGS=`$XML2_CONFIG $xml_config_args --cflags`
    XML_LIBS=`$XML2_CONFIG $xml_config_args --libs`
    xml_config_major_version=`$XML2_CONFIG $xml_config_args --version | \
           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
    xml_config_minor_version=`$XML2_CONFIG $xml_config_args --version | \
           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
    xml_config_micro_version=`$XML2_CONFIG $xml_config_args --version | \
           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`
    if test "x$enable_xmltest" = "xyes" ; then
      ac_save_CPPFLAGS="$CPPFLAGS"
      ac_save_LIBS="$LIBS"
      CPPFLAGS="$CPPFLAGS $XML_CPPFLAGS"
      LIBS="$XML_LIBS $LIBS"
dnl
dnl Now check if the installed libxml is sufficiently new.
dnl (Also sanity checks the results of xml2-config to some extent)
dnl
      rm -f conf.xmltest
      AC_TRY_RUN([
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <libxml/xmlversion.h>

int 
main()
{
  int xml_major_version, xml_minor_version, xml_micro_version;
  int major, minor, micro;
  char *tmp_version;

  system("touch conf.xmltest");

  /* Capture xml2-config output via autoconf/configure variables */
  /* HP/UX 9 (%@#!) writes to sscanf strings */
  tmp_version = (char *)strdup("$min_xml_version");
  if (sscanf(tmp_version, "%d.%d.%d", &major, &minor, &micro) != 3) {
     printf("%s, bad version string from xml2-config\n", "$min_xml_version");
     exit(1);
   }
   free(tmp_version);

   /* Capture the version information from the header files */
   tmp_version = (char *)strdup(LIBXML_DOTTED_VERSION);
   if (sscanf(tmp_version, "%d.%d.%d", &xml_major_version, &xml_minor_version, &xml_micro_version) != 3) {
     printf("%s, bad version string from libxml includes\n", "LIBXML_DOTTED_VERSION");
     exit(1);
   }
   free(tmp_version);

 /* Compare xml2-config output to the libxml headers */
  if ((xml_major_version != $xml_config_major_version) ||
      (xml_minor_version != $xml_config_minor_version) ||
      (xml_micro_version != $xml_config_micro_version))
    {
      printf("*** libxml header files (version %d.%d.%d) do not match\n",
         xml_major_version, xml_minor_version, xml_micro_version);
      printf("*** xml2-config (version %d.%d.%d)\n",
         $xml_config_major_version, $xml_config_minor_version, $xml_config_micro_version);
      return 1;
    } 
/* Compare the headers to the library to make sure we match */
  /* Less than ideal -- doesn't provide us with return value feedback, 
   * only exits if there's a serious mismatch between header and library.
   */
    LIBXML_TEST_VERSION;

    /* Test that the library is greater than our minimum version */
    if ((xml_major_version > major) ||
        ((xml_major_version == major) && (xml_minor_version > minor)) ||
        ((xml_major_version == major) && (xml_minor_version == minor) &&
        (xml_micro_version >= micro)))
      {
        return 0;
       }
     else
      {
        printf("\n*** An old version of libxml (%d.%d.%d) was found.\n",
               xml_major_version, xml_minor_version, xml_micro_version);
        printf("*** You need a version of libxml newer than %d.%d.%d. The latest version of\n",
           major, minor, micro);
        printf("*** libxml is always available from ftp://ftp.xmlsoft.org.\n");
        printf("***\n");
        printf("*** If you have already installed a sufficiently new version, this error\n");
        printf("*** probably means that the wrong copy of the xml2-config shell script is\n");
        printf("*** being found. The easiest way to fix this is to remove the old version\n");
        printf("*** of LIBXML, but you can also set the XML2_CONFIG environment to point to the\n");
        printf("*** correct copy of xml2-config. (In this case, you will have to\n");
        printf("*** modify your LD_LIBRARY_PATH enviroment variable, or edit /etc/ld.so.conf\n");
        printf("*** so that the correct libraries are found at run-time))\n");
    }
  return 1;
}
],, no_xml=yes,[echo $ac_n "cross compiling; assumed OK... $ac_c"])
       CPPFLAGS="$ac_save_CPPFLAGS"
       LIBS="$ac_save_LIBS"
     fi
  fi

  if test "x$no_xml" = x ; then
     AC_MSG_RESULT(yes (version $xml_config_major_version.$xml_config_minor_version.$xml_config_micro_version))
     ifelse([$2], , :, [$2])     
  else
     AC_MSG_RESULT(no)
     if test "$XML2_CONFIG" = "no" ; then
       echo "*** The xml2-config script installed by LIBXML could not be found"
       echo "*** If libxml was installed in PREFIX, make sure PREFIX/bin is in"
       echo "*** your path, or set the XML2_CONFIG environment variable to the"
       echo "*** full path to xml2-config."
     else
       if test -f conf.xmltest ; then
        :
       else
          echo "*** Could not run libxml test program, checking why..."
          CPPFLAGS="$CPPFLAGS $XML_CPPFLAGS"
          LIBS="$LIBS $XML_LIBS"
          AC_TRY_LINK([
#include <libxml/xmlversion.h>
#include <stdio.h>
],      [ LIBXML_TEST_VERSION; return 0;],
        [ echo "*** The test program compiled, but did not run. This usually means"
          echo "*** that the run-time linker is not finding LIBXML or finding the wrong"
          echo "*** version of LIBXML. If it is not finding LIBXML, you'll need to set your"
          echo "*** LD_LIBRARY_PATH environment variable, or edit /etc/ld.so.conf to point"
          echo "*** to the installed location  Also, make sure you have run ldconfig if that"
          echo "*** is required on your system"
          echo "***"
          echo "*** If you have an old version installed, it is best to remove it, although"
          echo "*** you may also be able to get things to work by modifying LD_LIBRARY_PATH" ],
        [ echo "*** The test program failed to compile or link. See the file config.log for the"
          echo "*** exact error that occured. This usually means LIBXML was incorrectly installed"
          echo "*** or that you have moved LIBXML since it was installed. In the latter case, you"
          echo "*** may want to edit the xml2-config script: $XML2_CONFIG" ])
          CPPFLAGS="$ac_save_CPPFLAGS"
          LIBS="$ac_save_LIBS"
       fi
     fi

     XML_CPPFLAGS=""
     XML_LIBS=""
     ifelse([$3], , :, [$3])
  fi
  AC_SUBST(XML_CPPFLAGS)
  AC_SUBST(XML_LIBS)
  rm -f conf.xmltest
])
m4trace:config/ltargz.m4:12: -1- AC_DEFUN([LT_FUNC_ARGZ], [
AC_CHECK_HEADERS([argz.h], [], [], [AC_INCLUDES_DEFAULT])

AC_CHECK_TYPES([error_t],
  [],
  [AC_DEFINE([error_t], [int],
   [Define to a type to use for 'error_t' if it is not otherwise available.])
   AC_DEFINE([__error_t_defined], [1], [Define so that glibc/gnulib argp.h
    does not typedef error_t.])],
  [#if defined(HAVE_ARGZ_H)
#  include <argz.h>
#endif])

LT_ARGZ_H=
AC_CHECK_FUNCS([argz_add argz_append argz_count argz_create_sep argz_insert \
	argz_next argz_stringify], [], [LT_ARGZ_H=lt__argz.h; AC_LIBOBJ([lt__argz])])

dnl if have system argz functions, allow forced use of
dnl libltdl-supplied implementation (and default to do so
dnl on "known bad" systems). Could use a runtime check, but
dnl (a) detecting malloc issues is notoriously unreliable
dnl (b) only known system that declares argz functions,
dnl     provides them, yet they are broken, is cygwin
dnl     releases prior to 16-Mar-2007 (1.5.24 and earlier)
dnl So, it's more straightforward simply to special case
dnl this for known bad systems.
AS_IF([test -z "$LT_ARGZ_H"],
    [AC_CACHE_CHECK(
        [if argz actually works],
        [lt_cv_sys_argz_works],
        [[case $host_os in #(
	 *cygwin*)
	   lt_cv_sys_argz_works=no
	   if test no != "$cross_compiling"; then
	     lt_cv_sys_argz_works="guessing no"
	   else
	     lt_sed_extract_leading_digits='s/^\([0-9\.]*\).*/\1/'
	     save_IFS=$IFS
	     IFS=-.
	     set x `uname -r | sed -e "$lt_sed_extract_leading_digits"`
	     IFS=$save_IFS
	     lt_os_major=${2-0}
	     lt_os_minor=${3-0}
	     lt_os_micro=${4-0}
	     if test 1 -lt "$lt_os_major" \
		|| { test 1 -eq "$lt_os_major" \
		  && { test 5 -lt "$lt_os_minor" \
		    || { test 5 -eq "$lt_os_minor" \
		      && test 24 -lt "$lt_os_micro"; }; }; }; then
	       lt_cv_sys_argz_works=yes
	     fi
	   fi
	   ;; #(
	 *) lt_cv_sys_argz_works=yes ;;
	 esac]])
     AS_IF([test yes = "$lt_cv_sys_argz_works"],
        [AC_DEFINE([HAVE_WORKING_ARGZ], 1,
                   [This value is set to 1 to indicate that the system argz facility works])],
        [LT_ARGZ_H=lt__argz.h
        AC_LIBOBJ([lt__argz])])])

AC_SUBST([LT_ARGZ_H])
])
m4trace:config/ltdl.m4:16: -1- AC_DEFUN([LT_CONFIG_LTDL_DIR], [AC_BEFORE([$0], [LTDL_INIT])
_$0($*)
])
m4trace:config/ltdl.m4:68: -1- AC_DEFUN([LTDL_CONVENIENCE], [AC_BEFORE([$0], [LTDL_INIT])dnl
dnl Although the argument is deprecated and no longer documented,
dnl LTDL_CONVENIENCE used to take a DIRECTORY orgument, if we have one
dnl here make sure it is the same as any other declaration of libltdl's
dnl location!  This also ensures lt_ltdl_dir is set when configure.ac is
dnl not yet using an explicit LT_CONFIG_LTDL_DIR.
m4_ifval([$1], [_LT_CONFIG_LTDL_DIR([$1])])dnl
_$0()
])
m4trace:config/ltdl.m4:81: -1- AU_DEFUN([AC_LIBLTDL_CONVENIENCE], [_LT_CONFIG_LTDL_DIR([m4_default([$1], [libltdl])])
_LTDL_CONVENIENCE])
m4trace:config/ltdl.m4:81: -1- AC_DEFUN([AC_LIBLTDL_CONVENIENCE], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBLTDL_CONVENIENCE' is obsolete.
You should run autoupdate.])dnl
_LT_CONFIG_LTDL_DIR([m4_default([$1], [libltdl])])
_LTDL_CONVENIENCE])
m4trace:config/ltdl.m4:124: -1- AC_DEFUN([LTDL_INSTALLABLE], [AC_BEFORE([$0], [LTDL_INIT])dnl
dnl Although the argument is deprecated and no longer documented,
dnl LTDL_INSTALLABLE used to take a DIRECTORY orgument, if we have one
dnl here make sure it is the same as any other declaration of libltdl's
dnl location!  This also ensures lt_ltdl_dir is set when configure.ac is
dnl not yet using an explicit LT_CONFIG_LTDL_DIR.
m4_ifval([$1], [_LT_CONFIG_LTDL_DIR([$1])])dnl
_$0()
])
m4trace:config/ltdl.m4:137: -1- AU_DEFUN([AC_LIBLTDL_INSTALLABLE], [_LT_CONFIG_LTDL_DIR([m4_default([$1], [libltdl])])
_LTDL_INSTALLABLE])
m4trace:config/ltdl.m4:137: -1- AC_DEFUN([AC_LIBLTDL_INSTALLABLE], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBLTDL_INSTALLABLE' is obsolete.
You should run autoupdate.])dnl
_LT_CONFIG_LTDL_DIR([m4_default([$1], [libltdl])])
_LTDL_INSTALLABLE])
m4trace:config/ltdl.m4:213: -1- AC_DEFUN([_LT_LIBOBJ], [
  m4_pattern_allow([^_LT_LIBOBJS$])
  _LT_LIBOBJS="$_LT_LIBOBJS $1.$ac_objext"
])
m4trace:config/ltdl.m4:226: -1- AC_DEFUN([LTDL_INIT], [dnl Parse OPTIONS
_LT_SET_OPTIONS([$0], [$1])

dnl We need to keep our own list of libobjs separate from our parent project,
dnl and the easiest way to do that is redefine the AC_LIBOBJs macro while
dnl we look for our own LIBOBJs.
m4_pushdef([AC_LIBOBJ], m4_defn([_LT_LIBOBJ]))
m4_pushdef([AC_LIBSOURCES])

dnl If not otherwise defined, default to the 1.5.x compatible subproject mode:
m4_if(_LTDL_MODE, [],
        [m4_define([_LTDL_MODE], m4_default([$2], [subproject]))
        m4_if([-1], [m4_bregexp(_LTDL_MODE, [\(subproject\|\(non\)?recursive\)])],
                [m4_fatal([unknown libltdl mode: ]_LTDL_MODE)])])

AC_ARG_WITH([included_ltdl],
    [AS_HELP_STRING([--with-included-ltdl],
                    [use the GNU ltdl sources included here])])

if test yes != "$with_included_ltdl"; then
  # We are not being forced to use the included libltdl sources, so
  # decide whether there is a useful installed version we can use.
  AC_CHECK_HEADER([ltdl.h],
      [AC_CHECK_DECL([lt_dlinterface_register],
	   [AC_CHECK_LIB([ltdl], [lt_dladvise_preload],
	       [with_included_ltdl=no],
	       [with_included_ltdl=yes])],
	   [with_included_ltdl=yes],
	   [AC_INCLUDES_DEFAULT
	    #include <ltdl.h>])],
      [with_included_ltdl=yes],
      [AC_INCLUDES_DEFAULT]
  )
fi

dnl If neither LT_CONFIG_LTDL_DIR, LTDL_CONVENIENCE nor LTDL_INSTALLABLE
dnl was called yet, then for old times' sake, we assume libltdl is in an
dnl eponymous directory:
AC_PROVIDE_IFELSE([LT_CONFIG_LTDL_DIR], [], [_LT_CONFIG_LTDL_DIR([libltdl])])

AC_ARG_WITH([ltdl_include],
    [AS_HELP_STRING([--with-ltdl-include=DIR],
                    [use the ltdl headers installed in DIR])])

if test -n "$with_ltdl_include"; then
  if test -f "$with_ltdl_include/ltdl.h"; then :
  else
    AC_MSG_ERROR([invalid ltdl include directory: '$with_ltdl_include'])
  fi
else
  with_ltdl_include=no
fi

AC_ARG_WITH([ltdl_lib],
    [AS_HELP_STRING([--with-ltdl-lib=DIR],
                    [use the libltdl.la installed in DIR])])

if test -n "$with_ltdl_lib"; then
  if test -f "$with_ltdl_lib/libltdl.la"; then :
  else
    AC_MSG_ERROR([invalid ltdl library directory: '$with_ltdl_lib'])
  fi
else
  with_ltdl_lib=no
fi

case ,$with_included_ltdl,$with_ltdl_include,$with_ltdl_lib, in
  ,yes,no,no,)
	m4_case(m4_default(_LTDL_TYPE, [convenience]),
	    [convenience], [_LTDL_CONVENIENCE],
	    [installable], [_LTDL_INSTALLABLE],
	  [m4_fatal([unknown libltdl build type: ]_LTDL_TYPE)])
	;;
  ,no,no,no,)
	# If the included ltdl is not to be used, then use the
	# preinstalled libltdl we found.
	AC_DEFINE([HAVE_LTDL], [1],
	  [Define this if a modern libltdl is already installed])
	LIBLTDL=-lltdl
	LTDLDEPS=
	LTDLINCL=
	;;
  ,no*,no,*)
	AC_MSG_ERROR(['--with-ltdl-include' and '--with-ltdl-lib' options must be used together])
	;;
  *)	with_included_ltdl=no
	LIBLTDL="-L$with_ltdl_lib -lltdl"
	LTDLDEPS=
	LTDLINCL=-I$with_ltdl_include
	;;
esac
INCLTDL=$LTDLINCL

# Report our decision...
AC_MSG_CHECKING([where to find libltdl headers])
AC_MSG_RESULT([$LTDLINCL])
AC_MSG_CHECKING([where to find libltdl library])
AC_MSG_RESULT([$LIBLTDL])

_LTDL_SETUP

dnl restore autoconf definition.
m4_popdef([AC_LIBOBJ])
m4_popdef([AC_LIBSOURCES])

AC_CONFIG_COMMANDS_PRE([
    _ltdl_libobjs=
    _ltdl_ltlibobjs=
    if test -n "$_LT_LIBOBJS"; then
      # Remove the extension.
      _lt_sed_drop_objext='s/\.o$//;s/\.obj$//'
      for i in `for i in $_LT_LIBOBJS; do echo "$i"; done | sed "$_lt_sed_drop_objext" | sort -u`; do
        _ltdl_libobjs="$_ltdl_libobjs $lt_libobj_prefix$i.$ac_objext"
        _ltdl_ltlibobjs="$_ltdl_ltlibobjs $lt_libobj_prefix$i.lo"
      done
    fi
    AC_SUBST([ltdl_LIBOBJS], [$_ltdl_libobjs])
    AC_SUBST([ltdl_LTLIBOBJS], [$_ltdl_ltlibobjs])
])

# Only expand once:
m4_define([LTDL_INIT])
])
m4trace:config/ltdl.m4:352: -1- AU_DEFUN([AC_LIB_LTDL], [LTDL_INIT($@)])
m4trace:config/ltdl.m4:352: -1- AC_DEFUN([AC_LIB_LTDL], [AC_DIAGNOSE([obsolete], [The macro `AC_LIB_LTDL' is obsolete.
You should run autoupdate.])dnl
LTDL_INIT($@)])
m4trace:config/ltdl.m4:353: -1- AU_DEFUN([AC_WITH_LTDL], [LTDL_INIT($@)])
m4trace:config/ltdl.m4:353: -1- AC_DEFUN([AC_WITH_LTDL], [AC_DIAGNOSE([obsolete], [The macro `AC_WITH_LTDL' is obsolete.
You should run autoupdate.])dnl
LTDL_INIT($@)])
m4trace:config/ltdl.m4:354: -1- AU_DEFUN([LT_WITH_LTDL], [LTDL_INIT($@)])
m4trace:config/ltdl.m4:354: -1- AC_DEFUN([LT_WITH_LTDL], [AC_DIAGNOSE([obsolete], [The macro `LT_WITH_LTDL' is obsolete.
You should run autoupdate.])dnl
LTDL_INIT($@)])
m4trace:config/ltdl.m4:367: -1- AC_DEFUN([_LTDL_SETUP], [AC_REQUIRE([AC_PROG_CC])dnl
AC_REQUIRE([LT_SYS_MODULE_EXT])dnl
AC_REQUIRE([LT_SYS_MODULE_PATH])dnl
AC_REQUIRE([LT_SYS_DLSEARCH_PATH])dnl
AC_REQUIRE([LT_LIB_DLLOAD])dnl
AC_REQUIRE([LT_SYS_SYMBOL_USCORE])dnl
AC_REQUIRE([LT_FUNC_DLSYM_USCORE])dnl
AC_REQUIRE([LT_SYS_DLOPEN_DEPLIBS])dnl
AC_REQUIRE([LT_FUNC_ARGZ])dnl

m4_require([_LT_CHECK_OBJDIR])dnl
m4_require([_LT_HEADER_DLFCN])dnl
m4_require([_LT_CHECK_DLPREOPEN])dnl
m4_require([_LT_DECL_SED])dnl

dnl Don't require this, or it will be expanded earlier than the code
dnl that sets the variables it relies on:
_LT_ENABLE_INSTALL

dnl _LTDL_MODE specific code must be called at least once:
_LTDL_MODE_DISPATCH

# In order that ltdl.c can compile, find out the first AC_CONFIG_HEADERS
# the user used.  This is so that ltdl.h can pick up the parent projects
# config.h file, The first file in AC_CONFIG_HEADERS must contain the
# definitions required by ltdl.c.
# FIXME: Remove use of undocumented AC_LIST_HEADERS (2.59 compatibility).
AC_CONFIG_COMMANDS_PRE([dnl
m4_pattern_allow([^LT_CONFIG_H$])dnl
m4_ifset([AH_HEADER],
    [LT_CONFIG_H=AH_HEADER],
    [m4_ifset([AC_LIST_HEADERS],
	    [LT_CONFIG_H=`echo "AC_LIST_HEADERS" | $SED 's|^[[      ]]*||;s|[[ :]].*$||'`],
	[])])])
AC_SUBST([LT_CONFIG_H])

AC_CHECK_HEADERS([unistd.h dl.h sys/dl.h dld.h mach-o/dyld.h dirent.h],
	[], [], [AC_INCLUDES_DEFAULT])

AC_CHECK_FUNCS([closedir opendir readdir], [], [AC_LIBOBJ([lt__dirent])])
AC_CHECK_FUNCS([strlcat strlcpy], [], [AC_LIBOBJ([lt__strl])])

m4_pattern_allow([LT_LIBEXT])dnl
AC_DEFINE_UNQUOTED([LT_LIBEXT],["$libext"],[The archive extension])

name=
eval "lt_libprefix=\"$libname_spec\""
m4_pattern_allow([LT_LIBPREFIX])dnl
AC_DEFINE_UNQUOTED([LT_LIBPREFIX],["$lt_libprefix"],[The archive prefix])

name=ltdl
eval "LTDLOPEN=\"$libname_spec\""
AC_SUBST([LTDLOPEN])
])
m4trace:config/ltdl.m4:443: -1- AC_DEFUN([LT_SYS_DLOPEN_DEPLIBS], [AC_REQUIRE([AC_CANONICAL_HOST])dnl
AC_CACHE_CHECK([whether deplibs are loaded by dlopen],
  [lt_cv_sys_dlopen_deplibs],
  [# PORTME does your system automatically load deplibs for dlopen?
  # or its logical equivalent (e.g. shl_load for HP-UX < 11)
  # For now, we just catch OSes we know something about -- in the
  # future, we'll try test this programmatically.
  lt_cv_sys_dlopen_deplibs=unknown
  case $host_os in
  aix3*|aix4.1.*|aix4.2.*)
    # Unknown whether this is true for these versions of AIX, but
    # we want this 'case' here to explicitly catch those versions.
    lt_cv_sys_dlopen_deplibs=unknown
    ;;
  aix[[4-9]]*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  amigaos*)
    case $host_cpu in
    powerpc)
      lt_cv_sys_dlopen_deplibs=no
      ;;
    esac
    ;;
  bitrig*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  darwin*)
    # Assuming the user has installed a libdl from somewhere, this is true
    # If you are looking for one http://www.opendarwin.org/projects/dlcompat
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  freebsd* | dragonfly*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  gnu* | linux* | k*bsd*-gnu | kopensolaris*-gnu)
    # GNU and its variants, using gnu ld.so (Glibc)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  hpux10*|hpux11*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  interix*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  irix[[12345]]*|irix6.[[01]]*)
    # Catch all versions of IRIX before 6.2, and indicate that we don't
    # know how it worked for any of those versions.
    lt_cv_sys_dlopen_deplibs=unknown
    ;;
  irix*)
    # The case above catches anything before 6.2, and it's known that
    # at 6.2 and later dlopen does load deplibs.
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  netbsd* | netbsdelf*-gnu)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  openbsd*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  osf[[1234]]*)
    # dlopen did load deplibs (at least at 4.x), but until the 5.x series,
    # it did *not* use an RPATH in a shared library to find objects the
    # library depends on, so we explicitly say 'no'.
    lt_cv_sys_dlopen_deplibs=no
    ;;
  osf5.0|osf5.0a|osf5.1)
    # dlopen *does* load deplibs and with the right loader patch applied
    # it even uses RPATH in a shared library to search for shared objects
    # that the library depends on, but there's no easy way to know if that
    # patch is installed.  Since this is the case, all we can really
    # say is unknown -- it depends on the patch being installed.  If
    # it is, this changes to 'yes'.  Without it, it would be 'no'.
    lt_cv_sys_dlopen_deplibs=unknown
    ;;
  osf*)
    # the two cases above should catch all versions of osf <= 5.1.  Read
    # the comments above for what we know about them.
    # At > 5.1, deplibs are loaded *and* any RPATH in a shared library
    # is used to find them so we can finally say 'yes'.
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  qnx*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  solaris*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)
    libltdl_cv_sys_dlopen_deplibs=yes
    ;;
  esac
  ])
if test yes != "$lt_cv_sys_dlopen_deplibs"; then
 AC_DEFINE([LTDL_DLOPEN_DEPLIBS], [1],
    [Define if the OS needs help to load dependent libraries for dlopen().])
fi
])
m4trace:config/ltdl.m4:545: -1- AU_DEFUN([AC_LTDL_SYS_DLOPEN_DEPLIBS], [m4_if($#, 0, [LT_SYS_DLOPEN_DEPLIBS], [LT_SYS_DLOPEN_DEPLIBS($@)])])
m4trace:config/ltdl.m4:545: -1- AC_DEFUN([AC_LTDL_SYS_DLOPEN_DEPLIBS], [AC_DIAGNOSE([obsolete], [The macro `AC_LTDL_SYS_DLOPEN_DEPLIBS' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_DLOPEN_DEPLIBS], [LT_SYS_DLOPEN_DEPLIBS($@)])])
m4trace:config/ltdl.m4:552: -1- AC_DEFUN([LT_SYS_MODULE_EXT], [m4_require([_LT_SYS_DYNAMIC_LINKER])dnl
AC_CACHE_CHECK([what extension is used for runtime loadable modules],
  [libltdl_cv_shlibext],
[
module=yes
eval libltdl_cv_shlibext=$shrext_cmds
module=no
eval libltdl_cv_shrext=$shrext_cmds
  ])
if test -n "$libltdl_cv_shlibext"; then
  m4_pattern_allow([LT_MODULE_EXT])dnl
  AC_DEFINE_UNQUOTED([LT_MODULE_EXT], ["$libltdl_cv_shlibext"],
    [Define to the extension used for runtime loadable modules, say, ".so".])
fi
if test "$libltdl_cv_shrext" != "$libltdl_cv_shlibext"; then
  m4_pattern_allow([LT_SHARED_EXT])dnl
  AC_DEFINE_UNQUOTED([LT_SHARED_EXT], ["$libltdl_cv_shrext"],
    [Define to the shared library suffix, say, ".dylib".])
fi
if test -n "$shared_archive_member_spec"; then
  m4_pattern_allow([LT_SHARED_LIB_MEMBER])dnl
  AC_DEFINE_UNQUOTED([LT_SHARED_LIB_MEMBER], ["($shared_archive_member_spec.o)"],
    [Define to the shared archive member specification, say "(shr.o)".])
fi
])
m4trace:config/ltdl.m4:580: -1- AU_DEFUN([AC_LTDL_SHLIBEXT], [m4_if($#, 0, [LT_SYS_MODULE_EXT], [LT_SYS_MODULE_EXT($@)])])
m4trace:config/ltdl.m4:580: -1- AC_DEFUN([AC_LTDL_SHLIBEXT], [AC_DIAGNOSE([obsolete], [The macro `AC_LTDL_SHLIBEXT' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_MODULE_EXT], [LT_SYS_MODULE_EXT($@)])])
m4trace:config/ltdl.m4:587: -1- AC_DEFUN([LT_SYS_MODULE_PATH], [m4_require([_LT_SYS_DYNAMIC_LINKER])dnl
AC_CACHE_CHECK([what variable specifies run-time module search path],
  [lt_cv_module_path_var], [lt_cv_module_path_var=$shlibpath_var])
if test -n "$lt_cv_module_path_var"; then
  m4_pattern_allow([LT_MODULE_PATH_VAR])dnl
  AC_DEFINE_UNQUOTED([LT_MODULE_PATH_VAR], ["$lt_cv_module_path_var"],
    [Define to the name of the environment variable that determines the run-time module search path.])
fi
])
m4trace:config/ltdl.m4:599: -1- AU_DEFUN([AC_LTDL_SHLIBPATH], [m4_if($#, 0, [LT_SYS_MODULE_PATH], [LT_SYS_MODULE_PATH($@)])])
m4trace:config/ltdl.m4:599: -1- AC_DEFUN([AC_LTDL_SHLIBPATH], [AC_DIAGNOSE([obsolete], [The macro `AC_LTDL_SHLIBPATH' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_MODULE_PATH], [LT_SYS_MODULE_PATH($@)])])
m4trace:config/ltdl.m4:606: -1- AC_DEFUN([LT_SYS_DLSEARCH_PATH], [m4_require([_LT_SYS_DYNAMIC_LINKER])dnl
AC_CACHE_CHECK([for the default library search path],
  [lt_cv_sys_dlsearch_path],
  [lt_cv_sys_dlsearch_path=$sys_lib_dlsearch_path_spec])
if test -n "$lt_cv_sys_dlsearch_path"; then
  sys_dlsearch_path=
  for dir in $lt_cv_sys_dlsearch_path; do
    if test -z "$sys_dlsearch_path"; then
      sys_dlsearch_path=$dir
    else
      sys_dlsearch_path=$sys_dlsearch_path$PATH_SEPARATOR$dir
    fi
  done
  m4_pattern_allow([LT_DLSEARCH_PATH])dnl
  AC_DEFINE_UNQUOTED([LT_DLSEARCH_PATH], ["$sys_dlsearch_path"],
    [Define to the system default library search path.])
fi
])
m4trace:config/ltdl.m4:627: -1- AU_DEFUN([AC_LTDL_SYSSEARCHPATH], [m4_if($#, 0, [LT_SYS_DLSEARCH_PATH], [LT_SYS_DLSEARCH_PATH($@)])])
m4trace:config/ltdl.m4:627: -1- AC_DEFUN([AC_LTDL_SYSSEARCHPATH], [AC_DIAGNOSE([obsolete], [The macro `AC_LTDL_SYSSEARCHPATH' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_DLSEARCH_PATH], [LT_SYS_DLSEARCH_PATH($@)])])
m4trace:config/ltdl.m4:653: -1- AC_DEFUN([LT_LIB_DLLOAD], [m4_pattern_allow([^LT_DLLOADERS$])
LT_DLLOADERS=
AC_SUBST([LT_DLLOADERS])

AC_LANG_PUSH([C])
lt_dlload_save_LIBS=$LIBS

LIBADD_DLOPEN=
AC_SEARCH_LIBS([dlopen], [dl],
	[AC_DEFINE([HAVE_LIBDL], [1],
		   [Define if you have the libdl library or equivalent.])
	if test "$ac_cv_search_dlopen" != "none required"; then
	  LIBADD_DLOPEN=-ldl
	fi
	libltdl_cv_lib_dl_dlopen=yes
	LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dlopen.la"],
    [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#if HAVE_DLFCN_H
#  include <dlfcn.h>
#endif
    ]], [[dlopen(0, 0);]])],
	    [AC_DEFINE([HAVE_LIBDL], [1],
		       [Define if you have the libdl library or equivalent.])
	    libltdl_cv_func_dlopen=yes
	    LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dlopen.la"],
	[AC_CHECK_LIB([svld], [dlopen],
		[AC_DEFINE([HAVE_LIBDL], [1],
			 [Define if you have the libdl library or equivalent.])
	        LIBADD_DLOPEN=-lsvld libltdl_cv_func_dlopen=yes
		LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dlopen.la"])])])
if test yes = "$libltdl_cv_func_dlopen" || test yes = "$libltdl_cv_lib_dl_dlopen"
then
  lt_save_LIBS=$LIBS
  LIBS="$LIBS $LIBADD_DLOPEN"
  AC_CHECK_FUNCS([dlerror])
  LIBS=$lt_save_LIBS
fi
AC_SUBST([LIBADD_DLOPEN])

LIBADD_SHL_LOAD=
AC_CHECK_FUNC([shl_load],
	[AC_DEFINE([HAVE_SHL_LOAD], [1],
		   [Define if you have the shl_load function.])
	LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}shl_load.la"],
    [AC_CHECK_LIB([dld], [shl_load],
	    [AC_DEFINE([HAVE_SHL_LOAD], [1],
		       [Define if you have the shl_load function.])
	    LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}shl_load.la"
	    LIBADD_SHL_LOAD=-ldld])])
AC_SUBST([LIBADD_SHL_LOAD])

case $host_os in
darwin[[1567]].*)
# We only want this for pre-Mac OS X 10.4.
  AC_CHECK_FUNC([_dyld_func_lookup],
	[AC_DEFINE([HAVE_DYLD], [1],
		   [Define if you have the _dyld_func_lookup function.])
	LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dyld.la"])
  ;;
beos*)
  LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}load_add_on.la"
  ;;
cygwin* | mingw* | pw32*)
  AC_CHECK_DECLS([cygwin_conv_path], [], [], [[#include <sys/cygwin.h>]])
  LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}loadlibrary.la"
  ;;
esac

AC_CHECK_LIB([dld], [dld_link],
	[AC_DEFINE([HAVE_DLD], [1],
		   [Define if you have the GNU dld library.])
		LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dld_link.la"])
AC_SUBST([LIBADD_DLD_LINK])

m4_pattern_allow([^LT_DLPREOPEN$])
LT_DLPREOPEN=
if test -n "$LT_DLLOADERS"
then
  for lt_loader in $LT_DLLOADERS; do
    LT_DLPREOPEN="$LT_DLPREOPEN-dlpreopen $lt_loader "
  done
  AC_DEFINE([HAVE_LIBDLLOADER], [1],
            [Define if libdlloader will be built on this platform])
fi
AC_SUBST([LT_DLPREOPEN])

dnl This isn't used anymore, but set it for backwards compatibility
LIBADD_DL="$LIBADD_DLOPEN $LIBADD_SHL_LOAD"
AC_SUBST([LIBADD_DL])

LIBS=$lt_dlload_save_LIBS
AC_LANG_POP
])
m4trace:config/ltdl.m4:748: -1- AU_DEFUN([AC_LTDL_DLLIB], [m4_if($#, 0, [LT_LIB_DLLOAD], [LT_LIB_DLLOAD($@)])])
m4trace:config/ltdl.m4:748: -1- AC_DEFUN([AC_LTDL_DLLIB], [AC_DIAGNOSE([obsolete], [The macro `AC_LTDL_DLLIB' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_LIB_DLLOAD], [LT_LIB_DLLOAD($@)])])
m4trace:config/ltdl.m4:756: -1- AC_DEFUN([LT_SYS_SYMBOL_USCORE], [m4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl
AC_CACHE_CHECK([for _ prefix in compiled symbols],
  [lt_cv_sys_symbol_underscore],
  [lt_cv_sys_symbol_underscore=no
  cat > conftest.$ac_ext <<_LT_EOF
void nm_test_func(){}
int main(){nm_test_func;return 0;}
_LT_EOF
  if AC_TRY_EVAL(ac_compile); then
    # Now try to grab the symbols.
    ac_nlist=conftest.nm
    if AC_TRY_EVAL(NM conftest.$ac_objext \| $lt_cv_sys_global_symbol_pipe \> $ac_nlist) && test -s "$ac_nlist"; then
      # See whether the symbols have a leading underscore.
      if grep '^. _nm_test_func' "$ac_nlist" >/dev/null; then
        lt_cv_sys_symbol_underscore=yes
      else
        if grep '^. nm_test_func ' "$ac_nlist" >/dev/null; then
	  :
        else
	  echo "configure: cannot find nm_test_func in $ac_nlist" >&AS_MESSAGE_LOG_FD
        fi
      fi
    else
      echo "configure: cannot run $lt_cv_sys_global_symbol_pipe" >&AS_MESSAGE_LOG_FD
    fi
  else
    echo "configure: failed program was:" >&AS_MESSAGE_LOG_FD
    cat conftest.c >&AS_MESSAGE_LOG_FD
  fi
  rm -rf conftest*
  ])
  sys_symbol_underscore=$lt_cv_sys_symbol_underscore
  AC_SUBST([sys_symbol_underscore])
])
m4trace:config/ltdl.m4:793: -1- AU_DEFUN([AC_LTDL_SYMBOL_USCORE], [m4_if($#, 0, [LT_SYS_SYMBOL_USCORE], [LT_SYS_SYMBOL_USCORE($@)])])
m4trace:config/ltdl.m4:793: -1- AC_DEFUN([AC_LTDL_SYMBOL_USCORE], [AC_DIAGNOSE([obsolete], [The macro `AC_LTDL_SYMBOL_USCORE' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_SYMBOL_USCORE], [LT_SYS_SYMBOL_USCORE($@)])])
m4trace:config/ltdl.m4:800: -1- AC_DEFUN([LT_FUNC_DLSYM_USCORE], [AC_REQUIRE([_LT_COMPILER_PIC])dnl	for lt_prog_compiler_wl
AC_REQUIRE([LT_SYS_SYMBOL_USCORE])dnl	for lt_cv_sys_symbol_underscore
AC_REQUIRE([LT_SYS_MODULE_EXT])dnl	for libltdl_cv_shlibext
if test yes = "$lt_cv_sys_symbol_underscore"; then
  if test yes = "$libltdl_cv_func_dlopen" || test yes = "$libltdl_cv_lib_dl_dlopen"; then
    AC_CACHE_CHECK([whether we have to add an underscore for dlsym],
      [libltdl_cv_need_uscore],
      [libltdl_cv_need_uscore=unknown
      dlsym_uscore_save_LIBS=$LIBS
      LIBS="$LIBS $LIBADD_DLOPEN"
      libname=conftmod # stay within 8.3 filename limits!
      cat >$libname.$ac_ext <<_LT_EOF
[#line $LINENO "configure"
#include "confdefs.h"
/* When -fvisibility=hidden is used, assume the code has been annotated
   correspondingly for the symbols needed.  */
#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))
int fnord () __attribute__((visibility("default")));
#endif
int fnord () { return 42; }]
_LT_EOF

      # ltfn_module_cmds module_cmds
      # Execute tilde-delimited MODULE_CMDS with environment primed for
      # $module_cmds or $archive_cmds type content.
      ltfn_module_cmds ()
      {( # subshell avoids polluting parent global environment
          module_cmds_save_ifs=$IFS; IFS='~'
          for cmd in @S|@1; do
            IFS=$module_cmds_save_ifs
            libobjs=$libname.$ac_objext; lib=$libname$libltdl_cv_shlibext
            rpath=/not-exists; soname=$libname$libltdl_cv_shlibext; output_objdir=.
            major=; versuffix=; verstring=; deplibs=
            ECHO=echo; wl=$lt_prog_compiler_wl; allow_undefined_flag=
            eval $cmd
          done
          IFS=$module_cmds_save_ifs
      )}

      # Compile a loadable module using libtool macro expansion results.
      $CC $pic_flag -c $libname.$ac_ext
      ltfn_module_cmds "${module_cmds:-$archive_cmds}"

      # Try to fetch fnord with dlsym().
      libltdl_dlunknown=0; libltdl_dlnouscore=1; libltdl_dluscore=2
      cat >conftest.$ac_ext <<_LT_EOF
[#line $LINENO "configure"
#include "confdefs.h"
#if HAVE_DLFCN_H
#include <dlfcn.h>
#endif
#include <stdio.h>
#ifndef RTLD_GLOBAL
#  ifdef DL_GLOBAL
#    define RTLD_GLOBAL DL_GLOBAL
#  else
#    define RTLD_GLOBAL 0
#  endif
#endif
#ifndef RTLD_NOW
#  ifdef DL_NOW
#    define RTLD_NOW DL_NOW
#  else
#    define RTLD_NOW 0
#  endif
#endif
int main () {
  void *handle = dlopen ("`pwd`/$libname$libltdl_cv_shlibext", RTLD_GLOBAL|RTLD_NOW);
  int status = $libltdl_dlunknown;
  if (handle) {
    if (dlsym (handle, "fnord"))
      status = $libltdl_dlnouscore;
    else {
      if (dlsym (handle, "_fnord"))
        status = $libltdl_dluscore;
      else
	puts (dlerror ());
    }
    dlclose (handle);
  } else
    puts (dlerror ());
  return status;
}]
_LT_EOF
      if AC_TRY_EVAL(ac_link) && test -s "conftest$ac_exeext" 2>/dev/null; then
        (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null
        libltdl_status=$?
        case x$libltdl_status in
          x$libltdl_dlnouscore) libltdl_cv_need_uscore=no ;;
	  x$libltdl_dluscore) libltdl_cv_need_uscore=yes ;;
	  x*) libltdl_cv_need_uscore=unknown ;;
        esac
      fi
      rm -rf conftest* $libname*
      LIBS=$dlsym_uscore_save_LIBS
    ])
  fi
fi

if test yes = "$libltdl_cv_need_uscore"; then
  AC_DEFINE([NEED_USCORE], [1],
    [Define if dlsym() requires a leading underscore in symbol names.])
fi
])
m4trace:config/ltdl.m4:907: -1- AU_DEFUN([AC_LTDL_DLSYM_USCORE], [m4_if($#, 0, [LT_FUNC_DLSYM_USCORE], [LT_FUNC_DLSYM_USCORE($@)])])
m4trace:config/ltdl.m4:907: -1- AC_DEFUN([AC_LTDL_DLSYM_USCORE], [AC_DIAGNOSE([obsolete], [The macro `AC_LTDL_DLSYM_USCORE' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_FUNC_DLSYM_USCORE], [LT_FUNC_DLSYM_USCORE($@)])])
m4trace:config/ltoptions.m4:14: -1- AC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])
m4trace:config/ltoptions.m4:113: -1- AU_DEFUN([AC_LIBTOOL_DLOPEN], [_LT_SET_OPTION([LT_INIT], [dlopen])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'dlopen' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:113: -1- AC_DEFUN([AC_LIBTOOL_DLOPEN], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_DLOPEN' is obsolete.
You should run autoupdate.])dnl
_LT_SET_OPTION([LT_INIT], [dlopen])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'dlopen' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:148: -1- AU_DEFUN([AC_LIBTOOL_WIN32_DLL], [AC_REQUIRE([AC_CANONICAL_HOST])dnl
_LT_SET_OPTION([LT_INIT], [win32-dll])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'win32-dll' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:148: -1- AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_WIN32_DLL' is obsolete.
You should run autoupdate.])dnl
AC_REQUIRE([AC_CANONICAL_HOST])dnl
_LT_SET_OPTION([LT_INIT], [win32-dll])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'win32-dll' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:197: -1- AC_DEFUN([AC_ENABLE_SHARED], [_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])
])
m4trace:config/ltoptions.m4:201: -1- AC_DEFUN([AC_DISABLE_SHARED], [_LT_SET_OPTION([LT_INIT], [disable-shared])
])
m4trace:config/ltoptions.m4:205: -1- AU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])
m4trace:config/ltoptions.m4:205: -1- AC_DEFUN([AM_ENABLE_SHARED], [AC_DIAGNOSE([obsolete], [The macro `AM_ENABLE_SHARED' is obsolete.
You should run autoupdate.])dnl
AC_ENABLE_SHARED($@)])
m4trace:config/ltoptions.m4:206: -1- AU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])
m4trace:config/ltoptions.m4:206: -1- AC_DEFUN([AM_DISABLE_SHARED], [AC_DIAGNOSE([obsolete], [The macro `AM_DISABLE_SHARED' is obsolete.
You should run autoupdate.])dnl
AC_DISABLE_SHARED($@)])
m4trace:config/ltoptions.m4:251: -1- AC_DEFUN([AC_ENABLE_STATIC], [_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])
])
m4trace:config/ltoptions.m4:255: -1- AC_DEFUN([AC_DISABLE_STATIC], [_LT_SET_OPTION([LT_INIT], [disable-static])
])
m4trace:config/ltoptions.m4:259: -1- AU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])
m4trace:config/ltoptions.m4:259: -1- AC_DEFUN([AM_ENABLE_STATIC], [AC_DIAGNOSE([obsolete], [The macro `AM_ENABLE_STATIC' is obsolete.
You should run autoupdate.])dnl
AC_ENABLE_STATIC($@)])
m4trace:config/ltoptions.m4:260: -1- AU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])
m4trace:config/ltoptions.m4:260: -1- AC_DEFUN([AM_DISABLE_STATIC], [AC_DIAGNOSE([obsolete], [The macro `AM_DISABLE_STATIC' is obsolete.
You should run autoupdate.])dnl
AC_DISABLE_STATIC($@)])
m4trace:config/ltoptions.m4:305: -1- AU_DEFUN([AC_ENABLE_FAST_INSTALL], [_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you put
the 'fast-install' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:305: -1- AC_DEFUN([AC_ENABLE_FAST_INSTALL], [AC_DIAGNOSE([obsolete], [The macro `AC_ENABLE_FAST_INSTALL' is obsolete.
You should run autoupdate.])dnl
_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you put
the 'fast-install' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:312: -1- AU_DEFUN([AC_DISABLE_FAST_INSTALL], [_LT_SET_OPTION([LT_INIT], [disable-fast-install])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you put
the 'disable-fast-install' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:312: -1- AC_DEFUN([AC_DISABLE_FAST_INSTALL], [AC_DIAGNOSE([obsolete], [The macro `AC_DISABLE_FAST_INSTALL' is obsolete.
You should run autoupdate.])dnl
_LT_SET_OPTION([LT_INIT], [disable-fast-install])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you put
the 'disable-fast-install' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:411: -1- AU_DEFUN([AC_LIBTOOL_PICMODE], [_LT_SET_OPTION([LT_INIT], [pic-only])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'pic-only' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:411: -1- AC_DEFUN([AC_LIBTOOL_PICMODE], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_PICMODE' is obsolete.
You should run autoupdate.])dnl
_LT_SET_OPTION([LT_INIT], [pic-only])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'pic-only' option into LT_INIT's first parameter.])
])
m4trace:config/ltsugar.m4:14: -1- AC_DEFUN([LTSUGAR_VERSION], [m4_if([0.1])])
m4trace:config/ltversion.m4:18: -1- AC_DEFUN([LTVERSION_VERSION], [macro_version='2.4.6'
macro_revision='2.4.6'
_LT_DECL(, macro_version, 0, [Which release of libtool.m4 was used?])
_LT_DECL(, macro_revision, 0)
])
m4trace:config/lt~obsolete.m4:37: -1- AC_DEFUN([LTOBSOLETE_VERSION], [m4_if([1])])
m4trace:config/lt~obsolete.m4:41: -1- AC_DEFUN([_LT_AC_PROG_ECHO_BACKSLASH])
m4trace:config/lt~obsolete.m4:42: -1- AC_DEFUN([_LT_AC_SHELL_INIT])
m4trace:config/lt~obsolete.m4:43: -1- AC_DEFUN([_LT_AC_SYS_LIBPATH_AIX])
m4trace:config/lt~obsolete.m4:45: -1- AC_DEFUN([_LT_AC_TAGVAR])
m4trace:config/lt~obsolete.m4:46: -1- AC_DEFUN([AC_LTDL_ENABLE_INSTALL])
m4trace:config/lt~obsolete.m4:47: -1- AC_DEFUN([AC_LTDL_PREOPEN])
m4trace:config/lt~obsolete.m4:48: -1- AC_DEFUN([_LT_AC_SYS_COMPILER])
m4trace:config/lt~obsolete.m4:49: -1- AC_DEFUN([_LT_AC_LOCK])
m4trace:config/lt~obsolete.m4:50: -1- AC_DEFUN([AC_LIBTOOL_SYS_OLD_ARCHIVE])
m4trace:config/lt~obsolete.m4:51: -1- AC_DEFUN([_LT_AC_TRY_DLOPEN_SELF])
m4trace:config/lt~obsolete.m4:52: -1- AC_DEFUN([AC_LIBTOOL_PROG_CC_C_O])
m4trace:config/lt~obsolete.m4:53: -1- AC_DEFUN([AC_LIBTOOL_SYS_HARD_LINK_LOCKS])
m4trace:config/lt~obsolete.m4:54: -1- AC_DEFUN([AC_LIBTOOL_OBJDIR])
m4trace:config/lt~obsolete.m4:55: -1- AC_DEFUN([AC_LTDL_OBJDIR])
m4trace:config/lt~obsolete.m4:56: -1- AC_DEFUN([AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH])
m4trace:config/lt~obsolete.m4:57: -1- AC_DEFUN([AC_LIBTOOL_SYS_LIB_STRIP])
m4trace:config/lt~obsolete.m4:58: -1- AC_DEFUN([AC_PATH_MAGIC])
m4trace:config/lt~obsolete.m4:59: -1- AC_DEFUN([AC_PROG_LD_GNU])
m4trace:config/lt~obsolete.m4:60: -1- AC_DEFUN([AC_PROG_LD_RELOAD_FLAG])
m4trace:config/lt~obsolete.m4:61: -1- AC_DEFUN([AC_DEPLIBS_CHECK_METHOD])
m4trace:config/lt~obsolete.m4:62: -1- AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_NO_RTTI])
m4trace:config/lt~obsolete.m4:63: -1- AC_DEFUN([AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE])
m4trace:config/lt~obsolete.m4:64: -1- AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_PIC])
m4trace:config/lt~obsolete.m4:65: -1- AC_DEFUN([AC_LIBTOOL_PROG_LD_SHLIBS])
m4trace:config/lt~obsolete.m4:66: -1- AC_DEFUN([AC_LIBTOOL_POSTDEP_PREDEP])
m4trace:config/lt~obsolete.m4:67: -1- AC_DEFUN([LT_AC_PROG_EGREP])
m4trace:config/lt~obsolete.m4:72: -1- AC_DEFUN([_AC_PROG_LIBTOOL])
m4trace:config/lt~obsolete.m4:73: -1- AC_DEFUN([AC_LIBTOOL_SETUP])
m4trace:config/lt~obsolete.m4:74: -1- AC_DEFUN([_LT_AC_CHECK_DLFCN])
m4trace:config/lt~obsolete.m4:75: -1- AC_DEFUN([AC_LIBTOOL_SYS_DYNAMIC_LINKER])
m4trace:config/lt~obsolete.m4:76: -1- AC_DEFUN([_LT_AC_TAGCONFIG])
m4trace:config/lt~obsolete.m4:78: -1- AC_DEFUN([_LT_AC_LANG_CXX])
m4trace:config/lt~obsolete.m4:79: -1- AC_DEFUN([_LT_AC_LANG_F77])
m4trace:config/lt~obsolete.m4:80: -1- AC_DEFUN([_LT_AC_LANG_GCJ])
m4trace:config/lt~obsolete.m4:81: -1- AC_DEFUN([AC_LIBTOOL_LANG_C_CONFIG])
m4trace:config/lt~obsolete.m4:82: -1- AC_DEFUN([_LT_AC_LANG_C_CONFIG])
m4trace:config/lt~obsolete.m4:83: -1- AC_DEFUN([AC_LIBTOOL_LANG_CXX_CONFIG])
m4trace:config/lt~obsolete.m4:84: -1- AC_DEFUN([_LT_AC_LANG_CXX_CONFIG])
m4trace:config/lt~obsolete.m4:85: -1- AC_DEFUN([AC_LIBTOOL_LANG_F77_CONFIG])
m4trace:config/lt~obsolete.m4:86: -1- AC_DEFUN([_LT_AC_LANG_F77_CONFIG])
m4trace:config/lt~obsolete.m4:87: -1- AC_DEFUN([AC_LIBTOOL_LANG_GCJ_CONFIG])
m4trace:config/lt~obsolete.m4:88: -1- AC_DEFUN([_LT_AC_LANG_GCJ_CONFIG])
m4trace:config/lt~obsolete.m4:89: -1- AC_DEFUN([AC_LIBTOOL_LANG_RC_CONFIG])
m4trace:config/lt~obsolete.m4:90: -1- AC_DEFUN([_LT_AC_LANG_RC_CONFIG])
m4trace:config/lt~obsolete.m4:91: -1- AC_DEFUN([AC_LIBTOOL_CONFIG])
m4trace:config/lt~obsolete.m4:92: -1- AC_DEFUN([_LT_AC_FILE_LTDLL_C])
m4trace:config/lt~obsolete.m4:94: -1- AC_DEFUN([_LT_AC_PROG_CXXCPP])
m4trace:config/lt~obsolete.m4:97: -1- AC_DEFUN([_LT_PROG_F77])
m4trace:config/lt~obsolete.m4:98: -1- AC_DEFUN([_LT_PROG_FC])
m4trace:config/lt~obsolete.m4:99: -1- AC_DEFUN([_LT_PROG_CXX])
m4trace:config/mdl_have_opengl_2014.m4:1: -1- AC_DEFUN([AC_FIND_OPENGL], [
  AC_REQUIRE([AC_PROG_CC])
  AC_REQUIRE([AC_PATH_X])

# DQ (9/26/2015): Commented out to avoid aclocal, automake, and autoconf warnings.
# AC_REQUIRE([AC_PATH_XTRA])

  AC_CACHE_CHECK([for OpenGL], mdl_cv_have_OpenGL,
  [
dnl Check for Mesa first, unless we were asked not to.
    AC_ARG_WITH([mesa],
		[AS_HELP_STRING([--with-mesa],
                   [Prefer the Mesa library over a vendors native OpenGL library (default=no)])],
		[],
		[with_mesa=no])

    if test x"$with_mesa" = xyes; then
	GL_search_list="MesaGL   GL"
	GLU_search_list="MesaGLU GLU"
	GLX_search_list="MesaGLX GLX"
    else
	GL_search_list="GL  MesaGL"
	GLU_search_list="GLU MesaGLU"
	GLX_search_list="GLX MesaGLX"
    fi

    AC_LANG_SAVE
    AC_LANG_C

dnl If we are running under X11 then add in the appropriate libraries.
if test x"$no_x" != xyes; then
dnl Add everything we need to compile and link X programs to GL_X_CFLAGS
dnl and GL_X_LIBS.
  GL_CFLAGS="$X_CFLAGS"
#   GL_X_LIBS="$X_PRE_LIBS $X_LIBS -lX11 -lXext -lXmu -lXt -lXi $X_EXTRA_LIBS"
   GL_X_LIBS="$X_PRE_LIBS $X_LIBS -lX11 -lXext -lXmu -lXt $X_EXTRA_LIBS"
fi
    GL_save_CPPFLAGS="$CPPFLAGS"
    CPPFLAGS="$GL_CFLAGS"

    GL_save_LIBS="$LIBS"
    LIBS="$GL_X_LIBS"

    # Save the "AC_MSG_RESULT file descriptor" to FD 8.
    exec 8>&AC_FD_MSG

    # Temporarily turn off AC_MSG_RESULT so that the user gets pretty
    # messages.
    exec AC_FD_MSG>/dev/null

    AC_SEARCH_LIBS(glAccum,         $GL_search_list,  have_GL=yes,   have_GL=no)
    # JAS AC_SEARCH_LIBS(gluBeginCurve,   $GLU_search_list, have_GLU=yes,  have_GLU=no)
    AC_SEARCH_LIBS(glXChooseVisual, $GLX_search_list, have_GLX=yes,  have_GLX=no)

    if test -n "$LIBS"; then
      mdl_cv_have_OpenGL=yes
      GL_LIBS="$LIBS"
    else
      mdl_cv_have_OpenGL=no
      GL_CFLAGS=
    fi

    LIBS="-lglut $LIBS"

    AC_SEARCH_LIBS(glutInit,        glut,             have_glut=yes, have_glut=no)

    if test -n "$LIBS"; then
      mdl_cv_have_glut=yes
      GLUT_LIBS="$LIBS"
    else
      mdl_cv_have_glut=no
      GLUT_CFLAGS=
    fi

    # Restore pretty messages.
    exec AC_FD_MSG>&8

#     if test -n "$LIBS"; then
#       mdl_cv_have_OpenGL=yes
#       GL_LIBS="$LIBS"
#     else
#       mdl_cv_have_OpenGL=no
#       GL_CFLAGS=
#     fi

dnl Reset GL_X_LIBS regardless, since it was just a temporary variable
dnl and we don't want to be global namespace polluters.
    GL_X_LIBS=

    LIBS="$GL_save_LIBS"
    CPPFLAGS="$GL_save_CPPFLAGS"

    AC_LANG_RESTORE

dnl bugfix: dont forget to cache this variables, too
    mdl_cv_GL_CFLAGS="$GL_CFLAGS"
    mdl_cv_GL_LIBS="$GL_LIBS"
    mdl_cv_have_GL="$have_GL"
    mdl_cv_have_GLU="$have_GLU"
    mdl_cv_have_GLX="$have_GLX"
    mdl_cv_have_glut="$have_glut"
  ])
  GL_CFLAGS="$mdl_cv_GL_CFLAGS"
  GL_LIBS="$mdl_cv_GL_LIBS"
  have_GL="$mdl_cv_have_GL"
  have_GLU="$mdl_cv_have_GLU"
  have_GLX="$mdl_cv_have_GLX"
  have_glut="$mdl_cv_have_glut"
  AC_SUBST(GL_CFLAGS)
  AC_SUBST(GL_LIBS)
  AC_SUBST(GLUT_CFLAGS)
  AC_SUBST(GLUT_LIBS)
])
m4trace:config/qrose_indigo_1.m4:5: -1- AC_DEFUN([AC_FIND_FILE], [
$3=NONE
for i in $2;
do
  for j in $1;
  do    
    if test -r "$i/$j"; then
      $3=$i
      break 2
    fi
  done
done
])
m4trace:config/qrose_indigo_1.m4:20: -1- AC_DEFUN([AC_FIND_FILE_EXT], [
$3=NONE

for i in $2;
do
  for j in $1;
  do
    try="ls -l $i/$j*"
    if test=`eval $try 2> /dev/null`; then
      $3=$i
      break 2
    fi
  done
done
])
m4trace:config/qrose_indigo_1.m4:77: -1- AC_DEFUN([AC_PATH_QT], [
AC_MSG_CHECKING([for Qt])

dnl DQ (9/11/2008): Modified to set the "n" so that tests without QT would work.
AC_ARG_WITH(qt,
    [  --with-qt=DIR where the QT root directory is. ],
    [  ac_qt_path="$withval"
       if test "x$with_qt" = xyes; then
          AC_MSG_FAILURE([--with-qt=PATH must be specified to use option --with-qt (a valid Qt intallation)])
       fi
       if test "x$withval" = x; then
          AC_MSG_FAILURE([empty path used in --with-qt=PATH must be specified to use option --with-qt (a valid Qt intallation)])
       fi
    ],
    [  with_qt=no ])

AC_ARG_WITH(qt-inc,
    [  --with-qt-inc=DIR   where the QT includes are. ],
    [  ac_qt_includes="$withval"
    ])

AC_ARG_WITH(qt-lib,
    [  --with-qt-lib=DIR where the QT libraries are. ],
    [  ac_qt_libraries="$withval"
    ])

AC_ARG_WITH(roseQt,
    [  --with-roseQt=Build with roseQt. yes or no. defaults to no. ],
    [  AC_MSG_NOTICE([in test action given: with_roseQt = "$with_roseQt"])
       if test "x$with_roseQt" != xyes; then
          AC_MSG_FAILURE([no option should be specified with --with-roseQt...(usage: --with-roseQt or --with-roseQt=yes only)])
       fi
       if test "x$with_qt" = xno; then
          AC_MSG_FAILURE([--with-qt=PATH must be specified to use option --with-roseQt (roseQt requires valid Qt intallation)])
       fi
    ],
    [  with_roseQt=no ])
  
dnl ---------------------------[check Qt headers]------------
  qt_incdirs="$ac_qt_includes $ac_qt_path/include /usr/include/qt4"
  AC_FIND_FILE(QtGui/qapplication.h, $qt_incdirs, qt_incdir)

dnl echo "qt_incdir = $qt_incdir"
dnl echo "with_QRose = $with_QRose"

dnl DQ (9/12/2008): Only test for failure if we have configured for QRose use.
dnl This prevents failing when we find Qt3 and we have not configured
dnl ROSE to use QRose. Also fixed in code below.
dnl if test "x$with_QRose" != xno && test "$qt_incdir" = NONE; then

dnl Gabriel (7/7/2009): Added Qt3 support for the ROSE components - we need to define QT3_SUPPORT , 
dnl                     but I am not sure where to put it, so I have placed it below with the includes
  if test "x$with_QRose" != xno; then
     if test "$qt_incdir" = NONE; then
        AC_MSG_ERROR([Qt headers not found; use --with-qt=DIR or --with-qt-includes=DIR])
     fi
  fi
  QT_INCLUDES="-DQT3_SUPPORT -I$qt_incdir/QtCore -I$qt_incdir/QtGui -I$qt_incdir/Qt3Support -I$qt_incdir/QtXml -I$qt_incdir"
  AC_SUBST(QT_INCLUDES)

dnl ---------------------------[check Qt Libraries]------------
  qt_libdirs="$ac_qt_libraries $ac_qt_path/lib /usr/lib"
  AC_FIND_FILE_EXT(libQtGui, $qt_libdirs, qt_libdir)
dnl if test "$with_QRose" != no && test "$qt_libdir" = NONE; then
  if test "$with_QRose" != no; then
     if test "$qt_libdir" = NONE; then
        AC_MSG_ERROR([Qt libraries not found; use --with-qt=DIR or --with-qt-libraries=DIR])
     fi
  fi
dnl  LIB_QT="-lQtCore -lQtGui -lQt3Support"
  QT_LDFLAGS="-L$qt_libdir -lQtCore -lQtGui -lQt3Support -lQtXml -lQtUiTools"
dnl  AC_SUBST(LIB_QT)

  AM_CONDITIONAL(ROSE_USE_QT,test "$with_qt" != no)

  AC_SUBST(QT_LDFLAGS)
  AC_MSG_RESULT([ headers $qt_incdir, libraries $qt_libdir ])
])
m4trace:config/qrose_indigo_1.m4:161: -1- AC_DEFUN([AC_PATH_QT_MOC], [
   AC_REQUIRE([AC_CHECK_WINDOWS])
   AC_REQUIRE([AC_PATH_QT])

   AC_ARG_WITH(qt-bin,
    [  --with-qt-bin=DIR   where the QT binaries are. ],
    [  ac_qt_bin="$withval"
    ])

dnl ------------------------[get binary]-----------------

   moc_dirs="$ac_qt_bin $ac_qt_path/bin `echo $PATH | sed s/:/\ /g`"
   if test $USING_WINDOWS = 1; then
      moc_binary="moc.exe"
   else
      moc_binary="moc"
   fi

dnl ------------------------[check if moc exists]-----------------
   AC_MSG_CHECKING([for Qt meta-object compiler])
   AC_FIND_FILE($moc_binary, $moc_dirs, moc_dir)
dnl if test "$with_QRose" != no && test "$moc_dir" = NONE; then
   if test "$with_QRose" != no; then
      if test "$moc_dir" = NONE; then
         AC_MSG_ERROR([no Qt meta object compiler ($moc_binary) found; should be found in PATH, or --with-qt=DIR-qt_root, or --with-qt-bin=DIR-qt_bin])
      fi
   fi
   MOC=$moc_dir/$moc_binary
   AC_MSG_RESULT([$MOC])
dnl ------------------------[check if moc is version 4]-----------------
   AC_MSG_CHECKING([Qt meta-object compiler version])

dnl DQ (9/12/2008): Added to test for use of QRose to prevent error if Qt3 is found.
   if test "$with_QRose" != no; then
      if test "$moc_dir" != NONE; then
         try=`$MOC -v 2>&1 | grep "Qt 4."`
         if test -z "$try"; then
            AC_MSG_ERROR([invalid version - "$MOC" must be version 4.x.x])
         else
            AC_MSG_RESULT([passed])
         fi
     fi
     AC_SUBST(MOC)
   fi
])
m4trace:config/qrose_indigo_1.m4:215: -1- AC_DEFUN([AC_PATH_QT_UIC], [
   AC_REQUIRE([AC_CHECK_WINDOWS])
   AC_REQUIRE([AC_PATH_QT])

   AC_ARG_WITH(qt-bin,
    [  --with-qt-bin=DIR   where the QT binaries are. ],
    [  ac_qt_bin="$withval"
    ])

dnl ------------------------[get binary]-----------------

   uic_dirs="$ac_qt_bin $ac_qt_path/bin `echo $PATH | sed s/:/\ /g`"
   if test $USING_WINDOWS = 1; then
      uic_binary="uic.exe"
   else
      uic_binary="uic"
   fi

dnl ------------------------[check if uic exists]-----------------
   AC_MSG_CHECKING([for Qt uic compiler])
   AC_FIND_FILE($uic_binary, $uic_dirs, uic_dir)
dnl if test "$with_QRose" != no && test "$uic_dir" = NONE; then
   if test "$with_QRose" != no; then
      if test "$uic_dir" = NONE; then
         AC_MSG_ERROR([no Qt ui compiler ($uic_binary) found; should be found in PATH, or --with-qt=DIR-qt_root, or --with-qt-bin=DIR-qt_bin])
      fi
   fi
   UIC=$uic_dir/$uic_binary
   AC_MSG_RESULT([$UIC])
dnl ------------------------[check if uic is version 4]-----------------
   AC_MSG_CHECKING([Qt uic compiler version])

dnl DQ (9/12/2008): Added to test for use of QRose to prevent error if Qt3 is found.
   if test "$with_QRose" != no; then
      if test "$uic_dir" != NONE; then
#        try=`$UIC -v 2>&1 | grep "Qt 4."`
         try=`$UIC -v 2>&1 | grep "Interface Compiler version 4."`
         if test -z "$try"; then
            AC_MSG_ERROR([invalid version - "$UIC" must be version 4.x.x])
         else
            AC_MSG_RESULT([passed])
         fi
     fi
     AC_SUBST(UIC)
   fi
])
m4trace:config/qrose_indigo_1.m4:268: -1- AC_DEFUN([AC_PATH_QT_RCC], [
   AC_REQUIRE([AC_CHECK_WINDOWS])
   AC_REQUIRE([AC_PATH_QT])

   AC_ARG_WITH(qt-bin,
    [  --with-qt-bin=DIR   where the QT binaries are. ],
    [  ac_qt_bin="$withval"
    ])

dnl ------------------------[get binary]-----------------

   rcc_dirs="$ac_qt_bin $ac_qt_path/bin `echo $PATH | sed s/:/\ /g`"
   if test $USING_WINDOWS = 1; then
      rcc_binary="rcc.exe"
   else
      rcc_binary="rcc"
   fi

dnl ------------------------[check if rcc exists]-----------------
   AC_MSG_CHECKING([for Qt rcc compiler])
   AC_FIND_FILE($rcc_binary, $rcc_dirs, rcc_dir)
dnl if test "$with_QRose" != no && test "$rcc_dir" = NONE; then
   if test "$with_QRose" != no; then
      if test "$rcc_dir" = NONE; then
         AC_MSG_ERROR([no Qt rcc compiler ($rcc_binary) found; should be found in PATH, or --with-qt=DIR-qt_root, or --with-qt-bin=DIR-qt_bin])
      fi
   fi
   RCC=$rcc_dir/$rcc_binary
   AC_MSG_RESULT([$RCC])
dnl ------------------------[check if rcc is version 4]-----------------
   AC_MSG_CHECKING([Qt resource compiler version])

dnl DQ (9/12/2008): Added to test for use of QRose to prevent error if Qt3 is found.
   if test "$with_QRose" != no; then
      if test "$rcc_dir" != NONE; then
#        try=`$RCC -v 2>&1 | grep "Qt 4."`
         try=`$RCC -v 2>&1 | grep "Qt Resource Compiler version 4."`
         if test -z "$try"; then
            AC_MSG_ERROR([invalid version - "$RCC" must be version 4.x.x])
         else
            AC_MSG_RESULT([passed])
         fi
     fi
     AC_SUBST(RCC)
   fi
])
m4trace:config/qrose_indigo_1.m4:320: -1- AC_DEFUN([AC_PATH_QT_VERSION], [
    AC_REQUIRE([AC_PATH_QT])

    if test $with_qt != no
    then
        dnl get complete version string ...
        QT_VERSION=`grep QT_VERSION_STR $qt_incdir/QtCore/qglobal.h | awk '{print $ 3}' | sed -e 's/\"//g'`
        dnl get major version number
        QT_VERSION_MAJOR=`echo $QT_VERSION | awk -F . '{print $ 1}'`
        QT_VERSION_MINOR=`echo $QT_VERSION | awk -F . '{print $ 2}'`

        dnl test for empty variables
        if test -z "$QT_VERSION_MAJOR"
        then
            QT_VERSION_MAJOR=0
        fi
        if test -z "$QT_VERSION_MINOR"
        then
            QT_VERSION_MINOR=0
        fi

        if test x"$with_roseQt" != x"no"
        then
            AC_MSG_NOTICE([in qrose_indigi_1 -- qt version macro: with_roseQt = "$with_roseQt", QT_VERSION_MAJOR = "$QT_VERSION_MAJOR", QT_VERSION_MINOR = "$QT_VERSION_MINOR"])
            AC_MSG_CHECKING([Qt version compatible with roseQt])
            if test $QT_VERSION_MAJOR -ge 4 && test $QT_VERSION_MINOR -ge 4
            then
                with_roseQt=yes
                AC_MSG_RESULT([passed])
            else
                AC_MSG_ERROR([invalid version - qt must be at least version 4.4.x in order to build with roseQt])
            fi
        dnl Comment the following lines in, to have roseQt automatically enabled if qt>=4.4.0
        dnl else
            dnl if test $QT_VERSION_MAJOR -lt 4 && test $QT_VERSION_MINOR -lt 4
            dnl then
            dnl    AC_MSG_ERROR([ invalid version - qt must be at least version 4.4.x in order to build with roseQt])
            dnl else
            dnl    with_roseQt=yes
            dnl    AC_MSG_RESULT([passed])
            dnl fi
        fi
        AC_SUBST(QT_VERSION)
        AC_SUBST(QT_VERSION_MAJOR)
        AC_SUBST(QT_VERSION_MINOR)
    fi

    AC_MSG_NOTICE([with_roseQt = "$with_roseQt"])
    AM_CONDITIONAL(ROSE_WITH_ROSEQT,test x"$with_roseQt" != x"no")
])
m4trace:config/qrose_indigo_1_windows.m4:1: -1- AC_DEFUN([AC_CHECK_WINDOWS], [
AC_REQUIRE([AC_CANONICAL_HOST])
AC_MSG_CHECKING([for windows])
USING_MINGW32=0
if test "$host_os" = cygwin; then   
   USING_WINDOWS=1
   AC_MSG_RESULT([yes: cygwin. Use --build=mingw32 for dll library!])
else
   if test "$host_os" = mingw32; then
      USING_WINDOWS=1
      USING_MINGW32=1
      AC_MSG_RESULT([yes: mingw32])
   else   
      AC_MSG_RESULT([no: $host_os])
      USING_WINDOWS=0
   fi
fi

AC_SUBST(USING_WINDOWS)
AM_CONDITIONAL(QROSE_USE_MINGW32, [test $USING_MINGW32 = 1])
AM_CONDITIONAL(QROSE_USE_WINDOWS, [test $USING_WINDOWS = 1])
])
m4trace:config/support-GraphViz.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_GRAPHVIZ], [
# Begin macro ROSE_SUPPORT_GRAPHVIZ.

# The purpose of this macro is to build a automake conditional that 
# communicates if "dot" is available in the user's path so that 
# the PDF files generated in the ROSE/tutorial directory can be 
# tested for their existence.  If "dot" is available then the 
# PDF should be generated, else they will not be generated
# and we should not test for their existance.  The PDF's
# are used in the generation of the ROSE documentation.
# We don't require that the documentation generated
# and since we distribute the documentation with ROSE
# (and it is available on the web) we don't want to
# require these dependences.

AC_MSG_CHECKING([for GraphViz's dot program in path])

DOT_AVAILABLE="no"
DOT_PATH="`which dot > /dev/null`"
if test $? -eq 0; then
   DOT_AVAILABLE="yes"
   AC_MSG_RESULT(yes)
else
   # Dot is not found.
   AC_MSG_RESULT([not found in user's path])
   echo "GraphViz's dot program not found in the user's path!"
fi

AM_CONDITIONAL([ROSE_USE_GRAPHVIZ_DOT],[ test "x$DOT_AVAILABLE" = xyes ] )

# End macro ROSE_SUPPORT_MAPLE.

])
m4trace:config/support-IntelPin.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_INTEL_PIN], [
# Begin macro ROSE_SUPPORT_INTEL_PIN.

# Inclusion of test for INTEL PIN Dynamic Instrumentation Package and it's location.

AC_MSG_CHECKING(for IntelPin)
AC_ARG_WITH(IntelPin,
[  --with-IntelPin=PATH	Specify the prefix where Intel Pin Package is installed],
,
if test ! "$with_IntelPin" ; then
   with_IntelPin=no
fi
)

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_IntelPin = "$with_IntelPin"])

if test "$with_IntelPin" = no; then
   # If --with-IntelPin is not specified, then don't use it.
   AC_MSG_NOTICE([skipping use of Intel Pin package support])
else
   IntelPin_path=$with_IntelPin
   AC_MSG_NOTICE([setup IntelPin support in ROSE. path = "$IntelPin_path"])
   AC_DEFINE([USE_ROSE_INTEL_PIN_SUPPORT],1,[Controls use of ROSE support for Intel Pin Dynamic Instrumentation Package.])
fi

AC_SUBST(IntelPin_path)

# End macro ROSE_SUPPORT_INTEL_PIN.

])
m4trace:config/support-accelerator.m4:2: -1- AC_DEFUN([GENERATE_CUDA_SPECIFIC_HEADERS], [
   mkdir -p "./include-staging/cuda_HEADERS"
   pushd ./include-staging/cuda_HEADERS >/dev/null
   cp ${srcdir}/config/preinclude-cuda.h .
   tar xzf ${srcdir}/cuda-headers.tgz
   popd >/dev/null
])
m4trace:config/support-accelerator.m4:11: -1- AC_DEFUN([ROSE_CHECK_CUDA], [

AC_ARG_WITH(cuda-inc,   [  --with-cuda-inc=DIR    For CUDA Headers (API)])
AC_ARG_WITH(cuda-lib,   [  --with-cuda-lib=DIR    For CUDA Library (Runtime)])
AC_ARG_WITH(cuda-bin,   [  --with-cuda-bin=DIR    For CUDA Binary  (Compiler, NVCC))])

# CUDA header files
if test "$with_cuda_inc" != ""
then
        AC_SUBST(CUDA_INC_DIR, [$with_cuda_inc])
        AC_DEFINE_UNQUOTED([CUDA_INC_DIR], "$with_cuda_inc", [CUDA include directory])
else
        with_cuda_inc=$(pwd)/include-staging/cuda_HEADERS/cuda-7.5/targets/x86_64-linux/include/
        AC_SUBST(CUDA_INC_DIR, [$with_cuda_inc])
        AC_DEFINE_UNQUOTED([CUDA_INC_DIR], "$with_cuda_inc", [CUDA include directory])
fi
AM_CONDITIONAL(ROSE_HAVE_CUDA_INC, [test "$with_cuda_inc" != ""])

# CUDA library
if test "$with_cuda_lib" != ""
then
        AC_SUBST(CUDA_LIB_DIR, [$with_cuda_lib])
        AC_DEFINE_UNQUOTED([CUDA_LIB_DIR], "$with_cuda_lib", [CUDA libraries directory])
fi
AM_CONDITIONAL(ROSE_HAVE_CUDA_LIB, test "$with_cuda_lib" != "")

# CUDA binary
if test "$with_cuda_bin" != ""
then
        AC_SUBST(CUDA_BIN_DIR, [$with_cuda_bin])
        AC_DEFINE_UNQUOTED([CUDA_BIN_DIR], "$with_cuda_bin", [CUDA binaries directory])
fi
AM_CONDITIONAL(ROSE_HAVE_CUDA_BIN, test "$with_cuda_bin" != "")


])
m4trace:config/support-accelerator.m4:49: -1- AC_DEFUN([GENERATE_OPENCL_SPECIFIC_HEADERS], [
   mkdir -p "./include-staging/opencl_HEADERS"
   cp ${srcdir}/config/preinclude-opencl.h ./include-staging/opencl_HEADERS
])
m4trace:config/support-accelerator.m4:55: -1- AC_DEFUN([ROSE_CHECK_OPENCL], [

AC_ARG_WITH(opencl-inc, [  --with-opencl-inc=DIR  For OpenCL Headers (API)])
AC_ARG_WITH(opencl-lib, [  --with-opencl-lib=DIR  For OpenCL Library (Runtime) (need --with-opencl-inc=DIR)])

# OpenCL header files
if test "$with_opencl_inc" != ""
then
        AC_SUBST(OPENCL_INC_DIR, [$with_opencl_inc])
        AC_DEFINE_UNQUOTED([OPENCL_INC_DIR], "$with_opencl_inc", [OpenCL include directory])
fi
AM_CONDITIONAL(ROSE_HAVE_OPENCL_INC, [test "$with_opencl_inc" != ""])

# OpenCL library
if test "$with_opencl_lib" != ""
then
        AC_SUBST(OPENCL_LIB_DIR, [$with_opencl_lib])
        AC_DEFINE_UNQUOTED([OPENCL_LIB_DIR], "$with_opencl_lib", [OpenCL libraries directory])
        if test "$with_opencl_inc" == ""
        then
                 AC_ERROR([Need OpenCL headers directory if the libraries directory are provided])
        fi
fi
AM_CONDITIONAL(ROSE_HAVE_OPENCL_LIB, test "$with_opencl_lib" != "")

])
m4trace:config/support-aterm.m4:52: -1- AC_DEFUN([ROSE_SUPPORT_ATERM], [
  AC_BEFORE([$0], [ROSE_SUPPORT_ATERM_FRONTEND])

  ROSE_CONFIGURE_SECTION([Checking ATERM library])

  #============================================================================
  # --with-aterm=/path/to/aterm-trunk/aterm.dist/
  #============================================================================
  ROSE_ARG_WITH(
    [aterm],
    [for an installation of the Aterm library],
    [specify the path to the ATerm installation],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_ATERM" != "xno"; then
    ATERM_INSTALL_PATH="$ROSE_WITH_ATERM"
    ATERM_BIN_PATH="${ROSE_WITH_ATERM}/bin"
    ATERM_LIBRARY_PATH="${ROSE_WITH_ATERM}/lib"
  else
    ATERM_INSTALL_PATH=
    ATERM_BIN_PATH=
    ATERM_LIBRARY_PATH=
  fi

  #============================================================================
  # --with-aterm-bin=/path/to/aterm-trunk/aterm.dist/bin/
  #============================================================================
  ROSE_ARG_WITH(
    [aterm-bin],
    [if the ATERM compiler bin directory was specified],
    [use this ATERM bin directory],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_ATERM_BIN" != "xno"; then
      ATERM_BIN_PATH="$ROSE_WITH_ATERM_BIN"
  fi

  #============================================================================
  # --with-aterm-lib=/path/to/aterm-trunk/aterm.dist/lib/
  #============================================================================
  ROSE_ARG_WITH(
    [aterm-lib],
    [if the ATERM compiler library directory was specified],
    [use this ATERM library directory],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_ATERM_LIB" != "xno"; then
      ATERM_LIBRARY_PATH="$ROSE_WITH_ATERM_LIB"
  fi

# DQ (3/23/2013): debugging...
AC_MSG_NOTICE([ATERM_INSTALL_PATH = "$ATERM_INSTALL_PATH"])
AC_MSG_NOTICE([ATERM_BIN_PATH     = "$ATERM_BIN_PATH"])
AC_MSG_NOTICE([ATERM_LIBRARY_PATH = "$ATERM_LIBRARY_PATH"])

  #============================================================================
  # Validate installation (if provided)
  #============================================================================
  if test "x$ATERM_BIN_PATH" != "x"; then
      #======================================
      # atermc - Check for the ATERM compiler
      #======================================
      AC_CHECK_FILE(
          [${ATERM_BIN_PATH}],
          [],
          [ROSE_MSG_ERROR([bin directory is missing, can't use this ATERM installation])])

      #======================================
      # Using atrmannos to check version of ATERM library
      #======================================
      # AC_MSG_CHECKING([for the Aterm version])
      # ATERM_VERSION="`${ATERM_BIN_PATH}/atrmannos -v | grep 'atrmannos - Version:' | awk '{print [$][3]}'`"
      # exit_status=$?
      # pipe_status=[${PIPESTATUS[0]}]
      # if test ${exit_status} -ne 0 || test ${pipe_status} -ne 0; then
      #     ROSE_MSG_ERROR([Could not determine your ATERM version])
      # else
      #     AC_MSG_RESULT([$ATERM_VERSION])
      # fi
  fi

  #============================================================================
  # Set Automake Conditionals and Substitutions
  #============================================================================
  AM_CONDITIONAL(ROSE_WITH_ATERM, [test "x$ATERM_BIN_PATH" != "x" && test "x$ATERM_LIBRARY_PATH" != "x"])
  AM_CONDITIONAL(ROSE_WITH_ATERM_BIN, [test "x$ATERM_BIN_PATH" != "x"])
  AM_CONDITIONAL(ROSE_WITH_ATERM_LIB, [test "x$ATERM_LIBRARY_PATH" != "x"])
  AM_CONDITIONAL(ROSE_BUILD_ATERM_SUPPORT, [test "x$ATERM_LIBRARY_PATH" != "x"])

  AC_SUBST(ATERM_INSTALL_PATH)
  AC_SUBST(ATERM_BIN_PATH)
  AC_SUBST(ATERM_LIBRARY_PATH)
  # AC_SUBST(ATERM_VERSION)

  #============================================================================
  # Set CPP #defines
  #============================================================================
  AC_DEFINE_UNQUOTED(
    ATERM_INSTALL_PATH,
    ["$ATERM_INSTALL_PATH"],
    [Absolute path of the ATERM installation])
  AC_DEFINE_UNQUOTED(
    ATERM_BIN_PATH,
    ["$ATERM_BIN_PATH"],
    [Absolute path of the ATERM installation bin directory])
  AC_DEFINE_UNQUOTED(
    ATERM_LIBRARY_PATH,
    ["$ATERM_LIBRARY_PATH"],
    [Absolute path of the ATERM installation lib directory])
  # AC_DEFINE_UNQUOTED(
  #  ATERM_VERSION,
  #  ["$ATERM_VERSION"],
  #  [Version number of the user-specified ATERM compiler])


# DQ (10/4/2014): Adding macro for rose_config.h so we know when ATerms are supported.
# usingAterm = 'test "x$ATERM_LIBRARY_PATH" != "x" && echo "true"'
# AC_DEFINE(USE_ROSE_ATERM_SUPPORT,[$usingAterm],[Controls use of ROSE support for ATerm Library.])
if test "x$ATERM_LIBRARY_PATH" != "x"; then
   AC_DEFINE([USE_ROSE_ATERM_SUPPORT], [1], [Controls use of ROSE support for ATerm Library.])
fi

# End macro ROSE_SUPPORT_ATERM.
])
m4trace:config/support-backend-x10.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_X10_BACKEND], [
      AC_SUBST(BACKEND_X10_COMPILER)
      AC_DEFINE_UNQUOTED(
          [BACKEND_X10_COMPILER_NAME_WITH_PATH],
          [""],
          [Name of backend X10 compiler, including path])
])
m4trace:config/support-bddbddb.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_BDDBDDB], [
# Begin macro ROSE_SUPPORT_BDDBDDB.

AC_REQUIRE([ROSE_SUPPORT_PYTHON])

# Inclusion of test for bddbddb and it's location.

AC_MSG_CHECKING(for bddbddb)
AC_ARG_WITH(bddbddb,
[  --with-bddbddb       Specify the use of bddbddb (distributed internally)],
,
if test ! "$with_bddbddb" ; then
  with_bddbddb=no
fi
)

if test "$with_bddbddb" = no; then
  # If bddbddb is not specified, then don't use it.
  AC_MSG_NOTICE([skipping use of bddbddb])
else
    if test -n "$python_path";
    then
        # We currently ignore the path, but it might be used
        # later if BDDBDDB is installed external to ROSE.
        bddbddb_path=$with_bddbddb
        AC_DEFINE([USE_ROSE_BDDBDDB_SUPPORT],1,[Controls use of ROSE support for bddbddb (Binary decision diagrams (BDD) BDD-Based Deductive DataBase.])
    else
        AC_MSG_ERROR([--with-bddbddb was passed but Python 2.4 or above was not found; try setting the --with-python option to the location of a good python interpreter: --with-python=/path/to/python/bin/python])
    fi

fi

AC_SUBST(bddbddb_path)

# End macro ROSE_SUPPORT_BDDBDDB.

])
m4trace:config/support-binary.m4:32: -1- AC_DEFUN([ROSE_SUPPORT_BINARY], [
ROSE_CONFIGURE_SECTION([Checking binary analysis])

dnl  ==================================================================================
dnl   The following tests check prerequisites for binary analysis in librose.
dnl  ==================================================================================

# Boost iostreams library is required
AX_BOOST_IOSTREAMS
if test "$support_binaries_frontend" == "yes" -a "$link_iostreams" != "yes"; then
    binary_support_requires(
        [the Boost iostreams library],
        [could not link against libboost_iostreams],
        [To install Boost's iostreams library, follow the directions at
***           http://www.boost.org. It is fairly common to need the
***           "-sNO_COMPRESSION=1" switch when configuring boost.])
fi

# Boost serialization library is optional -- used for save/restore of binary data structures
# The headers must always be present.
AX_BOOST_SERIALIZATION


dnl  ==================================================================================
dnl   Check for optional packages that binary analysis in librose can use if available
dnl  ==================================================================================

dnl The libmagic library allows us to check for magic numbers in memory without having to copy the memory
dnl out to a temporary file and run the Unix file(1) command on it, which is way, way slower when we have
dnl to test for lots of magic numbers.  Used by src/midend/binaryAnalyses/BinaryMagic.h. [2015-01]
ROSE_SUPPORT_LIBMAGIC




dnl  Some of the following need to be reevaluated to see whether they're actually used. [Matzke 2015-01-21]


# Call supporting macro to Yices Satisfiability Modulo Theories (SMT) Solver
ROSE_SUPPORT_YICES

# Is the C++ libyaml available? [https://code.google.com/p/yaml-cpp]
ROSE_SUPPORT_YAML

# Is the GNU readline library available?  This is used by some projects to allow users to edit inputs. E.g., simulator2
# has an interactive debugger that uses readline to read debugger commands.
ROSE_SUPPORT_LIBREADLINE

# Call supporting macro to check for "--enable-i386" switch
ROSE_SUPPORT_I386

# Call supporting macro to internal Satisfiability (SAT) Solver
ROSE_SUPPORT_SAT

# Setup Automake conditional in --- (not yet ready for use)
AC_MSG_NOTICE([with_sat = "$with_sat"])
AM_CONDITIONAL(ROSE_USE_SAT,test ! "$with_sat" = no)

# Call supporting macro to Intel Pin Dynamic Instrumentation
ROSE_SUPPORT_INTEL_PIN

# Setup Automake conditional in --- (not yet distributed)
AM_CONDITIONAL(ROSE_USE_INTEL_PIN,test ! "$with_IntelPin" = no)

# Call supporting macro to DWARF (libdwarf), which depends on libelf
ROSE_SUPPORT_ELF
ROSE_SUPPORT_DWARF

# Xen and Ether [RPM 2009-10-28]
AC_ARG_WITH(ether,
        [  --with-ether=PATH   prefix of Xen/Ether installation
                      Xen is a hypervisor for running virtual machines (http://www.xen.org)
                      Ether is a layer on top of Xen for accessing Windows XP OS-level data
                      structures (http://ether.gtisc.gatech.edu)],
        [],
        [with_ether=no])
AS_IF([test "$with_ether" != no],
        [AC_DEFINE(ROSE_USE_ETHER, 1, [Defined if Ether from Georgia Tech is available.])
         if test "$with_ether" = "yes"; then ETHER_PREFIX=/usr; else ETHER_PREFIX="$with_ether"; fi])
AC_SUBST(ETHER_PREFIX)
AM_CONDITIONAL(ROSE_USE_ETHER,test "$with_ether" != "no")

# libgcrypt is used for computing SHA1 hashes of binary basic block semantics, among other things. [RPM 2010-05-12]
ROSE_SUPPORT_LIBGCRYPT

dnl http://dlib.net
AC_ARG_WITH(
    [dlib],
    AS_HELP_STRING(
        [--with-dlib=PREFIX],
        [Use the optional dlib support library available from http://dlib.net. The PREFIX, if specified, should be the
         prefix used to install dlib, such as "/usr/local".  The default is the empty prefix, in which case the headers
         and library must be installed in a place where they will be found. Saying "no" for the prefix is the same as
         saying "--without-dlib".]),
        [],
        [with_dlib=no])
AS_IF([test "$with_dlib" != "no"],
        [AC_DEFINE(ROSE_HAVE_DLIB, 1, [Defined if dlib is available.])
         if test "$with_dlib" = "yes"; then DLIB_PREFIX=/usr; else DLIB_PREFIX="$with_dlib"; fi])
AC_SUBST(DLIB_PREFIX)
AM_CONDITIONAL(ROSE_HAVE_DLIB, test "$with_dlib" != "no")

# Check for POSIX threads.  Just because we have POSIX threads does not necessarily mean that the user wants ROSE
# to be compiled with multi-thread support.  See also "--with-boost-thread" configure switch.
AC_CHECK_HEADERS(pthread.h)

# Check for the __thread keyword.  This type qualifier creates objects that are thread local.
AC_MSG_CHECKING([for thread local storage type qualifier])

# These headers and types are needed by projects/simulator2
AC_CHECK_HEADERS([asm/ldt.h elf.h linux/types.h linux/dirent.h linux/unistd.h])
AC_CHECK_HEADERS([sys/types.h sys/mman.h sys/stat.h sys/uio.h sys/wait.h sys/utsname.h sys/ioctl.h sys/sysinfo.h sys/socket.h])
AC_CHECK_HEADERS([termios.h grp.h syscall.h sys/personality.h])
AC_CHECK_FUNCS(pipe2)
AC_CHECK_TYPE(user_desc,
              AC_DEFINE(HAVE_USER_DESC, [], [Defined if the user_desc type is declared in <asm/ldt.h>]),
              [],
              [#include <asm/ldt.h>])

# Check whether PostgreSQL is supported
ROSE_SUPPORT_LIBPQXX

# Look for an SMT solver
TEST_SMT_SOLVER=""
AC_ARG_WITH(smt-solver,
[  --with-smt-solver=PATH       Specify the path to an SMT-LIB compatible SMT solver.  Used only for testing.],
if test "x$with_smt_solver" = "xcheck" -o "x$with_smt_solver" = "xyes"; then
  AC_ERROR([--with-smt-solver cannot be auto-detected])
fi
if test "x$with_smt_solver" != "xno"; then
  TEST_SMT_SOLVER="$with_smt_solver"
fi,
)

AM_CONDITIONAL(ROSE_USE_TEST_SMT_SOLVER,test ! "$TEST_SMT_SOLVER" = "")
AC_SUBST(TEST_SMT_SOLVER)

# Whether the Capstone disassembler is available
ROSE_SUPPORT_CAPSTONE

dnl A blank line to separate binary analysis from some miscellaneous tests in support-rose.m4 that don't have a heading.
AC_MSG_NOTICE([all seems good for binary analysis if it's enabled.
])

])
m4trace:config/support-bison.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_BISON], [
    ROSE_CONFIGURE_SECTION([Checking Bison])

  # Find the Bison program
    AX_WITH_PROG(BISON,bison)

  # Check the Bison version
    AX_PROG_BISON_VERSION([2.4.1], [AC_MSG_NOTICE([[Bison version >= 2.4.1 has been detected]])],
                                   [AC_MSG_ERROR([[Bison >= 2.4.1 required for building ROSE]])])
])
m4trace:config/support-blacklist.m4:4: -1- AC_DEFUN([ROSE_SUPPORT_BLACKLIST], [
    prohibited=

    # -----------------------
    #    Versions we HAVE
    # -----------------------

    # Debugging blacklists... Spit out the values that will be needed by users when they're
    # trying to figure out why their configuration is blacklisted. These are the versions they
    # HAVE. The versions that are PROHIBITED will be emitted later in this function.  The version
    # number variables should be set wherever we're detecting the dependency, not here.
    ROSE_SUPPORT_SUMMARY

    # -----------------------
    #  Versions we PROHIBIT
    # -----------------------

    ROSE_CONFIGURE_SECTION([Checking blacklisted configurations])
    while true; do
        # Boost 1.54 has numerous bugs related to threads. These manifest themselves as compile errors in
        # the first ROSE source that happens to include boost thread support, usually something in the
        # src/util/Sawyer directory.
        if test "$rose_boost_version" = 105400 -a \
                "$FRONTEND_CXX_COMPILER_VENDOR" = "gnu" -a \
                "$FRONTEND_CXX_VERSION_MAJOR" = 4 -a \
                "$FRONTEND_CXX_VERSION_MINOR" -ge 8; then
            prohibited="boost 1.54 with gcc >= 4.8 and gcc < 5"
            break
        fi

        # Boost-1.61 through 1.63 serialization cause link errors when compiled by Intel compilers. Binary analysis
        # is the only thing that uses serialization at this time.
        if test "$rose_boost_version" -ge 106100 -a "$rose_boost_version" -le 106300 -a \
                "$FRONTEND_CXX_COMPILER_VENDOR" = "intel" -a \
                "$support_binaries_frontend" = "yes"; then
            prohibited="binary analysis enabled with boost 1.62 with Intel compiler"
            break
        fi

        # Boost-1.65.x have segmentation faults in the destructors of some serialization static objects within the Boost
        # library. I thought this was just for GCC 4 and 5, but after enabling wider testing, we're also getting the
        # segmentation faults with GCC 7 and 8. Therefore, this version of boost is blacklisted if binary analysis
        # support is enabled.
        if test "$rose_boost_version" = 106500 -o "$rose_boost_version" = 106501; then
            if test "$support_binaries_frontend" = yes -a "$FRONTEND_CXX_COMPILER_VENDOR" = gnu ; then
                prohibited="binary analysis enabled with boost 1.65 with GCC compiler"
                break
            fi
        fi

        # Boost-1.68.0 has serialization bugs reported by numerous other projects. Within ROSE, 1.68.0 fails the
        # basic boost serialization tests that we've written. These tests don't depend on ROSE, rather link only
        # with boost.
        if test "$rose_boost_version" = 106800; then
            prohibited="boost-1.68.0"
            break
        fi

        # Boost versions prior to 1.68.0 do not work with C++17 and GNU++17 compilers. They experience compiler
        # errors when a program tries to use the two-argument version of boost::lock, which is needed by ROSE for
        # thread synchronization.
        if test "$rose_boost_version" -le 106800; then
            if test "$HOST_CXX_LANGUAGE" = "c++17" -o "$HOST_CXX_LANGUAGE" = "gnu++17"; then
                prohibited="boost-$rose_boost_version with $HOST_CXX_LANGUAGE (problems with boost::lock)"
                break
            fi
        fi

        # Z3 4.7.1 is blacklisted because it introduced an API change without any easy way to detect the change
        # at compile time.
        if test "$Z3_VERSION" = "4.7.1.0"; then
            prohibited="z3-4.7.1"
            break
        fi

        # Add more blacklist items right above this line with comments like the others. If you detect
        # a combination that's blacklisted, then set the "prohibited" string to say what is blacklisted
        # and then break out of the loop to avoid testing other combinations.
        : whatever tests you like

        # If we made it this far then this combination is not blacklisted
        prohibited=
        break
    done

    # -----------------------
    #    Output results
    # -----------------------
    AC_ARG_ENABLE([blacklist],
        AS_HELP_STRING([--disable-blacklist],
                       [Disabling the blacklist check causes blacklist related messages to become non-fatal.
                        The default --enable-blacklist, means trying to use a blacklisted configuration is fatal.]),
        [should_die="$enableval"], [should_die=yes])

    if test "$prohibited" != ""; then
        if test "$should_die" != no; then
            AC_MSG_FAILURE([blacklisted: $prohibited
                The above combination of ROSE software dependencies is blacklisted. The ROSE
                team occassionally blacklists combinations that are known to cause failures in
                perhaps subtle ways. If you would like to continue with this configuration at your
                own risk, then reconfigure with --disable-blacklist. (This message comes from
                config/support-blacklist.m4, which also contains more information about the reason
                for blacklisting.)])
        else
            AC_MSG_WARN([blacklisted: $prohibited])
            AC_MSG_WARN([    continuing with unsafe configuration at user's request (--disable-blacklist)])
        fi
    fi
])
m4trace:config/support-boost.m4:32: -1- AC_DEFUN([ROSE_SUPPORT_BOOST], [
  ROSE_CONFIGURE_SECTION([Checking Boost])


  #============================================================================
  # --enable-boost-version-check
  #============================================================================
  ROSE_ARG_ENABLE(
    [boost-version-check],
    [if we should validate your Boost version],
    [validate version of Boost C++ libraries (default: yes)],
    [yes]
  )

AX_BOOST_BASE([1.51.0], [], [echo "Boost 1.51.0 - 1.61.0 except 1.54 is required for ROSE" 1>&2; exit 1])

dnl Hack using an internal variable from AX_BOOST_BASE -- this path should only
dnl be used to set --with-boost in distcheck.
AC_SUBST(ac_boost_path)

BOOST_VERSION_HEADER="${ac_boost_path}/include/boost/version.hpp"

# Liao, 2019/3/12. Check file existence before calling grep
if test -f "$BOOST_VERSION_HEADER" ; then
  rose_boost_version=`grep "#define BOOST_VERSION " ${ac_boost_path}/include/boost/version.hpp | cut -d" " -f 3 | tr -d '\r'`
else
  ROSE_MSG_ERROR([Unable to find $ac_boost_path/include/boost/version.hpp . Please specify the right boost installation path with --with-boost=/path/to/boost])
fi

AC_MSG_NOTICE([rose_boost_version = '$rose_boost_version'])
ROSE_CONFIG_TOKEN="$ROSE_CONFIG_TOKEN boost-$rose_boost_version"

if test "x$rose_boost_version" = "x"; then
  ROSE_MSG_ERROR([Unable to compute the version of your Boost C++ libraries from '$ac_boost_path'/include/boost/version.hpp . Please make sure the file exists or specify the right path with --with-boost])
fi

# DQ (10/22/2015): Added more tests (1.55 through 1.62)
# Define macros for conditional compilation of parts of ROSE based on version of boost
# (this ONLY happens for the tests in tests/nonsmoke/functional/CompilerOptionsTests/testWave)
#
# !! We don't want conditional compilation or code in ROSE based on version numbers of Boost. !!
#
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_35, test "$rose_boost_version" = "103500" -o "$_version" = "1.35")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_36, test "$rose_boost_version" = "103600" -o "$_version" = "1.36")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_37, test "$rose_boost_version" = "103700" -o "$_version" = "1.37")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_38, test "$rose_boost_version" = "103800" -o "$_version" = "1.38")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_39, test "$rose_boost_version" = "103900" -o "$_version" = "1.39")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_40, test "$rose_boost_version" = "104000" -o "$_version" = "1.40")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_41, test "$rose_boost_version" = "104100" -o "$_version" = "1.41")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_42, test "$rose_boost_version" = "104200" -o "$_version" = "1.42")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_43, test "$rose_boost_version" = "104300" -o "$_version" = "1.43")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_44, test "$rose_boost_version" = "104400" -o "$_version" = "1.44")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_45, test "$rose_boost_version" = "104500" -o "$_version" = "1.45")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_46, test "$rose_boost_version" = "104600" -o "$_version" = "1.46")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_46, test "$rose_boost_version" = "104601" -o "$_version" = "1.46")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_47, test "$rose_boost_version" = "104700" -o "$_version" = "1.47")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_48, test "$rose_boost_version" = "104800" -o "$_version" = "1.48")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_49, test "$rose_boost_version" = "104900" -o "$_version" = "1.49")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_50, test "$rose_boost_version" = "105000" -o "$_version" = "1.50")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_51, test "$rose_boost_version" = "105100" -o "$_version" = "1.51")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_52, test "$rose_boost_version" = "105200" -o "$_version" = "1.52")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_53, test "$rose_boost_version" = "105300" -o "$_version" = "1.53")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_54, test "$rose_boost_version" = "105400" -o "$_version" = "1.54")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_55, test "$rose_boost_version" = "105500" -o "$_version" = "1.55")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_56, test "$rose_boost_version" = "105600" -o "$_version" = "1.56")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_57, test "$rose_boost_version" = "105700" -o "$_version" = "1.57")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_58, test "$rose_boost_version" = "105800" -o "$_version" = "1.58")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_59, test "$rose_boost_version" = "105900" -o "$_version" = "1.59")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_60, test "$rose_boost_version" = "106000" -o "$_version" = "1.60")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_61, test "$rose_boost_version" = "106100" -o "$_version" = "1.61")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_62, test "$rose_boost_version" = "106200" -o "$_version" = "1.62")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_63, test "$rose_boost_version" = "106300" -o "$_version" = "1.63")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_64, test "$rose_boost_version" = "106400" -o "$_version" = "1.64")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_65, test "$rose_boost_version" = "106500" -o "$_version" = "1.65")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_66, test "$rose_boost_version" = "106600" -o "$_version" = "1.66")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_67, test "$rose_boost_version" = "106700" -o "$_version" = "1.67")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_68, test "$rose_boost_version" = "106800" -o "$_version" = "1.68")
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_1_69, test "$rose_boost_version" = "106900" -o "$_version" = "1.69")

# DQ (10/22/2015): Added more tests (1.55 through 1.62)
# TOO1 (3/16/2015):
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_35, test $rose_boost_version -ge 103500)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_36, test $rose_boost_version -ge 103600)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_37, test $rose_boost_version -ge 103700)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_38, test $rose_boost_version -ge 103800)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_39, test $rose_boost_version -ge 103900)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_40, test $rose_boost_version -ge 104000)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_41, test $rose_boost_version -ge 104100)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_42, test $rose_boost_version -ge 104200)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_43, test $rose_boost_version -ge 104300)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_44, test $rose_boost_version -ge 104400)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_45, test $rose_boost_version -ge 104500)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_46, test $rose_boost_version -ge 104600)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_46, test $rose_boost_version -ge 104601)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_47, test $rose_boost_version -ge 104700)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_48, test $rose_boost_version -ge 104800)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_49, test $rose_boost_version -ge 104900)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_50, test $rose_boost_version -ge 105000)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_51, test $rose_boost_version -ge 105100)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_52, test $rose_boost_version -ge 105200)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_53, test $rose_boost_version -ge 105300)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_54, test $rose_boost_version -ge 105400)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_55, test $rose_boost_version -ge 105500)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_56, test $rose_boost_version -ge 105600)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_57, test $rose_boost_version -ge 105700)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_58, test $rose_boost_version -ge 105800)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_59, test $rose_boost_version -ge 105900)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_60, test $rose_boost_version -ge 106000)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_61, test $rose_boost_version -ge 106100)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_62, test $rose_boost_version -ge 106200)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_63, test $rose_boost_version -ge 106300)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_64, test $rose_boost_version -ge 106400)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_65, test $rose_boost_version -ge 106500)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_66, test $rose_boost_version -ge 106600)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_67, test $rose_boost_version -ge 106700)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_68, test $rose_boost_version -ge 106800)
AM_CONDITIONAL(ROSE_USING_BOOST_VERSION_GE_1_69, test $rose_boost_version -ge 106900)

# DQ (10/22/2015): Added acceptable case 1.54.
# DQ (8/2/2016): Added acceptable case 1.55 through 1.61.
# [Matzke, 2016-09-19] Acceptable cases now 1.49-1.53, 1.55-1.60 decided at Jun 17 meeting, but leaving in 1.61
# [Matzke, 2019-01-31] Acceptable versions no 1.57-1.69. We decided to support only latest 10 versions from now on.
boost_minimum_version=105700

if test "$rose_boost_version" -lt "$boost_minimum_version"; then
   if test "$ROSE_ENABLE_BOOST_VERSION_CHECK" = "yes"; then
       AC_MSG_FAILURE([boost version $rose_boost_version is unsupported (need $boost_minimum_version or later)])
   else      
       AC_MSG_WARN([boost version $rose_boost_version is unsupported (need $boost_minimum_version or later)])
   fi
else
   AC_MSG_NOTICE([reasonable version of Boost found: $rose_boost_version])
fi

# DQ (12/22/2008): Fix boost configure to handle OS with older version of Boost that will
# not work with ROSE, and use the newer version specified by the user on the configure line.
AC_MSG_NOTICE([in ROSE/configure: ac_boost_path = "$ac_boost_path"])
#AC_DEFINE([ROSE_BOOST_PATH],"$ac_boost_path",[Location of Boost specified on configure line.])
AC_DEFINE_UNQUOTED([ROSE_BOOST_PATH],"$ac_boost_path",[Location (unquoted) of Boost specified on configure line.])
#AC_DEFINE([ROSE_WAVE_PATH],"$ac_boost_path/wave",[Location of Wave specified on configure line.])
AC_DEFINE_UNQUOTED([ROSE_WAVE_PATH],"$ac_boost_path/wave",[Location (unquoted) of Wave specified on configure line.])

AC_DEFINE_UNQUOTED([ROSE_BOOST_VERSION], $rose_boost_version, [Version of Boost specified on configure line.])

AX_BOOST_SYSTEM
AX_BOOST_THREAD
AX_BOOST_DATE_TIME
AX_BOOST_CHRONO
AX_BOOST_RANDOM dnl needed by Wt and other libraries that use boost
AX_BOOST_REGEX
AX_BOOST_PROGRAM_OPTIONS
#AX_BOOST_SERIALIZATION
#AX_BOOST_ASIO
#AX_BOOST_SIGNALS
#AX_BOOST_TEST_EXEC_MONITOR
AX_BOOST_FILESYSTEM
AX_BOOST_WAVE
#AX_BOOST_PYTHON

# AM_CONDITIONAL(ROSE_USE_BOOST_WAVE,test "$with_wave" = true)

# End macro ROSE_SUPPORT_BOOST.
])
m4trace:config/support-capstone.m4:2: -1- AC_DEFUN([ROSE_SUPPORT_CAPSTONE], [

    dnl Parse configure command-line switches
    AC_ARG_WITH([capstone],
	        [AC_HELP_STRING([[[[--with-capstone[=PREFIX]]]]], dnl yes, we really need 4 quotes (autoconf 2.6.1)!
		                [Use libcapstone available from http://www.capstone-engine.org for free.])],
		[capstone=$withval],
		[capstone=no])

    ROSE_HAVE_CAPSTONE=
    ROSE_CAPSTONE_PREFIX=

    # Save some variables to be restored later
    old_LIBS="$LIBS"
    old_CPPFLAGS="$CPPFLAGS"

    # Does the user tell us where to find it?
    if test "$capstone" = yes; then
	LIBS="$LIBS -lcapstone"
    elif test -n "$capstone" -a "$capstone" != no; then
        ROSE_CAPSTONE_PREFIX="$capstone"
	LIBS="$LIBS -L$ROSE_CAPSTONE_PREFIX/lib -lcapstone"
	CPPFLAGS="-I$ROSE_CAPSTONE_PREFIX/include"
    fi

    # Search for the library
    if test "$capstone" = no; then
        AC_MSG_NOTICE([skipping check for capstone])
    else
        AC_CHECKING([for capstone])
	AC_LANG_PUSH([C++])
	AC_LINK_IFELSE([
	    AC_LANG_SOURCE([
		    #include <capstone/capstone.h>
		    int main() {
		    	csh handle;
		        cs_open(CS_ARCH_X86, CS_MODE_64, &handle);
		    }
	    ])],
	    [
		AC_MSG_RESULT(yes)
		ROSE_HAVE_CAPSTONE=yes
		AC_DEFINE(ROSE_HAVE_CAPSTONE, [], [Defined if the Capstone library is available])
	    ],
	    [
		AC_MSG_RESULT(no)
		LIBS="$old_LIBS"
		CPPFLAGS="$old_CPPFLAGS"
	    ])
	AC_LANG_POP([C++])
    fi

    dnl Sanity check: if the user told us to use it then we must find it
    if test "$capstone" != no -a "$capstone" != default -a -z "$ROSE_HAVE_CAPSTONE"; then
        AC_MSG_ERROR([did not find Capstone library but --with-capstone was specified])
    fi

    # Restore variables
    LIBS="$old_LIBS"
    CPPFLAGS="$old_CPPFLAGS"

    # Change ROSE_HAVE_CAPSTONE to be "yes" or the prefix if it is present; or empty if not present
    if test -n "$ROSE_HAVE_CAPSTONE" -a -n "$ROSE_CAPSTONE_PREFIX"; then
        ROSE_HAVE_CAPSTONE="$ROSE_CAPSTONE_PREFIX"
    fi

    dnl Results
    dnl   ROSE_CAPSTONE_PREFIX -- name of the directory where Capstone is installed
    dnl   ROSE_HAVE_CAPSTONE   -- defined if the Capstone library is available
    AC_SUBST(ROSE_CAPSTONE_PREFIX)
    AM_CONDITIONAL(ROSE_HAVE_CAPSTONE, [test -n "$ROSE_HAVE_CAPSTONE"])
])
m4trace:config/support-clang.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_CLANG], [

ROSE_ARG_ENABLE(
  [clang-frontend],
  [if the Clang frontend should be enabled],
  [whether or not we will use Clang as a frontend for C/C++-like languages],
  []
)

AM_CONDITIONAL(ROSE_USE_CLANG_FRONTEND, [test "x$enable_clang_frontend" = xyes])
if test "x$CONFIG_HAS_ROSE_ENABLE_CLANG_FRONTEND" = "xyes"; then
  AC_PATH_TOOL([LLVM_CONFIG], [llvm-config])
  
  if test -e "$LLVM_CONFIG"; then
     AC_MSG_CHECKING([for Clang include path])
         if test -z "$CLANG_CXXFLAGS"; then
             # Use "--cppflags" for cpp macros (does not want cxxflags because O3, etc)
             llvm_include_path=`$LLVM_CONFIG --cppflags`
             if test -n "${llvm_include_path}"; then
                 llvm_include_path="$llvm_include_path"
             fi
             CLANG_CXXFLAGS=$llvm_include_path
         fi
     AC_MSG_RESULT([$CLANG_CXXFLAGS])
     AC_SUBST([CLANG_CXXFLAGS])
     
     AC_MSG_CHECKING([for Clang ld flags])
         if test -z "$CLANG_LDFLAGS"; then
             llvm_ldflags="`$LLVM_CONFIG --ldflags` -lclangFrontendTool -lclangStaticAnalyzerFrontend -lclangStaticAnalyzerCheckers -lclangStaticAnalyzerCore -lclangIndex -lclangFrontend -lclangCodeGen  -lclangARCMigrate -lclangRewrite -lclangSerialization -lclangDriver -lclangParse -lclangSema -lclangAnalysis -lclangAST -lclangLex -lclangBasic -lclangEdit -lclangLex "
             llvm_ldflags+=`$LLVM_CONFIG --libs engine ipo bitwriter linker asmparser instrumentation option frontendopenmp`
             if test -n "${llvm_ldflags}"; then
                 llvm_ldflags="$llvm_ldflags"
             fi
             CLANG_LDFLAGS=$llvm_ldflags
         fi
     AC_MSG_RESULT([$CLANG_LDFLAGS])
     AC_SUBST([CLANG_LDFLAGS])
     
     CLANG_LIBDIR=`$LLVM_CONFIG --libdir`
     AC_SUBST([CLANG_LIBDIR])

     AC_DEFINE([ROSE_USE_CLANG_FRONTEND], [], [Use Clang for parsing C/C++-like languages])
  else
     ROSE_MSG_ERROR([requested Clang frontend, but llvm-config was not found])
  fi
fi

AM_CONDITIONAL(ROSE_USE_CLANG_FRONTEND, [test "x$CONFIG_HAS_ROSE_ENABLE_CLANG_FRONTEND" = "xyes"])

])
m4trace:config/support-clang.m4:53: -1- AC_DEFUN([INSTALL_CLANG_SPECIFIC_HEADERS], [
mkdir -p ./include-staging/clang
cp ${srcdir}/src/frontend/CxxFrontend/Clang/clang-builtin-c.h ./include-staging/clang
cp ${srcdir}/src/frontend/CxxFrontend/Clang/clang-builtin-cpp.hpp ./include-staging/clang
cp ${srcdir}/src/frontend/CxxFrontend/Clang/clang-builtin-cuda.hpp ./include-staging/clang
cp ${srcdir}/src/frontend/CxxFrontend/Clang/clang-builtin-opencl.h ./include-staging/clang

])
m4trace:config/support-cobol.m4:29: -1- AC_DEFUN([ROSE_SUPPORT_COBOL], [
  AC_BEFORE([$0], [ROSE_SUPPORT_COBOL_FRONTEND])

  ROSE_CONFIGURE_SECTION([Checking GnuCOBOL parse-tree library])

  #============================================================================
  # --with-cobpt=/path/to/cobpt-install/
  #============================================================================
  ROSE_ARG_WITH(
    [cobpt],
    [for an installation of the GnuCobol parse-tree library],
    [support the GnuCobol cobpt library],
    []
  )

  if test "x$CONFIG_HAS_ROSE_WITH_COBPT" != "xno"; then
    COBPT_INSTALL_PATH="$ROSE_WITH_COBPT"
    COBPT_LIBRARY_PATH="${ROSE_WITH_COBPT}/lib"
  else
    COBPT_INSTALL_PATH=
    COBPT_LIBRARY_PATH=
  fi

  AC_MSG_NOTICE([COBPT_INSTALL_PATH = "$COBPT_INSTALL_PATH"])
  AC_MSG_NOTICE([COBPT_LIBRARY_PATH = "$COBPT_LIBRARY_PATH"])

  #============================================================================
  # Validate installation (if provided)
  #============================================================================
  if test "x$COBPT_LIB_PATH" != "x"; then
      #======================================
      #  - Check for the GnuCOBOL parse-tree library
      #======================================
      AC_CHECK_FILE(
          [${COBPT_LIB_PATH}],
          [],
          [ROSE_MSG_ERROR([lib directory is missing, can't use this GnuCOBOL parse-tree installation])])
  fi

  #============================================================================
  # Set Automake Conditionals and Substitutions
  #============================================================================
  AM_CONDITIONAL(ROSE_WITH_GNU_COBOL_PT_LIB, [test "x$COBPT_INSTALL_PATH" != "x" && test "x$COBPT_LIBRARY_PATH" != "x"])

  AC_SUBST(COBPT_INSTALL_PATH)
  AC_SUBST(COBPT_LIBRARY_PATH)

  #============================================================================
  # Set CPP #defines
  #============================================================================
  AC_DEFINE_UNQUOTED(
    COBPT_INSTALL_PATH,
    ["$COBPT_INSTALL_PATH"],
    [Absolute path of the COBPT installation])
  AC_DEFINE_UNQUOTED(
    COBPT_LIBRARY_PATH,
    ["$COBPT_LIBRARY_PATH"],
    [Absolute path of the COBPT installation lib directory])

if test "x$COBPT_LIBRARY_PATH" != "x"; then
   AC_DEFINE([USE_ROSE_GNU_COBOL_PT_SUPPORT], [1], [Controls use of ROSE support for GnuCOBOL parse-tree library.])
fi

# End macro ROSE_SUPPORT_COBOL.
])
m4trace:config/support-compass2.m4:25: -1- AC_DEFUN([ROSE_SUPPORT_COMPASS2], [
  AC_MSG_CHECKING([if the Compass static analysis tool should be built])

  WANT_COMPASS="no"
  AC_ARG_ENABLE([compass2],
      AC_HELP_STRING(
          [--enable-compass2],
          [build the Compass2 static analysis tool under projects/]
      ),
      [
        if test "x$enableval" = "xno"; then
            WANT_COMPASS="no"
        elif test "x$enableval" = "xyes"; then
            WANT_COMPASS="yes"
        else
            AC_MSG_FAILURE([invalid value $enableval for --enable-compass2])
        fi
      ],
      [WANT_COMPASS="no"]
  )
  AC_MSG_RESULT([$WANT_COMPASS])

  dnl
  dnl Xerces C++ XML library
  dnl
  if test "x$WANT_COMPASS" = "xyes"; then
    dnl Don't need pthreads
    AC_DEFUN([AX_PTHREAD], [])
    AX_LIB_XERCES([3.1.1])
    if test "x$HAVE_XERCES" = "xno"; then
      AC_MSG_FAILURE([compass requires the Xerces C++ XML library])
    fi
  fi

  AM_CONDITIONAL(ROSE_BUILD_COMPASS2, [test "x$HAVE_XERCES" = "xyes"])

  ABS_COMPASS2_XML_SRCDIR="$(cd "$srcdir" && pwd)"/projects/compass2/share/xml
  AC_SUBST(ABS_COMPASS2_XML_SRCDIR)

# End macro ROSE_SUPPORT_COMPASS.
])
m4trace:config/support-compiler-features.m4:13: -1- AC_DEFUN([ROSE_COMPILER_FEATURES], [
    quad="$($ac_abs_confdir/scripts/detect-compiler-characteristics --baselang=$1 --quad $2)"
    $3VENDOR="$(echo "$quad" |cut -d: -f1)"
    $3VERSION="$(echo "$quad" |cut -d: -f4)"
    $3LANGUAGE="$(echo "$quad" |cut -d: -f3)"
])
m4trace:config/support-cuda.m4:7: -1- AC_DEFUN([ROSE_SUPPORT_CUDA], [

AC_MSG_CHECKING(for NVIDIA CUDA)

AC_ARG_WITH([cuda],
	AS_HELP_STRING([--with-cuda=PATH],
		[use nvcc for CUDA support (default autodetect).  PATH is bin directory containing nvcc if given]),
	[cudasetting=$withval],
	[cudasetting=try])

USE_CUDA=0

if test "x$cudasetting" != xno; then
	if test "x$cudasetting" = xtry -o "x$cudasetting" = xyes ; then
# autodetect the NVCC bin PATH
		if which nvcc > /dev/null 2> /dev/null; then
			NVCC="`which nvcc`"
			NVCCBIN="`dirname $NVCC`"
			USE_CUDA=1
		elif test -d "/usr/local/cuda/bin" ; then
                        NVCCBIN="/usr/local/cuda/bin"
                        USE_CUDA=1
		elif test "x$cudasetting" = xyes ; then
			AC_MSG_ERROR([--with-cuda set but nvcc command not found in PATH])
		fi

	else
		if test -d "$cudasetting"; then
#Verification of the bin directory containing nvcc is deferred later
			NVCCBIN="$cudasetting"
			USE_CUDA=1
		else
			AC_MSG_ERROR([argument to --with-cuda must be path to bin directory, but argument is not a directory])
		fi
	fi
fi

if test $USE_CUDA = 1; then
	if test ! -x "$NVCCBIN/nvcc" ; then
		AC_MSG_ERROR([nvcc could not be found in CUDA bin directory $NVCCBIN])
	fi
	AC_MSG_RESULT([$NVCCBIN])

#We don't concern about nvcc version for now
# DQ (5/27/2010): We only support a specific version of GHC, since version 6.12 does not
# include the required packages.
#   echo "ghc_version = "`ghc --version`
#   ghc_major_version_number=`ghc --version | tr -d \ | cut -d\n -f3 | cut -d\. -f1`
#   ghc_minor_version_number=`ghc --version | tr -d \ | cut -d\n -f3 | cut -d\. -f2`
#   ghc_patch_version_number=`ghc --version | tr -d \ | cut -d\n -f3 | cut -d\. -f3`
#
#   echo "ghc_major_version_number = $ghc_major_version_number"
#   echo "ghc_minor_version_number = $ghc_minor_version_number"
#   echo "ghc_patch_version_number = $ghc_patch_version_number"
#
#   echo "*************************************"
#   echo "ghc packages required in ROSE: base, haskell98, syb, mtl, containers (see the Build-Depends entry in projects/haskellport/rose.cabal.in.in)."
#   echo "ghc packages supported:"
#   ghc -v
#   echo "*************************************"
#
#   if test "x$ghc_major_version_number" = "x6"; then
#      echo "Recognized an accepted major version number."
#      if test "x$ghc_minor_version_number" = "x10"; then
#         echo "Recognized an accepted minor version number."
#      else
#         echo "ERROR: Could not identify an acceptable Haskell gch minor version number (ROSE requires 6.10.x)."
#         exit 1
#      fi
#   else
#      echo "ERROR: Could not identify an acceptable Haskell gch major version number (ROSE requires 6.10.x)."
#      exit 1
#   fi

else
	AC_MSG_RESULT([no])
fi

AC_SUBST(NVCCBIN)
AM_CONDITIONAL(USE_CUDA,test "$USE_CUDA" = 1)

])
m4trace:config/support-doxygen.m4:3: -1- AC_DEFUN([ROSE_SUPPORT_DOXYGEN], [
    ROSE_CONFIGURE_SECTION([Checking Doxygen])

    DOXYGEN_DISABLE_HOWTO="Use --without-doxygen to disable generation of ROSE API documentation."

    dnl Find the doxygen program
    AC_ARG_WITH(
        [doxygen],
        AS_HELP_STRING(
            [--with-doxygen=EXECUTABLE],
            [Use the doxygen documentation generator from http://www.doxygen.org.
             The EXECUTABLE, if specified, should be the path of the doxygen tool, such as "/usr/local/bin/doxygen".
             The default is the empty prefix, in which case the tool "doxygen" must be found in the command
             search path. Saying "no" for the prefix is the same as saying "--without-doxygen".]),
            [ROSE_WITH_DOXYGEN=$withval],
            [ROSE_WITH_DOXYGEN=check])

    DOXYGEN_FAIL_IF_NOT_FOUND=                                          dnl 'yes' means fail if we don't find doxygen
    DOXYGEN=                                                            dnl doxygen executable

    if test "$ROSE_WITH_DOXYGEN" = "no"; then
        dnl Do not look for or use doxygen
        DOXYGEN=
        DOXYGEN_FAIL_IF_NOT_FOUND=
    elif test "$ROSE_WITH_DOXYGEN" = "yes"; then
        dnl User wants to use the system-installed doxygen version
        DOXYGEN=doxygen
        DOXYGEN_FAIL_IF_NOT_FOUND=yes
    elif test "$ROSE_WITH_DOXYGEN" = "check"; then
        dnl User doesn't care; use doxygen only if we can find an appropriate system-installed version
        DOXYGEN=doxygen
        DOXYGEN_FAIL_IF_NOT_FOUND=
    else
        dnl User wants us to use a specific doxygen executable, so fail if that's not appropriate
        DOXYGEN="$ROSE_WITH_DOXYGEN"
        DOXYGEN_FAIL_IF_NOT_FOUND=yes
    fi

    dnl Check the doxygen version number if doxygen is available. If doxygen is not found or its too old a version then either
    dnl fail (if DOXYGEN_FAIL_IF_NOT_FOUND is 'yes') or assume that doxygen is not desired.
    while true; do
        if test "$DOXYGEN" != ""; then
            DOXYGEN_VERSION=$($DOXYGEN --version 2>/dev/null)
            if test "$DOXYGEN_VERSION" = ""; then
                if test "$DOXYGEN_FAIL_IF_NOT_FOUND" = yes; then
                    AC_MSG_FAILURE([doxygen command "$DOXYGEN --version" did not report a version number; $DOXYGEN_DISABLE_HOWTO])
                else
                    DOXYGEN=
                    break
                fi
            fi

            DOXYGEN_VERSION_HAVE_MAJOR=$(echo "$DOXYGEN_VERSION" |cut -d. -f1)
            DOXYGEN_VERSION_HAVE_MINOR=$(echo "$DOXYGEN_VERSION" |cut -d. -f2)
            DOXYGEN_VERSION_HAVE_PATCH=$(echo "$DOXYGEN_VERSION" |cut -d. -f3)
            if test "$DOXYGEN_VERSION_HAVE_MAJOR" = "" -o \
                    "$DOXYGEN_VERSION_HAVE_MINOR" = "" -o \
                    "$DOXYGEN_VERSION_HAVE_PATCH" = ""; then
                if test "$DOXYGEN_FAIL_IF_NOT_FOUND" = yes; then
                    AC_MSG_FAILURE([malformed doxygen version number "$DOXYGEN_VERSION" reported by "$DOXYGEN --version"])
                else
                    DOXYGEN=
                    break
                fi
            fi

            DOXYGEN_VERSION_NEED="1.8.1"
            DOXYGEN_VERSION_NEED_MAJOR=$(echo "$DOXYGEN_VERSION_NEED" |cut -d. -f1)
            DOXYGEN_VERSION_NEED_MINOR=$(echo "$DOXYGEN_VERSION_NEED" |cut -d. -f2)
            DOXYGEN_VERSION_NEED_PATCH=$(echo "$DOXYGEN_VERSION_NEED" |cut -d. -f3)

            if test "$DOXYGEN_VERSION_HAVE_MAJOR" -gt "$DOXYGEN_VERSION_NEED_MAJOR"; then
                DOXYGEN_VERSION_IS_OKAY=yes
            elif test "$DOXYGEN_VERSION_HAVE_MAJOR" -lt "$DOXYGEN_VERSION_NEED_MAJOR"; then
                DOXYGEN_VERSION_IS_OKAY=no
            elif test "$DOXYGEN_VERSION_HAVE_MINOR" -gt "$DOXYGEN_VERSION_NEED_MINOR"; then
                DOXYGEN_VERSION_IS_OKAY=yes
            elif test "$DOXYGEN_VERSION_HAVE_MINOR" -lt "$DOXYGEN_VERSION_NEED_MINOR"; then
                DOXYGEN_VERSION_IS_OKAY=no
            elif test "$DOXYGEN_VERSION_HAVE_PATCH" -ge "$DOXYGEN_VERSION_NEED_PATCH"; then
                DOXYGEN_VERSION_IS_OKAY=yes
            else
                DOXYGEN_VERSION_IS_OKAY=no
            fi

            if test "$DOXYGEN_VERSION_IS_OKAY" != "yes"; then
                if test "$DOXYGEN_FAIL_IF_NOT_FOUND" = yes; then
                    AC_MSG_FAILURE([$DOXYGEN $DOXYGEN_VERSION is too old; need at least $DOXYGEN_VERSION_NEED. $DOXYGEN_DISABLE_HOWTO])
                else
                    DOXYGEN=
                    break
                fi
            fi
        fi
        break
    done

    dnl Find the optional doxyindexer program. It's normally in the same directory as doxygen but not
    dnl always present. It didn't exist before 1.8.3, and it's not always installed after that.
    if test "$DOXYGEN" != "" -a "$DOXYGEN_VERSION_IS_OKAY" = "yes"; then
        DOXYDIR="${DOXYGEN%/*}"
        if test "$DOXYDIR" = "$DOXYGEN"; then
            dnl $DOXYGEN had no path; it was probably just the word "doxygen"
            AC_PATH_PROG(DOXYINDEXER, doxyindexer)
        elif test "${DOXYDIR#/}" != "$DOXYDIR"; then
            dnl Absolute path. AC_PATH_PROG is not smart enough to handle this case!
            if test -e "$DOXYDIR/doxyindexer"; then
                DOXYINDEXER="$DOXYDIR/doxyindexer"
            fi
        else
            AC_PATH_PROG(DOXYINDEXER, [$DOXYDIR/doxyindexer])
        fi
    fi

    dnl Results for the doxygen executable
    AM_CONDITIONAL(ROSE_HAVE_DOXYGEN, test "$DOXYGEN" != "")
    AC_SUBST(DOXYGEN, "$DOXYGEN")
    AM_CONDITIONAL(ROSE_HAVE_DOXYINDEXER, test "$DOXYINDEXER" != "")
    AC_SUBST(DOXYINDEXER, "$DOXYINDEXER")

    dnl Should we document private, internal parts of the library?  End user documentation should not contain
    dnl documentaton for internal or private parts of ROSE. Developers can get this by adding
    dnl "--with-doxygen-developer-docs" to the configure command-line.
    AC_ARG_ENABLE(doxygen-developer-docs,
                  [AS_HELP_STRING([--enable-doxygen-developer-docs],
                                  [Produce documentation for private, internal library components])],
                  [enable_doxygen_developer_docs=yes],
                  [enable_doxygen_developer_docs=])
    if test "$enable_doxygen_developer_docs" = "yes"; then
        DOXYGEN_EXTRACT_ALL="YES"
        DOXYGEN_EXTRACT_PRIVATE="YES"
        DOXYGEN_EXTRACT_STATIC="YES"
        DOXYGEN_INTERNAL_DOCS="YES"
        DOXYGEN_HIDE_UNDOC_MEMBERS="NO"
        DOXYGEN_HIDE_UNDOC_CLASSES="NO"
        DOXYGEN_HIDE_FRIEND_COMPOUNDS="NO"
        DOXYGEN_ENABLED_SECTIONS="documentDevelopmentVersionUsingDoxygen"
    else
        dnl [Robb Matzke, 2015-09-30]: I'm turning off DOXYGEN_HIDE_UNDOC_MEMBERS and DOXYGEN_HIDE_UNDOC_CLASSES by
        dnl default until we've had a change to properly document the multitude of things that have no documentation.
        DOXYGEN_EXTRACT_ALL="NO"
        DOXYGEN_EXTRACT_PRIVATE="NO"
        DOXYGEN_EXTRACT_STATIC="NO"
        DOXYGEN_INTERNAL_DOCS="NO"
        DOXYGEN_HIDE_UNDOC_MEMBERS="NO"
        DOXYGEN_HIDE_UNDOC_CLASSES="NO"
        DOXYGEN_HIDE_FRIEND_COMPOUNDS="YES"
        DOXYGEN_ENABLED_SECTIONS="documentUserVersionUsingDoxygen"
    fi

    AC_SUBST(DOXYGEN_EXTRACT_ALL)
    AC_SUBST(DOXYGEN_EXTRACT_PRIVATE)
    AC_SUBST(DOXYGEN_EXTRACT_STATIC)
    AC_SUBST(DOXYGEN_INTERNAL_DOCS)
    AC_SUBST(DOXYGEN_HIDE_UNDOC_MEMBERS)
    AC_SUBST(DOXYGEN_HIDE_UNDOC_CLASSES)
    AC_SUBST(DOXYGEN_HIDE_FRIEND_COMPOUNDS)
    AC_SUBST(DOXYGEN_ENABLED_SECTIONS)

dnl Start of some old stuff...
    dnl *********************************************************************
    dnl * Enable Doxygen build documentation for Rose faster by connecting 
    dnl * Sage III as a separate set of documentation to Rose using the 
    dnl * Doxygen Tag file mechanism.  The documentation is generated much 
    dnl * faster which simplifies the addition of documentation to both Rose 
    dnl * and Sage separately, but it is not as presentable.
    dnl *********************************************************************
    AC_ARG_ENABLE(doxygen-generate-fast-docs,
      [  --enable-doxygen-generate-fast-docs ...... Enable faster generation of Doxygen documents using 
                                             tag file mechanism to connect Sage III documentation to 
                                             Rose documentation (documentation not as presentable).])
    case $srcdir in
      /*) topSourceDirectory=$srcdir ;;
      *) topSourceDirectory=$PWD/$srcdir ;;
    esac

    dnl DQ (12/20/2002) support for Doxygen specific options
    dnl We might want the default to later be to merge Rose and 
    dnl Sage documentation (change it then).
    if (test "$enable_doxygen_generate_fast_docs" = yes) ; then
      AC_MSG_NOTICE([permit separation of Sage III doxygen generated documentation from Rose documentation uses doxygen tag file mechanism to connect the two])
      DOXYGEN_ADDED_DIRECTORY_1=""
      DOXYGEN_ADDED_DIRECTORY_2=""
      DOXYGEN_USE_TAG_FILE="@top_pwd@/docs/Rose/SageIntermediateForm/sageDoxygen.tags"
    else
      AC_MSG_NOTICE([permit Doxygen generation of Rose documentation including Sage III documentation as a single monolithic project; takes longer])
      DOXYGEN_ADDED_DIRECTORY_1="@top_pwd@/src/frontend/SageIII"
      DOXYGEN_ADDED_DIRECTORY_2="$topSourceDirectory/src/frontend/SageIII"
      DOXYGEN_USE_TAG_FILE=""
    fi

    AC_SUBST(DOXYGEN_ADDED_DIRECTORY_1)
    AC_SUBST(DOXYGEN_ADDED_DIRECTORY_2)
    AC_SUBST(DOXYGEN_USE_TAG_FILE)
dnl End of old stuff

    dnl Report results
    AC_MSG_NOTICE([Doxygen detection results:])
    AC_MSG_NOTICE([    DOXYGEN                       = $DOXYGEN])
    AC_MSG_NOTICE([    DOXYGEN_VERSION               = $DOXYGEN_VERSION])
    AC_MSG_NOTICE([    DOXYINDEXER                   = $DOXYINDEXER])
    AC_MSG_NOTICE([    DOXYGEN_EXTRACT_ALL           = $DOXYGEN_EXTRACT_ALL])
    AC_MSG_NOTICE([    DOXYGEN_EXTRACT_PRIVATE       = $DOXYGEN_EXTRACT_PRIVATE])
    AC_MSG_NOTICE([    DOXYGEN_EXTRACT_STATIC        = $DOXYGEN_EXTRACT_STATIC])
    AC_MSG_NOTICE([    DOXYGEN_INTERNAL_DOCS         = $DOXYGEN_INTERNAL_DOCS])
    AC_MSG_NOTICE([    DOXYGEN_HIDE_UNDOC_MEMBERS    = $DOXYGEN_HIDE_UNDOC_MEMBERS])
    AC_MSG_NOTICE([    DOXYGEN_HIDE_UNDOC_CLASSES    = $DOXYGEN_HIDE_UNDOC_CLASSES])
    AC_MSG_NOTICE([    DOXYGEN_HIDE_FRIEND_COMPOUNDS = $DOXYGEN_HIDE_FRIEND_COMPOUNDS])
    AC_MSG_NOTICE([    DOXYGEN_ENABLED_SECTIONS      = $DOXYGEN_ENABLED_SECTIONS])
    AC_MSG_NOTICE([    DOXYGEN_ADDED_DIRECTORY_1     = $DOXYGEN_ADDED_DIRECTORY_1])
    AC_MSG_NOTICE([    DOXYGEN_ADDED_DIRECTORY_2     = $DOXYGEN_ADDED_DIRECTORY_2])
    AC_MSG_NOTICE([    DOXYGEN_USE_TAG_FILE          = $DOXYGEN_USE_TAG_FILE])
])
m4trace:config/support-dwarf.m4:2: -1- AC_DEFUN([ROSE_SUPPORT_DWARF], [
    AC_ARG_WITH(
        [dwarf],
        AS_HELP_STRING(
            [--with-dwarf=PREFIX],
            [Use the libdwarf library, which is necessary in order to parse debugging tables in ELF files.
             The PREFIX, if specified, should be the prefix used to install libdwarf, such as "/usr/local".
             The default is the empty prefix, in which case the headers and library must be installed in a
             place where they will be found. Saying "no" for the prefix is the same as saying
             "--without-dwarf". See also, --with-elf which is a prerequisite for --with-dwarf.]),
            [],
            [with_dwarf=no])

    # Find the dwarf library
    ROSE_HAVE_LIBDWARF=
    if test "$with_dwarf" = yes -o "$with_dwarf" = ""; then
        LIBDWARF_PREFIX=
        AC_CHECK_LIB(dwarf, dwarf_child,
                     [AC_DEFINE(ROSE_HAVE_LIBDWARF, [], [Defined when libdwarf is available.])
                      ROSE_HAVE_LIBDWARF=yes
                      LIBDWARF_CPPFLAGS=
                      LIBDWARF_LDFLAGS="-ldwarf"])
    elif test -n "$with_dwarf" -a "$with_dwarf" != no; then
        LIBDWARF_PREFIX="$with_dwarf"
        # ROSE requires the use of a shared library for libdwarf
        AC_CHECK_FILE(["$LIBDWARF_PREFIX/lib/libdwarf.so"],
                      [AC_DEFINE(ROSE_HAVE_LIBDWARF, [], [Defined when libdwarf is available.])
                       ROSE_HAVE_LIBDWARF=yes
                       LIBDWARF_CPPFLAGS="-I$LIBDWARF_PREFIX/include"
                       LIBDWARF_LDFLAGS="-L$LIBDWARF_PREFIX/lib -ldwarf"
                       ])
    fi

    # Sanity check: if the user told us to use libdwarf then we must find the library
    if test "$with_dwarf" != no -a -z "$ROSE_HAVE_LIBDWARF"; then
        AC_MSG_ERROR([did not find libdwarf but --with-dwarf was specified])
    fi
    if test "$with_dwarf" != no -a "$ROSE_HAVE_LIBDWARF" = yes -a "$ROSE_HAVE_LIBELF" != yes; then
        AC_MSG_ERROR([libdwarf depends on libelf, so you must specify --with-libelf also])
    fi
    

    # Results
    #    ROSE_HAVE_LIBDWARF -- shell variable, non-empty when libdwarf is available
    #    ROSE_HAVE_LIBDWARF -- automake conditional, true when libdwarf is available
    #    ROSE_HAVE_LIBDWARF -- CPP symbol defined when libdwarf is available (see above)
    #    LIBDWARF_PREFIX    -- name of the directory where dwarf library and headers are installed
    #    LIBDWARF_CPPFLAGS  -- C preprocessor flags, such as -I
    #    LIBDWARF_LDFLAGS   -- Loader flags, such as -L and -l
    AM_CONDITIONAL(ROSE_HAVE_LIBDWARF, [test -n "$ROSE_HAVE_LIBDWARF"])
    AC_SUBST(LIBDWARF_PREFIX)
    AC_SUBST(LIBDWARF_CPPFLAGS)
    AC_SUBST(LIBDWARF_LDFLAGS)
])
m4trace:config/support-edg-debugging.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_EDG_DEBUGGING], [
# Begin macro ROSE_SUPPORT_EDG_DEBUGGING.

# This optionally permits the unions in EDG to be converted to structs to support 
# debugging of data member field accesses in the EDG/Sage III translation.

AC_MSG_CHECKING(for specification of EDG union/struct debugging support)
AC_ARG_ENABLE(edg_union_struct_debugging,
[  --enable-edg_union_struct_debugging	Specify if EDG Union/Struct debugging support is to be used],
,
if test ! "$enable_edg_union_struct_debugging" ; then
   enable_edg_union_struct_debugging=no
fi
)

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: enable_edg_union_struct_debugging = "$enable_edg_union_struct_debugging"])

if test "$enable_edg_union_struct_debugging" = no; then
   # If edg_union_struct_debugging is not specified, then don't use it.
   AC_MSG_NOTICE([skipping use of EDG Union/Struct debugging support])
   edg_union_struct_debugging_value="union"
else
   edg_union_struct_debugging_value="struct"
   AC_MSG_NOTICE([setup EDG Union/Struct debugging support in ROSE. edg_union_struct_debugging_value = "$edg_union_struct_debugging_value"])
fi

AC_DEFINE([USE_ROSE_EDG_DEBUGGING_SUPPORT],1,[Controls if EDG Union/Struct debugging support is to be used.])

AC_SUBST(edg_union_struct_debugging_value)

# End macro ROSE_SUPPORT_EDG_DEBUGGING.

])
m4trace:config/support-edg.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_EDG], [

    ###############################################################################################################################
    # This part of the configuration is about what *version* of EDG to use when building ROSE. It has nothing to do with deciding
    # whether to compile EDG from source code, use a precompiled EDG binary, or do neither (that's all later).
    ###############################################################################################################################

    AC_ARG_ENABLE([edg-version],
                  [AC_HELP_STRING([--enable-edg-version=VERSION],
                                  [Specifies the version of EDG to use as the parser for C/C++ when ROSE is configured
                                   to be able to analyze C and C++. Specifying a version number with this switch causes
                                   that version of the EDG library to be used by either compiling it from source code
                                   (which is proprietary) or by downloading a precompiled library.])])

    AC_MSG_NOTICE([enable_edg_version = "$enable_edg_version"])
    if test "$enable_edg_version" = ""; then
       AC_MSG_NOTICE([default version of EDG used (5.0)])
       edg_major_version_number=5
       edg_minor_version_number=0
    else
       AC_MSG_NOTICE([specifying EDG version is not recommended])
       edg_major_version_number=`echo $enable_edg_version | cut -d\. -f1`
       edg_minor_version_number=`echo $enable_edg_version | cut -d\. -f2`
    fi

    # Only certain versions of EDG are valid
    if test "$edg_major_version_number" = "4"; then
        if test "$edg_minor_version_number" = "12"; then
            enable_edg_version412=yes
            AC_DEFINE([ROSE_USE_EDG_VERSION_4_12], [], [Whether to use the new EDG version 4.12])
        else
            AC_MSG_FAILURE([EDG-$edg_major_version_number.$edg_minor_version_number is not valid])
        fi
    elif test "x$edg_major_version_number" = "x5"; then
        if test "x$edg_minor_version_number" = "x0"; then
            enable_edg_version50=yes
            AC_DEFINE([ROSE_USE_EDG_VERSION_5_0], [], [Whether to use the new EDG version 5.0])
        else
            AC_MSG_FAILURE([EDG-$edg_major_version_number.$edg_minor_version_number is not valid])
        fi
    elif test "x$edg_major_version_number" = "x6"; then
        if test "x$edg_minor_version_number" = "x0"; then
            enable_edg_version60=yes
            AC_DEFINE([ROSE_USE_EDG_VERSION_6_0], [], [Whether to use the new EDG version 6.0])
        elif test "x$edg_minor_version_number" = "x1"; then
            enable_edg_version61=yes
            AC_DEFINE([ROSE_USE_EDG_VERSION_6_1], [], [Whether to use the new EDG version 6.1])
        else
            AC_MSG_FAILURE([EDG-$edg_major_version_number.$edg_minor_version_number is not valid])
        fi
    else
        AC_MSG_FAILURE([EDG-$edg_major_version_number.$edg_minor_version_number is not valid])
    fi

    enable_new_edg_interface=yes
    AC_DEFINE_UNQUOTED([ROSE_EDG_MAJOR_VERSION_NUMBER], $edg_major_version_number , [EDG major version number])
    AC_DEFINE_UNQUOTED([ROSE_EDG_MINOR_VERSION_NUMBER], $edg_minor_version_number , [EDG minor version number])

    ROSE_EDG_MAJOR_VERSION_NUMBER=$edg_major_version_number
    ROSE_EDG_MINOR_VERSION_NUMBER=$edg_minor_version_number

    AC_SUBST(ROSE_EDG_MAJOR_VERSION_NUMBER)
    AC_SUBST(ROSE_EDG_MINOR_VERSION_NUMBER)

    # DQ (2/3/2010): I would like to not have to use these and use the new
    # ROSE_EDG_MAJOR_VERSION_NUMBER and ROSE_EDG_MINOR_VERSION_NUMBER instead.
    AM_CONDITIONAL(ROSE_USE_EDG_VERSION_4_12, [test "x$enable_edg_version412" = xyes])
    AM_CONDITIONAL(ROSE_USE_EDG_VERSION_5_0,  [test "x$enable_edg_version50" = xyes])
    AM_CONDITIONAL(ROSE_USE_EDG_VERSION_6_0,  [test "x$enable_edg_version60" = xyes])
    AM_CONDITIONAL(ROSE_USE_EDG_VERSION_6_1,  [test "x$enable_edg_version61" = xyes])

    ###############################################################################################################################
    # This part of the configuration is about whether to compile the EDG library from source code, or to use a precompiled EDG
    # library that's downloaded, or to not link with EDG at all (e.g., when ROSE is configured without C or C++ support).
    ###############################################################################################################################

    AC_ARG_ENABLE([edg-compile],
                  [AC_HELP_STRING([--enable-edg-compile=maybe|yes|no],
				  [Whether to compile the Edison Design Group (EDG) C/C++ parsing library from source code.
				   The default, "maybe", means that the library is compiled from source code if the source code
				   is available (it's proprietary) otherwise the build will attempt to download a precompiled
				   version of the library. The values "yes" and "no" are used by the ROSE development team for
				   testing and mean, respectively, fail if the source code is not available or ignore the source
				   code even if it is available.])],
		  [want_edg_source="$enableval"],
		  [want_edg_source=maybe])

    if test -e ${srcdir}/src/frontend/CxxFrontend/EDG/Makefile.am; then
        has_edg_source=yes
    else
        has_edg_source=no
    fi

    if test "$want_edg_source" = yes -a "$has_edg_source" = no; then
        AC_MSG_FAILURE(["--with-edg-source=yes" was specified but the EDG source code is not present])
    elif test "$want_edg_source" = no; then
        AC_MSG_NOTICE([EDG source code ignored even if present])
        has_edg_source=no
    fi

    AM_CONDITIONAL(ROSE_HAS_EDG_SOURCE, [test "$has_edg_source" = "yes"])

    ###############################################################################################################################
    # This part of the configuration is about whether we should build an EDG binary tarball by compiling the EDG source code.
    ###############################################################################################################################

    # Find md5 or md5sum and create a signature for ROSE binary compatibility
    AC_CHECK_PROGS(MD5, [md5 md5sum], [false])
    AC_SUBST(MD5)
    if test "$has_edg_source" = yes; then
        if test "$MD5" = "false"; then
            AC_MSG_WARN([could not find either md5 or md5sum; building binary EDG tarballs is disabled])
            binary_edg_tarball_enabled=no
        else
            binary_edg_tarball_enabled=yes
        fi
    else
        binary_edg_tarball_enabled=no
    fi

    AM_CONDITIONAL(BINARY_EDG_TARBALL_ENABLED, [test "$binary_edg_tarball_enabled" = "yes"])
])
m4trace:config/support-elf.m4:2: -1- AC_DEFUN([ROSE_SUPPORT_ELF], [
    AC_ARG_WITH(
        [elf],
        AS_HELP_STRING(
            [--with-elf=PREFIX],
            [Use the ELF parsing library available from https://directory.fsf.org/wiki/Libelf.
             Although ROSE has a native ELF parser for most purposes, this libelf library is a prerequisite
             for being able to use libdwarf. The PREFIX, if specified, should be the prefix used to install
             libelf, such as "/usr/local".  The default is the empty prefix, in which case the headers and
             library must be installed in a place where they will be found. Saying "no" for the prefix is the
             same as saying "--without-elf". See also, --with-dwarf.]),
            [],
            [with_elf=no])

    # Find libelf
    ROSE_HAVE_LIBELF=
    if test "$with_elf" = yes -o "$with_elf" = ""; then
        LIBELF_PREFIX=
        AC_CHECK_LIB(elf, elf_begin,
                     [AC_DEFINE(ROSE_HAVE_LIBELF, [], [Defined when libelf is available.])
                      ROSE_HAVE_LIBELF=yes
                      LIBELF_CPPFLAGS=
                      LIBELF_LDFLAGS="-lelf"])
    elif test -n "$with_elf" -a "$with_elf" != no; then
        LIBELF_PREFIX="$with_elf"
        # ROSE requires the use of a shared library for libelf
        AC_CHECK_FILE(["$LIBELF_PREFIX/lib/libelf.so"],
                      [AC_DEFINE(ROSE_HAVE_LIBELF, [], [Defined when libelf is available.])
                       ROSE_HAVE_LIBELF=yes
                       LIBELF_CPPFLAGS="-I$LIBELF_PREFIX/include"
                       LIBELF_LDFLAGS="-L$LIBELF_PREFIX/lib -lelf"
                       ])
    fi

    # Sanity check: if the user told us to use libelf then we must find the library
    if test "$with_elf" != no -a -z "$ROSE_HAVE_LIBELF"; then
        AC_MSG_ERROR([did not find libelf but --with-elf was specified])
    fi

    # Results
    #    ROSE_HAVE_LIBELF -- shell variable, non-empty when libelf is available
    #    ROSE_HAVE_LIBELF -- automake conditional, true when libelf is available
    #    ROSE_HAVE_LIBELF -- CPP symbol defined when libelf is available (see above)
    #    LIBELF_PREFIX    -- name of the directory where elf library and headers are installed
    #    LIBELF_CPPFLAGS  -- C preprocessor flags, such as -I
    #    LIBELF_LDFLAGS   -- Loader flags, such as -L and -l
    AM_CONDITIONAL(ROSE_HAVE_LIBELF, [test -n "$ROSE_HAVE_LIBELF"])
    AC_SUBST(LIBELF_PREFIX)
    AC_SUBST(LIBELF_CPPFLAGS)
    AC_SUBST(LIBELF_LDFLAGS)
])
m4trace:config/support-fatal-rose-warnings.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_FATAL_WARNINGS], [

# ***************************************************************************
#    Option to define a uniform set of fatal warnings for ROSE development
# ***************************************************************************

# Semantics:
# 1. If this option is used then it sets a prescribed set of warnings and make them an error.
# 2. Additionally specific options may be specified to not be an error (not clear now widely 
#    available this last feature is on different compilers).
# 3. If specific warnings are specified, using the --with-CXX_WARNINGS and/or --with-C_WARNINGS options,
#    then these additional warnings will be added to the list of warnings which we be considered as errors.
# 4. The --with-CXX_WARNINGS and/or --with-C_WARNINGS options can also be used to specify warnings that 
#    would not be an error (see syntax below).
# 5. If fatal rose warning are not enabled, then the default behavior of the ROSE_FLAG_C_OPTIONS and 
#    ROSE_FLAG_CXX_OPTIONS functions will be to set specific default values that are suggested for ROSE 
#    development.
# 6. Default warnings are not added if --enable-fatal-rose-warnings is specified.

# Note that this function appears BEFORE the ROSE_FLAG_C_OPTIONS and ROSE_FLAG_CXX_OPTIONS functions
# and so this can be used to set values for C_WARNINGS and CXX_WARNINGS used in those functions.
# Note also that the values of C_WARNINGS and CXX_WARNINGS are added to CXXFLAGS and CFLAGS variable
# within those functions.

AC_MSG_CHECKING([for fatal rose warnings support])

AC_ARG_ENABLE(fatal-rose-warnings,
[  --enable-fatal-rose-warnings     support for an explicit list of warnings that are treated as errors (e.g. -Wunused-variable).],
[ AC_MSG_NOTICE([setting up list of fatal rose warnings])
])

AM_CONDITIONAL(ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT, [test "x$enable_fatal_rose_warnings" = xyes])

if test "x$enable_fatal_rose_warnings" = "xyes"; then
  AC_MSG_WARN([using a list of warnings that will be treated as errors for ROSE development])
  AC_DEFINE([ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT], [], [Support for a list of warnings that will be treated as errors for ROSE development])

# Clear all previously defined warnings.
  CXX_WARNINGS=""
  C_WARNINGS=""

# Implement support to select warnings based on compiler version used to compile ROSE source code.
  AC_MSG_NOTICE([CXX_COMPILER_VENDOR = "$CXX_COMPILER_VENDOR"])
  AC_MSG_NOTICE([FRONTEND_CXX_COMPILER_VENDOR = "$FRONTEND_CXX_COMPILER_VENDOR"])

  AC_MSG_NOTICE([FRONTEND_CXX_VERSION_MAJOR = "$FRONTEND_CXX_VERSION_MAJOR"])
  AC_MSG_NOTICE([FRONTEND_CXX_VERSION_MINOR = "$FRONTEND_CXX_VERSION_MINOR"])

  case "$FRONTEND_CXX_COMPILER_VENDOR" in
    gnu)
      AC_MSG_NOTICE([Setup fatal warnings specific to GNU compiler use])

      AC_MSG_NOTICE([GNU compiler version: GCC_VERSION = "$GCC_VERSION"])
      AC_MSG_NOTICE([GNU compiler version: GCC_MINOR_VERSION = "$GCC_MINOR_VERSION"])

      CXX_WARNINGS="-Wall -Wextra "
      C_WARNINGS="-Wall -Wextra "

      CXX_WARNINGS+="-Werror=maybe-uninitialized "
      C_WARNINGS+="-Werror=maybe-uninitialized "

      CXX_WARNINGS+="-Werror=unused-but-set-variable "
      C_WARNINGS+="-Werror=unused-but-set-variable "

      CXX_WARNINGS+="-Werror=unused-variable "
      C_WARNINGS+="-Werror=unused-variable "

      CXX_WARNINGS+="-Werror=sign-compare "
      C_WARNINGS+="-Werror=sign-compare "

      CXX_WARNINGS+="-Werror=reorder "
      C_WARNINGS+="-Werror=reorder "

      CXX_WARNINGS+="-Werror=delete-non-virtual-dtor "
      C_WARNINGS+="-Werror=delete-non-virtual-dtor "

      CXX_WARNINGS+="-Werror=deprecated-declarations "
      C_WARNINGS+="-Werror=deprecated-declarations "

      CXX_WARNINGS+="-Werror=return-type "
      C_WARNINGS+="-Werror=return-type "

      CXX_WARNINGS+="-Werror=comment "
      C_WARNINGS+="-Werror=comment "

      CXX_WARNINGS+="-Werror=sequence-point "
      C_WARNINGS+="-Werror=sequence-point "

      CXX_WARNINGS+="-Werror=implicit-function-declaration "
      C_WARNINGS+="-Werror=implicit-function-declaration "

    # DQ (12/11/2016): Make this GNU g++ version specific.
      if test $GCC_VERSION -ge 6; then
         if test $GCC_MINOR_VERSION -ge 1; then
          # DQ (12/9/2016): Adding null pointer defererence.
            CXX_WARNINGS+="-Wnull-dereference "
            C_WARNINGS+="-Wnull-dereference "

          # echo "Setup use of -Wnull-dereference (required later version GNU compiler)"
          # exit 1
         fi
      fi

    # DQ (12/8/2016): Turn off this GNU specific warning which does not work on large files.
      CXX_WARNINGS+=-Wno-misleading-indentation "
      C_WARNINGS+=-Wno-misleading-indentation "

    # Except for a few specific warnings that should not be an error (unclear how widely available this option is).
    # These are specific to Sawyer and we want to get past that code plus the ROSETTA code so that anyone can
    # debug specific warnings in there code more directly (by compiling any subdirectory).
      CXX_WARNINGS+="-Wno-error=unused-variable "
      C_WARNINGS+="-Wno-error=unused-variable "

    # Skip output of this warnings because it happends too much at this point.
      CXX_WARNINGS+="-Wno-unused-variable "
      C_WARNINGS+="-Wno-unused-variable "

    # DQ (12/6/2016): Disable this warning since it too frequent and a result of using the -Wextras option (not clear what to do about it).
      CXX_WARNINGS+="-Wno-unused-parameter "
      C_WARNINGS+="-Wno-unused-parameter "
    ;;

    clang)
      AC_MSG_NOTICE([setup fatal warnings specific to Clang compiler use])

    # DQ (12/7/2016): For a truely insane perspective, all Clang warnings can be turned on 
    # using -Weverything (at least on Clang Version 3.8).  However I don't think this is 
    # productive at this point.  Using --with-CXX_WARNINGS="-Weverything" will also do this
    # from the ROSE configure line.
    # CXX_WARNINGS="-Weverything "
    # C_WARNINGS="-Weverything "

      CXX_WARNINGS="-Wall -Wextra "
      C_WARNINGS="-Wall -Wextra "

      CXX_WARNINGS+="-Werror=unused-variable "
      C_WARNINGS+="-Werror=unused-variable "

      CXX_WARNINGS+="-Werror=sign-compare "
      C_WARNINGS+="-Werror=sign-compare "

      CXX_WARNINGS+="-Werror=reorder "
      C_WARNINGS+="-Werror=reorder "

      CXX_WARNINGS+="-Werror=delete-non-virtual-dtor "
      C_WARNINGS+="-Werror=delete-non-virtual-dtor "

      CXX_WARNINGS+="-Werror=deprecated-declarations "
      C_WARNINGS+="-Werror=deprecated-declarations "

      CXX_WARNINGS+="-Werror=return-type "
      C_WARNINGS+="-Werror=return-type "

      CXX_WARNINGS+="-Werror=comment "
      C_WARNINGS+="-Werror=comment "

      CXX_WARNINGS+="-Werror=sequence-point "
      C_WARNINGS+="-Werror=sequence-point "

      CXX_WARNINGS+="-Werror=implicit-function-declaration "
      C_WARNINGS+="-Werror=implicit-function-declaration "

    # Except for a few specific warnings that should not be an error (unclear how widely available this option is).
    # These are specific to Sawyer and we want to get past that code plus the ROSETTA code so that anyone can
    # debug specific warnings in there code more directly (by compiling any subdirectory).
      CXX_WARNINGS+="-Wno-error=unused-variable "
      C_WARNINGS+="-Wno-error=unused-variable "

    # Skip output of this warnings because it happends too much at this point.
      CXX_WARNINGS+="-Wno-unused-variable "
      C_WARNINGS+="-Wno-unused-variable "

    # Don't make this an error for now.
      CXX_WARNINGS+="-Wno-error=return-type "
      C_WARNINGS+="-Wno-error=return-type "

    # DQ (12/6/2016): Disable this warning since it comes from Boost and we can't do anythng about it.
      CXX_WARNINGS+="-Wno-c++11-extensions "
      C_WARNINGS+="-Wno-c++11-extensions "

    # DQ (12/6/2016): Disable this warning since it too frequent and a result of using the -Wextras option (not clear what to do about it).
      CXX_WARNINGS+="-Wno-unused-parameter "
      C_WARNINGS+="-Wno-unused-parameter "
    ;;

    intel)
      AC_MSG_NOTICE([setup fatal warnings specific to Intel compiler use: no Intel specific warnings are setup as errors])
      CXX_WARNINGS="-Wall -Wextra "
      C_WARNINGS="-Wall -Wextra "

      CXX_WARNINGS+="-Werror=maybe-uninitialized "
      C_WARNINGS+="-Werror=maybe-uninitialized "

      CXX_WARNINGS+="-Werror=unused-but-set-variable "
      C_WARNINGS+="-Werror=unused-but-set-variable "

      CXX_WARNINGS+="-Werror=unused-variable "
      C_WARNINGS+="-Werror=unused-variable "

      CXX_WARNINGS+="-Werror=sign-compare "
      C_WARNINGS+="-Werror=sign-compare "

      CXX_WARNINGS+="-Werror=reorder "
      C_WARNINGS+="-Werror=reorder "

      CXX_WARNINGS+="-Werror=delete-non-virtual-dtor "
      C_WARNINGS+="-Werror=delete-non-virtual-dtor "

      CXX_WARNINGS+="-Werror=deprecated-declarations "
      C_WARNINGS+="-Werror=deprecated-declarations "

      CXX_WARNINGS+="-Werror=return-type "
      C_WARNINGS+="-Werror=return-type "

      CXX_WARNINGS+="-Werror=comment "
      C_WARNINGS+="-Werror=comment "

      CXX_WARNINGS+="-Werror=sequence-point "
      C_WARNINGS+="-Werror=sequence-point "

      CXX_WARNINGS+="-Werror=implicit-function-declaration "
      C_WARNINGS+="-Werror=implicit-function-declaration "

    # Except for a few specific warnings that should not be an error (unclear how widely available this option is).
    # These are specific to Sawyer and we want to get past that code plus the ROSETTA code so that anyone can
    # debug specific warnings in there code more directly (by compiling any subdirectory).
    # CXX_WARNINGS+="-Wno-error=unused-variable "
    # C_WARNINGS+="-Wno-error=unused-variable "

    # Skip output of this warnings because it happends too much at this point.
    # CXX_WARNINGS+="-Wno-unused-variable "
    # C_WARNINGS+="-Wno-unused-variable "

    # DQ (12/6/2016): Disable this warning since it too frequent and a result of using the -Wextras option (not clear what to do about it).
    # CXX_WARNINGS+="-Wno-unused-parameter "
    # C_WARNINGS+="-Wno-unused-parameter "

    ;;

    *)
      AC_MSG_NOTICE([setup fatal warnings specific to an unknown compiler being used (this is currently an error)])
      exit 1
    ;;
  esac

fi

# ROSE_USE_UNIFORM_DEBUG_SUPPORT=7
AC_SUBST(ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT)

AC_MSG_NOTICE([after processing --enable-fatal-rose-warnings: CXX_WARNINGS = "${CXX_WARNINGS}"])
AC_MSG_NOTICE([after processing --enable-fatal-rose-warnings: C_WARNINGS   = "${C_WARNINGS}"])

AC_MSG_NOTICE([CFLAGS   = "$CFLAGS"])
AC_MSG_NOTICE([CXXFLAGS = "$CXXFLAGS"])
AC_MSG_NOTICE([CPPFLAGS = "$CPPFLAGS"])

AC_MSG_NOTICE([adding fatal warnings to compiler flags])

CXXFLAGS="$CXXFLAGS $CXX_WARNINGS"
CFLAGS="$CFLAGS $C_WARNINGS"

AC_MSG_NOTICE([after being reset: CFLAGS   = "$CFLAGS"])
AC_MSG_NOTICE([after being reset: CXXFLAGS = "$CXXFLAGS"])

# echo "Exiting as a test in fatal-rose-warnings support!"
# exit 1


])
m4trace:config/support-flang.m4:35: -1- AC_DEFUN([ROSE_SUPPORT_FLANG], [
  ROSE_CONFIGURE_SECTION([Checking FLANG library])

  #============================================================================
  # --with-flang=/path/to/flang-installation/
  #============================================================================
  ROSE_ARG_WITH(
    [flang],
    [for an installation of the Flang compiler libraries],
    [specify the path to the Flang installation],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_FLANG" != "xno"; then
      FLANG_INSTALL_PATH="$ROSE_WITH_FLANG"
  else
    FLANG_INSTALL_PATH=
    FLANG_SOURCE_PATH=
  fi

  #============================================================================
  # --with-flang-src=/path/to/flang-source
  #============================================================================
  ROSE_ARG_WITH(
    [flang-src],
    [for an installation of the Flang compiler source files],
    [specify the path to the Flang compiler source files],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_FLANG_SRC" != "xno"; then
      FLANG_SOURCE_PATH="$ROSE_WITH_FLANG_SRC"
  fi

  AC_MSG_NOTICE([FLANG_INSTALL_PATH = "$FLANG_INSTALL_PATH"])
  AC_MSG_NOTICE([FLANG_SOURCE_PATH = "$FLANG_SOURCE_PATH"])

  #============================================================================
  # Validate installation (if provided)
  #============================================================================
  if test "x$FLANG_INSTALL_PATH" != "x"; then
      #===========================================
      # Check for the FLANG compiler lib directory
      #===========================================
      AC_CHECK_FILE(
          [${FLANG_INSTALL_PATH}/lib],
          [],
          [ROSE_MSG_ERROR([flang_install_path/lib directory is missing, can't use this FLANG installation])])
  fi
  if test "x$FLANG_SOURCE_PATH" != "x"; then
      #========================================================
      # Check for the FLANG parser directory (for include files
      #========================================================
      AC_CHECK_FILE(
          [${FLANG_SOURCE_PATH}/lib/parser],
          [],
          [ROSE_MSG_ERROR([flang_source_path/lib/parser directory is missing, can't use this FLANG installation])])
  fi

  #============================================================================
  # Set Automake Conditionals and Substitutions
  #============================================================================
  AM_CONDITIONAL(ROSE_WITH_FLANG, [test "x$FLANG_INSTALL_PATH" != "x"])
  AM_CONDITIONAL(ROSE_WITH_FLANG_SRC, [test "x$FLANG_SOURCE_PATH" != "x"])
  AM_CONDITIONAL(ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION, [test "x$FLANG_INSTALL_PATH" != "x" && test "x$FLANG_SOURCE_PATH" != "x"])

  AC_SUBST(FLANG_INSTALL_PATH)
  AC_SUBST(FLANG_SOURCE_PATH)

  #============================================================================
  # Set CPP #defines
  #============================================================================
  AC_DEFINE_UNQUOTED(
    FLANG_INSTALL_PATH,
    ["$FLANG_INSTALL_PATH"],
    [Absolute path of the FLANG installation])
  AC_DEFINE_UNQUOTED(
    FLANG_SOURCE_PATH,
    ["$FLANG_SOURCE_PATH"],
    [Absolute path of the FLANG compilersource files])

# End macro ROSE_SUPPORT_FLANG.
])
m4trace:config/support-gcc-omp.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_GCC_OMP], [
# Begin macro ROSE_SUPPORT_OMP.

# Inclusion of test for Omni OpenMP Runtime system and its location.

AC_MSG_CHECKING(for GCC OpenMP)
AC_ARG_WITH(parallel_ast_traversal_omp,
[  --with-parallel_ast_traversal_omp  Enables AST traversal in parallel using OpenMP.],
,
if test ! "$with_parallel_ast_traversal_omp" ; then
   with_parallel_ast_traversal_omp=no
fi
)

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_parallel_ast_traversal_omp = "$with_parallel_ast_traversal_omp"])

if test "$with_parallel_ast_traversal_omp" = no; then
   # If omp_runtime_support is not specified, then don't use it.
   AC_MSG_NOTICE([skipping use of GCC OpenMP support])
else
   # OpenMP support assumes that "-pthread" is a valid compiler switch that turns on multi-threading support.
   # See also "--with-boost-thread" configure switch for a better way to do this.
   parallel_ast_traversal_omp_path=$with_parallel_ast_traversal_omp
   AC_MSG_NOTICE([setup OpenMP support in ROSE. path = "$parallel_ast_traversal_omp_path"])
   AC_DEFINE([USE_ROSE_GCC_OMP],1,[Use of GCC OpenMP in ROSE.])
   CFLAGS="$CFLAGS -fopenmp -pthread"
   LDFLAGS="$LDFLAGS -fopenmp -pthread"
   CXXFLAGS="$CXXFLAGS -fopenmp -pthread"
fi

AC_SUBST(parallel_ast_traversal_omp_path)

# End macro ROSE_SUPPORT_OMP.

])
m4trace:config/support-gcrypt.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_LIBGCRYPT], [
    AC_ARG_WITH(
        [gcrypt],
        AS_HELP_STRING(
            [--with-gcrypt=PREFIX],
            [Use the GNU cryptography library, libgcrypt, available from https://www.gnupg.org/related_software/libgcrypt/.
             This optional library provides a number of hashing functions used throughout ROSE. The PREFIX, if specified,
             should be the prefix used to install libgcrypt, such as "/usr/local".  The default is the empty prefix, in
             which case the headers and library must be installed in a place where they will be found. Saying "no" for the
             prefix is the same as saying "--without-libgcrypt".]),
        [],
        [with_gcrypt=no])

    ROSE_HAVE_LIBGCRYPT=
    if test "$with_gcrypt" = yes -o "$with_gcrypt" = ""; then
        # Find the gcrypt library in the default location
        LIBGCRYPT_PREFIX=
        AC_CHECK_LIB(gpg-error, gpg_strerror,
                     [AC_CHECK_LIB(gcrypt, gcry_check_version,
                                   [AC_DEFINE(ROSE_HAVE_LIBGCRYPT, [], [Defined when libgcrypt is available.])
                                    ROSE_HAVE_LIBGCRYPT=yes
                                    LIBGCRYPT_CPPFLAGS=
                                    LIBGCRYPT_LDFLAGS="-lgcrypt -lgpg-error"
                                   ])
                     ])
    elif test -n "$with_gcrypt" -a "$with_gcrypt" != no; then
        # Find the gcrypt library in the specified location
        LIBGCRYPT_PREFIX="$with_gcrypt"
        AC_CHECK_FILE(["$LIBGCRYPT_PREFIX/lib/libgcrypt.so"],
                      [AC_DEFINE(ROSE_HAVE_LIBGCRYPT, [], [Defined when libgcrypt is available.])
                       ROSE_HAVE_LIBGCRYPT=yes
                       LIBGCRYPT_CPPFLAGS="-I$LIBGCRYPT_PREFIX/include"
                       LIBGCRYPT_LDFLAGS="-L$LIBGCRYPT_PREFIX/lib -lgcrypt -lgpg-error"
                      ])
    fi

    # Sanity check: if the user told us to use libgcrypt then we must find it
    if test "$with_gcrypt" != no -a -z "$ROSE_HAVE_LIBGCRYPT"; then
        AC_MSG_ERROR([did not find libgcrypt but --with-gcrypt was specified])
    fi

    # Results:
    #    ROSE_HAVE_LIBGCRYPT    -- shell variable: non-empty when libgcrypt is available
    #    ROSE_HAVE_LIBGCRYPT    -- automake conditional: true when libgcrypt is available
    #    ROSE_HAVE_LIBGCRYPT    -- CPP symbol: defined when libgcrypt is available
    #    LIBGCRYPT_PREFIX       -- automake variable: name of the directory where gcrypt libraries and headers are installed
    #    LIBGCRYPT_CPPFLAGS     -- automake variable: extra CPP flags needed for using libgcrypt
    #    LIBGCRYPT_LDFLAGS      -- automake variable: extra loader floags to use libgcrypt
    AM_CONDITIONAL(ROSE_HAVE_LIBGCRYPT, [test -n "$ROSE_HAVE_LIBGCRYPT"])
    AC_SUBST(LIBGCRYPT_PREFIX)
    AC_SUBST(LIBGCRYPT_CPPFLAGS)
    AC_SUBST(LIBGCRYPT_LDFLAGS)
])
m4trace:config/support-gmp.m4:19: -1- AC_DEFUN([ROSE_SUPPORT_GMP], [
  ROSE_ARG_WITH(
    [gmp],
    [for  (GMP)],
    [use the GNU Multiple Precision Arithmetic Library (GMP)],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_GMP" != "xno"; then
    GMP_INSTALL_PATH="$ROSE_WITH_GMP"
    GMP_INCLUDE_PATH="$ROSE_WITH_GMP/include"
    GMP_LIBRARY_PATH="$ROSE_WITH_GMP/lib"
  else
    GMP_INSTALL_PATH=
    GMP_INCLUDE_PATH=
    GMP_LIBRARY_PATH=
  fi

  ROSE_ARG_WITH(
    [gmp-include],
    [if the  GNU Multiple Precision Arithmetic Library (GMP) include directory was specified],
    [use this GNU Multiple Precision Arithmetic Library (GMP) include directory],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_GMP_INCLUDE" != "xno"; then
      GMP_INCLUDE_PATH="$ROSE_WITH_GMP_INCLUDE"
  fi

  ROSE_ARG_WITH(
    [gmp-lib],
    [if the GNU Multiple Precision Arithmetic Library (GMP) library directory was specified],
    [use this GNU Multiple Precision Arithmetic Library (GMP) library directory],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_GMP_LIB" != "xno"; then
      GMP_LIBRARY_PATH="$ROSE_WITH_GMP_LIB" 
  fi

  if test "x$GMP_INCLUDE_PATH" != "x"; then
      AC_CHECK_FILE(
          [${GMP_INCLUDE_PATH}/gmp.h],
          [],
          [ROSE_MSG_ERROR([gmp.h is missing, can't compile with GMP])])
  fi

  AM_CONDITIONAL(ROSE_WITH_GMP, [test "x$GMP_INCLUDE_PATH" != "x" && test "x$GMP_LIBRARY_PATH" != "x"])
  AM_CONDITIONAL(ROSE_WITH_GMP_INCLUDE, [test "x$GMP_INCLUDE_PATH" != "x"])

  AC_SUBST(GMP_INSTALL_PATH)
  AC_SUBST(GMP_INCLUDE_PATH)
  AC_SUBST(GMP_LIBRARY_PATH)

# End macro ROSE_SUPPORT_GMP.
])
m4trace:config/support-gnat.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_GNAT], [
# Begin macro ROSE_SUPPORT_GNAT.

# Inclusion of test for GNAT ADA Compiler Support and it's location.

AC_MSG_CHECKING(for gnat)
AC_ARG_WITH(gnat,
[  --with-gnat=PATH	Specify the prefix where GNAT support is installed],
,
if test ! "$with_gnat" ; then
   with_gnat=no
fi
)

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_gnat = "$with_gnat"])

if test "$with_gnat" = no; then
   # If gnat is not specified, then don't use it.
   AC_MSG_NOTICE([skipping use of GNAT])
else
   gnat_path=$with_gnat
   AC_MSG_NOTICE([GNAT supported in ROSE: gnat path = "$gnat_path"])

 # GNAT_SYSTEM_TYPE="`$gnat_path/bin/gnat.system.type`"
 # GNAT_LIBDIR="$gnat_path/$GNAT_SYSTEM_TYPE"
 # GNAT_EXTRA_LIBS="-L$GNAT_LIBDIR -Wl,-rpath,$GNAT_LIBDIR -lrt"
 # AC_CHECK_LIB(gnatc,StartGNAT,[:],[AC_ERROR([Unable to link to GNAT!])],[$GNAT_EXTRA_LIBS])

 # GNAT_INCLUDES="-I$gnat_path/include"
   GNAT_INCLUDES="-I$gnat_path"
 # GNAT may includes its own old copy of libstdc++ in its bin directory so we need to override this with the system provided one
 # GNAT_LIBS="-Wl,-rpath,/usr/lib -lgnatc $GNAT_EXTRA_LIBS"
   AC_SUBST(GNAT_INCLUDES)
 # AC_SUBST(GNAT_LIBS)
 # AC_SUBST(GNAT_LIBDIR)

   AC_DEFINE([USE_ROSE_GNAT_SUPPORT],1,[Controls use of ROSE support for GNAT ADA frontend Support.])
fi

AC_SUBST(gnat_path)

# End macro ROSE_SUPPORT_GNAT.

])
m4trace:config/support-gomp-omp.m4:1: -1- AC_DEFUN([ROSE_WITH_GOMP_OPENMP_LIBRARY], [
# Check if gomp 4.4 OpenMP runtime library is available
# Begin macro ROSE_WITH_GOMP_OPENMP_LIBRARY.
# Inclusion of test for GCC GOMP OpenMP Runtime system and its location.

AC_MSG_CHECKING(for OpenMP using gomp runtime library)
AC_ARG_WITH(gomp_omp_runtime_library,
[  --with-gomp_omp_runtime_library=PATH	Specify the prefix where GOMP Runtime System is installed],
,
if test ! "$with_gomp_omp_runtime_library" ; then
   with_gomp_omp_runtime_library=no
fi
)

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_gomp_omp_runtime_library = "$with_gomp_omp_runtime_library"])

if test "$with_gomp_omp_runtime_library" = no; then
   # If gomp_omp_runtime_library is not specified, then don't use it.
   AC_MSG_NOTICE([skipping use of GOMP OpenMP Runtime Library.])
else
   gomp_omp_runtime_library_path=$with_gomp_omp_runtime_library
   AC_MSG_NOTICE([setup GCC GOMP OpenMP library in ROSE. path = "$gomp_omp_runtime_library_path"])
   AC_DEFINE([USE_ROSE_GOMP_OPENMP_LIBRARY],1,[Controls use of ROSE support for OpenMP Translator targeting GCC 4.4 's GOMP OpenMP RTL.])
   AC_DEFINE_UNQUOTED([GCC_GOMP_OPENMP_LIB_PATH],"$gomp_omp_runtime_library_path",[Location (unquoted) of the GCC 4.4's GOMP OpenMP runtime library.])
fi

AC_DEFINE_UNQUOTED([ROSE_INSTALLATION_PATH],"$prefix",[Location (unquoted) of the top directory path to which ROSE is installed.])

AC_SUBST(gomp_omp_runtime_library_path)

# End macro ROSE_WITH_GOMP_OPENMP_LIBRARY.
AM_CONDITIONAL(WITH_GOMP_OPENMP_LIB,test ! "$with_gomp_omp_runtime_library" = no)


])
m4trace:config/support-haskell.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_HASKELL], [

AC_MSG_CHECKING(for Haskell)

AC_ARG_WITH([haskell],
	AS_HELP_STRING([--with-haskell=PATH],
		[use Haskell for Haskellport (default autodetect).  PATH is bin directory containing ghc and runghc commands if given]),
	[haskellsetting=$withval],
	[haskellsetting=no])

# DQ (12/11/2016): Avoid failing test and allow haskell use only if explicitly specified 
# (fails for me if environment not setup properly using .bashrc).
#       [haskellsetting=try]

RUNHS=
USE_HASKELL=0

# echo "haskellsetting = $haskellsetting"

if test "x$haskellsetting" != xno; then
	if test "x$haskellsetting" = xtry -o "x$haskellsetting" = xyes ; then
		if which ghc > /dev/null 2> /dev/null; then
			GHC="`which ghc`"
			GHCBIN="`dirname $GHC`"
			USE_HASKELL=1
		elif test "x$haskellsetting" = xyes ; then
			AC_MSG_ERROR([--with-haskell set but ghc command not found in PATH])
		fi
	else
		if test -d "$haskellsetting"; then
			GHCBIN="$haskellsetting"
			USE_HASKELL=1
		else
			AC_MSG_ERROR([argument to --with-haskell must be path to bin directory, but argument is not a directory])
		fi
	fi
fi

if test $USE_HASKELL = 1; then
	if test ! -x "$GHCBIN/ghc" ; then
		AC_MSG_ERROR([ghc could not be found in Haskell bin directory $GHCBIN])
	fi
	if test ! -x "$GHCBIN/runghc" ; then
		AC_MSG_ERROR([runghc could not be found in Haskell bin directory $GHCBIN])
	fi
	AC_MSG_RESULT([$GHCBIN])

 # DQ (5/21/2010): Added macro to rose_config.h file so that we can know when to skip Wave support (see rose_attributes_list.h).
 # AC_DEFINE([ROSE_USE_HASKELL_SUPPORT], [], [Whether to use HASKELL interface or not within ROSE])

 # DQ (5/27/2010): We only support a specific version of GHC, since version 6.12 does not
 # include the required packages.
   echo "ghc_version = "`ghc --version`
   ghc_major_version_number=`ghc --version | tr -d \ | cut -d\n -f3 | cut -d\. -f1`
   ghc_minor_version_number=`ghc --version | tr -d \ | cut -d\n -f3 | cut -d\. -f2`
   ghc_patch_version_number=`ghc --version | tr -d \ | cut -d\n -f3 | cut -d\. -f3`

   echo "ghc_major_version_number = $ghc_major_version_number"
   echo "ghc_minor_version_number = $ghc_minor_version_number"
   echo "ghc_patch_version_number = $ghc_patch_version_number"

   echo "*************************************"
   echo "ghc packages required in ROSE: base, haskell98, syb, mtl, containers (see the Build-Depends entry in projects/haskellport/rose.cabal.in.in)."
   echo "ghc packages supported:"
   ghc -v
   echo "*************************************"

   if test "x$ghc_major_version_number" = "x6"; then
      echo "Recognized an accepted major version number."
      if test "x$ghc_minor_version_number" = "x10"; then
         echo "Recognized an accepted minor version number."
      else
         echo "ERROR: Could not identify an acceptable Haskell gch minor version number (ROSE requires 6.10.x)."
         echo "Please use --with-haskell to specify the path of a right version of gch."
         echo "Or you can use --without-haskell to turn off this check."
         exit 1
      fi
   else
      echo "ERROR: Could not identify an acceptable Haskell gch major version number (ROSE requires 6.10.x)."
      echo "Please use --with-haskell to specify the path of a right version of gch."
      echo "Or you can use --without-haskell to turn off this check."
      exit 1
   fi

else
	AC_MSG_RESULT([no])
fi

AC_ARG_WITH([haskell-config-options],
	AS_HELP_STRING([--with-haskell-config-options=OPTS],
		[supply given options to Haskell configure command.  Default "--prefix=$prefix --user".  See http://www.haskell.org/cabal/release/cabal-latest/doc/users-guide/builders.html#setup-configure]),
	[HS_CONFIG_OPTS="$withval"],
	[HS_CONFIG_OPTS="--prefix=$prefix --user"])

AC_SUBST(GHCBIN)
AM_CONDITIONAL(USE_HASKELL,test "$USE_HASKELL" = 1)
AC_SUBST(HS_CONFIG_OPTS)

])
m4trace:config/support-i386.m4:4: -1- AC_DEFUN([ROSE_SUPPORT_I386], [
	AC_MSG_CHECKING([for i386 support (see --enable-i386)])
	
	AC_ARG_ENABLE([i386],
		      [AC_HELP_STRING([--enable-i386],
				      [If explicitly enabled, the build system will attempt to create 32-bit x86
				       programs for use as input to ROSE binary support testing and those tests
				       will be required to pass.  If explicitly disabled, 32-bit x86 support is
				       not required and the affected tests will not run.  If unspecified, 32-bit
				       x86 support will be turned on or off based on the capabilities of the
				       environment.])],
		      [RSI386_SPECIFIED=yes; ac_cv_enable_i386="$enableval"],
		      [RSI386_SPECIFIED=no])

	dnl Create a very simple source file that we'll try to compile various ways
	RSI386_TEMP=/tmp/rose_support_i386_$$
	echo "int main() {return 0;}" >$RSI386_TEMP.c

	if test "$RSI386_SPECIFIED" = "no" -o "$ac_cv_enable_i386" = "yes"; then
		dnl If the user specified neither "--enable-i386" nor "--disable-i386". Try to determine if we can
		dnl generate a 32-bit x86 program...
		ac_cv_enable_i386=no

		dnl Method 1: Perhaps the compiler creates this kind of executable by default?
		if (test "$ac_cv_enable_i386" = no &&
		    $CC $CFLAGS -o $RSI386_TEMP $RSI386_TEMP.c &&
		    $RSI386_TEMP &&
		    file $RSI386_TEMP |grep 32-bit |grep -q Intel); then
			$ac_cv_enable_i386=
		fi

		dnl Method 2: Perhaps the "-m32" switch will work
		if (test "$ac_cv_enable_i386" = no &&
		    $CC -m32 $CFLAGS -o $RSI386_TEMP $RSI386_TEMP.c &&
		    $RSI386_TEMP &&
                    file $RSI386_TEMP |grep 32-bit |grep -q Intel); then
			ac_cv_enable_i386="-m32"
		fi

		dnl It is an error if --enable-i386 was specified but we could not figure out how to generate such a file.
		if test "$RSI386_SPECIFIED" = "yes" -a "$ac_cv_enable_i386" = "no"; then
			AC_MSG_ERROR([--enable-i386 was specified but common switches to produce such a file don't work])
		fi

	elif test "$ac_cv_enable_i386" != "no"; then
		dnl Check that what the user specified actually dos work...
		if ($CC $ac_cv_enable_i386 $CFLAGS -o $RSI386_TEMP $RSI386_TEMP.c &&
		    $RSI386_TEMP &&
		    file $RSI386_TEMP |grep 32-bit |grep -q Intel); then
			: all ok
		else
			AC_MSG_RESULT($ac_cv_enable_i386)
			AC_MSG_ERROR([user-specified --enable-i386 value ($ac_cv_enable_i386) does not work properly])
		fi
	fi

	AC_MSG_RESULT($ac_cv_enable_i386)
	rm -f $RSI386_TEMP $RSI386_TEMP.c $RSI386_TEMP.o

	dnl Result variables
	AM_CONDITIONAL(ENABLE_I386, [test "$ac_cv_enable_i386" != no])
	CFLAGS32="$ac_cv_enable_i386"
	AC_SUBST(CFLAGS32)
])
m4trace:config/support-ida.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_IDA], [
# Begin macro ROSE_SUPPORT_IDA.

# Inclusion of test for the Interactive Disassembler IDA Pro package and it's location.

AC_MSG_CHECKING(for ida)
AC_ARG_WITH(ida,
[  --with-ida=PATH	Specify the prefix where IDA Pro is installed],
,
if test ! "$with_ida" ; then
   with_ida=no
fi
)

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_ida = "$with_ida"])

if test "$with_ida" = no; then
   # If ida is not specified, then don't use it.
   AC_MSG_NOTICE([skipping use of Ida])
else
   ida_path=$with_ida
   AC_MSG_NOTICE([setup Ida support in ROSE. path = "$ida_path"])
   AC_DEFINE_UNQUOTED([IDA_PRO_PATH],"$ida_path",[Prefix path for use of IDA.])
   AC_DEFINE([USE_ROSE_IDA_SUPPORT],1,[Controls use of IDA support for disassembling.])

fi

AC_SUBST(ida_path)

# End macro ROSE_SUPPORT_IDA.

])
m4trace:config/support-insure.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_INSURE], [
# Begin macro ROSE_SUPPORT_INSURE.

# We may be asked to guess the correct flags,
# so we must know our host and the compiler used.
AC_REQUIRE([AC_CANONICAL_HOST])
AC_REQUIRE([AC_PROG_CXX])
# DQ (9/26/2015): Making this code more portable with out warnings.
# AC_REQUIRE([BTNG_INFO_CXX_ID])
# AC_REQUIRE([BTNG_CXX_AR])

dnl *********************************************************************
dnl * Use INSURE
dnl *********************************************************************
# AC_ARG_ENABLE(insure-api,
#  [  --enable-insure-api ....................... Enable insure API in code.])
AC_ARG_ENABLE(insure,
 [  --enable-insure ....................... Augment the linker with insure.])

# if test "$enable_insure_api" = yes ; then
#   AC_DEFINE([USE_INSURE],[],[Support for Insure])
#   AC_DEFINE([USE_INSURE_API],[],[Support for Insure API (Compiling with the Insure library).])
# fi

dnl DQ added so that EDG can detect use of linker and use the api 
dnl while the rest of ROSE does not.  EDG only supports use of API
dnl not just the linker option.
if test "$enable_insure" = yes ; then
  AC_DEFINE([USE_INSURE],[],[Link-time support for Insure.])
fi



dnl *********************************************************************
dnl * Specify the location of INSURE
dnl *********************************************************************
# Let user specify where to find insure.
# Specify by --with-insure= or setting insure_PREFIX.
AC_MSG_CHECKING(for insure)
AC_ARG_WITH(insure,
[  --with-insure=PATH	Specify the prefix where insure++ is installed], , test "$insure_PREFIX" && with_insure="$insure_PREFIX")
test "$with_insure" && test ! "$with_insure" = no && insure_PREFIX="$with_insure"
AC_MSG_NOTICE([evaluating use of insure on commandline...])
AC_MSG_RESULT($insure_PREFIX)
if test "$insure_PREFIX" ; then
#  insure_INCLUDES="-I$insure_PREFIX"
#  insure_LIBS="$insure_PREFIX/insure_stubs.a"
#  insure_BIN="$insure_PREFIX/insure"
  insure_LIBS="$insure_PREFIX/lib/libinsure.so"
  insure_BIN="$insure_PREFIX/bin/insure"
fi
AC_SUBST(insure_PREFIX)
# AC_SUBST(insure_INCLUDES)
AC_SUBST(insure_LIBS)
AC_SUBST(insure_BIN)
AC_MSG_NOTICE([insure_INCLUDES = "$insure_INCLUDES"])
AC_MSG_NOTICE([insure_LIBS     = "$insure_LIBS"])
AC_MSG_NOTICE([insure_BIN      = "$insure_BIN"])

dnl Allows insure windows to be disabled, as it is too much load over the network.
# AC_ARG_ENABLE(insure-windows,
#   [  --enable-insure-windows ............... turn on use of INSURE windows option])
# test ! "$enable_insure_windows" = yes && insure_windows_option='-windows=no';



dnl *********************************************************************
dnl * Specify options for INSURE
dnl *********************************************************************
dnl  Added by DQ to support INSURE (using my favorite options and paths which might be platform specific)
dnl note that we have to use the ${} instead of $() for this to work on LINUX and IBM (other platforms do not seem to case)
dnl  INSURE_RUN_AT_EXIT="-run-at-exit=\"if %z; then echo \\\"%v: %e errors, %l+%L bytes leaked.\\\"; fi\" "
AC_ARG_WITH(insure-options,
   [  --with-insure-options=ARG ................ manually set INSURE options to ARG],
INSURE_OPTIONS=$with_insure_options,
INSURE_OPTIONS=""
)
AC_SUBST(INSURE_OPTIONS)


# if test "$enable_insure_linker" ; then
#   AUX_LINKER="${insure_BIN} ${INSURE_OPTIONS}"
# fi
# AC_SUBST(AUX_LINKER)



# if test "$enable_insure_linker" = yes ; then
# if test "$with_insure" = yes ; then
AC_MSG_NOTICE([enable_insure = "$enable_insure"])
if test "$enable_insure" = yes ; then
# Setup compiler specific options for using insure
# Different compilers (e.g KCC) require options in different order.
  AUX_LINKER="${insure_BIN} ${INSURE_OPTIONS}"
  case $CXX in
    g++)
    # See comment below about syntax change for Linux
      CC="insure"
      CCLD="$CC"
      CXX="insure"
      CXXLD="$CXX"
      ;;
    KCC | mpKCC)
    # insure specific option required and clear the AUX_LINKER
      CCLD="$CC --link_command_prefix '${insure_BIN} ${INSURE_OPTIONS}' -o"
      CXXLD="$CXX --link_command_prefix '${insure_BIN} ${INSURE_OPTIONS}' -o"
      AUX_LINKER=""
      ;;
    CC)
    # No insure specific option required
    # Can't use "$(xxx)" syntax since it only works when build proecess is run on SUNs
    # Linux requires a different syntax: "$xxx" instead.
    # CCLD="$(AUX_LINKER) $(CXX)"
    # CXXLD="$(AUX_LINKER) $(CXX)"
      CCLD="$AUX_LINKER $CXX"
      CXXLD="$AUX_LINKER $CXX"
    ;;
  esac
else
     CCLD="$CC"
# Liao: 2/17/2009, enable CXXLD environment variable to be accepted during configuration,
# especially when roseTranslator is used and it is not ready to be used as a linker
      CXXLD="$CXXLD"
      if test "x$CXXLD" = x; then
         CXXLD="$CXX"
      fi 
# BP : 10/29/2001, the above two lines were originally 
#      CCLD="$(CC)"
#      CXXLD="$(CXX)"
# but on Linux systems this seems to not work
fi

AC_SUBST(AUX_LINKER)

AC_MSG_NOTICE([in macro ROSE SUPPORT INSURE: CC    = "$CC"])
AC_MSG_NOTICE([in macro ROSE SUPPORT INSURE: CCLD  = "$CCLD"])
AC_MSG_NOTICE([in macro ROSE SUPPORT INSURE: CXX   = "$CXX"])
AC_MSG_NOTICE([in macro ROSE SUPPORT INSURE: CXXLD = "$CXXLD"])

# DQ (4/7/2011): Added automake conditional to control what code would be compiled 
# and tested using Insure++ (dynamic analysis tool for error checking from Parasoft).
AM_CONDITIONAL(ROSE_USE_INSURE, [test "x$enable_insure" = "xyes"])

AC_SUBST(CCLD)
AC_SUBST(CXXLD)

# echo "Exiting at base of insure support."
# exit 1

# End macro ROSE_SUPPORT_INSURE.

])
m4trace:config/support-isl.m4:19: -1- AC_DEFUN([ROSE_SUPPORT_ISL], [
  ROSE_ARG_WITH(
    [isl],
    [for  (ISL)],
    [use the Integer Set Library (ISL)],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_ISL" != "xno"; then
    ISL_INSTALL_PATH="$ROSE_WITH_ISL"
    ISL_INCLUDE_PATH="$ROSE_WITH_ISL/include/isl"
    ISL_LIBRARY_PATH="$ROSE_WITH_ISL/lib"
  else
    ISL_INSTALL_PATH=
    ISL_INCLUDE_PATH=
    ISL_LIBRARY_PATH=
  fi

  ROSE_ARG_WITH(
    [isl-include],
    [if the Integer Set Library (ISL) include directory was specified],
    [use this Integer Set Library (ISL) include directory],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_ISL_INCLUDE" != "xno"; then
      ISL_INCLUDE_PATH="$ROSE_WITH_ISL_INCLUDE"
  fi

  ROSE_ARG_WITH(
    [isl-lib],
    [if the Integer Set Library (ISL) library directory was specified],
    [use this Integer Set Library (ISL) library directory],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_ISL_LIB" != "xno"; then
      ISL_LIBRARY_PATH="$ROSE_WITH_ISL_LIB" 
  fi

  if test "x$ISL_INCLUDE_PATH" != "x"; then
      AC_CHECK_FILE(
          [${ISL_INCLUDE_PATH}/set.h],
          [],
          [ROSE_MSG_ERROR([set.h is missing, can't compile with ISL])])
  fi

  AM_CONDITIONAL(ROSE_WITH_ISL, [test "x$ISL_INCLUDE_PATH" != "x" && test "x$ISL_LIBRARY_PATH" != "x"])
  AM_CONDITIONAL(ROSE_WITH_ISL_INCLUDE, [test "x$ISL_INCLUDE_PATH" != "x"])

  AC_SUBST(ISL_INSTALL_PATH)
  AC_SUBST(ISL_INCLUDE_PATH)
  AC_SUBST(ISL_LIBRARY_PATH)

# End macro ROSE_SUPPORT_ISL.
])
m4trace:config/support-java.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_JAVA], [
# Begin macro ROSE_SUPPORT_JAVA.
ROSE_CONFIGURE_SECTION([Checking Java])

AC_MSG_CHECKING([for Java (javac first, then java, then jvm)])

AC_ARG_WITH([java],
            AS_HELP_STRING([--with-java],
                           [use Java for Fortran and Java language support in ROSE and/or Javaport support to build Java wrapers of ROSE functions (default is YES if Java can be found)]),
            [javasetting=$withval],
            [javasetting=try])

JAVAC=$javasetting
USE_JAVA=1
#echo "JAVA_HOME = ${JAVA_HOME}"
if test "x$javasetting" = xno; then
# echo 'test "x$javasetting" = xno;'
  JAVAC=""
  USE_JAVA=0
elif test "x$javasetting" = xyes || test "x$javasetting" = xtry; then
# echo 'test x$javasetting = xyes || test x$javasetting = xtry;'
  JAVA_PATH="${JAVA_HOME}"
# echo "JAVA_PATH = ${JAVA_PATH}"
  if test "x$JAVA_PATH" = x; then
#   echo 'test x$JAVA_PATH = x;'
# DQ & PC (11/3/2009): Search for javac instead of java since we require
# the JDK and this should detect that it is missign as early as possible.
    JAVAC="`which javac`"
  # if which javac > /dev/null; then
    if test $? -eq 0; then
    # echo 'which javac;'
    # echo "java = ${JAVA}"
    # JAVAC="`which javac`"
    # echo "javac = ${JAVAC}"
# DQ & PC (11/3/2009): Fixing support for Java that causes problems for CERT and our new RedHat Release 5 systems.
      ROSE_CANON_SYMLINK(JAVAC, "${JAVAC}")
    # echo "javac = ${JAVAC}"
      JAVAC_BASENAME=`basename ${JAVAC}`
      if test x${JAVAC_BASENAME} == "xjavac"; then
         : # echo "Found Sun or IBM Java (javac)"
      else
       # This is likely the Eclipse Java (ecj).
       # DQ (11/3/2009): If this is IBM Java then it should also work with ROSE and this macro.
         AC_MSG_ERROR([this is not SUN or IBM Java found by default (likely found ecj - Eclipse Java) -- specify correct java using --with-java=PATH])
      fi
    # AS_SET_CATFILE(JAVA_PATH, "`pwd`", "`dirname ${JAVA}`/../..")
      AS_SET_CATFILE(JAVA_PATH, "`pwd`", "`dirname ${JAVAC}`/..")
      
      # George Vulov (Aug. 25, 2010) On OS X the binaries found under /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/
      # aren't the true Java binaries; instead they check the java preferences app and then instantiate whatever version of Java
      # is specified there. The actual java binaries are located in /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home
      if test "x$build_vendor" = xapple; then
      	if (( `echo ${JAVA_PATH} | grep -c "/Commands/.."` > 0 )); then
      		AS_SET_CATFILE(JAVA_PATH, "`pwd`", "`dirname ${JAVAC}`/../../CurrentJDK/Home")
      	fi
	  fi
      
    # echo "After setting value: JAVA_PATH = ${JAVA_PATH}"
    elif test "x$javasetting" == "xyes"; then
      AC_MSG_ERROR([--with-java was given but "java" is not in PATH and JAVA_HOME was not set])
    else # $javasetting is "try", so it is not an error for Java to not be found
    # echo 'FALSE case: x$javasetting = xyes;'
      JAVAC=""
      USE_JAVA=0
    fi
  else
  # echo 'FALSE test x$JAVA_PATH = x;'
# DQ & PC (11/3/2009): Search for javac instead of java since we require
# the JDK and this should detect that it is missign as early as possible.
#   JAVA="${JAVA_PATH}/bin/java"
    JAVAC="${JAVA_PATH}/bin/javac"
  fi
elif test -d "${javasetting}"; then
# DQ & PC (11/3/2009): Search for javac instead of java since we require
# the JDK and this should detect that it is missign as early as possible.
  if test -x "${javasetting}/bin/javac"; then
    JAVA_PATH="${javasetting}"
  # echo "After setting value using javasetting: JAVA_PATH = ${JAVA_PATH}"
    JAVAC="${javasetting}/bin/javac"
  else
    AC_MSG_ERROR([argument to --with-java should be either a javac executable or a top-level JDK install directory (with bin/javac present)])
  fi
elif test -x "${javasetting}"; then
  AS_SET_CATFILE(JAVA_PATH, "`pwd`", "`dirname ${javasetting}`/..")
  JAVAC="${javasetting}"
else
  AC_MSG_ERROR([argument to --with-java should be either a javac executable or a top-level JDK install directory (with bin/javac present)])
fi

# echo "USE_JAVA = $USE_JAVA"
if test "x$USE_JAVA" = x1; then
# AC_MSG_RESULT([$JAVAC])
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT([not requested, internal java support disabled])
fi

# echo "Before checking for Java JVM: JAVA_PATH = ${JAVA_PATH}"
if test "x$USE_JAVA" = x1; then

  AC_MSG_NOTICE([Now verifying aspects of the found java software (java, javac, javah, jar)])

  JAVA_BIN="${JAVA_PATH}/bin"
  JAVA="${JAVA_BIN}/java"

  AC_MSG_CHECKING(for java)
  if test -x "${JAVA}"; then
    AC_MSG_RESULT(yes)

  AC_MSG_NOTICE([JAVA = "$JAVA"])

    # Determine java version, e.g. java version "1.7.0_51" or "12.0.1 2019-04-16"
    JAVA_VERSION=`${JAVA} -version 2>&1 | grep "java version" | sed 's/java version//' | sed 's/"//g'`

# try to detect openjdk if previous command fails , Liao 3/11/2019
   if test "x$JAVA_VERSION" = x; then
     JAVA_VERSION=`${JAVA} -version 2>&1 | grep "openjdk version" | sed 's/openjdk version//' | sed 's/"//g'`
   fi

    JAVA_VERSION_RELEASE=$(echo ${JAVA_VERSION} | cut -d\  -f2)
    JAVA_VERSION_=$(echo ${JAVA_VERSION} | cut -d\  -f1)
    JAVA_VERSION_MAJOR=$(echo ${JAVA_VERSION_} | cut -d. -f1)
    JAVA_VERSION_MINOR=$(echo ${JAVA_VERSION_} | cut -d. -f2)
    test -z $JAVA_VERSION_MINOR && JAVA_VERSION_MINOR=0
    JAVA_VERSION_PATCH=$(echo ${JAVA_VERSION_} | cut -d. -f3)
    test -z $JAVA_VERSION_PATCH && JAVA_VERSION_PATCH=0

    AC_MSG_CHECKING([JAVA_VERSION])
    AC_MSG_RESULT([${JAVA_VERSION}])

    AC_MSG_CHECKING([JAVA_VERSION_MAJOR])
    AC_MSG_RESULT([${JAVA_VERSION_MAJOR}])

    AC_MSG_CHECKING([JAVA_VERSION_MAJOR])
    AC_MSG_RESULT([${JAVA_VERSION_MINOR}])

    AC_MSG_CHECKING([JAVA_VERSION_PATCH])
    AC_MSG_RESULT([${JAVA_VERSION_PATCH}])

    AC_MSG_CHECKING([JAVA_VERSION_RELEASE])
    AC_MSG_RESULT([${JAVA_VERSION_RELEASE}])

    if test -z "${JAVA_VERSION_MAJOR}" ||
       test -z "${JAVA_VERSION_MINOR}" ||
       test -z "${JAVA_VERSION_PATCH}" ||
       test -z "${JAVA_VERSION_RELEASE}"
    then
      echo "JAVA_VERSION_MAJOR = $JAVA_VERSION_MAJOR"
      echo "JAVA_VERSION_MINOR = $JAVA_VERSION_MINOR"
      echo "JAVA_VERSION_PATCH = $JAVA_VERSION_PATCH"
      echo "JAVA_VERSION_RELEASE = $JAVA_VERSION_RELEASE"
      ROSE_MSG_ERROR([An error occurred while trying to determine your java version: one or more extracted major, minor, patch and release version numbers displayed above are empty. Please look into rose/config/support-java.m4 to make sure the extraction commands inside the m4 file work as expected.])
    fi
  else
    AC_MSG_ERROR([java not found in $JAVA_PATH])
  fi

  AC_MSG_CHECKING(for Java JVM include and link options)
# This is a hack, but it seems to work to find the JVM library
  if test -x /usr/bin/javaconfig; then # We are on a Mac
    JAVA_JVM_LINK="-framework JavaVM"
    JAVA_JVM_INCLUDE="-I`/usr/bin/javaconfig Headers`"
  else
    JAVA_JVM_FULL_PATH="`env _JAVA_LAUNCHER_DEBUG=x ${JAVA} 2>/dev/null | grep '^JVM path is' | cut -c 13-`" ; # Sun JVM
    JAVA_JVM_PATH=`dirname "${JAVA_JVM_FULL_PATH}"`
    if test "x$JAVA_JVM_FULL_PATH" = x; then
      JAVA_JVM_PATH="`env _JAVA_LAUNCHER_DEBUG=x ${JAVA} 2>&1 | grep '^JavaJVMDir  = ' | cut -c 15-`" # IBM J9 JVM
      if test "x$JAVA_JVM_PATH" = x; then
        AC_MSG_ERROR([unable to find path to JVM library])
      fi
    fi
    JAVA_JVM_LINK="-L${JAVA_JVM_PATH} -ljvm"
    AM_COND_IF([OS_MACOSX],[JAVA_JVM_INCLUDE="-I${JAVA_PATH}/include -I${JAVA_PATH}/include/darwin"],[JAVA_JVM_INCLUDE="-I${JAVA_PATH}/include -I${JAVA_PATH}/include/linux"])
  fi
  AC_MSG_RESULT([$JAVA_JVM_INCLUDE and $JAVA_JVM_LINK])

# JAR="${JAVA_PATH}/bin/jar"
  JAR="${JAVA_BIN}/jar"

  AC_MSG_CHECKING(for jar)
  if test -x "${JAR}"; then
    AC_MSG_RESULT(yes)
  else
    AC_MSG_ERROR([jar not found in $JAVA_PATH])
  fi

  JAVAC="${JAVA_BIN}/javac"
  AC_MSG_CHECKING(for javac)
  if test -x "${JAVAC}"; then
    AC_MSG_RESULT(yes)
  else
    AC_MSG_ERROR([javac not found in $JAVA_PATH])
  fi

# javah (JAVAH) has been removed from openjdk version 12.0.1 and replaced by an improved javac.
# Thus JAVAH has been removed below, starting with the following line [CR 2019.04.30]
#
#  JAVAH="${JAVA_BIN}/javah"

fi

# DQ (10/13/2010): Added checking for jar command (common in Linux, but not on some platforms; e.g NMI machines).
# AC_CHECK_PROGS(JAR, [jar])
# AM_CONDITIONAL(ROSE_USE_JAR, [test "x$JAR" = "xjar"])
# echo "value of JAR variable = $JAR"
# if test $JAR; then
#   AC_DEFINE([USE_ROSE_JAR_SUPPORT],[],[Controls use of ROSE support for Java.])
# fi

# DQ (10/18/2010): We would like to have the USE_JAVA macro not appear outside of this file.
if test "x$USE_JAVA" = x1; then
# define macros are used for source code and are defined in rose_config.h.
  AC_DEFINE([USE_ROSE_JAVA_SUPPORT],[],[Controls use of ROSE support for Java.])
# DQ (10/18/2010): Renaming this macro to be uniform in ROSE.
  AC_DEFINE([USE_ROSE_INTERNAL_JAVA_SUPPORT],[],[Controls use of ROSE support for Java.])

# DQ (12/6/2016): In MAC OSX set the LDFLAGS to include the rpath.
# LDFLAGS="-Xlinker -rpath ${JAVA_HOME}/jre/lib/server"
# AC_SUBST([SWI_PROLOG_LDADD], ["-L'$PLBASE/lib/$PLARCH' -Wl,-rpath '$PLBASE/lib/$PLARCH' $PLLIB $PLLIBS"])
# MAPLE_LIBS="-Wl,-rpath,/usr/lib -lmaplec $MAPLE_EXTRA_LIBS"
# LDFLAGS="-Xlinker -rpath ${JAVA_HOME}/jre/lib/server $LDFLAGS"

# AM_COND_IF([OS_MACOSX],[JAVA_JVM_INCLUDE="-I${JAVA_PATH}/include -I${JAVA_PATH}/include/darwin"],[JAVA_JVM_INCLUDE="-I${JAVA_PATH}/include -I${JAVA_PATH}/include/linux"])
AM_COND_IF([OS_MACOSX],[LDFLAGS="-Xlinker -rpath ${JAVA_HOME}/jre/lib/server $LDFLAGS"],[])

fi

AC_MSG_NOTICE([in support-java: build_os is "$build_os"])
AC_MSG_NOTICE([in support-java: LDFLAGS = "$LDFLAGS"])
AC_MSG_NOTICE([in support-java: OS_MACOSX = "$OS_MACOSX"])

# echo "In support-java: Exiting as a test!"
# exit 1

# DQ (11/3/2010): added test for if jni is available by default.  If this passes then 
# it is because it is in the compiler's include directly and so it is most likely the
# wrong jni.h (e.g. from GNU's Java, instead of the Java in $JAVA_PATH.  So if this
# is the case then we want to use the 
AC_CHECK_HEADERS([jni.h], [have_jni=yes], [have_jni=no])
if test "x$have_jni" = "xyes"; then
  AC_MSG_WARN([ROSE has determined that there is a default version of jni.h (likely in the compiler's include directory); this may be the wrong version of jni.h (however, this is not known to be a problem)])
else
  AC_MSG_RESULT([ROSE can't find the jni.h in a default directory (this is good since it will be included correctly).])
fi
# AC_MSG_ERROR([Exiting as a test after checking for jni.h!])

# DQ (10/18/2010): Renaming this macro to be uniform in ROSE.
AM_CONDITIONAL(ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL, [test "x$USE_JAVA" = x1])
AM_CONDITIONAL(ROSE_USE_INTERNAL_JAVA_SUPPORT, [test "x$USE_JAVA" = x1])


AC_DEFINE_UNQUOTED([JAVA_JVM_PATH],["$JAVA"],[Path to JVM executable])

AC_SUBST(JAVA_PATH)
AC_SUBST(JAVA_JVM_LINK)
AC_SUBST(JAVA_JVM_PATH)
AC_SUBST(JAVA_JVM_INCLUDE)
AC_SUBST(JAVA)
AC_SUBST(JAVAC)
AC_SUBST(JAR)

# Java Version Information
AM_CONDITIONAL(ROSE_WITH_JAVA_6, [test "x${JAVA_VERSION_MINOR}" != "x6"])
AM_CONDITIONAL(ROSE_WITH_JAVA_7, [test "x${JAVA_VERSION_MINOR}" != "x7"])
AM_CONDITIONAL(ROSE_WITH_JAVA_8, [test "x${JAVA_VERSION_MINOR}" != "x8"])

AC_DEFINE_UNQUOTED(
  JAVA_VERSION_MAJOR,
  ["${JAVA_VERSION_MAJOR}"],
  [Major version number of the Java JDK])
AC_DEFINE_UNQUOTED(
  JAVA_VERSION_MINOR,
  ["${JAVA_VERSION_MINOR}"],
  [Minor version number of the Java JDK])
AC_DEFINE_UNQUOTED(
  JAVA_VERSION_PATCH,
  ["${JAVA_VERSION_PATCH}"],
  [Patch version number of the Java JDK])
AC_DEFINE_UNQUOTED(
  JAVA_VERSION_RELEASE,
  ["${JAVA_VERSION_RELEASE}"],
  [Release version number of the Java JDK])


dnl Summary of Java information
AC_MSG_NOTICE([summary of Java information:])
AC_MSG_NOTICE([    The --with-java switch specified:       $javasetting])
AC_MSG_NOTICE([    Installation path (JAVA_PATH):          $JAVA_PATH])
AC_MSG_NOTICE([    C++ header switches (JAVA_JVM_INCLUDE): $JAVA_JVM_INCLUDE])
AC_MSG_NOTICE([    C++ link switches (JAVA_JVM_LINK):      $JAVA_JVM_LINK])
AC_MSG_NOTICE([    Runtime command (JAVA):                 $JAVA])
AC_MSG_NOTICE([    Compiler command (JAVAC):               $JAVAC])
AC_MSG_NOTICE([    Archive tool (JAR):                     $JAR])

# End macro ROSE_SUPPORT_JAVA.

])
m4trace:config/support-languages.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_LANGUAGE_CONFIG_OPTIONS], [
#  TOO (3/10/2011):
#
#	1. Manage language support command-line options
#	2. Set flags to indicate which languages to support 
#	3. Output language support (debugging)
#	4. Enabled only one language
#	5. Set the automake conditional macros that will be used in Makefiles
#
#  DQ (4/15/2010): Added support to specify selected languages to support in ROSE.
#########################################################################################
ROSE_CONFIGURE_SECTION([Checking analyzable languages])

#########################################################################################
#
#  Manage language support command-line options:
#
#	--enable-languages(=args)
#	--enable-binary-analysis		TODO: make alias: --enable-binaries
#	--enable-c
#	--enable-cxx
#	--enable-cuda
#	--enable-fortran
#	--enable-java
#	--enable-php
#	--enable-python
#	--enable-opencl
#
#	TODO:
#	-Issue warning if user specifies conflicting language options, e.g.
#	         --enable-languages=binaries --disable-binaries
#
#########################################################################################

#########################################################################################
#
##
  #ALL_SUPPORTED_LANGUAGES="binaries c c++ cuda fortran java php python opencl"
  ALL_SUPPORTED_LANGUAGES="binaries c c++ cuda fortran java php         opencl"
  #ALL_SUPPORTED_LANGUAGES="binaries c c++ cuda fortran java php        opencl"
##
#
#########################################################################################

#########################################################################################
#
##
   ROSE_SUPPORT_LANGUAGE_CONFIG_OPTIONS_DEPRECATED
##
#
#########################################################################################



#  TOO (3/18/2011): For now, the '--enable-only-LANGUAGE' options will take precedence over
#  all other language options. It might be useful, however, to add additional testing to
#  issue warnings/errors when the user mistakenly specifies multiple language options,
#  especially if they are conflicting.
if test "x$USER_GAVE_ENABLE_ONLY_LANGUAGE_CONFIG_OPTION" = "xno" ; then
AC_ARG_ENABLE([languages],
               AS_HELP_STRING([--enable-languages=LIST],[Build specific languages: all,none,binaries,c,c++,cuda,fortran,java,opencl,php,python (default=all)]),,
               [enableval=all])

	       # Default support for all languages
	       case "$enableval" in
 	         all|yes)
		 	LANGUAGES_TO_SUPPORT="$ALL_SUPPORTED_LANGUAGES"
		 	;;
                 *)
                 	LANGUAGES_TO_SUPPORT="$enableval"
                 	;;
	       esac

# Convert support-language-list to a space-separated list, stripping
# leading and trailing whitespace
LANGUAGES_TO_SUPPORT="`echo $LANGUAGES_TO_SUPPORT | sed -e 's/,/ /g;s/^[ \t]*//;s/[ \t]*$//'`" 
#DEBUG#echo "LANGUAGES_TO_SUPPORT='$LANGUAGES_TO_SUPPORT'"

AC_ARG_ENABLE([binary-analysis],
               AS_HELP_STRING([--enable-binary-analysis],[Enable binary analysis support in ROSE (default=yes)]),
                echo "$LANGUAGES_TO_SUPPORT" | grep --quiet "binaries"
                if test $? = 0 ; then 
                  list_has_binaries=yes
                fi
                case "$enableval" in
                  [yes)]
                  	if test "x$list_has_binaries" != "xyes" ; then
                          # --enable-languages does not include binaries, but --enable-binary-analysis=yes
                  	  LANGUAGES_TO_SUPPORT+=" binaries"
                        fi
                  	;;
                  [no)]
                        # remove 'binaries' from support languages list
                  	LANGUAGES_TO_SUPPORT="`echo $LANGUAGES_TO_SUPPORT | sed 's/binaries//g'`"
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-binary-analysis='$enableval' is not supported; use 'yes' or 'no'])]
                 	;;
                esac
               ,)
AC_ARG_ENABLE([c],
               AS_HELP_STRING([--enable-c],[Enable C language support in ROSE (default=yes). Note:  C++ support must currently be simultaneously enabled/disabled]),
                echo "$LANGUAGES_TO_SUPPORT" | grep --quiet "\bc\b"
                if test $? = 0 ; then 
                  list_has_c=yes
                fi
                case "$enableval" in
                  [yes)]
                  	if test "x$list_has_c" != "xyes" ; then
                          # --enable-languages does not include C, but --enable-c=yes
                  	  LANGUAGES_TO_SUPPORT+=" c"
                        fi
                  	;;
                  [no)]
                        list_has_cxx="`echo $LANGUAGES_TO_SUPPORT | [awk '{for (i=1; i<=NF; i++) { if ($i == "c++") { printf "yes"; } } }']`"
                        if test "x$list_has_cxx" = "xyes" && test "x$enable_cxx" != "xno" ; then
                  	  [AC_MSG_FAILURE([cannot disable 'C' language support because 'C++' language support is enabled -- currently both are required to be supported together. If you really don't want 'C' language support, please also disable 'C++' language support (see ./configure --help)])]
                        else
                          # remove 'C' from support languages list
                          # TOO (3/11/2011): couldn't find a nice way to handle with sed, cases: "c", "c c++", ...
                  	  LANGUAGES_TO_SUPPORT="`echo $LANGUAGES_TO_SUPPORT | [awk '{for (i=1; i<=NF; i++) { if ($i != "c") { printf "%s ",$i; } } }']`" 
                        fi
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-c="$enableval" is not supported; use "yes" or "no"])]
                 	;;
                esac
               ,)
AC_ARG_ENABLE([cxx],
               AS_HELP_STRING([--enable-cxx],[Enable C++ language support in ROSE (default=yes). Note: C support must currently be simultaneously enabled/disabled]),
                case "$enableval" in
                  [yes)]
                  	if test "x$list_has_cxx" != "xyes" ; then
                          # --enable-languages does not include C++, but --enable-cxx=yes
                  	  LANGUAGES_TO_SUPPORT+=" c++"
                        fi
                  	;;
                  [no)]
                        list_has_c="`echo $LANGUAGES_TO_SUPPORT | [awk '{for (i=1; i<=NF; i++) { if ($i == "c") { printf "yes"; } } }']`"
                        if test "x$list_has_c" = "xyes" && test "x$enable_c" != "xno" ; then
                  	  [AC_MSG_FAILURE([cannot disable C++ language support because C language support is enabled -- currently both are required to be supported together. If you really don't want C++ language support, please also disable C language support (see ./configure --help)])]
                        else
                          # remove 'C++' from support languages list
                  	  LANGUAGES_TO_SUPPORT="`echo $LANGUAGES_TO_SUPPORT | sed 's/c++//g'`"
                        fi
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-cxx="$enableval" is not supported; use "yes" or "no"])]
                 	;;
                esac
               ,)
AC_ARG_ENABLE([cuda],
               AS_HELP_STRING([--enable-cuda],[Enable Cuda language support in ROSE (default=yes)]),
                echo "$LANGUAGES_TO_SUPPORT" | grep --quiet "cuda"
                if test $? = 0 ; then 
                  list_has_cuda=yes
                fi
                case "$enableval" in
                  [yes)]
                  	if test "x$list_has_cuda" != "xyes" ; then
                          # --enable-languages does not include Cuda, but --enable-cuda=yes
                  	  LANGUAGES_TO_SUPPORT+=" cuda"
                        fi
                  	;;
                  [no)]
                        # remove 'Cuda' from support languages list
                  	LANGUAGES_TO_SUPPORT="`echo $LANGUAGES_TO_SUPPORT | sed 's/cuda//g'`"
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-cuda="$enableval" is not supported; use "yes" or "no"])]
                 	;;
                esac
               ,)
AC_ARG_ENABLE([fortran],
               AS_HELP_STRING([--enable-fortran],[Enable Fortran language support in ROSE (default=yes)]),
                echo "$LANGUAGES_TO_SUPPORT" | grep --quiet "fortran"
                if test $? = 0 ; then 
                  list_has_fortran=yes
                fi
                case "$enableval" in
                  [yes)]
                        if test "x$with_java" = "xno" ; then
                          [AC_MSG_FAILURE([[[Fortran Support]] you specified conflicting configure flags: --enable-fortran="$enableval" enables Fortran-language support, which requires Java, and --with-java="$with_java" disables Java])]
                        fi
                        if test "x$USE_JAVA" = "x0" ; then
                          [AC_MSG_FAILURE([[[Fortran Support]] you requested to build Fortran language support with --enable-fortran="$enableval", which requires Java, but Java was not found. Do you need to explicitly specify your Java using the --with-java configure-switch? (See ./configure --help)])]
                        fi

                  	if test "x$list_has_fortran" != "xyes" ; then
                          # --enable-languages does not include Fortran, but --enable-fortran=yes
                  	  LANGUAGES_TO_SUPPORT+=" fortran"
                        fi
                  	;;
                  [no)]
                        # remove 'Fortran' from support languages list
                  	LANGUAGES_TO_SUPPORT="`echo $LANGUAGES_TO_SUPPORT | sed 's/fortran//g'`"
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-fortran="$enableval" is not supported; use "yes" or "no"])]
                 	;;
                esac
               ,
                if test "x$with_java" = "xno" ; then
		  if test "$enable_fortran" != no; then
                    enable_fortran=no
                    LANGUAGES_TO_SUPPORT="`echo $LANGUAGES_TO_SUPPORT | sed 's/fortran//g'`"
                    [echo "[[Fortran support]] disabling Fortran language support, which requires Java, because you specified --with-java='$with_java'"]
		  fi
                fi)
AC_ARG_ENABLE([java],
               AS_HELP_STRING([--enable-java],[Enable Java language support in ROSE (default=yes). Note: --without-java turns off support for ALL components in ROSE that depend on Java, including Java language support]),
                echo "$LANGUAGES_TO_SUPPORT" | grep --quiet "java"
                if test $? = 0 ; then 
                  list_has_java=yes
                fi
                case "$enableval" in
                  [yes)]
                        if test "x$with_java" = "xno" ; then
                          [AC_MSG_FAILURE([[[Java Support]] you specified conflicting configure flags: --enable-java="$enableval" enables Java-language support, but --with-java="$with_java" disables it])]
                        fi
                        if test "x$USE_JAVA" = "x0" ; then
                          [AC_MSG_FAILURE([[[Java Support]] you requested to build Java language support with --enable-java="$enableval", which requires Java, but Java was not found. Do you need to explicitly specify your Java using the --with-java configure-option? (See ./configure --help)])]
                        fi

                  	if test "x$list_has_java" != "xyes" ; then
                          # --enable-languages does not include Java, but --enable-java=yes
                  	  LANGUAGES_TO_SUPPORT+=" java"
                        fi
                  	;;
                  [no)]
                        # remove 'Java' from support languages list
                  	LANGUAGES_TO_SUPPORT="`echo $LANGUAGES_TO_SUPPORT | sed 's/java//g'`"
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-java="$enableval" is not supported; use "yes" or "no"])]
                 	;;
                esac
               ,
                if test "x$with_java" = "xno" ; then
		  if test "$enable_java" != no; then
                    enable_java=no
                    LANGUAGES_TO_SUPPORT="`echo $LANGUAGES_TO_SUPPORT | sed 's/java//g'`"
                    [echo "[[Java support]] disabling Java language support, which requires Java, because you specified --with-java='$with_java'"]
		  fi
                fi)
AC_ARG_ENABLE([php],
               AS_HELP_STRING([--enable-php],[Enable PHP language support in ROSE (default=yes)]),
                echo "$LANGUAGES_TO_SUPPORT" | grep --quiet "php"
                if test $? = 0 ; then 
                  list_has_php=yes
                fi
                case "$enableval" in
                  [yes)]
                  	if test "x$list_has_php" != "xyes" ; then
                          # --enable-languages does not include PHP, but --enable-php=yes
                  	  LANGUAGES_TO_SUPPORT+=" php"
                        fi
                  	;;
                  [no)]
                        # remove 'PHP' from support languages list
                  	LANGUAGES_TO_SUPPORT="`echo $LANGUAGES_TO_SUPPORT | sed 's/php//g'`"
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-php="$enableval" is not supported; use "yes" or "no"])]
                 	;;
                esac
               ,)
AC_ARG_ENABLE([python],
               AS_HELP_STRING([--enable-python],[Enable Python language support in ROSE (default=no)]),
                echo "$LANGUAGES_TO_SUPPORT" | grep --quiet "python"
                if test $? = 0 ; then
                  list_has_python=yes
                fi
                case "$enableval" in
                  [yes)]
                  	if test "x$list_has_python" != "xyes" ; then
                        # --enable-languages does not include python, but --enable-python=yes
                        LANGUAGES_TO_SUPPORT+=" python"
                    fi
                  	;;
                  [no)]
                    # Fail if --with-python is specified
                    if test "x$with_python" != "x"; then
                        AC_MSG_FAILURE([cannot mix flags --with-python and --enable-python=no])
                    fi

                    # remove 'python' from support languages list
                    LANGUAGES_TO_SUPPORT="`echo $LANGUAGES_TO_SUPPORT | sed 's/python//g'`"
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-python="$enableval" is not supported; use "yes" or "no"])]
                 	;;
                esac
               ,

                dnl  Warn if --with-python is specified and --enable-python is not specified. The "--with-python=PATH"
		dnl  switch is used to specify a non-standard location for the Python interpreter, while the "--enable-python"
		dnl  switch causes librose to contain a python interpreter as part of its frontend.  Do not automatically
		dnl  turn on "--enable-python" because then there's no way for users to specify the name of the python
		dnl  interpreter (which might be needed by some ROSE projects) without also enabling the python parser
		dnl  in ROSE's frontend (which has stricter version requirements and might not compile).
                if test "$with_python" != "" -a "$with_python" != "no"; then
                    AC_MSG_WARN([--with-python specified without --enable-python; ROSE will not have a python frontend parser])
                fi
               )
AC_ARG_ENABLE([opencl],
               AS_HELP_STRING([--enable-opencl],[Enable OpenCL language support in ROSE (default=yes)]),
                echo "$LANGUAGES_TO_SUPPORT" | grep --quiet "opencl"
                if test $? = 0 ; then 
                  list_has_opencl=yes
                fi
                case "$enableval" in
                  [yes)]
                  	if test "x$list_has_opencl" != "xyes" ; then
                          # --enable-languages does not include OpenCL, but --enable-opencl=yes
                  	  LANGUAGES_TO_SUPPORT+=" opencl"
                        fi
                  	;;
                  [no)]
                        # remove 'OpenCL' from support languages list
                  	LANGUAGES_TO_SUPPORT="`echo $LANGUAGES_TO_SUPPORT | sed 's/opencl//g'`"
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-opencl="$enableval" is not supported; use "yes" or "no"])]
                 	;;
                esac
               ,)
else
  echo "[[enable-only-$LANGUAGES_TO_SUPPORT support:warning]] ignoring any other language-support configuration options."
fi #end-if test "x$USER_GAVE_ENABLE_ONLY_LANGUAGE_CONFIG_OPTION" = "xno" ;


#
# C and C++ are currently required to be supported simultaneously 
#
list_has_c="`echo $LANGUAGES_TO_SUPPORT | [awk '{for (i=1; i<=NF; i++) { if ($i == "c") { printf "yes"; } } }']`"
list_has_cxx="`echo $LANGUAGES_TO_SUPPORT | [awk '{for (i=1; i<=NF; i++) { if ($i == "c++") { printf "yes"; } } }']`"

if test "x$list_has_c" = "xyes" && test "x$list_has_cxx" != "xyes"; then
  LANGUAGES_TO_SUPPORT+=" c++"
  echo "[[C language support:warning]] turning on C++ support (currently required)"
fi

if test "x$list_has_cxx" = "xyes" && test "x$list_has_c" != "xyes"; then
  LANGUAGES_TO_SUPPORT+=" c"
  echo "[[C++-only support:warning]] turning on C support (currently required)"
fi

#########################################################################################
#
#  Set flags to indicate which languages to support according to the
#  user specified command-line options; including macros that will be
#  contained in BUILD_TREE/rose_config.h 
#
#########################################################################################
if test "x$LANGUAGES_TO_SUPPORT" = "x" ; then
  LANGUAGES_TO_SUPPORT=none
fi
count_of_languages_to_support=0
for a_language in $LANGUAGES_TO_SUPPORT ; do

count_of_languages_to_support=`expr $count_of_languages_to_support + 1`
case "$a_language" in 

none|no)
	support_binaries_frontend=no
	support_c_frontend=no
	support_cxx_frontend=no
	support_cuda_frontend=no
	support_fortran_frontend=no
	support_java_frontend=no
	support_php_frontend=no
	support_python_frontend=no
	support_opencl_frontend=no
        with_haskell=no
        enable_binary_analysis_tests=no
        enable_projects_directory=no
        enable_tutorial_directory=no
	AC_MSG_WARN([you did not enable any language support])
	;;
binaries)
	support_binaries_frontend=yes
	AC_DEFINE([ROSE_BUILD_BINARY_ANALYSIS_SUPPORT], [], [Build ROSE to support the Binary Analysis])
	;;
c)
	support_c_frontend=yes
	AC_DEFINE([ROSE_BUILD_C_LANGUAGE_SUPPORT], [], [Build ROSE to support the C langauge])
	;;
c++)
	support_cxx_frontend=yes
	AC_DEFINE([ROSE_BUILD_CXX_LANGUAGE_SUPPORT], [], [Build ROSE to support the C++ langauge])
	;;
cuda)
	support_cuda_frontend=yes
	AC_DEFINE([ROSE_BUILD_CUDA_LANGUAGE_SUPPORT], [], [Build ROSE to support the CUDA langauge])
        GENERATE_CUDA_SPECIFIC_HEADERS
	;;
fortran)
	if test "x$USE_JAVA" = x1; then
	  if test "x$GFORTRAN_PATH" = "x" -o "x$GFORTRAN_PATH" = "xno"; then
            AC_MSG_FAILURE([[[Fortran support]] gfortran not found: required for syntax checking and semantic analysis.
                           Do you need to explicitly specify gfortran using the --with-gfortran=path/to/gfortran configure-switch? (See ./configure --help)])
          else
     	    support_fortran_frontend=yes
	    AC_DEFINE([ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT], [], [Build ROSE to support the Fortran langauge])
          fi
        elif test "x$with_java" = "xno" ; then
	  AC_MSG_FAILURE([[[Fortran support]] cannot support the Fortran language because you specified --with-java="$with_java". You can turn off Fortran support with --disable-fortran (See ./configure --help)]) 
	else
	  AC_MSG_FAILURE([[[Fortran support]] Java Virtual Machine (JVM) not found: required by the Open Fortran Parser (OFP).
	                 Do you need to explicitly specify Java using the --with-java configure-switch? (See ./configure --help)])
	fi
	;;
java)
        if test "x$USE_JAVA" = x1; then
	  support_java_frontend=yes
	  AC_DEFINE([ROSE_BUILD_JAVA_LANGUAGE_SUPPORT], [], [Build ROSE to support the Java langauge])
        else
          AC_MSG_FAILURE([[[Java support]] Java dependencies not found: required for parser support in ROSE -- uses the  Eclipse Compiler for Java (ECJ).
                         Do you need to explicitly specify Java (javac, JDk,...) using the --with-java configure-switch? (See ./configure --help)])
        fi
	;;
php)
	support_php_frontend=yes
	AC_DEFINE([ROSE_BUILD_PHP_LANGUAGE_SUPPORT], [], [Build ROSE to support the PHP langauge])
	;;
python)
	support_python_frontend=yes
	AC_DEFINE([ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT], [], [Build ROSE to support the Python langauge])
	;;
opencl)
	support_opencl_frontend=yes
	AC_DEFINE([ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT], [], [Build ROSE to support the OpenCL langauge])
        GENERATE_OPENCL_SPECIFIC_HEADERS
	;;
*)
	AC_MSG_FAILURE([unrecognized language "$a_language"])
	;;
esac
done


#
# Check Java version for Fortran front-end support
#
# Versions greater than 1.8 may work but haven't been tested [Rasmussen, 2019.02.27]
#
#if test "x$support_fortran_frontend" = "xyes" ; then
#    if test "x$JAVA_VERSION_MAJOR" != x13; then
#	AC_MSG_FAILURE([Java version for Fortran front-end must be openjdk version 13.0.x [major version not 13]])
#    fi
#    if test "x$JAVA_VERSION_MINOR" != x0; then
#	AC_MSG_FAILURE([Java version for Fortran front-end must be openjdk version 13.0.x [minor version not 0]])
#    fi
#fi


#########################################################################################
#
#  Output language support
#
#########################################################################################
#########################################################################################
#
#  Enabled only one language: set specific configurations for minimal build of ROSE 
#
#########################################################################################
if test $count_of_languages_to_support = 2 ; then
  #
  # Only C/C++ (currently required to be supported simultaneously) 
  #
  if test "x$support_c_frontend" = "xyes" && test "x$support_cxx_frontend" = "xyes" ; then
    with_haskell=no
    enable_binary_analysis_tests=no
    enable_projects_directory=no
    enable_tutorial_directory=no
  fi
elif test $count_of_languages_to_support = 1 ; then
  support_only_one_language=yes
  AC_MSG_CHECKING([$LANGUAGES_TO_SUPPORT-only specific configurations])
  echo ""

  #
  # Only Java 
  #
  if test "x$support_java_frontend" = "xyes" ; then
    # When using fortran only assume that we are not interested in java language support in ROSE.
    # However, currently the --with-java option controls the use of java support for both Fortran
    # and Java language support. Now that we have added Java language support to ROSE this is
    # unintentionally confusing. So we can't turn this off since the Fortran support requires
    # internal java (JVM) support.
    # with_java=no

    with_haskell=no
    with_php=no
    enable_python=no
    enable_binary_analysis_tests=no

    # Allow tests directory to be run so that we can run the Fortran tests.
    # enable_tests_directory=no

    enable_projects_directory=no
    enable_tutorial_directory=no
  fi

  #
  # Only Fortran
  # requested by Rice University and LANL 
  #
  if test "x$support_fortran_frontend" = "xyes" ; then
    # Scott appears to require CPPFLAGS to be set...
    #debug#echo "Before setting CPPFLAGS: CPPFLAGS = $CPPFLAGS"
    CPPFLAGS="$CPPFLAGS $JAVA_JVM_INCLUDE"
    echo "[[Fortran-only support]] added JAVA_JVM_INCLUDE ($JAVA_JVM_INCLUDE) to CPPFLAGS ($CPPFLAGS)"

    # DQ: I think that we have to express this option in terms of the "with_"
    # version of the macro instead of the "without_" version of the macro.
    # without_haskell=yes
    with_haskell=no

    # When using fortran only assume that we are not interested in java language support in ROSE.
    # However, currently the --with-java option controls the use of java support for both Fortran
    # and Java language support. Now that we have added Java language support to ROSE this is
    # unintentionally confusing. So we can't turn this off since the Fortran support requires
    # internal java (JVM) support.
    # with_java=no

    # So these should be expressed in terms of the "with" and "enable" versions of each option's macro.
    # without_php=yes
    with_php=no
    enable_python=no

    # disable_binary_analysis_tests=yes
    enable_binary_analysis_tests=no

    # Allow tests directory to be run so that we can run the Fortran tests.
    # enable_tests_directory=no

    enable_projects_directory=no
    enable_tutorial_directory=no

    # Test disabling a configure test that is on by default
    # I can't verify that the disable version of the variable effects the option.
    # Where as the enable version of the macro WILL control the setting of the option.
    # disable_language_only_restriction_test=yes
    # disable_language_only_restriction_test=no
    # enable_language_only_restriction_test=yes
    # enable_language_only_restriction_test=no

    # This allows testing this mechanism to set configure options from within the configure script...
    # enable_edg_version=4.5
  fi

  #
  # Only PHP 
  #
  if test "x$support_php_frontend" = "xyes" ; then
    with_haskell=no
    enable_binary_analysis_tests=no
    enable_projects_directory=no
    enable_tutorial_directory=no
  fi

  #
  # Only Python
  #
  if test "x$support_python_frontend" = "xyes" ; then
    with_haskell=no
    enable_binary_analysis_tests=no
    enable_projects_directory=no
    enable_tutorial_directory=no
  fi

  #
  # Only binary analysis 
  #
  if test "x$support_binaries_frontend" = "xyes" ; then
    with_haskell=no
    enable_projects_directory=no
    enable_tutorial_directory=no
  fi

  #
  # Only cuda  
  #
  if test "x$support_cuda_frontend" = "xyes" ; then
    with_haskell=no
    enable_binary_analysis_tests=no
    enable_projects_directory=no
    enable_tutorial_directory=no
  fi

  #
  # Only opencl  
  #
  if test "x$support_opencl_frontend" = "xyes" ; then
    with_haskell=no
    enable_binary_analysis_tests=no
    enable_projects_directory=no
    enable_tutorial_directory=no
  fi
#AC_MSG_RESULT([done])
#end-if $count_of_languages==1 (enable-only-language)

###
  # Output language-only configuration
  #
  #

  #
  # Haskell
  #
  if test "x$with_haskell" = "xyes" ; then
    AC_MSG_NOTICE([$LANGUAGES_TO_SUPPORT-only support with haskell])
  elif test "x$with_haskell" = "xno" ; then
    AC_MSG_NOTICE([$LANGUAGES_TO_SUPPORT-only support without haskell])
  fi

  #
  # PHP
  #
  if test "x$with_php" = "xyes" ; then
    AC_MSG_NOTICE([$LANGUAGES_TO_SUPPORT-only support with PHP])
  elif test "x$with_php" = "xno" ; then
    AC_MSG_NOTICE([$LANGUAGES_TO_SUPPORT-only support without PHP])
  fi

  #
  # Python
  #
  if test "x$enable_python" = "xyes" ; then
    AC_MSG_NOTICE([$LANGUAGES_TO_SUPPORT-only support with Python])
  elif test "x$enable_python" = "xno" ; then
    AC_MSG_NOTICE([$LANGUAGES_TO_SUPPORT-only support without Python])
  fi

  #
  # Binary analysis tests
  #
  if test "x$enable_binary_analysis_tests" = "xyes" ; then
    AC_MSG_NOTICE([$LANGUAGES_TO_SUPPORT-only support enabling binary analysis tests])
  elif test "x$enable_binary_analysis_tests" = "xno" ; then
    AC_MSG_NOTICE([$LANGUAGES_TO_SUPPORT-only support disabling binary analysis tests])
  fi

  #
  # Projects/ directory 
  #
  if test "x$enable_projects_directory" = "xyes" ; then
    AC_MSG_NOTICE([$LANGUAGES_TO_SUPPORT-only support enabling ROSE/projects directory])
  elif test "x$enable_projects_directory" = "xno" ; then
    AC_MSG_NOTICE([$LANGUAGES_TO_SUPPORT-only support disabling ROSE/projects directory])
  fi

  #
  # Tutorial/ directory 
  #
  if test "x$enable_tutorial_directory" = "xyes" ; then
    AC_MSG_NOTICE([$LANGUAGES_TO_SUPPORT-only support enabling ROSE/tutorial directory])
  elif test "x$enable_tutorial_directory" = "xno" ; then
    AC_MSG_NOTICE([$LANGUAGES_TO_SUPPORT-only support disabling ROSE/tutorial directory])
  fi
fi
#########################################################################################
#
# TOO (3/14/2011): not used anymore?
#
#########################################################################################
#AC_ARG_ENABLE([language-only-restriction-test],AS_HELP_STRING([--enable-language-only-restriction-test],[Support language only restriction test]),[],[])
#if test "x$enableval" = "xyes"; then
#   echo "Setting: language-only-restriction-test option IS yes"
#else
#   echo "Setting: language-only-restriction-test option is NOT yes"
#fi
#if test "x$enable_language_only_restriction_test" = "xyes"; then
#   echo "Value of: language-only-restriction-test option macro IS yes"
#else
#   echo "Value of: language-only-restriction-test option macro is NOT yes"
#fi
#echo "enable_languages = $enable_languages"
#########################################################################################
#
# Set the automake conditional macros that will be used in Makefiles.
#
#########################################################################################
AM_CONDITIONAL(ROSE_BUILD_C_LANGUAGE_SUPPORT, [test "x$support_c_frontend" = xyes])
AM_CONDITIONAL(ROSE_BUILD_CXX_LANGUAGE_SUPPORT, [test "x$support_cxx_frontend" = xyes])
AM_CONDITIONAL(ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT, [test "x$support_fortran_frontend" = xyes])
AM_CONDITIONAL(ROSE_BUILD_JAVA_LANGUAGE_SUPPORT, [test "x$support_java_frontend" = xyes])
AM_CONDITIONAL(ROSE_BUILD_X10_LANGUAGE_SUPPORT, [false])
AM_CONDITIONAL(ROSE_BUILD_PHP_LANGUAGE_SUPPORT, [test "x$support_php_frontend" = xyes])
AM_CONDITIONAL(ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT, [test "x$support_python_frontend" = xyes])
AM_CONDITIONAL(ROSE_BUILD_BINARY_ANALYSIS_SUPPORT, [test "x$support_binaries_frontend" = xyes])
AM_CONDITIONAL(ROSE_BUILD_CUDA_LANGUAGE_SUPPORT, [test "x$support_cuda_frontend" = xyes])
AM_CONDITIONAL(ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT, [test "x$support_opencl_frontend" = xyes])

########################################################################################################################
# Automake doesn't support arbitrary logic expressions in "if" statements, so we have to define a boolean variable here for each
# logic expression that we need somewhere in a makefile. Per custom, we also define the corresponding C preprocessor symbol.

# The C preprocessor is supported when any of C, C++, or Fortran are supported.
if test "$support_c_frontend" = yes -o "$support_cxx_frontend" = yes -o "$support_fortran_frontend" = yes; then
    support_cpp_frontend=yes
else
    support_cpp_frontend=no
fi
AM_CONDITIONAL(ROSE_BUILD_CPP_LANGUAGE_SUPPORT, [test "$support_cpp_frontend" = yes])
if test "$support_cpp_frontend" = yes; then
    AC_DEFINE(ROSE_BUILD_CPP_LANGUAGE_SUPPORT, [], [Build ROSE to support the C preprocessor language])
fi

########################################################################################################################
# Summary output
AC_MSG_CHECKING([if the Binary Analysis frontend is enabled])
if test "x$support_binaries_frontend" = "xyes"; then
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([if the C frontend is enabled])
if test "x$support_c_frontend" = "xyes"; then
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([if the C++ frontend is enabled])
if test "x$support_cxx_frontend" = "xyes"; then
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([if the Cuda frontend is enabled])
if test "x$support_cuda_frontend" = "xyes"; then
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([if the Fortran frontend is enabled])
if test "x$support_fortran_frontend" = "xyes"; then
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([if the Java frontend is enabled])
if test "x$support_java_frontend" = "xyes"; then
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([if the PHP frontend is enabled])
if test "x$support_php_frontend" = "xyes"; then
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([if the Python frontend is enabled])
if test "x$support_python_frontend" = "xyes"; then
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([if the OpenCL frontend is enabled])
if test "x$support_opencl_frontend" = "xyes"; then
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi

# End macro ROSE_SUPPORT_LANGUAGES.
])
m4trace:config/support-languages.m4:786: -1- AC_DEFUN([ROSE_SUPPORT_LANGUAGE_CONFIG_OPTIONS_DEPRECATED], [
#########################################################################################
#
#  TOO (3/18/2011):
#
#  Out variables:
#  USER_GAVE_ENABLE_ONLY_LANGUAGE_CONFIG_OPTION(=yes/no)
#
#########################################################################################

USER_GAVE_ENABLE_ONLY_LANGUAGE_CONFIG_OPTION=no
AC_ARG_ENABLE([only-binary-analysis],
              AS_HELP_STRING([--enable-only-binary-analysis(=yes)],
                             [Enable ONLY binary support in ROSE (Warning: '--enable-only-binary-analysis=no' and '--disable-only-binary-analysis' are no longer supported)]),
                case "$enableval" in
                  [yes)]
                  	LANGUAGES_TO_SUPPORT="binaries"
                        USER_GAVE_ENABLE_ONLY_LANGUAGE_CONFIG_OPTION=yes
                  	;;
                  [no)]
                  	[AC_MSG_FAILURE([--enable-only-binary-analysis="$enableval" and --disable-only-binary-analysis are no longer supported; use --disable-binary-analysis (see ./configure --help)])]
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-only-binary-analysis="$enableval" is not supported; use --enable-only-binary-analysis (see ./configure --help)])]
                 	;;
                esac
               ,)

AC_ARG_ENABLE([only-c],
              AS_HELP_STRING([--enable-only-c(=yes)],
                             [Enable ONLY C support in ROSE (Warning: '--enable-only-c=no' and '--disable-only-c' are no longer supported)]),
                case "$enableval" in
                  [yes)]
                  	LANGUAGES_TO_SUPPORT="c"
                        USER_GAVE_ENABLE_ONLY_LANGUAGE_CONFIG_OPTION=yes
                  	;;
                  [no)]
                  	[AC_MSG_FAILURE([--enable-only-c="$enableval" and --disable-only-c are no longer supported; use --disable-c (see ./configure --help)])]
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-only-c="$enableval" is not supported; use --enable-only-c (see ./configure --help)])]
                 	;;
                esac
               ,)

AC_ARG_ENABLE([only-cxx],
              AS_HELP_STRING([--enable-only-cxx(=yes)],
                             [Enable ONLY C++ support in ROSE (Warning: '--enable-only-cxx=no' and '--disable-only-cxx' are no longer supported)]),
                case "$enableval" in
                  [yes)]
                  	LANGUAGES_TO_SUPPORT="c++"
                        USER_GAVE_ENABLE_ONLY_LANGUAGE_CONFIG_OPTION=yes
                  	;;
                  [no)]
                  	[AC_MSG_FAILURE([--enable-only-cxx="$enableval" and --disable-only-cxx are no longer supported; use --disable-cxx (see ./configure --help)])]
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-only-cxx="$enableval" is not supported; use --enable-only-cxx (see ./configure --help)])]
                 	;;
                esac
               ,)

AC_ARG_ENABLE([only-fortran],
              AS_HELP_STRING([--enable-only-fortran(=yes)],
                             [Enable ONLY Fortran support in ROSE (Warning: '--enable-only-fortran=no' and '--disable-only-fortran' are no longer supported)]),
                case "$enableval" in
                  [yes)]
                        if test "x$with_java" = "xno" ; then
                          [AC_MSG_FAILURE([[[Fortran Support]] you specified conflicting configure flags: --enable-only-fortran="$enableval" enables Fortran-language support, which requires Java support, and --with-java="$with_java" disables Java support])]
                        else  
                  	  LANGUAGES_TO_SUPPORT="fortran"
                          USER_GAVE_ENABLE_ONLY_LANGUAGE_CONFIG_OPTION=yes
                        fi
                  	;;
                  [no)]
                  	[AC_MSG_FAILURE([--enable-only-fortran="$enableval" and --disable-only-fortran are no longer supported; use --disable-fortran (see ./configure --help)])]
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-only-fortran="$enableval" is not supported; use --enable-only-fortran (see ./configure --help)])]
                 	;;
                esac
               ,)

AC_ARG_ENABLE([only-java],
              AS_HELP_STRING([--enable-only-java(=yes)],
                             [Enable ONLY Java support in ROSE (Warning: '--enable-only-java=no' and '--disable-only-java' are no longer supported)]),
                case "$enableval" in
                  [yes)]
                        if test "x$with_java" = "xno" ; then
                          [AC_MSG_FAILURE([[[Java Support]] you specified conflicting configure flags: --enable-only-java="$enableval" enables Java-language support, but --with-java="$with_java" disables it])]
                        else  
                  	  LANGUAGES_TO_SUPPORT="java"
                          USER_GAVE_ENABLE_ONLY_LANGUAGE_CONFIG_OPTION=yes
                        fi
                  	;;
                  [no)]
                  	[AC_MSG_FAILURE([--enable-only-java="$enableval" and --disable-only-java are no longer supported; use --disable-java (see ./configure --help)])]
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-only-java="$enableval" is not supported; use --enable-only-java (see ./configure --help)])]
                 	;;
                esac
               ,)

AC_ARG_ENABLE([only-php],
              AS_HELP_STRING([--enable-only-php(=yes)],
                             [Enable ONLY PHP support in ROSE (Warning: '--enable-only-php=no' and '--disable-only-php' are no longer supported)]),
                case "$enableval" in
                  [yes)]
                  	LANGUAGES_TO_SUPPORT="php"
                        USER_GAVE_ENABLE_ONLY_LANGUAGE_CONFIG_OPTION=yes
                  	;;
                  [no)]
                  	[AC_MSG_FAILURE([--enable-only-php="$enableval" and --disable-only-php are no longer supported; use --disable-php (see ./configure --help)])]
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-only-php="$enableval" is not supported; use --enable-only-php (see ./configure --help)])]
                 	;;
                esac
               ,)

AC_ARG_ENABLE([only-python],
              AS_HELP_STRING([--enable-only-python(=yes)],
                             [Enable ONLY Python support in ROSE (Warning: '--enable-only-python=no' and '--disable-only-python' are no longer supported)]),
                case "$enableval" in
                  [yes)]
                        LANGUAGES_TO_SUPPORT="python"
                        USER_GAVE_ENABLE_ONLY_LANGUAGE_CONFIG_OPTION=yes
                  	;;
                  [no)]
                  	[AC_MSG_FAILURE([--enable-only-python="$enableval" and --disable-only-python are no longer supported; use --disable-python (see ./configure --help)])]
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-only-python="$enableval" is not supported; use --enable-only-python (see ./configure --help)])]
                 	;;
                esac
               ,)

AC_ARG_ENABLE([only-cuda],
              AS_HELP_STRING([--enable-only-cuda(=yes)],
                             [Enable ONLY Cuda support in ROSE (Warning: '--enable-only-cuda=no' and '--disable-only-cuda' are no longer supported)]),
                case "$enableval" in
                  [yes)]
                  	LANGUAGES_TO_SUPPORT="cuda"
                        USER_GAVE_ENABLE_ONLY_LANGUAGE_CONFIG_OPTION=yes
                  	;;
                  [no)]
                  	[AC_MSG_FAILURE([--enable-only-cuda="$enableval" and --disable-only-cuda are no longer supported; use --disable-cuda (see ./configure --help)])]
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-only-cuda="$enableval" is not supported; use --enable-only-cuda (see ./configure --help)])]
                 	;;
                esac
               ,)

AC_ARG_ENABLE([only-opencl],
              AS_HELP_STRING([--enable-only-opencl(=yes)],
                             [Enable ONLY OpenCL support in ROSE (Warning: '--enable-only-opencl=no' and '--disable-only-opencl' are no longer supported)]),
                case "$enableval" in
                  [yes)]
                  	LANGUAGES_TO_SUPPORT="opencl"
                        USER_GAVE_ENABLE_ONLY_LANGUAGE_CONFIG_OPTION=yes
                  	;;
                  [no)]
                  	[AC_MSG_FAILURE([--enable-only-opencl="$enableval" and --disable-only-opencl are no longer supported; use --disable-opencl (see ./configure --help)])]
                  	;;
                  [*)]
                  	[AC_MSG_FAILURE([--enable-only-opencl="$enableval" is not supported; use --enable-only-opencl (see ./configure --help)])]
                 	;;
                esac
               ,)

#echo "Finished configuring deprecated user-specified language configuration options"
# End macro ROSE_SUPPORT_LANGUAGE_CONFIG_OPTIONS_DEPRECATED
])
m4trace:config/support-lcov.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_LCOV], [
# Begin macro ROSE_SUPPORT_LCOV (Google project: Adress Sanitizer, Memory Sanitizer, etc.).

# We may be asked to guess the correct flags,
# so we must know our host and the compiler used.
AC_REQUIRE([AC_CANONICAL_HOST])
AC_REQUIRE([AC_PROG_CXX])

dnl *********************************************************************
dnl * Set the lcov tool compiler flags in CXXFLAGS and CFLAGS
dnl *********************************************************************

AC_MSG_NOTICE([setup CXXFLAGS and CFLAGS for CXX = "$CXX"])

AC_ARG_ENABLE(lcov, AS_HELP_STRING([--enable-lcov], [Support Linux coverage test tools (compiler options) for ROSE development]),[enableval=yes],[enableval=no])

AC_MSG_NOTICE([enable_lcov = "$enable_lcov"])

if test "x$enable_lcov" = "x"; then
   if test "x$enableval" = "xyes"; then
      enable_lcov=$enableval
   else 
      if test "x$enableval" = "xno"; then
         enable_lcov=$enableval
      fi
   fi
else
   AC_MSG_NOTICE([enable_lcov is explictly set to: "$enable_lcov"])
fi

AC_MSG_NOTICE([after initialization: enable_lcov = "$enable_lcov"])

if test "x$enable_lcov" = "xyes"; then
# enable_lcov was activated but not specified, so set it.
  AC_MSG_NOTICE([using default options for maximal warnings (true case)])
  case $CXX in
    g++)
      CXXFLAGS+=" -g -fprofile-arcs -ftest-coverage"
      CFLAGS+=" -g -fprofile-arcs -ftest-coverage"
      ;;
    clang)
    # For LLVM the support for lcov .
      AC_MSG_NOTICE([Clang compilers do support lcov tools])
      ;;
    icpc)
    # For Intel turn on 64bit migration/portability warnings
      AC_MSG_NOTICE([Intel compilers don't support lcov tools])
      ;;
  esac
fi

# The strings used to setup the environment are specificed in config/Makefile.for.ROSE.includes.and.libs
# AC_SUBST(CXX_WARNINGS)

# This is where we could set up the use of a prefix to CC and CXX if that is a better implementation in the future.
# if test "$CXXFLAGS"; then CXXFLAGS="$CXXFLAGS $CXX_WARNINGS"; fi

AM_CONDITIONAL(ROSE_USE_LCOV,test "$enable_lcov" = yes)

AC_MSG_NOTICE([debugging: CXXFLAGS = "$CXXFLAGS"])
AC_MSG_NOTICE([debugging: CFLAGS   = "$CFLAGS"])

# exit 1

# End macro ROSE_SUPPORT_LCOV.

])
m4trace:config/support-libffi.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_LIBFFI], [

# DQ (9/21/2009): Added pkg.m4 to local ROSE/aclocal
# DQ (9/19/2009): This fails on OSX (ninjai.llnl.gov) (added by Peter to support ROSE interpreter).
PKG_CHECK_MODULES([LIBFFI],[libffi],[with_libffi=yes],[with_libffi=no])

# DQ (9/19/2009): This fails on Mac OSX (this variable is needed
# for an automake conditional that will be built in configure.in)
# with_libffi=no
save_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $LIBFFI_CFLAGS"
AC_CHECK_HEADERS(ffi.h,[with_ffi_header=yes],[with_ffi_header=no])
CPPFLAGS="$save_CPPFLAGS"

AC_MSG_NOTICE([intermediate test debugging info for libffi support:])
AC_MSG_NOTICE([   with_libffi     = "$with_libffi"])
AC_MSG_NOTICE([   with_ffi_header = "$with_ffi_header"])
AC_MSG_NOTICE([   LIBFFI_LIBS     = "$LIBFFI_LIBS"])
AC_MSG_NOTICE([   LIBFFI_CFLAGS   = "$LIBFFI_CFLAGS"])

if [test ! "$with_libffi" = no]; then
   if [test ! "$with_ffi_header" = yes]; then
      AC_MSG_WARN([libffi found, but ffi.h header file not found (reset with_libffi to disable LIBFFI support)])
      with_ffi_header=no
      with_libffi=no
   fi
fi

AC_MSG_NOTICE([debugging info for libffi support:])
AC_MSG_NOTICE([   with_libffi     = "$with_libffi"])
AC_MSG_NOTICE([   with_ffi_header = "$with_ffi_header"])
AC_MSG_NOTICE([   LIBFFI_LIBS     = "$LIBFFI_LIBS"])
AC_MSG_NOTICE([   LIBFFI_CFLAGS   = $LIBFFI_CFLAGS"])


])
m4trace:config/support-libharu.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_LIBHARU], [
AC_MSG_CHECKING(for LIBHARU)
# Begin macro ROSE_SUPPORT_LIBHARU.

# There are currently no prerequisites
AC_ARG_WITH(libharu,
[  --with-libharu	Specify if we should build LIBHARU],
[with_libharu=$withval],
[with_libharu=yes]
)

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_libharu = "$with_libharu"])

if test "$with_libharu" = no; then
   AC_MSG_NOTICE([skipping installation for LIBHARU])
else
   AC_CONFIG_SUBDIRS([src/3rdPartyLibraries/libharu-2.1.0])
   AC_DEFINE([ROSE_WITH_LIBHARU], [1], [libharu enabled])
fi
   AC_MSG_NOTICE([setup installation for LIBHARU in ROSE. with_libharu = "$with_libharu"])
   AM_CONDITIONAL(ROSE_WITH_LIBHARU, [test "x$with_libharu" = xyes])

# End macro ROSE_SUPPORT_LIBHARU.

])
m4trace:config/support-libpqxx.m4:2: -1- AC_DEFUN([ROSE_SUPPORT_LIBPQXX], [

    dnl Parse configure command-line switches
    AC_ARG_WITH(
        [pqxx],
        AS_HELP_STRING(
            [--with-pqxx=PREFIX],
            [Use libpqxx available from http://pqxx.org/development/libpqxx/ for free. The PREFIX, if specified,
            should be the prefix used to install libpqxx, such as "/usr/local".  The default is the empty prefix,
            in which case the headers and library must be installed in a place where they will be found. Saying
            "no" for the prefix is the same as saying "--without-libpqxx".]),
        [pqxx=$withval],
        [pqxx=no])

    ROSE_HAVE_LIBPQXX=

    # Save some variables to be restored later
    old_LIBS="$LIBS"
    old_CPPFLAGS="$CPPFLAGS"

    # Does the user tell us where to find libpqxx?
    if test "$pqxx" = yes; then
        ROSE_LIBPQXX_PREFIX=
        LIBS="$LIBS -lpqxx -lpq"
    elif test -n "$pqxx" -a "$pqxx" != no; then
        ROSE_LIBPQXX_PREFIX="$pqxx"
        LIBS="$LIBS -L$ROSE_LIBPQXX_PREFIX/lib -lpqxx -lpq"
        CPPFLAGS="-I$ROSE_LIBPQXX_PREFIX/include"
    fi

    # Search for the library
    if test $pqxx = no; then
        AC_MSG_NOTICE([skipping check for libpqxx])
    else
        AC_CHECKING([for libpqxx])
        AC_LANG_PUSH([C++])
        AC_LINK_IFELSE([
            AC_LANG_SOURCE([
                    #include <pqxx/connection>
                    #include <pqxx/transaction>
                    #include <pqxx/tablewriter>
                    #include <string>
                    int main() {
                        (void)pqxx::connection(std::string());
                    }
            ])],
            [
                AC_MSG_RESULT(yes)
                ROSE_HAVE_LIBPQXX=yes
                AC_DEFINE(ROSE_HAVE_LIBPQXX, [], [Defined if the pqxx library is available])
            ],
            [
                AC_MSG_RESULT(no)
                LIBS="$old_LIBS"
                CPPFLAGS="$old_CPPFLAGS"
            ])
        AC_LANG_POP([C++])
    fi

    dnl Sanity check: if the user told us to use it then we must find it
    if test "$pqxx" != no -a "$pqxx" != default -a -z "$ROSE_HAVE_LIBPQXX"; then
        AC_MSG_ERROR([did not find pqxx library but --with-pqxx was specified])
    fi

    # Restore variables
    LIBS="$old_LIBS"
    CPPFLAGS="$old_CPPFLAGS"

    dnl Results
    dnl   ROSE_LIBPQXX_PREFIX -- name of the directory where pqxx is installed
    dnl   ROSE_HAVE_LIBPQXX   -- defined if the pqxx library is available
    AC_SUBST(ROSE_LIBPQXX_PREFIX)
    AM_CONDITIONAL(ROSE_HAVE_LIBPQXX, [test -n "$ROSE_HAVE_LIBPQXX"])
])
m4trace:config/support-llvm.m4:5: -1- AC_DEFUN([ROSE_SUPPORT_LLVM], [
ROSE_CONFIGURE_SECTION([Checking LLVM])

AC_ARG_WITH(llvm,
[  --with-llvm=PATH	Specify the prefix where LLVM (and opt) is installed],
,
if test ! "$with_llvm" ; then
   with_llvm=no
fi
)

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_llvm = "$with_llvm"])

if test "$with_llvm" = no; then
   AC_MSG_NOTICE([skipping use of LLVM support (and opt)])
else
   llvm_path=$with_llvm
   AC_MSG_NOTICE([setup LLVM support in ROSE. path = "$llvm_path"])
   AC_DEFINE([USE_ROSE_LLVM_SUPPORT],1,[Controls use of ROSE support for LLVM.])
fi

AC_SUBST(llvm_path)

LLVM_CONFIG=$llvm_path/bin/llvm-config
AC_SUBST(LLVM_CONFIG)
LLVM_COMPILER_MAJOR_VERSION_NUMBER=`echo|$LLVM_CONFIG --version 2>/dev/null| head -1 | cut -f2 -d\) | tr -d \  | cut -d\. -f1`
LLVM_COMPILER_MINOR_VERSION_NUMBER=`echo|$LLVM_CONFIG --version 2>/dev/null| head -1 | cut -f2 -d\) | tr -d \  | cut -d\. -f2`

# Pei-Hung (02/15/2017): LLVM version 4.0.1 for RoseToLLVM tool 
# Philippe (01/05/2018): LLVM version 5.0.0 for RoseToLLVM tool 
llvm_version_6_0_0=no
if test x$LLVM_COMPILER_MAJOR_VERSION_NUMBER == x6; then
   if test x$LLVM_COMPILER_MINOR_VERSION_NUMBER == x0; then
      AC_MSG_NOTICE([we have identified version 6.0.0 of LLVM])
      llvm_version_6_0_0=yes
   fi
fi
AM_CONDITIONAL(ROSE_USING_LLVM_6_0_0, [test "x$llvm_version_6_0_0" = "xyes"])

LLVM_LIB_DIR="`${LLVM_CONFIG} --libdir 2>/dev/null`"
LLVM_CPPFLAGS="`${LLVM_CONFIG} --cppflags 2>/dev/null | sed s/-I/-isystem\ /`"
LLVM_CPPFLAGS+=" -DLLVMVERSION="
LLVM_CPPFLAGS+="`${LLVM_CONFIG} --version 2>/dev/null`"
LLVM_LDFLAGS="`${LLVM_CONFIG} --ldflags 2>/dev/null` -R${LLVM_LIB_DIR}"
LLVM_LIBS="`${LLVM_CONFIG} --libs all 2>/dev/null`"
LLVM_LIBS+=" `${LLVM_CONFIG} --system-libs 2>/dev/null`"
AC_SUBST(LLVM_CPPFLAGS)
AC_SUBST(LLVM_LDFLAGS)
AC_SUBST(LLVM_LIBS)

])
m4trace:config/support-magic.m4:2: -1- AC_DEFUN([ROSE_SUPPORT_LIBMAGIC], [

    dnl Parse configure command-line switches for libmagic and/or obtain the value from the cache.
    AC_ARG_WITH(
        [magic],
        AS_HELP_STRING(
            [--with-magic=PREFIX],
            [Use libmagic available from http://sourceforge.net/projects/libmagic for free.
             The PREFIX, if specified, should be the prefix used to install libmagic, such as "/usr/local".
             The default is the empty prefix, in which case the headers and library must be installed in a
             place where they will be found. Saying "no" for the prefix is the same as saying
             "--without-magic".]),
            [ac_cv_use_magic=$withval],
            [ac_cv_use_magic=no])
    AC_CACHE_CHECK([whether to use magic], [ac_cv_use_magic], [ac_cv_use_magic=no])

    dnl Find the magic library
    ROSE_HAVE_LIBMAGIC=
    if test $ac_cv_use_magic = yes; then
        ROSE_LIBMAGIC_PREFIX=
        AC_CHECK_LIB(magic, magic_open,
                     [AC_DEFINE(ROSE_HAVE_LIBMAGIC, [], [Defined when libmagic is available.])
                     ROSE_HAVE_LIBMAGIC=yes])
    elif test -n "$ac_cv_use_magic" -a "$ac_cv_use_magic" != no; then
        ROSE_LIBMAGIC_PREFIX="$ac_cv_use_magic"
        old_LDFLAGS="$LDFLAGS"
        LDFLAGS="$LDFLAGS -L$ROSE_LIBMAGIC_PREFIX/lib"
        AC_CHECK_LIB(magic, magic_open,
                     [AC_DEFINE(ROSE_HAVE_LIBMAGIC, [], [Defined when libmagic is available.])
                      ROSE_HAVE_LIBMAGIC=yes])
        LDFLAGS="$old_LDFLAGS"
    fi

    dnl Sanity check: if the user told us to use libmagic then we must find the library
    if test "$ac_cv_use_magic" != no -a -z "$ROSE_HAVE_LIBMAGIC"; then
        AC_MSG_ERROR([did not find libmagic library but --with-magic was specified])
    fi

    dnl Results
    dnl   ROSE_LIBMAGIC_PREFIX -- name of the directory where libmagic is installed
    dnl   ROSE_HAVE_LIBMAGIC   -- defined if the libmagic library is available
    AC_SUBST(ROSE_LIBMAGIC_PREFIX)
    AM_CONDITIONAL(ROSE_HAVE_LIBMAGIC, [test -n "$ROSE_HAVE_LIBMAGIC"])
])
m4trace:config/support-maple.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_MAPLE], [
# Begin macro ROSE_SUPPORT_MAPLE.

# Inclusion of test for Maple Symbolic Algebra Package and it's location.

AC_MSG_CHECKING(for maple)
AC_ARG_WITH(maple,
[  --with-maple=PATH	Specify the prefix where Maple is installed],
,
if test ! "$with_maple" ; then
   with_maple=no
fi
)

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_maple = "$with_maple"])

if test "$with_maple" = no; then
   # If maple is not specified, then don't use it.
   AC_MSG_NOTICE([skipping use of Maple])
else
   maple_path=$with_maple
   AC_MSG_NOTICE([setup Maple support in ROSE. path = "$maple_path"])

   MAPLE_SYSTEM_TYPE="`$maple_path/bin/maple.system.type`"
   MAPLE_LIBDIR="$maple_path/$MAPLE_SYSTEM_TYPE"
   MAPLE_EXTRA_LIBS="-L$MAPLE_LIBDIR -Wl,-rpath,$MAPLE_LIBDIR -lrt"
   AC_CHECK_LIB(maplec,StartMaple,[:],[AC_ERROR([Unable to link to Maple!])],[$MAPLE_EXTRA_LIBS])

   MAPLE_INCLUDES="-I$maple_path/extern/include"
   # Maple includes its own old copy of libstdc++ in its bin directory so we need to override this with the system provided one
   MAPLE_LIBS="-Wl,-rpath,/usr/lib -lmaplec $MAPLE_EXTRA_LIBS"
   AC_SUBST(MAPLE_INCLUDES)
   AC_SUBST(MAPLE_LIBS)

   # DQ (10/27/2014): Added lib directory.
   AC_SUBST(MAPLE_LIBDIR)

   AC_DEFINE([USE_ROSE_MAPLE_SUPPORT],1,[Controls use of ROSE support for Maple Symbolic Algebra Package.])
fi

AC_SUBST(maple_path)

# End macro ROSE_SUPPORT_MAPLE.

])
m4trace:config/support-mint.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_MINT], [
# Begin macro ROSE_SUPPORT_MINT.

MINT="\$(top_builddir)/projects/mint/src/mint"
AC_SUBST(MINT)

])
m4trace:config/support-mpi.m4:19: -1- AC_DEFUN([ROSE_SUPPORT_MPI], [
  ROSE_CONFIGURE_SECTION([Checking message passing interface (MPI)])
  dnl --with-mpi=<path>
  dnl
  dnl --show* option of MPICC is used to determine the include and library flags for MPI
  ROSE_ARG_WITH(
    [mpi],
    [for the Message Passing Interface (MPI)],
    [use the Message Passing Interface (MPI)]
    [Note: `mpicc` will be used to determine the MPI include and library flags],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_MPI" != "xno"; then
    MPI_INSTALL_PATH="$ROSE_WITH_MPI"
    MPI_BIN_PATH="$ROSE_WITH_MPI/bin"
    MPI_INCLUDE_PATH="$ROSE_WITH_MPI/include"
    MPI_LIBRARY_PATH="$ROSE_WITH_MPI/lib"
  else
    MPI_INSTALL_PATH=
    MPI_BIN_PATH=
    MPI_INCLUDE_PATH=
    MPI_LIBRARY_PATH=
  fi

  # Determine C MPI compiler flags
  #
  AC_REQUIRE([AC_PROG_CC])
  LX_QUERY_MPI_COMPILER(MPICC, [mpicc mpiicc mpixlc mpipgcc], C, $MPI_BIN_PATH)

  # Determine MPICXX compiler flags
  #
  AC_REQUIRE([AC_PROG_CXX])
  LX_QUERY_MPI_COMPILER(MPICXX, [mpicxx mpiCC mpic++ mpig++ mpiicpc mpipgCC mpixlC], CXX, $MPI_BIN_PATH)

  # Determine MPIF77 compiler flags
  #
  AC_REQUIRE([AC_PROG_F77])
  LX_QUERY_MPI_COMPILER(MPIF77, [mpif77 mpiifort mpixlf77 mpixlf77_r], F77, $MPI_BIN_PATH)

  # Determine MPI Fortran compiler flags
  #
  AC_REQUIRE([AC_PROG_FC])
  mpi_default_fc="mpif95 mpif90 mpigfortran mpif2003"
  mpi_intel_fc="mpiifort"
  mpi_xl_fc="mpixlf95 mpixlf95_r mpixlf90 mpixlf90_r mpixlf2003 mpixlf2003_r"
  mpi_pg_fc="mpipgf95 mpipgf90"
  LX_QUERY_MPI_COMPILER(MPIFC, [$mpi_default_fc $mpi_intel_fc $mpi_xl_fc $mpi_pg_fc], F, $MPI_BIN_PATH)

  if test -n "$MPI_BIN_PATH"; then
      # check if any mpi compiler was found
      #
      if test "x$MPICC" = "xnot-found" && \
         test "x$MPICXX" = "xnot-found" && \
         test "x$MPIF77" = "xnot-found" && \
         test "x$MPIFC" = "xnot-found"; then
          ROSE_MSG_ERROR([cannot detect MPI binaries (C, CXX, F77, F)])
      fi
  fi

  # Should we have separate flags for C and Fortran ?
  #
  AM_CONDITIONAL(ROSE_WITH_MPI_C, [test "x$MPICC" != "xnot-found" || test "x$MPICXX" != "xnot-found"])
  AM_CONDITIONAL(ROSE_WITH_MPI_FORTRAN, [test "x$MPIFC" != "xnot-found" || test "x$MPIF77" != "xnot-found"])
])
m4trace:config/support-mpi.m4:96: -1- AC_DEFUN([LX_QUERY_MPI_COMPILER], [
     # Try to find a working MPI compiler from the supplied names
     # AC_PATH_TOOL checks for the programs in [$4] below
     # Omitting $PATH_SEPARATOR from args seems to break in linux
     AC_PATH_TOOL($1, [$2], [not-found], [$4]$PATH_SEPARATOR)

     mpi_command_line=`echo $$1`
     
     # Figure out what the compiler responds to get it to show us the compile
     # and link lines.  After this part of the macro, we'll have a valid 
     # lx_mpi_command_line

      if test "x$mpi_command_line" != "xnot-found"; then
         AC_MSG_CHECKING([if $$1 responds to -showme:compile])
         lx_mpi_compile_line=`$$1 -showme:compile 2>/dev/null`
      	 if [[ "$?" -eq 0 ]]; then
        	    AC_MSG_RESULT([yes])
             lx_mpi_link_line=`$$1 -showme:link 2>/dev/null`
         else
             AC_MSG_RESULT([no])
             AC_MSG_CHECKING([Checking if $$1 responds to -showme])
             lx_mpi_command_line=`$$1 -showme 2>/dev/null`
             if [[ "$?" -ne 0 ]]; then
                 AC_MSG_RESULT([no])
                 AC_MSG_CHECKING([Checking if $$1 responds to -compile-info])
                 lx_mpi_compile_line=`$$1 -compile-info 2>/dev/null`
                 if [[ "$?" -eq 0 ]]; then
                     AC_MSG_RESULT([yes])
                     lx_mpi_link_line=`$$1 -link-info 2>/dev/null`
                 else
                     AC_MSG_RESULT([no])
                     AC_MSG_CHECKING([Checking if $$1 responds to -show])
                     lx_mpi_command_line=`$$1 -show 2>/dev/null`
                     if [[ "$?" -eq 0 ]]; then
                         AC_MSG_RESULT([yes])
                     else
                         AC_MSG_RESULT([no]) 
                     fi
                 fi
             else
                 AC_MSG_RESULT([no]) 
             fi
         fi
	 	  
         if [[ ! -z "$lx_mpi_compile_line" -a ! -z "$lx_mpi_link_line" ]]; then
           # Now extract the different parts of the MPI command line.  Do these separately in case we need to 
           # parse them all out in future versions of this macro.
           lx_mpi_defines=`    echo "$lx_mpi_compile_line" | grep -o -- '\(^\| \)-D\([[^\"[:space:]]]\+\|\"[[^\"[:space:]]]\+\"\)'`
           lx_mpi_includes=`   echo "$lx_mpi_compile_line" | grep -o -- '\(^\| \)-I\([[^\"[:space:]]]\+\|\"[[^\"[:space:]]]\+\"\)'`
           lx_mpi_link_paths=` echo "$lx_mpi_link_line" | grep -o -- '\(^\| \)-L\([[^\"[:space:]]]\+\|\"[[^\"[:space:]]]\+\"\)'`
           lx_mpi_libs=`       echo "$lx_mpi_link_line" | grep -o -- '\(^\| \)-l\([[^\"[:space:]]]\+\|\"[[^\"[:space:]]]\+\"\)'`
           lx_mpi_link_args=`  echo "$lx_mpi_link_line" | grep -o -- '\(^\| \)-Wl,\([[^\"[:space:]]]\+\|\"[[^\"[:space:]]]\+\"\)'`

           # Create variables and clean up newlines and multiple spaces
           ROSE_WITH_MPI_$3FLAGS="$lx_mpi_defines $lx_mpi_includes"
           ROSE_WITH_MPI_$3LDFLAGS="$lx_mpi_link_paths $lx_mpi_libs $lx_mpi_link_args"
           ROSE_WITH_MPI_$3FLAGS=`  echo "$ROSE_WITH_MPI_$3FLAGS"   | tr '\n' ' ' | sed 's/^[[ \t]]*//;s/[[ \t]]*$//' | sed 's/  +/ /g'`
           ROSE_WITH_MPI_$3LDFLAGS=`echo "$ROSE_WITH_MPI_$3LDFLAGS" | tr '\n' ' ' | sed 's/^[[ \t]]*//;s/[[ \t]]*$//' | sed 's/  +/ /g'`

         fi
     else
	AC_MSG_WARN([$3 MPI compiler not found])
     fi

     #echo "flags: $ROSE_WITH_MPI_$3FLAGS"

     # try linking a MPI program
     #
     OLD_CPPFLAGS=$CPPFLAGS
     OLD_LIBS=$LIBS
     CPPFLAGS=$ROSE_WITH_MPI_$3FLAGS
     LIBS=$ROSE_WITH_MPI_$3LDFLAGS
     AC_TRY_LINK([#include <mpi.h>],
                [int rank, size;
                 MPI_Comm_rank(MPI_COMM_WORLD, &rank);
                 MPI_Comm_size(MPI_COMM_WORLD, &size);],
                [# Add a define for testing at compile time.
                 AC_DEFINE([HAVE_MPI], [1], [Define to 1 if you have MPI libs and headers.])
                 have_$3_mpi='yes'
                 AC_MSG_NOTICE([$3 MPI compiler binary found under $4])],
                [# zero out mpi flags so we don't link against the faulty library.
                 ROSE_WITH_MPI_$3FLAGS=""
                 ROSE_WITH_MPI_$3LDFLAGS=""
                 have_$3_mpi='no'])

     #Substitute in Makefiles
     AC_SUBST($1)
     AC_SUBST(ROSE_WITH_MPI_$3FLAGS)
     AC_SUBST(ROSE_WITH_MPI_$3LDFLAGS)
     LIBS=$OLD_LIBS
     CPPFLAGS=$OLD_CPPFLAGS
])
m4trace:config/support-octave.m4:27: -1- AC_DEFUN([ROSE_SUPPORT_OCTAVE], [
  AC_BEFORE([$0], [ROSE_SUPPORT_OCTAVE_FRONTEND])

  ROSE_CONFIGURE_SECTION([Checking modified GNU Octave parser])

  #============================================================================
  # --with-octave-parser=/path/to/octave-parser-install/
  #============================================================================
  ROSE_ARG_WITH(
    [octave-parser],
    [for an installation of the modified GNU Octave parser],
    [support for the GNU Octave parser],
    []
  )

  if test "x$CONFIG_HAS_ROSE_WITH_OCTAVE_PARSER" != "xno"; then
    OCTAVE_PARSER_INSTALL_TARFILE="$ROSE_WITH_OCTAVE_PARSER"
  else
    OCTAVE_PARSER_INSTALL_TARFILE=
  fi

  AC_MSG_NOTICE([OCTAVE_PARSER_INSTALL_TARFILE = "$OCTAVE_PARSER_INSTALL_TARFILE"])

  #============================================================================
  # Validate installation (if provided)
  #============================================================================
  if test "x$OCTAVE_INSTALL_PATH" != "x"; then
      #======================================
      #  - Check for the modified GNU octave parser file(s)
      #======================================
      AC_CHECK_FILE(
          [${OCTAVE_INSTALL_PATH}],
          [],
          [ROSE_MSG_ERROR([octave install file is missing, can't use this GNU Octave parser installation])])
  fi

  #============================================================================
  # Set Automake Conditionals and Substitutions
  #============================================================================
  AM_CONDITIONAL(ROSE_WITH_GNU_OCTAVE_PARSER, [test "x$OCTAVE_PARSER_INSTALL_TARFILE" != "x"])

  AC_SUBST(OCTAVE_PARSER_INSTALL_TARFILE)

  #============================================================================
  # Set CPP #defines
  #============================================================================
  AC_DEFINE_UNQUOTED(
    OCTAVE_PARSER_INSTALL_TARFILE,
    ["$OCTAVE_PARSER_INSTALL_TARFILE"],
    [Absolute path of the modified GNU Octave installation])

if test "x$OCTAVE_PARSER_INSTALL_TARFILE" != "x"; then
   AC_DEFINE([USE_ROSE_GNU_OCTAVE_SUPPORT], [1], [Controls use of ROSE support for the modified GNU Octave parser.])
fi

# End macro ROSE_SUPPORT_OCTAVE.
])
m4trace:config/support-ofp.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_OFP], [
# Begin macro ROSE_SUPPORT_OFP.

# Default OFP version and jar file, these should be changed each time the OFP jar file is updated.
# Used in ../src/3rdPartyLibraries/fortran-parser/Makefile.am
# and     ../src/frontend/SageIII/sageSupport.C
#
default_ofp_version=20200819-JDK8

ofp_major_version_number=0
ofp_minor_version_number=8
ofp_patch_version_number=7

# DQ (10/18/2010): If fortran is enabled then OFP must be allowed and this was already check previously.
# This step is taken to simplify how we handle OFP and Fortran.  Of course OFP is enabled if Fortran is
# a valid langauge option, else we could not process the Fortran code with out OFP.  So we want to move
# to having only a single option for Fortran as a language. All reference to conditionals based on OFP can
# be replaced with reference to Fortran being processed.  The following code is dead (but not deleted yet).
if false; then
# DQ (10/18/2010): Only test if we should make OFP active if fortran support is enabled.
AC_MSG_NOTICE([before testing for gfortran to enable OFP: support_fortran_language = "$support_fortran_language"])
ofp_enabled=no

if test "x$support_fortran_language" = "xyes"; then
  AC_MSG_CHECKING([for gfortran to test whether Fortran support can be used])
  if test "x$USE_JAVA" = x1; then
    CPPFLAGS="$CPPFLAGS $JAVA_JVM_INCLUDE"
    if test "x$GFORTRAN_PATH" != "x"; then
    # AC_DEFINE([USE_ROSE_OPEN_FORTRAN_PARSER_SUPPORT], [1], [Always enable Fortran support whenever Java and gfortran are present])
    # AC_DEFINE([USE_ROSE_INTERNAL_JAVA_SUPPORT], [1], [Always enable Fortran support whenever Java and gfortran are present])
      ofp_enabled=yes
      AC_MSG_RESULT([yes])
      AC_DEFINE([USE_GFORTRAN_IN_ROSE], [1], [Mark that GFORTRAN is available])

    # Test that we have correctly evaluated the major and minor versions numbers...
      if test x$BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER == x; then
        AC_MSG_FAILURE([could not compute the major version number of "$BACKEND_FORTRAN_COMPILER"])
      fi
      if test x$BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER == x; then
        AC_MSG_FAILURE([could not compute the minor version number of "$BACKEND_FORTRAN_COMPILER"])
      fi
    else
      AC_MSG_RESULT([no ... gfortran cannot be found (try --with-gfortran=<path>)])
    fi
  else
    AC_MSG_RESULT([no ... Java cannot be found (try --with-java=<path>)])
  fi
else
  AC_MSG_NOTICE([Fortran is not enabled so OFP is disabled])
fi
fi
# AM_CONDITIONAL(ROSE_USE_OPEN_FORTRAN_PARSER, [test "x$ofp_enabled" = "xyes"])


OPEN_FORTRAN_PARSER_PATH="${ac_top_builddir}/src/3rdPartyLibraries/fortran-parser" # For the one rule that uses it
AC_SUBST(OPEN_FORTRAN_PARSER_PATH)


# DQ (2/2/2010): New code to control use of different versions of OFP within ROSE.
AC_ARG_ENABLE(ofp-version,
[  --enable-ofp-version    version number for OFP Java-based parser (e.g. 20190922).],
[ AC_MSG_NOTICE([setting up OFP version])
])

# CER (8/24/2011): Changed the version numbering system of the OFP jar file
# distributed with ROSE to use the date rather than the OFP release version.
#
if test "x$enable_ofp_version" = "x"; then
   AC_MSG_NOTICE([using default version of OFP: "$default_ofp_version"])
   ofp_version_number=$default_ofp_version
else
   ofp_version_number=$enable_ofp_version
fi

AC_MSG_NOTICE([ofp_version_number = "$ofp_version_number"])

ofp_jar_file_contains_java_file=true

# DQ (9/28/2010): Newer versions of the OFP jar file contains fortran/ofp/parser/java/IFortranParserAction.java
# we need this to maintain backward compatability.
AM_CONDITIONAL(ROSE_OFP_CONTAINS_JAVA_FILE, [test "x$ofp_jar_file_contains_java_file" = true])

AC_DEFINE_UNQUOTED([ROSE_OFP_VERSION_NUMBER], $ofp_version_number , [OFP version number])
AC_DEFINE_UNQUOTED([ROSE_OFP_MAJOR_VERSION_NUMBER], $ofp_major_version_number , [OFP major version number])
AC_DEFINE_UNQUOTED([ROSE_OFP_MINOR_VERSION_NUMBER], $ofp_minor_version_number , [OFP minor version number])
AC_DEFINE_UNQUOTED([ROSE_OFP_PATCH_VERSION_NUMBER], $ofp_patch_version_number , [OFP patch version number])

ROSE_OFP_VERSION_NUMBER=$ofp_version_number
ROSE_OFP_MAJOR_VERSION_NUMBER=$ofp_major_version_number
ROSE_OFP_MINOR_VERSION_NUMBER=$ofp_minor_version_number
ROSE_OFP_PATCH_VERSION_NUMBER=$ofp_patch_version_number

AC_SUBST(ROSE_OFP_VERSION_NUMBER)
AC_SUBST(ROSE_OFP_MAJOR_VERSION_NUMBER)
AC_SUBST(ROSE_OFP_MINOR_VERSION_NUMBER)
AC_SUBST(ROSE_OFP_PATCH_VERSION_NUMBER)

ofp_jar_file="OpenFortranParser-${ofp_version_number}.jar"
AC_MSG_NOTICE([ofp_jar_file = "$ofp_jar_file"])

ROSE_OFP_JAR_FILE=$ofp_jar_file
AC_SUBST(ROSE_OFP_JAR_FILE)
AC_DEFINE_UNQUOTED([ROSE_OFP_JAR_FILE], $ofp_jar_file , [OFP jar file])

# DQ (4/5/2010): Moved the specification of CLASSPATH to after the specification 
# of OFP version number so that we can use it to set the class path.

CLASSPATH=${ABSOLUTE_SRCDIR}/src/3rdPartyLibraries/antlr-jars/antlr-3.5.2-complete.jar:${ABSOLUTE_SRCDIR}${OPEN_FORTRAN_PARSER_PATH}/${ROSE_OFP_JAR_FILE}

export CLASSPATH
AC_SUBST(CLASSPATH)
AC_DEFINE_UNQUOTED([ROSE_OFP_CLASSPATH], $CLASSPATH , [OFP class path for Jave Virtual Machine])

AC_MSG_NOTICE([OFP CLASSPATH = "$CLASSPATH"])

# End macro ROSE_SUPPORT_OFP.

])
m4trace:config/support-omp.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_OMNI_OPENMP], [
# Begin macro ROSE_SUPPORT_OMNI_OPENMP.

# Inclusion of test for Omni OpenMP Runtime system and its location.

AC_MSG_CHECKING(for OpenMP using Omni runtime library)
AC_ARG_WITH(omni_omp_runtime_support,
[  --with-omni_omp_runtime_support=PATH	Specify the prefix where Omni OpenMP Runtime System is installed],
,
if test ! "$with_omni_omp_runtime_support" ; then
   with_omni_omp_runtime_support=no
fi
)

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_omni_omp_runtime_support = "$with_omni_omp_runtime_support"])

if test "$with_omni_omp_runtime_support" = no; then
   # If omni_omp_runtime_support is not specified, then don't use it.
   AC_MSG_NOTICE([skipping use of Omni OpenMP Runtime support])
else
   omni_omp_runtime_support_path=$with_omni_omp_runtime_support
   AC_MSG_NOTICE([setup Omni OpenMP support in ROSE. path = "$omni_omp_runtime_support_path"])
   AC_DEFINE([USE_ROSE_OMNI_OPENMP_SUPPORT],1,[Controls use of ROSE support for OpenMP Translator targeting Omni RTL.])
   AC_DEFINE_UNQUOTED([OMNI_OPENMP_LIB_PATH],"$omni_omp_runtime_support_path",[Location (unquoted) of the Omni OpenMP run time library.])
fi

AC_SUBST(omni_omp_runtime_support_path)

# End macro ROSE_SUPPORT_OMNI_OPENMP.
AM_CONDITIONAL(ROSE_USE_OMNI_OPENMP,test ! "$with_omni_omp_runtime_support" = no)


])
m4trace:config/support-php.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_PHP], [

AC_ARG_WITH(php,
[  --with-php=PATH	Specify the prefix where PHP (and phc) is installed],
,
if test ! "$with_php" ; then
   with_php=no
fi
)

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_php = "$with_php"])

if test "$with_php" = no; then
   AC_MSG_NOTICE([skipping use of PHP support (and phc)])
else
   php_path=$with_php
   AC_MSG_NOTICE([setup PHP support in ROSE. path = "$php_path"])
   AC_DEFINE([USE_ROSE_PHP_SUPPORT],1,[Controls use of ROSE support for PHP.])
fi

AC_SUBST(php_path)



])
m4trace:config/support-pocc.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_POCC], [
AC_MSG_CHECKING(for POCC)
# Begin macro ROSE_SUPPORT_POCC.

# Inclusion of installation for Polyhedral Compiler Collection

# There are currently no prerequisites
AC_ARG_WITH(pocc,
[  --with-pocc	Specify if we should build POCC],
)
if test ! "$with_pocc" ; then
   with_pocc=no
else
   with_pocc=yes
fi

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_pocc = "$with_pocc"])

if test "$with_pocc" = no; then
   AC_MSG_NOTICE([skipping installation for POCC])
fi
   AC_MSG_NOTICE([setup installation for POCC in ROSE. with_pocc = "$with_pocc"])
   AM_CONDITIONAL(ROSE_WITH_POCC, [test "x$with_pocc" = xyes])

# End macro ROSE_SUPPORT_POCC.

])
m4trace:config/support-projects.m4:2: -1- AC_DEFUN([ROSE_OPTIONAL_PROJECTS], [
OPTIONAL_PROJECTS=
AC_SUBST(OPTIONAL_PROJECTS)


dnl -----------------------------------------------------------------------------------------------------
dnl -- This part of the file comes from projects/AMReX-Translation/rose.config
dnl -----------------------------------------------------------------------------------------------------
AC_MSG_NOTICE([configuring optional projects/AMReX-Translation])
OPTIONAL_PROJECTS="$OPTIONAL_PROJECTS AMReX-Translation"

dnl List of all makefiles for this project              -*- autoconf -*-
AC_CONFIG_FILES(projects/AMReX-Translation/Makefile)

AC_CONFIG_FILES([projects/AMReX-Translation/AmrexF2Cxx.sh:projects/AMReX-Translation/AmrexF2Cxx.sh], [chmod ugo+x projects/AMReX-Translation/AmrexF2Cxx.sh])
AC_CONFIG_FILES([projects/AMReX-Translation/support/include/amrex.hpp:projects/AMReX-Translation/support/include/amrex.hpp])
AC_CONFIG_FILES([projects/AMReX-Translation/support/blueprint/empty_cxx_amrex.cc:projects/AMReX-Translation/support/blueprint/empty_cxx_amrex.cc])




dnl -----------------------------------------------------------------------------------------------------
dnl -- This part of the file comes from projects/BinaryAnalysisTools/rose.config
dnl -----------------------------------------------------------------------------------------------------
AC_MSG_NOTICE([configuring optional projects/BinaryAnalysisTools])
OPTIONAL_PROJECTS="$OPTIONAL_PROJECTS BinaryAnalysisTools"

dnl List of all makefiles for this project							-*- autoconf -*-
AC_CONFIG_FILES(projects/BinaryAnalysisTools/Makefile)

# script files will be copied over to the build directory (PP 11/09/19)
# AC_CONFIG_FILES([projects/BinaryAnalysisTools/rose-execution-monitor-linux-perf-intel-x86_64.sh:projects/BinaryAnalysisTools/rose-execution-monitor-linux-perf-intel-x86_64.sh], [chmod ugo+x projects/BinaryAnalysisTools/rose-execution-monitor-linux-perf-intel-x86_64.sh])

dnl The bROwSE tool depends on Wt (web toolkit)
AC_ARG_WITH(
    [wt],
    AS_HELP_STRING(
        [--with-wt=PREFIX],
        [Use the Wt web toolkit available from https://webtoolkit.eu/wt. The PREFIX, if specified,
	 should be the prefix used to install Wt, such as "/usr/local". The default is the empty prefix,
	 in which case the headers and library must be installed in a place where they will be found.
	 Saying "no" for the prefix is the same as saying "--without-wt".]),
	[AC_DEFINE(ROSE_USE_WT, 1, [Defined if the web toolkit Wt is available.])
	 if test "$with_wt" = "yes"; then WT_PREFIX=/usr; else WT_PREFIX="$with_wt"; fi],
	[with_wt=no])
AC_SUBST(WT_PREFIX)
AM_CONDITIONAL(ROSE_USE_WT, test "$with_wt" != "no")


dnl -----------------------------------------------------------------------------------------------------
dnl -- This part of the file comes from projects/CodeProperties/rose.config
dnl -----------------------------------------------------------------------------------------------------
AC_MSG_NOTICE([configuring optional projects/CodeProperties])
OPTIONAL_PROJECTS="$OPTIONAL_PROJECTS CodeProperties"

dnl List of all makefiles for this project							-*- autoconf -*-
AC_CONFIG_FILES([projects/CodeProperties/Makefile])

dnl Even if this project is present in ROSE's "projects" directory, we might not have the prerequisites to compile
dnl this project.  Enable the project's makefiles by using the ROSE_ENABLE_projectname automake conditional.
dnl Many prerequisites have probably already been tested by ROSE's main configure script, so we don't need to list
dnl them here again (although it usually doesn't hurt).
AC_MSG_CHECKING([whether CodeProperties project prerequisites are satisfied])
AC_MSG_RESULT([yes])
rose_enable_project_code_properties=yes

AM_CONDITIONAL([ROSE_ENABLE_PROJECT_CODE_PROPERTIES], [test "$rose_enable_project_code_properties" = yes])


dnl -----------------------------------------------------------------------------------------------------
dnl -- This part of the file comes from projects/CodeThorn/rose.config
dnl -----------------------------------------------------------------------------------------------------
AC_MSG_NOTICE([configuring optional projects/CodeThorn])
OPTIONAL_PROJECTS="$OPTIONAL_PROJECTS CodeThorn"

dnl List of all makefiles for this project						-*- autoconf -*-
AC_CONFIG_FILES([projects/CodeThorn/Makefile
		projects/CodeThorn/src/Makefile])

AC_MSG_CHECKING([whether CodeThorn project prerequisites are satisfied])
AC_MSG_RESULT([yes])
rose_enable_project_CodeThorn=yes

AM_CONDITIONAL([ROSE_ENABLE_PROJECT_CODETHORN], [test "$rose_enable_project_CodeThorn" = yes])


dnl -----------------------------------------------------------------------------------------------------
dnl -- This part of the file comes from projects/MatlabTranslation/rose.config
dnl -----------------------------------------------------------------------------------------------------
AC_MSG_NOTICE([configuring optional projects/MatlabTranslation])
OPTIONAL_PROJECTS="$OPTIONAL_PROJECTS MatlabTranslation"

dnl List of all makefiles for this project							-*- autoconf -*-
AC_CONFIG_FILES(projects/MatlabTranslation/Makefile)
AC_CONFIG_FILES(projects/MatlabTranslation/src/Makefile)
AC_CONFIG_FILES(projects/MatlabTranslation/tests/Makefile)

AC_CONFIG_FILES([projects/MatlabTranslation/M2Cxx.sh:projects/MatlabTranslation/M2Cxx.sh], [chmod ugo+x projects/MatlabTranslation/M2Cxx.sh])
AC_CONFIG_FILES([projects/MatlabTranslation/support/armadillo/builtins.h:projects/MatlabTranslation/support/armadillo/builtins.h])
AC_CONFIG_FILES([projects/MatlabTranslation/support/armadillo/fastnumerics.h:projects/MatlabTranslation/support/armadillo/fastnumerics.h])
AC_CONFIG_FILES([projects/MatlabTranslation/support/armadillo/Matrix.h:projects/MatlabTranslation/support/armadillo/Matrix.h])
AC_CONFIG_FILES([projects/MatlabTranslation/support/cxx-stub/builtins.h:projects/MatlabTranslation/support/cxx-stub/builtins.h])
AC_CONFIG_FILES([projects/MatlabTranslation/support/cxx-stub/fastnumerics.h:projects/MatlabTranslation/support/cxx-stub/fastnumerics.h])
AC_CONFIG_FILES([projects/MatlabTranslation/support/cxx-stub/Matrix.h:projects/MatlabTranslation/support/cxx-stub/Matrix.h])
AC_CONFIG_FILES([projects/MatlabTranslation/support/matlab/builtins.m:projects/MatlabTranslation/support/matlab/builtins.m])
AC_CONFIG_FILES([projects/MatlabTranslation/support/blueprint/Makefile.default:projects/MatlabTranslation/support/blueprint/Makefile.default])


AC_ARG_WITH(armadillo,
	[  --with-armadillo[=PATH]   Installation prefix for optional Armadillo library (>= 7.950.0) (for Matlab to C++ translation - requires Matlab frontend enabled).],
	[AC_DEFINE(ROSE_MATLAB_USE_ARMADILLO, 1, [Defined if the Armadillo library is available.])
	 if test "$with_armadillo" = "yes"; then ARMA_PREFIX=/usr; else ARMA_PREFIX="$with_armadillo"; fi],
	[with_armadillo=no])
AC_SUBST(ARMA_PREFIX)
AM_CONDITIONAL(ROSE_MATLAB_USE_ARMADILLO, test "$with_armadillo" != "no")


dnl -----------------------------------------------------------------------------------------------------
dnl -- This part of the file comes from projects/MatrixTesting/rose.config
dnl -----------------------------------------------------------------------------------------------------
AC_MSG_NOTICE([configuring optional projects/MatrixTesting])
OPTIONAL_PROJECTS="$OPTIONAL_PROJECTS MatrixTesting"

dnl List of all makefiles for this project							-*- autoconf -*-
AC_CONFIG_FILES(
    projects/MatrixTesting/Makefile
    projects/MatrixTesting/src/Makefile)

dnl The matrix query tool depends on Wt (web toolkit)
AC_ARG_WITH(wt,
	[  --with-wt=PATH   Installation prefix for optional Wt (web toolkit) library.],
	[AC_DEFINE(ROSE_USE_WT, 1, [Defined if the web toolkit Wt is available.])
	 if test "$with_wt" = "yes"; then WT_PREFIX=/usr; else WT_PREFIX="$with_wt"; fi],
	[with_wt=no])
AC_SUBST(WT_PREFIX)
AM_CONDITIONAL(ROSE_USE_WT, test "$with_wt" != "no")


dnl -----------------------------------------------------------------------------------------------------
dnl -- This part of the file comes from projects/OpenK/rose.config
dnl -----------------------------------------------------------------------------------------------------
AC_MSG_NOTICE([configuring optional projects/OpenK])
OPTIONAL_PROJECTS="$OPTIONAL_PROJECTS OpenK"

dnl List of all makefiles for this project
AC_CONFIG_FILES([projects/OpenK/Makefile
                 projects/OpenK/knowledgeBuilder/Makefile]) 


dnl -----------------------------------------------------------------------------------------------------
dnl -- This part of the file comes from projects/Rose-To-LLVM/rose.config
dnl -----------------------------------------------------------------------------------------------------
AC_MSG_NOTICE([configuring optional projects/Rose-To-LLVM])
OPTIONAL_PROJECTS="$OPTIONAL_PROJECTS Rose-To-LLVM"

dnl List of all makefiles for this project						-*- autoconf -*-
AC_CONFIG_FILES([projects/Rose-To-LLVM/Makefile
		projects/Rose-To-LLVM/src/Makefile
		projects/Rose-To-LLVM/tests/Makefile
		projects/Rose-To-LLVM/src/rosetollvm/Makefile])

AC_MSG_CHECKING([whether Rose-To-LLVM project prerequisites are satisfied])
AC_MSG_RESULT([yes])
rose_enable_project_Rose_To_LLVM=yes

AM_CONDITIONAL([ROSE_ENABLE_PROJECT_Rose_To_LLVM], [test "$rose_enable_project_Rose_To_LLVM" = yes])


dnl -----------------------------------------------------------------------------------------------------
dnl -- This part of the file comes from projects/RTC2/rose.config
dnl -----------------------------------------------------------------------------------------------------
AC_MSG_NOTICE([configuring optional projects/RTC2])
OPTIONAL_PROJECTS="$OPTIONAL_PROJECTS RTC2"

dnl List of all makefiles for this project							-*- autoconf -*-
AC_CONFIG_FILES(projects/RTC2/Makefile)
AC_CONFIG_FILES(projects/RTC2/src/Makefile)
AC_CONFIG_FILES(projects/RTC2/tests/Makefile)

AC_CONFIG_FILES([projects/RTC2/tests/chk.sh:projects/RTC2/tests/chk.sh], [chmod ugo+x projects/RTC2/tests/chk.sh])


dnl -----------------------------------------------------------------------------------------------------
dnl -- This part of the file comes from projects/scalarization/rose.config
dnl -----------------------------------------------------------------------------------------------------
AC_MSG_NOTICE([configuring optional projects/scalarization])
OPTIONAL_PROJECTS="$OPTIONAL_PROJECTS scalarization"

dnl List of all makefiles for this project						-*- autoconf -*-
AC_CONFIG_FILES([projects/scalarization/Makefile
		projects/scalarization/src/Makefile
		projects/scalarization/tests/Makefile])

AC_MSG_CHECKING([whether scalarization project prerequisites are satisfied])
AC_MSG_RESULT([yes])
rose_enable_project_scalarization=yes

AM_CONDITIONAL([ROSE_ENABLE_PROJECT_SCALARIZATION], [test "$rose_enable_project_scalarization" = yes])


dnl -----------------------------------------------------------------------------------------------------
dnl -- This part of the file comes from projects/simulator2/rose.config
dnl -----------------------------------------------------------------------------------------------------
AC_MSG_NOTICE([configuring optional projects/simulator2])
OPTIONAL_PROJECTS="$OPTIONAL_PROJECTS simulator2"

dnl List of all makefiles for this project							-*- autoconf -*-
AC_CONFIG_FILES(projects/simulator2/Makefile)


dnl -----------------------------------------------------------------------------------------------------
dnl -- This part of the file comes from projects/SnippetTools/rose.config
dnl -----------------------------------------------------------------------------------------------------
AC_MSG_NOTICE([configuring optional projects/SnippetTools])
OPTIONAL_PROJECTS="$OPTIONAL_PROJECTS SnippetTools"

dnl List of all makefiles for this project							-*- autoconf -*-
AC_CONFIG_FILES(projects/SnippetTools/Makefile)


dnl -----------------------------------------------------------------------------------------------------
dnl -- This part of the file comes from projects/TALCDataLayout/rose.config
dnl -----------------------------------------------------------------------------------------------------
AC_MSG_NOTICE([configuring optional projects/TALCDataLayout])
OPTIONAL_PROJECTS="$OPTIONAL_PROJECTS TALCDataLayout"

dnl List of all makefiles for this project						-*- autoconf -*-
AC_CONFIG_FILES([projects/TALCDataLayout/Makefile
		projects/TALCDataLayout/src/Makefile
		projects/TALCDataLayout/src/haopt/Makefile
		projects/TALCDataLayout/src/main/Makefile
		projects/TALCDataLayout/src/meta/Makefile
		projects/TALCDataLayout/src/modules/Makefile
		projects/TALCDataLayout/src/runtime/Makefile
		projects/TALCDataLayout/src/utilities/Makefile
		projects/TALCDataLayout/tests/Makefile])

dnl Even if this project is present in ROSE's "projects" directory, we might not have the prerequisites to compile
dnl this project.  Enable the project's makefiles by using the ROSE_ENABLE_projectname automake conditional.
dnl Many prerequisites have probably already been tested by ROSE's main configure script, so we don't need to list
dnl them here again (although it usually doesn't hurt).
AC_MSG_CHECKING([whether TALCDataLayout project prerequisites are satisfied])
AC_MSG_RESULT([yes])
rose_enable_project_talcdatalayout=yes

AM_CONDITIONAL([ROSE_ENABLE_PROJECT_TALCDATALAYOUT], [test "$rose_enable_project_talcdatalayout" = yes])


dnl -----------------------------------------------------------------------------------------------------
dnl -- This part of the file comes from projects/traceAnalysis/rose.config
dnl -----------------------------------------------------------------------------------------------------
AC_MSG_NOTICE([configuring optional projects/traceAnalysis])
OPTIONAL_PROJECTS="$OPTIONAL_PROJECTS traceAnalysis"

dnl List of all makefiles for this project						-*- autoconf -*-
AC_CONFIG_FILES([projects/traceAnalysis/Makefile])

dnl Even if this project is present in ROSE's "projects" directory, we might not have the prerequisites to compile
dnl this project.  Enable the project's makefiles by using the ROSE_ENABLE_projectname automake conditional.
dnl Many prerequisites have probably already been tested by ROSE's main configure script, so we don't need to list
dnl them here again (although it usually doesn't hurt).
AC_MSG_CHECKING([whether traceAnalysis project prerequisites are satisfied])
AC_MSG_RESULT([yes])
rose_enable_project_trace_analysis=yes

AM_CONDITIONAL([ROSE_ENABLE_PROJECT_TRACE_ANALYSIS], [test "$rose_enable_project_trace_analysis" = yes])


dnl -----------------------------------------------------------------------------------------------------
dnl -- This part of the file comes from projects/ZFPTool/rose.config
dnl -----------------------------------------------------------------------------------------------------
AC_MSG_NOTICE([configuring optional projects/ZFPTool])
OPTIONAL_PROJECTS="$OPTIONAL_PROJECTS ZFPTool"

dnl List of all makefiles for this project						-*- autoconf -*-
AC_CONFIG_FILES([projects/ZFPTool/Makefile
		projects/ZFPTool/src/Makefile
		projects/ZFPTool/tests/Makefile])

AC_MSG_CHECKING([whether ZFPTool project prerequisites are satisfied])
AC_MSG_RESULT([yes])
rose_enable_project_ZFPTool=yes

AM_CONDITIONAL([ROSE_ENABLE_PROJECT_SCALARIZATION], [test "$rose_enable_project_ZFPTool" = yes])
])
m4trace:config/support-purify.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_PURIFY], [
# Begin macro ROSE_SUPPORT_PURIFY.

# We may be asked to guess the correct flags,
# so we must know our host and the compiler used.
AC_REQUIRE([AC_CANONICAL_HOST])
AC_REQUIRE([AC_PROG_CXX])
# DQ (9/26/2015): Making this code more portable with out warnings.
# AC_REQUIRE([BTNG_INFO_CXX_ID])
# AC_REQUIRE([BTNG_CXX_AR])

dnl *********************************************************************
dnl * Use PURIFY
dnl *********************************************************************
AC_ARG_ENABLE(purify-api,
  [  --enable-purify-api ....................... Enable purify API in code.])
AC_ARG_ENABLE(purify-linker,
  [  --enable-purify-linker ....................... Augment the linker with purify.])

if test "$enable_purify_api" = yes ; then
  AC_DEFINE([USE_PURIFY],[],[Support for Purify])
  AC_DEFINE([USE_PURIFY_API],[],[Support for Purify API (Compiling with the Purify library).])
fi

dnl DQ added so that EDG can detect use of linker and use the api 
dnl while the rest of ROSE does not.  EDG only supports use of API
dnl not just the linker option.
if test "$enable_purify_linker" = yes ; then
  AC_DEFINE([USE_PURIFY_LINKER],[],[Link-time support for Purify.])
fi



dnl *********************************************************************
dnl * Specify the location of PURIFY
dnl *********************************************************************
# Let user specify where to find purify.
# Specify by --with-purify= or setting purify_PREFIX.
AC_MSG_CHECKING(for purify)
AC_ARG_WITH(purify,
[  --with-purify=PATH	Specify the prefix where purify is installed],
, test "$purify_PREFIX" && with_purify="$purify_PREFIX")
test "$with_purify" && test ! "$with_purify" = no && purify_PREFIX="$with_purify"
AC_MSG_RESULT($purify_PREFIX)
AC_MSG_NOTICE([purify_PREFIX = "$purify_PREFIX"])
if test "$purify_PREFIX" ; then
  purify_INCLUDES="-I$purify_PREFIX"
  purify_LIBS="$purify_PREFIX/purify_stubs.a"
  purify_BIN="$purify_PREFIX/purify"
fi
AC_SUBST(purify_PREFIX)
AC_SUBST(purify_INCLUDES)
AC_SUBST(purify_LIBS)
AC_SUBST(purify_BIN)
AC_MSG_NOTICE([purify_INCLUDES = "$purify_INCLUDES"])
AC_MSG_NOTICE([purify_LIBS     = "$purify_LIBS"])
AC_MSG_NOTICE([purify_BIN      = "$purify_BIN"])



dnl Allows purify windows to be disabled, as it is too much load over the network.
AC_ARG_ENABLE(purify-windows,
  [  --enable-purify-windows ............... turn on use of PURIFY windows option])
test ! "$enable_purify_windows" = yes && purify_windows_option='-windows=no';



dnl *********************************************************************
dnl * Specify options for PURIFY
dnl *********************************************************************
dnl  Added by DQ to support PURIFY (using my favorite options and paths which might be platform specific)
dnl note that we have to use the ${} instead of $() for this to work on LINUX and IBM (other platforms do not seem to case)
dnl  PURIFY_RUN_AT_EXIT="-run-at-exit=\"if %z; then echo \\\"%v: %e errors, %l+%L bytes leaked.\\\"; fi\" "
AC_ARG_WITH(purify-options,
   [  --with-purify-options=ARG ................ manually set PURIFY options to ARG],
PURIFY_OPTIONS=$with_purify_options,
PURIFY_OPTIONS="$purify_windows_option -recursion-depth-limit=40000 -chain-length=24 -first-only=yes -leaks-at-exit=no -inuse-at-exit=no -always-use-cache-dir=yes -cache-dir=${HOME}/tmp -best-effort ${PURIFY_RUN_AT_EXIT}"
)
AC_SUBST(PURIFY_OPTIONS)


# if test "$enable_purify_linker" ; then
#   AUX_LINKER="${purify_BIN} ${PURIFY_OPTIONS}"
# fi
# AC_SUBST(AUX_LINKER)



if test "$enable_purify_linker" = yes ; then
# Setup compiler specific options for using purify
# Different compilers (e.g KCC) require options in different order.
  AUX_LINKER="${purify_BIN} ${PURIFY_OPTIONS}"
  case $CXX in
    g++)
    # See comment below about syntax change for Linux
      CCLD="$AUX_LINKER $CXX"
      CXXLD="$AUX_LINKER $CXX"
      ;;
    KCC | mpKCC)
    # purify specific option required and clear the AUX_LINKER
      CCLD="$CC --link_command_prefix '${purify_BIN} ${PURIFY_OPTIONS}' -o"
      CXXLD="$CXX --link_command_prefix '${purify_BIN} ${PURIFY_OPTIONS}' -o"
      AUX_LINKER=""
      ;;
    CC)
    # No purify specific option required
    # Can't use "$(xxx)" syntax since it only works when build proecess is run on SUNs
    # Linux requires a different syntax: "$xxx" instead.
    # CCLD="$(AUX_LINKER) $(CXX)"
    # CXXLD="$(AUX_LINKER) $(CXX)"
      CCLD="$AUX_LINKER $CXX"
      CXXLD="$AUX_LINKER $CXX"
    ;;
  esac
else
      CCLD="$CC"
# Liao: 2/17/2009, enable CXXLD environment variable to be accepted during configuration,
# especially when roseTranslator is used and it is not ready to be used as a linker
      CXXLD="$CXXLD"
     if test "x$CXXLD" = x; then
         CXXLD="$CXX"
      fi 
# BP : 10/29/2001, the above two lines were originally 
#      CCLD="$(CC)"
#      CXXLD="$(CXX)"
# but on Linux systems this seems to not work
fi

AC_SUBST(AUX_LINKER)
AC_MSG_NOTICE([in macro ROSE SUPPORT INSURE: CC    = "$CC"])
AC_MSG_NOTICE([in macro ROSE SUPPORT PURIFY: CCLD  = "$CCLD"])
AC_MSG_NOTICE([in macro ROSE SUPPORT INSURE: CXX   = "$CXX"])
AC_MSG_NOTICE([in macro ROSE SUPPORT PURIFY: CXXLD = "$CXXLD"])

AC_SUBST(CCLD)
AC_SUBST(CXXLD)

# End macro ROSE_SUPPORT_PURIFY.

])
m4trace:config/support-python-api.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_PYTHON_API], [
    AC_MSG_CHECKING([whether to enable Python API])
    enabled=no


    AC_ARG_ENABLE([python-api],
        [AS_HELP_STRING([--enable-python-api],
            [Causes a Python API to be created fro commonly used parts of the ROSE library.  In order to build a Python
             API, you must also specify --with-python and have the Python development system installed on your machine.
             For Debian-based systems, the Python development package is named "python3-dev" and can be installed with
             the command "sudo apt-get install python3-dev".])],
        [enabled=$enable_python_api])

    case "$enabled" in
        yes)
            if test "$ROSE_USE_PYTHON_DEV" = no; then
                AC_MSG_FAILURE([--enable-python-api also requires a Python development environment (see --with-python)])
            fi

            AC_DEFINE(ROSE_ENABLE_PYTHON_API, 1, [Define if you want a Python API])
            AC_MSG_RESULT(enabled)
            ;;
        *)
            AC_MSG_RESULT(disabled)
            ;;
    esac

    AM_CONDITIONAL([ROSE_ENABLE_PYTHON_API], [test "$enabled" = yes])
])
m4trace:config/support-python.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_PYTHON], [
    ROSE_CONFIGURE_SECTION([Checking Python])

    # Determine settings for the python development environment.
    # Provides:
    #   PYTHON_CPPFLAGS
    #   PYTHON_EXTRA_LDFLAGS
    #   PYTHON_EXTRA_LIBS
    #   PYTHON_LDFLAGS
    #   PYTHON_SITE_PKG
    #   PYTHON_VERSION
    # Version interval is half-open, i.e., [x, y)         this ] needed for m4
    AX_PYTHON_DEVEL([2.6.6], [4.0.0])

    if test "$PYTHON" != ""; then
        AC_DEFINE([USE_ROSE_PYTHON_SUPPORT], 1, [Controls use of ROSE support for Python.])
        PYTHON_VERSION_MAJOR_VERSION="`echo $ac_python_version | cut -d. -f1`"
        PYTHON_VERSION_MINOR_VERSION="`echo $ac_python_version | cut -d. -f2`"
        PYTHON_VERSION_PATCH_VERSION="`echo $ac_python_version | cut -d. -f3`"
    fi

    BACKEND_PYTHON_INTERPRETER_NAME_WITH_PATH="$PYTHON"
    AC_DEFINE_UNQUOTED([BACKEND_PYTHON_INTERPRETER_NAME_WITH_PATH],
        "$BACKEND_PYTHON_INTERPRETER_NAME_WITH_PATH",
        [Path to the backend python interpreter])

    # ROSE_USE_PYTHON is defined if there's a suitable python executable
    ROSE_USE_PYTHON=no
    test "$PYTHON" != "" && ROSE_USE_PYTHON=yes
    AM_CONDITIONAL(ROSE_USE_PYTHON, test "$ROSE_USE_PYTHON" = yes)
    
    # ROSE_USE_PYTHON_DEV is defined if there's a suitable python development environment
    ROSE_USE_PYTHON_DEV=$PYTHON_DEV_EXISTS
    AM_CONDITIONAL(ROSE_USE_PYTHON_DEV, test "$ROSE_USE_PYTHON_DEV" = yes)

    # The original code had a check for the python version which was an exact duplicat of the
    # check already performed by AX_PYTHON_DEVEL. I've removed the duplicate and replaced it with "true".
    AM_CONDITIONAL(ROSE_APPROVED_PYTHON_VERSION, true)

    AC_MSG_NOTICE([Python detection results:])
    AC_MSG_NOTICE([    PYTHON                       = $PYTHON])
    AC_MSG_NOTICE([    PYTHON_VERSION_MAJOR_VERSION = $PYTHON_VERSION_MAJOR_VERSION])
    AC_MSG_NOTICE([    PYTHON_VERSION_MINOR_VERSION = $PYTHON_VERSION_MINOR_VERSION])
    AC_MSG_NOTICE([    PYTHON_VERSION_PATCH_VERSION = $PYTHON_VERSION_PATCH_VERSION])
    AC_MSG_NOTICE([    PYTHON_SITE_PKG              = $PYTHON_SITE_PKG])
    AC_MSG_NOTICE([    PYTHON_DEV_EXISTS            = $PYTHON_DEV_EXISTS])
    AC_MSG_NOTICE([    PYTHON_CPPFLAGS              = $PYTHON_CPPFLAGS])
    AC_MSG_NOTICE([    PYTHON_LDFLAGS               = $PYTHON_LDFLAGS])
    AC_MSG_NOTICE([    PYTHON_EXTRA_LIBS            = $PYTHON_EXTRA_LIBS])
    AC_MSG_NOTICE([    PYTHON_EXTRA_LDFLAGS         = $PYTHON_EXTRA_LDFLAGS])
    AC_MSG_NOTICE([    ROSE_USE_PYTHON              = $PYTHON])
    AC_MSG_NOTICE([    ROSE_USE_PYTHON_DEV          = $ROSE_USE_PYTHON_DEV])

])
m4trace:config/support-readline.m4:3: -1- AC_DEFUN([ROSE_SUPPORT_LIBREADLINE], [

    dnl Test for the "--with-libreadline" switch. If the value is "no" (or --without-libreadline) then none of the rest
    dnl of the readline-related settings are used.
    ROSE_ARG_WITH(
        [libreadline],
        [whether to use GNU readline],
        [Enable the use of the GNU readline library for interactive input. If not present then interactive inputs can
            be edited only with basic terminal editing commands like backspace, kill word, and kill line.  A readline
            installation directory can be specified for this switch, otherwise the default is /usr. To disable readline
            support in ROSE set this to "no" or use --without-libreadline.  The other readline-related switches are only
            processed when --with-libreadline is enabled.],
        []
    )
    if test "$ROSE_WITH_LIBREADLINE" = "no"; then
        LIBREADLINE_INSTALL_PATH=
        LIBREADLINE_INCLUDE_PATH=
        LIBREADLINE_LIBRARY_PATH=
    elif test "$ROSE_WITH_LIBREADLINE" = "yes"; then
        LIBREADLINE_INSTALL_PATH=/usr
        LIBREADLINE_INCLUDE_PATH=/usr/include
        LIBREADLINE_LIBRARY_PATH=/usr/lib
    else
        LIBREADLINE_INSTALL_PATH="$ROSE_WITH_LIBREADLINE"
        LIBREADLINE_INCLUDE_PATH="$ROSE_WITH_LIBREADLINE/include"
        LIBREADLINE_LIBRARY_PATH="$ROSE_WITH_LIBREADLINE/lib"
    fi

    if test "$ROSE_WITH_LIBREADLINE" != "no"; then
        dnl Since we have "--with-libreadline", process the optional "--with-libreadline-include" and "--with-libreadline-lib"
        dnl switches. If present, these override the defaults we set above.
        ROSE_ARG_WITH(
            [libreadline-include],
            [if the GNU readline include directory was specified],
            [Override the include directory for GNU readline rather than using a default based on --with-libreadline.],
            []
        )
        if test "$CONFIG_HAS_ROSE_WITH_LIBREADLINE_INCLUDE" != "no"; then
            LIBREADLINE_INCLUDE_PATH="$ROSE_WITH_LIBREADLINE_INCLUDE"
        fi

        ROSE_ARG_WITH(
            [libreadline-lib],
            [if the GNU readline library directory was specified],
            [Override the library directory for GNU readline rather than using a default based on --with-libreadline.],
            []
        )
        if test "$CONFIG_HAS_ROSE_WITH_LIBREADLINE_LIB" != "no"; then
            LIBREADLINE_LIBRARY_PATH="$ROSE_WITH_LIBREADLINE_LIB"
        fi

        dnl Find the readline header file, which must exist if the user wants readline support.
        AC_CHECK_FILE(
            [${LIBREADLINE_INCLUDE_PATH}/readline/readline.h],
            [],
            [ROSE_MSG_ERROR([libreadline.h is missing; use --with-libreadline=no to disable])])

        dnl Make sure the readline library can be linked.  The readline library sometimes requires additional libraries but
        dnl will often link fine during this configure check since those other features aren't used. Therefore, try to find
        dnl those libraries explicitly if we want readline.  This way of doing things will work regardless of whether these
        dnl libraries are static or shared.
        if test "$LIBREADLINE_LIBRARY_PATH" != ""; then
            dnl Use the termcap library if it's available.
            AC_CHECK_LIB(termcap, tputs,
                [LIBREADLINE_LIBS="-ltermcap $LIBREADLINE_LIBS"])

            dnl Use either ncurses or curses, but not both.
            AC_CHECK_LIB(ncurses, addch,
                [LIBREADLINE_LIBS="-lncurses $LIBREADLINE_LIBS"],
                [AC_CHECK_LIB(curses, addch,
                    [LIBREADLINE_LIBS="-lcurses $LIBREADLINE_LIBS"],
                    [], dnl failure is allowed
                    [$LIBREADLINE_LIBS])],
                [$LIBREADLINE_LIBS])

            dnl Look for -lreadline, but make sure that "-L" appears before the "-lreadline". It seems the only
            dnl way to do this is to add both compiler switches to the OTHER-LIBRARIES (5th) argument. We can't
            dnl leave the LIBRARY (1st) argument empty, so use some dummy library that we're sure exists; the
            dnl message spit out by this check will be misleading ("looking for readline in -lm")--oh well.
            AC_CHECK_LIB(m, readline,
                [LIBREADLINE_LIBS="-L$LIBREADLINE_LIBRARY_PATH -lreadline $LIBREADLINE_LIBS"],
                [ROSE_MSG_ERROR([libreadline.a is missing; use --with-libreadline=no to disable])],
                [-L$LIBREADLINE_LIBRARY_PATH -lreadline $LIBREADLINE_LIBS])
        fi
    fi

    dnl Final results.
    AM_CONDITIONAL(ROSE_WITH_LIBREADLINE, [test "$LIBREADLINE_INCLUDE_PATH" != "" && test "$LIBREADLINE_LIBRARY_PATH" != ""])
    AM_CONDITIONAL(ROSE_WITH_LIBREADLINE_INCLUDE, [test "$LIBREADLINE_INCLUDE_PATH" != ""])

    AC_SUBST(LIBREADLINE_INSTALL_PATH)
    AC_SUBST(LIBREADLINE_INCLUDE_PATH)
    AC_SUBST(LIBREADLINE_LIBRARY_PATH)
    AC_SUBST(LIBREADLINE_LIBS)

    if test "$LIBREADLINE_INCLUDE_PATH" != "" -a "$LIBREADLINE_LIBRARY_PATH" != ""; then
        AC_DEFINE(ROSE_HAVE_LIBREADLINE, 1, [Defined if the readline library and headers are available.])
    fi

    AC_MSG_NOTICE([LIBREADLINE_LIBS = $LIBREADLINE_LIBS])

])
m4trace:config/support-rose.m4:3: -1- AC_DEFUN([ROSE_SUPPORT_ROSE_PART_1], [
# Begin macro ROSE_SUPPORT_ROSE_PART_1.

# *********************************************************************
# This macro encapsulates the complexity of the tests required for ROSE
# to understnd the machine environment and the configure command line.
# It is represented a s single macro so that we can simplify the ROSE
# configure.in and permit other external project to call this macro as
# a way to set up there environment and define the many macros that an
# application using ROSE might require.
# *********************************************************************

# DQ (2/11/2010): Jeremiah reported this as bad syntax, I think he is correct.
# I'm not sure how this made it into this file.
# AMTAR ?= $(TAR)
AMTAR="$TAR"

# DQ (9/9/2009): Added test.
if test "$am__tar" = "false"; then
   AC_MSG_FAILURE([am__tar set to false])
fi

# DQ (9/9/2009): Added test.
if test "$am__untar" = "false"; then
   AC_MSG_FAILURE([am__untar set to false])
fi

# DQ (3/20/2009): Trying to get information about what system we are on so that I
# can detect Cygwin and OSX (and other operating systems in the future).
AC_CANONICAL_BUILD
# AC_CANONICAL_HOST
# AC_CANONICAL_TARGET

AC_MSG_CHECKING([machine hardware cpu])
AC_MSG_RESULT([$build_cpu])

AC_MSG_CHECKING([operating system vendor])
AC_MSG_RESULT([$build_vendor])

AC_MSG_CHECKING([operating system])
AC_MSG_RESULT([$build_os])

DETERMINE_OS

# DQ (3/20/2009): The default is to assume Linux, so skip supporting this test.
# AM_CONDITIONAL(ROSE_BUILD_OS_IS_LINUX,  [test "x$build_os" = xlinux-gnu])
AM_CONDITIONAL(ROSE_BUILD_OS_IS_OSX,    [test "x$build_vendor" = xapple])
AM_CONDITIONAL(ROSE_BUILD_OS_IS_CYGWIN, [test "x$build_os" = xcygwin])

# DQ (9/10/2009): A more agressive attempt to identify the OS vendor
# This sets up automake conditional variables for each OS vendor name.
DETERMINE_OS_VENDOR

# This appears to be a problem for Java (and so the Fortran support).
# CHECK_SSL
ROSE_SUPPORT_SSL

# Need the SSL automake conditional so that libssl can be added selectively for only those
# translators that require it (since it conflicts with use of Java, and thus Fortran support).
AM_CONDITIONAL(ROSE_USE_SSL_SUPPORT, [test "x$enable_ssl" = xyes])

configure_date=`date '+%A %B %e %H:%M:%S %Y'`
AC_SUBST(configure_date)
# echo "In ROSE/con figure: configure_date = $configure_date"

# DQ (1/27/2008): Added based on suggestion by Andreas.  This allows
# the binary analysis to have more specific information. However, it
# appears that it requires version 2.61 of autoconf and we are using 2.59.
# echo "$host_cpu"
# echo "host_cpu = $host_cpu"
# echo "host_vendor = $host_vendor"
# echo "ac_cv_host = $ac_cv_host"
# echo "host = $host"
# This does not currently work - I don't know why!
# AC_DEFINE([ROSE_HOST_CPU],$host_cpu,[Machine CPU Name where ROSE was configured.])

# DQ (9/7/2006): Allow the default prefix to be the current build tree
# This does not appear to work properly
# AC_PREFIX_DEFAULT(`pwd`)

# echo "In configure: prefix = $prefix"
# echo "In configure: pwd = $PWD"

if test "$prefix" = NONE; then
   AC_MSG_NOTICE([setting prefix to default: "$PWD"])
   prefix="$PWD"
fi

# DQ & PC (11/3/2009): Debugging the Java support.
if false; then
  if test "x$JAVA_HOME" = "x"; then
    JAVA="`which javac`"
    if test -f /usr/bin/javaconfig; then # Mac Java
      :
    else
      while test `readlink "$JAVA"` ; do
        JAVA=`readlink "$JAVA"` ;
     done

     if test $JAVA = "gcj"; then
        AC_MSG_ERROR([gcj not supported; please configure sun java as javac])
     fi

    fi
    JAVA_HOME="`dirname $JAVA`/.."
  fi
fi

# Call supporting macro for the Java path required by the Open Fortran Parser (for Fortran 2003 support)
# Use our classpath in case the user's is messed up
AS_SET_CATFILE([ABSOLUTE_SRCDIR], [`pwd`], [${srcdir}])

# Check for Java support used internally to support both the Fortran language (OFP fortran parser) and Java language (ECJ java parser).
ROSE_SUPPORT_JAVA # This macro uses JAVA_HOME

ROSE_CONFIGURE_SECTION([Checking GNU Fortran])
# DQ (10/18/2010): Check for gfortran (required for syntax checking and semantic analysis of input Fortran codes)
AX_WITH_PROG(GFORTRAN_PATH, [gfortran], [])
AC_SUBST(GFORTRAN_PATH)

# DQ (11/17/2016): We need to make sure that --without-gfortran does not set USE_GFORTRAN_IN_ROSE to true.
# if test "x$GFORTRAN_PATH" != "x"; then
if test "x$GFORTRAN_PATH" != "x" -a "$GFORTRAN_PATH" != "no"; then
   AC_DEFINE([USE_GFORTRAN_IN_ROSE], [1], [Mark that GFORTRAN is available])
else
   AC_DEFINE([USE_GFORTRAN_IN_ROSE], [0], [Mark that GFORTRAN is not available])
fi

AC_MSG_NOTICE([GFORTRAN_PATH = "$GFORTRAN_PATH"])

# Call supporting macro for X10 language compiler path

#########################################################################################
##

  ROSE_SUPPORT_X10()

  ROSE_SUPPORT_LANGUAGE_CONFIG_OPTIONS

  ROSE_CONFIGURE_SECTION([])
  AC_CHECK_LIB([curl], [Curl_connect], [HAVE_CURL=yes], [HAVE_CURL=no])
  AM_CONDITIONAL([HAS_LIBRARY_CURL], [test "x$HAVE_CURL" = "xyes"])

  ROSE_SUPPORT_UPC
  ROSE_SUPPORT_COMPASS2
  ROSE_SUPPORT_GMP
  ROSE_SUPPORT_ISL
  ROSE_SUPPORT_MPI
  ROSE_SUPPORT_SPOT

##
#########################################################################################


## Rasmussen (10/24/2017): Support for linking with the GnuCOBOL parse-tree library.
#
ROSE_SUPPORT_COBOL
#########################################################################################

## Rasmussen (11/19/2017): Support for using the modified GNU Octave parser.
#
ROSE_SUPPORT_OCTAVE
#########################################################################################


# *******************************************************
# ROSE/projects directory compilation & testing
# *******************************************************
ROSE_ARG_ENABLE(
  [projects-directory],
  [if we should enable the ROSE/projects directory],
  [Toggle compilation and testing of the the ROSE/projects directory (disabled by default)],
  [no])

if test "x$ROSE_ENABLE_PROJECTS_DIRECTORY" = "xyes"; then
   AC_DEFINE([ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT], [], [Build ROSE projects directory])
fi
AM_CONDITIONAL(ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT, [test "x$ROSE_ENABLE_PROJECTS_DIRECTORY" = "xyes"])

# ****************************************************
# ROSE/tests directory compilation & testing
# ****************************************************
AC_MSG_CHECKING([if we should build & test the ROSE/tests directory])
AC_ARG_ENABLE([tests-directory],AS_HELP_STRING([--disable-tests-directory],[Disable compilation and testing of the ROSE/tests directory]),[],[enableval=yes])
support_tests_directory=yes
if test "x$enableval" = "xyes"; then
   support_tests_directory=yes
   AC_MSG_RESULT(enabled)
   AC_DEFINE([ROSE_BUILD_TESTS_DIRECTORY_SUPPORT], [], [Build ROSE tests directory])
else
   support_tests_directory=no
   AC_MSG_RESULT(disabled)
fi
AM_CONDITIONAL(ROSE_BUILD_TESTS_DIRECTORY_SUPPORT, [test "x$support_tests_directory" = xyes])
# *******************************************************
# ROSE/tutorial directory compilation & testing
# *******************************************************
AC_MSG_CHECKING([if we should build & test the ROSE/tutorial directory])
AC_ARG_ENABLE([tutorial-directory],AS_HELP_STRING([--disable-tutorial-directory],[Disable compilation and testing of the ROSE/tutorial directory]),[],[enableval=yes])
support_tutorial_directory=yes
if test "x$enableval" = "xyes"; then
   support_tutorial_directory=yes
   AC_MSG_RESULT(enabled)
   AC_DEFINE([ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT], [], [Build ROSE tutorial directory])
else
   support_tutorial_directory=no
   AC_MSG_RESULT(disabled)
fi
AM_CONDITIONAL(ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT, [test "x$support_tutorial_directory" = xyes])

# ************************************************************
# Option to turn on a special mode of memory pools: no reuse of deleted memory.
# This is useful to track AST nodes during transformation, otherwise the same memory may be reused
# by multiple different AST nodes.
# Liao 8/13/2014
# ************************************************************

AC_ARG_ENABLE(memoryPoolNoReuse, AS_HELP_STRING([--enable-memory-pool-no-reuse], [Enable special memory pool model: no reuse of deleted memory (default is to reuse memory)]))
AM_CONDITIONAL(ROSE_USE_MEMORY_POOL_NO_REUSE, [test "x$enable_memory_pool_no_reuse" = xyes])
if test "x$enable_memory_pool_no_reuse" = "xyes"; then
  AC_MSG_WARN([turn on a special mode in memory pools: no reuse of deleted memory blocks])
  AC_DEFINE([ROSE_USE_MEMORY_POOL_NO_REUSE], [], [Whether to use a special no-reuse mode of memory pools])
fi


# ************************************************************
# Option to control the size of the generated files by ROSETTA
# ************************************************************

# DQ (12/29/2009): This is part of optional support to reduce the sizes of some of the ROSETTA generated files.
AC_ARG_ENABLE(smallerGeneratedFiles, AS_HELP_STRING([--enable-smaller-generated-files], [ROSETTA generates smaller files (but more of them so it takes longer to compile)]))
AM_CONDITIONAL(ROSE_USE_SMALLER_GENERATED_FILES, [test "x$enable_smaller_generated_files" = xyes])
if test "x$enable_smaller_generated_files" = "xyes"; then
  AC_MSG_WARN([using optional ROSETTA mechanism to generate numerous but smaller files for the ROSE IR])
  AC_DEFINE([ROSE_USE_SMALLER_GENERATED_FILES], [], [Whether to use smaller (but more numerous) generated files for the ROSE IR])
fi

# DQ (11/14/2011): Added new configure mode to support faster development of langauge specific
# frontend support (e.g. for work on new EDG 4.3 front-end integration into ROSE).
AC_ARG_ENABLE(internalFrontendDevelopment, AS_HELP_STRING([--enable-internalFrontendDevelopment], [Enable development mode to reduce files required to support work on language frontends]))
AM_CONDITIONAL(ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT, [test "x$enable_internalFrontendDevelopment" = xyes])
if test "x$enable_internalFrontendDevelopment" = "xyes"; then
  AC_MSG_WARN([using reduced set of files to support faster development of language frontend work; e.g. new EDG version 4.3 to translate EDG to ROSE (internal use only)!])

# DQ (11/14/2011): It is not good enough for this to be processed here (added to the rose_config.h file)
# since it is seen too late in the process.
# AC_DEFINE([ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT], [], [Whether to use internal reduced mode to support integration of the new EDG version 4.x])
fi

# This is the support for using EDG as the frontend in ROSE.
ROSE_SUPPORT_EDG

# This is the support for using Clang as a frontend in ROSE not the support for Clang as a compiler to compile ROSE source code.
ROSE_SUPPORT_CLANG

# Support for using F18/Flang as a Fortran frontend in ROSE
ROSE_SUPPORT_FLANG

# DQ (1/4/2009) Added support for optional GNU language extensions in new EDG/ROSE interface.
# This value will be substituted into EDG/4.0/src/rose_lang_feat.h in the future (not used at present!)
AC_ARG_ENABLE(gnu-extensions, AS_HELP_STRING([--enable-gnu-extensions], [Enable internal support in ROSE for GNU language extensions]))
if test "x$enable_gnu_extensions" = "xyes"; then
  ROSE_SUPPORT_GNU_EXTENSIONS="TRUE"
else
  ROSE_SUPPORT_GNU_EXTENSIONS="FALSE"
fi
AC_SUBST(ROSE_SUPPORT_GNU_EXTENSIONS)

# DQ (1/4/2009) Added support for optional Microsoft language extensions in new EDG/ROSE interface.
# This value will be substituted into EDG/4.0/src/rose_lang_feat.h in the future (not used at present!)
AC_ARG_ENABLE(microsoft-extensions, AS_HELP_STRING([--enable-microsoft-extensions], [Enable internal support in ROSE for Microsoft language extensions]))
if test "x$enable_microsoft_extensions" = "xyes"; then
  ROSE_SUPPORT_MICROSOFT_EXTENSIONS="TRUE"
  AC_DEFINE([ROSE_USE_MICROSOFT_EXTENSIONS], [], [Controls use of Microsoft MSVC features])
else
  ROSE_SUPPORT_MICROSOFT_EXTENSIONS="FALSE"
fi
AC_SUBST(ROSE_SUPPORT_MICROSOFT_EXTENSIONS)
AM_CONDITIONAL(ROSE_USE_MICROSOFT_EXTENSIONS, [test "x$enable_microsoft_extensions" = xyes])

# TV (12/31/2018): Defining macro to detect the support of __float128 in EDG
#   Only valid if compiling ROSE using GNU compiler (depends on -lquadmath)
AC_LANG(C++)
AX_COMPILER_VENDOR

ac_save_LIBS="$LIBS"
LIBS="$ac_save_LIBS -lquadmath"
AC_LINK_IFELSE([
            AC_LANG_PROGRAM([[#include <quadmath.h>]])],
            [rose_use_edg_quad_float=yes],
            [rose_use_edg_quad_float=no])
LIBS="$ac_save_LIBS"

if test "$ROSE_SUPPORT_MICROSOFT_EXTENSIONS" == "TRUE"; then
  rose_use_edg_quad_float=no
fi

if test "x$rose_use_edg_quad_float" == "xyes"; then
  AC_DEFINE([ROSE_USE_EDG_QUAD_FLOAT], [], [Enables support for __float80 and __float128 in EDG.])
fi
AC_SUBST(ROSE_USE_EDG_QUAD_FLOAT)
AM_CONDITIONAL(ROSE_USE_EDG_QUAD_FLOAT, [ test $rose_use_edg_quad_float == yes ])
unset ax_cv_cxx_compiler_vendor

# DQ (9/16/2012): Added support for debugging output of new EDG/ROSE connection.  More specifically
# if this is not enabled then it skips the use of output spew in the new EDG/ROSE connection code.
AC_ARG_ENABLE(debug_output_for_new_edg_interface,
    AS_HELP_STRING([--enable-debug_output_for_new_edg_interface], [Enable debugging output (spew) of new EDG/ROSE connection]))
AM_CONDITIONAL(ROSE_DEBUG_NEW_EDG_ROSE_CONNECTION, [test "x$enable_debug_output_for_new_edg_interface" = xyes])
if test "x$enable_debug_output_for_new_edg_interface" = "xyes"; then
  AC_MSG_WARN([using this mode causes large volumes of output spew (internal debugging only)!])
  AC_DEFINE([ROSE_DEBUG_NEW_EDG_ROSE_CONNECTION], [], [Controls large volumes of output spew useful for debugging new EDG/ROSE connection code])
fi

# DQ (6/7/2013): Added support for new Fortran front-end development.
AC_ARG_ENABLE(experimental_fortran_frontend,
    AS_HELP_STRING([--enable-experimental_fortran_frontend], [Enable experimental fortran frontend development]))
AM_CONDITIONAL(ROSE_EXPERIMENTAL_OFP_ROSE_CONNECTION, [test "x$enable_experimental_fortran_frontend" = xyes])
if test "x$enable_experimental_fortran_frontend" = "xyes"; then
  AC_MSG_WARN([using this mode enables experimental fortran front-end (internal development only)!])
  AC_DEFINE([ROSE_EXPERIMENTAL_OFP_ROSE_CONNECTION], [], [Enables development of experimental fortran frontend])
fi

# DQ (6/7/2013): Added support for debugging new Fortran front-end development.
AC_ARG_ENABLE(debug_output_for_experimental_fortran_frontend,
    AS_HELP_STRING([--enable-debug_output_for_experimental_fortran_frontend], [Enable debugging output (spew) of new OFP/ROSE connection]))
AM_CONDITIONAL(ROSE_DEBUG_EXPERIMENTAL_OFP_ROSE_CONNECTION, [test "x$enable_debug_output_for_experimental_fortran_frontend" = xyes])
if test "x$enable_debug_output_for_experimental_fortran_frontend" = "xyes"; then
  AC_MSG_WARN([using this mode causes large volumes of output spew (internal debugging only)!])
  AC_DEFINE([ROSE_DEBUG_EXPERIMENTAL_OFP_ROSE_CONNECTION], [], [Controls large volumes of output spew useful for debugging new OFP/ROSE connection code])
fi

# Added support for Fortran front-end development using the flang (F18) compiler [Rasmussen 8/12/2019]
AC_ARG_ENABLE(experimental_flang_frontend,
    AS_HELP_STRING([--enable-experimental_flang_frontend], [Enable experimental fortran frontend development using flang]))
AM_CONDITIONAL(ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION, [test "x$enable_experimental_flang_frontend" = xyes])
if test "x$enable_experimental_flang_frontend" = "xyes"; then
  AC_MSG_WARN([using this mode enables the experimental fortran flang front-end (internal development only)!])
  AC_DEFINE([ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION], [], [Enables development of experimental fortran flang frontend])
fi

# DQ (8/23/2017): Added support for new csharp front-end development.
AC_ARG_ENABLE(experimental_csharp_frontend,
    AS_HELP_STRING([--enable-experimental_csharp_frontend], [Enable experimental csharp frontend development]))
AM_CONDITIONAL(ROSE_EXPERIMENTAL_CSHARP_ROSE_CONNECTION, [test "x$enable_experimental_csharp_frontend" = xyes])
if test "x$enable_experimental_csharp_frontend" = "xyes"; then
  AC_MSG_WARN([using this mode enables experimental csharp front-end (internal development only)!])
  AC_DEFINE([ROSE_EXPERIMENTAL_CSHARP_ROSE_CONNECTION], [], [Enables development of experimental csharp frontend])

# DQ (8/23/2017): Need to review now to get the MONO_HOME and ROSLYN_HOME environment variables.
# mono_home=$MONO_HOME
# rosyln_home=$ROSYLN_HOME

  mono_home=`roslyn-config mono-home`
  roslyn_home=`roslyn-config csharp-home`

  AC_MSG_NOTICE([Mono home   = "$mono_home"])
  AC_MSG_NOTICE([Roslyn home = "$rosyln_home"])

  AC_DEFINE_UNQUOTED([ROSE_EXPERIMENTAL_CSHARP_ROSE_CONNECTION_MONO_HOME], ["$mono_home"], [Path to Mono Csharp compiler used in development of experimental csharp frontend])
  AC_DEFINE_UNQUOTED([ROSE_EXPERIMENTAL_CSHARP_ROSE_CONNECTION_ROSLYN_HOME], ["$roslyn_home"], [Path to Roslyn Csharp library used in development of experimental csharp frontend])

  AC_SUBST(mono_home)
  AC_SUBST(rosyln_home)
fi

# DQ (6/7/2013): Added support for debugging new csharp front-end development.
AC_ARG_ENABLE(debug_output_for_experimental_csharp_frontend,
    AS_HELP_STRING([--enable-debug_output_for_experimental_csharp_frontend], [Enable debugging output (spew) of new CSHARP/ROSE connection]))
AM_CONDITIONAL(ROSE_DEBUG_EXPERIMENTAL_CSHARP_ROSE_CONNECTION, [test "x$enable_debug_output_for_experimental_csharp_frontend" = xyes])
if test "x$enable_debug_output_for_experimental_csharp_frontend" = "xyes"; then
  AC_MSG_WARN([using this mode causes large volumes of output spew (internal debugging only)!])
  AC_DEFINE([ROSE_DEBUG_EXPERIMENTAL_CSHARP_ROSE_CONNECTION], [], [Controls large volumes of output spew useful for debugging new CSHARP/ROSE connection code])
fi

# DQ (8/23/2017): Added support for new Ada front-end development.
AC_ARG_ENABLE(experimental_ada_frontend,
    AS_HELP_STRING([--enable-experimental_ada_frontend], [Enable experimental ada frontend development]))
AM_CONDITIONAL(ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION, [test "x$enable_experimental_ada_frontend" = xyes])
if test "x$enable_experimental_ada_frontend" = "xyes"; then
  AC_MSG_WARN([using this mode enables experimental ada front-end (internal development only)!])
  AC_DEFINE([ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION], [], [Enables development of experimental ada frontend])
fi

# DQ (6/7/2013): Added support for debugging new ada front-end development.
AC_ARG_ENABLE(debug_output_for_experimental_ada_frontend,
    AS_HELP_STRING([--enable-debug_output_for_experimental_ada_frontend], [Enable debugging output (spew) of new ADA/ROSE connection]))
AM_CONDITIONAL(ROSE_DEBUG_EXPERIMENTAL_ADA_ROSE_CONNECTION, [test "x$enable_debug_output_for_experimental_ada_frontend" = xyes])
if test "x$enable_debug_output_for_experimental_ada_frontend" = "xyes"; then
  AC_MSG_WARN([using this mode causes large volumes of output spew (internal debugging only)!])
  AC_DEFINE([ROSE_DEBUG_EXPERIMENTAL_ADA_ROSE_CONNECTION], [], [Controls large volumes of output spew useful for debugging new ADA/ROSE connection code])
fi

# DQ (6/8/2017): Adding ADA support using GNAT ASIS tool chain.
ROSE_SUPPORT_GNAT

# Setup Automake conditional.
AM_CONDITIONAL(ROSE_USE_GNAT,test ! "$with_gnat" = no)

if test "x$enable_experimental_ada_frontend" = "xyes"; then
  gnat_home=$with_gnat
  AC_MSG_NOTICE([GNAT home = "$gnat_home"])
  AC_DEFINE_UNQUOTED([ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION_GNAT_HOME], ["$with_gnat"], [Path to GNAT Ada compiler used in development of experimental ada frontend])
  AC_SUBST(gnat_home)
fi

# DQ (8/23/2017): Added support for new Jovial front-end development.
AC_ARG_ENABLE(experimental_jovial_frontend,
    AS_HELP_STRING([--enable-experimental_jovial_frontend], [Enable experimental jovial frontend development]))
AM_CONDITIONAL(ROSE_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION, [test "x$enable_experimental_jovial_frontend" = xyes])
if test "x$enable_experimental_jovial_frontend" = "xyes"; then
  AC_MSG_WARN([using this mode enables experimental jovial front-end (internal development only)!])
  AC_DEFINE([ROSE_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION], [], [Enables development of experimental jovial frontend])
fi

# DQ (8/23/2017): Added support for debugging new jovial front-end development.
AC_ARG_ENABLE(debug_output_for_experimental_jovial_frontend,
    AS_HELP_STRING([--enable-debug_output_for_experimental_jovial_frontend], [Enable debugging output (spew) of new JOVIAL/ROSE connection]))
AM_CONDITIONAL(ROSE_DEBUG_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION, [test "x$enable_debug_output_for_experimental_jovial_frontend" = xyes])
if test "x$enable_debug_output_for_experimental_jovial_frontend" = "xyes"; then
  AC_MSG_WARN([using this mode causes large volumes of output spew (internal debugging only)!])
  AC_DEFINE([ROSE_DEBUG_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION], [], [Controls large volumes of output spew useful for debugging new JOVIAL/ROSE connection code])
fi

# DQ (8/23/2017): Added support for new Cobol front-end development.
AC_ARG_ENABLE(experimental_cobol_frontend,
    AS_HELP_STRING([--enable-experimental_cobol_frontend], [Enable experimental cobol frontend development]))
AM_CONDITIONAL(ROSE_EXPERIMENTAL_COBOL_ROSE_CONNECTION, [test "x$enable_experimental_cobol_frontend" = xyes])
if test "x$enable_experimental_cobol_frontend" = "xyes"; then
  AC_MSG_WARN([using this mode enables experimental cobol front-end (internal development only)!])
  AC_DEFINE([ROSE_EXPERIMENTAL_COBOL_ROSE_CONNECTION], [], [Enables development of experimental cobol frontend])
fi

# DQ (8/23/2017): Added support for debugging new Cobol front-end development.
AC_ARG_ENABLE(debug_output_for_experimental_cobol_frontend,
    AS_HELP_STRING([--enable-debug_output_for_experimental_cobol_frontend], [Enable debugging output (spew) of new COBOL/ROSE connection]))
AM_CONDITIONAL(ROSE_DEBUG_EXPERIMENTAL_COBOL_ROSE_CONNECTION, [test "x$enable_debug_output_for_experimental_cobol_frontend" = xyes])
if test "x$enable_debug_output_for_experimental_cobol_frontend" = "xyes"; then
  AC_MSG_WARN([using this mode causes large volumes of output spew (internal debugging only)!])
  AC_DEFINE([ROSE_DEBUG_EXPERIMENTAL_COBOL_ROSE_CONNECTION], [], [Controls large volumes of output spew useful for debugging new COBOL/ROSE connection code])
fi

# Rasmussen (10/30/2017): Added support for new Octave/Matlab front-end development.
AC_ARG_ENABLE([experimental_matlab_frontend],
    AS_HELP_STRING([--enable-experimental_matlab_frontend], [Enable experimental Octave/Matlab frontend development (default=no)]))
AM_CONDITIONAL(ROSE_EXPERIMENTAL_MATLAB_ROSE_CONNECTION, [test "x$enable_experimental_matlab_frontend" = xyes])
if test "x$enable_experimental_matlab_frontend" = "xyes"; then
  AC_MSG_WARN([using this mode enables experimental Octave/Matlab front-end (internal development only)!])
  AC_DEFINE([ROSE_EXPERIMENTAL_MATLAB_ROSE_CONNECTION], [], [Enables development of experimental Octave/Matlab frontend])
fi

# Rasmussen (10/30/2017): Added support for debugging new Octave/Matlab front-end development.
AC_ARG_ENABLE(debug_output_for_experimental_matlab_frontend,
    AS_HELP_STRING([--enable-debug_output_for_experimental_matlab_frontend], [Enable debugging output (spew) of new Octave/Matlab ROSE connection]))
AM_CONDITIONAL(ROSE_DEBUG_EXPERIMENTAL_MATLAB_ROSE_CONNECTION, [test "x$enable_debug_output_for_experimental_matlab_frontend" = xyes])
if test "x$enable_debug_output_for_experimental_matlab_frontend" = "xyes"; then
  AC_MSG_WARN([using this mode causes large volumes of output spew (internal debugging only)!])
  AC_DEFINE([ROSE_DEBUG_EXPERIMENTAL_MATLAB_ROSE_CONNECTION], [], [Controls large volumes of output spew useful for debugging new Octave/Matlab ROSE connection code])
fi

# DQ (8/18/2009): Removed this conditional macro.
# DQ (4/23/2009): Added support for commandline specification of using new graph IR nodes.
# AC_ARG_ENABLE(newGraphNodes, AS_HELP_STRING([--enable-newGraphNodes], [Enable new (experimental) graph IR nodes]))
#AM_CONDITIONAL(ROSE_USE_NEW_GRAPH_NODES, [test "x$enable_newGraphNodes" = xyes])
#if test "x$enable_newGraphNodes" = "xyes"; then
#  AC_MSG_WARN([Using the new graph IR nodes in ROSE (experimental)!])
#  AC_DEFINE([ROSE_USE_NEW_GRAPH_NODES], [], [Whether to use the new graph IR nodes])
#fi

# DQ (5/2/2009): Added support for backward compatability of new IR nodes with older API.
AC_ARG_ENABLE(use_new_graph_node_backward_compatability,
    AS_HELP_STRING([--enable-use_new_graph_node_backward_compatability], [Enable new (experimental) graph IR nodes backward compatability API]))
AM_CONDITIONAL(ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY, [test "x$enable_use_new_graph_node_backward_compatability" = xyes])
if test "x$enable_use_new_graph_node_backward_compatability" = "xyes"; then
  AC_MSG_WARN([using the new graph IR nodes in ROSE (experimental)!])
  AC_DEFINE([ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY], [], [Whether to use the new graph IR nodes compatability option with older API])
fi


# Set up for use of bison to build dot2gml tool in directory
# src/roseIndependentSupport/dot2gml.  This is made optional
# because it seems that many don't have the correct version of bison
# to support the compilation of this tool.  This is it is a configure
# option to build it (or have the makefile system have it be built).
AC_ARG_ENABLE(dot2gml_translator,
[  --enable-dot2gml_translator   Configure option to have DOT to GML translator built (bison version specific tool).],
[ AC_MSG_NOTICE([setting up optional DOT-to-GML translator in directory: src/roseIndependentSupport/dot2gml])
])
AM_CONDITIONAL(DOT_TO_GML_TRANSLATOR,test "$enable_dot2gml_translator" = yes)

# Set the value of srcdir so that it will be an absolute path instead of a relative path
# srcdir=`dirname "$0"`
# echo "In ROSE/con figure: srcdir = $srcdir"
# echo "In ROSE/con figure: $0"
# Record the location of the build tree (so it can be substituted into ROSE/docs/Rose/rose.cfg)
# topSourceDirectory=`dirname "$0"`
# echo "In ROSE/con figure: topSourceDirectory = $topSourceDirectory"
# AC_SUBST(topSourceDirectory)

# echo "Before test for CANONICAL HOST: CC (CC = $CC)"

AC_CANONICAL_HOST

# *****************************************************************

# DQ (12/3/2016): Added support for specification of specific warnings a for those specific warnings to be treated as errors.
# ROSE_SUPPORT_FATAL_WARNINGS

# *****************************************************************

# DQ (3/21/2017): Moved this to here (earlier than where is it used below) so that
# the warnings options can use the compiler vendor instead of the compiler name.
AC_LANG(C++)

# Get frontend compiler vendor
AX_COMPILER_VENDOR
FRONTEND_CXX_COMPILER_VENDOR="$ax_cv_cxx_compiler_vendor"

# echo "_AC_LANG_ABBREV              = $_AC_LANG_ABBREV"
# echo "ax_cv_c_compiler_vendor      = $ax_cv_c_compiler_vendor"
# echo "ax_cv_cxx_compiler_vendor    = $ax_cv_cxx_compiler_vendor"
AC_MSG_NOTICE([FRONTEND_CXX_COMPILER_VENDOR = "$FRONTEND_CXX_COMPILER_VENDOR"])

unset ax_cv_cxx_compiler_vendor

# Setup default options for C and C++ compilers compiling ROSE source code.
ROSE_FLAG_C_OPTIONS
ROSE_FLAG_CXX_OPTIONS

# echo "Exiting after computing the frontend compiler vendor"
# exit 1

# *****************************************************************

# DQ (11/14/2011): This is defined here since it must be seen before any processing of the rose_config.h file.
if test "x$enable_internalFrontendDevelopment" = "xyes"; then
  AC_MSG_NOTICE([adding -D to command line to support faster development of language frontend work])
  CFLAGS+=" -DROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT"
  CXXFLAGS+=" -DROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT"
fi

AC_MSG_NOTICE([CFLAGS   = "$CFLAGS"])
AC_MSG_NOTICE([CXXFLAGS = "$CXXFLAGS"])
AC_MSG_NOTICE([CPPFLAGS = "$CPPFLAGS"])

# *****************************************************************
#    Option to define a uniform debug level for ROSE development
# *****************************************************************

# DQ (10/17/2010): This defines an advanced level of uniform support for debugging and compiler warnings in ROSE.
AC_MSG_CHECKING([for enabled advanced warning support])
# Default is that advanced warnings is off, but this can be changed later so that advanced warnings would have to be explicitly turned off.
AC_ARG_ENABLE(advanced_warnings, AS_HELP_STRING([--enable-advanced-warnings], [Support for an advanced uniform warning level for ROSE development]),[enableval=yes],[enableval=no])
AM_CONDITIONAL(ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT, [test "x$enable_advanced_warnings" = xyes])
if test "x$enable_advanced_warnings" = "xyes"; then
  AC_MSG_WARN([using an advanced uniform warning level for ROSE development])
  AC_DEFINE([ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT], [], [Support for an advanced uniform warning level for ROSE development])

# Suggested C++ specific flags (used to be run before Hudson, but fail currently).
  CXX_ADVANCED_WARNINGS+=" -D_GLIBCXX_CONCEPT_CHECKS -D_GLIBCXX_DEBUG"

# Additional flag (suggested by George).
  CXX_ADVANCED_WARNINGS+=" -D_GLIBCXX_DEBUG_PEDANTIC"

# Incrementally add the advanced options
  if test "$CXX_ADVANCED_WARNINGS"; then CXXFLAGS="$CXXFLAGS $CXX_ADVANCED_WARNINGS"; fi
fi
# ROSE_USE_UNIFORM_DEBUG_SUPPORT=7
AC_SUBST(ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT)

AC_MSG_NOTICE([after processing --enable-advanced-warnings: CXX_ADVANCED_WARNINGS = "${CXX_ADVANCED_WARNINGS}"])
AC_MSG_NOTICE([after processing --enable-advanced-warnings: CXX_WARNINGS = "${CXX_WARNINGS}"])
AC_MSG_NOTICE([after processing --enable-advanced-warnings: C_WARNINGS   = "${C_WARNINGS}"])

AC_MSG_NOTICE([CFLAGS   = "$CFLAGS"])
AC_MSG_NOTICE([CXXFLAGS = "$CXXFLAGS"])
AC_MSG_NOTICE([CPPFLAGS = "$CPPFLAGS"])

# echo "Exiting in support after enabled advanced warnings"
# exit 1

# *****************************************************************

# DQ: added here to see if it would be defined for the template tests and avoid placing
# a $(CXX_TEMPLATE_REPOSITORY_PATH) directory in the top level build directory (a minor error)
CXX_TEMPLATE_REPOSITORY_PATH='$(top_builddir)/src'

# *****************************************************************

AC_ARG_ENABLE(assertion-behavior,
    AS_HELP_STRING([--enable-assertion-behavior[=MODE]],
        [Specifies the default behavior for failing ROSE assertions. This behavior can be changed at runtime either
         via ROSE command-line switches or the rose API. Most developers (the ROSE team and users that
         are developing transformations) will probably want "abort" since this gives the most useful post-mortem
         information. On the other hand, end users usually don't need or expect post-mortem capabilities and sometimes
         even perceive them as low code quality, in which case "exit" with non-zero status is the best behavior. Finally,
         the "throw" behavior can be used as a compromise for tool developers to more gracefully recover from a ROSE
         error that would otherwise be fatal.  When --enable-assertion-behavior is not specified then "exit" is used.
         Some assertions can be disabled altogether (e.g., when an optimized library is desired) by defining NDEBUG.
         Caveats: this switch affects the behavior of the ROSE_ASSERT macro and the Sawyer ASSERT_* macros, but not
         plain old "assert"; the NDEBUG define applies to Sawyer ASSERT_* macros and plain old "assert" but not
         ROSE_ASSERT.]))

case "$enable_assertion_behavior" in
    abort)    assertion_behavior=ROSE_ASSERTION_ABORT ;;
    exit|"")  assertion_behavior=ROSE_ASSERTION_EXIT ;;
    throw)    assertion_behavior=ROSE_ASSERTION_THROW ;;
    *)
        AC_MSG_ERROR([--enable-assertion-behavior should be "abort", "exit", or "throw"])
        ;;
esac

AC_DEFINE_UNQUOTED([ROSE_ASSERTION_BEHAVIOR], [$assertion_behavior], [Determines how failed assertions should behave.])

# *****************************************************************

# ********************************************************************************
#    Option support for the Address Sanitizer and other related Sanitizer tools.
# ********************************************************************************

ROSE_SUPPORT_SANITIZER

# *****************************************************************


# ********************************************************************************
#    Option support for the Linux Coverage Test tools.
# ********************************************************************************

ROSE_SUPPORT_LCOV

# *****************************************************************
# ROSE_HOME should be relative to top_srcdir or top_builddir.
ROSE_HOME=.
# ROSE_HOME=`pwd`/$top_srcdir
AC_SUBST(ROSE_HOME)
# echo "In ROSE/configure: ROSE_HOME = $ROSE_HOME"

# This does not appear to exist any more (not distributed in ROSE)
# Support for Gabriel's QRose GUI Library
# ROSE_SUPPORT_QROSE
#AM_CONDITIONAL(ROSE_USE_QROSE,test "$with_qrose" = true)

AC_LANG(C++)

# Python check must occur before boost check since -lboost_python depends on python
ROSE_SUPPORT_PYTHON

ROSE_SUPPORT_BOOST

# Rasmussen (12/16/2017): Added test for Bison version (Mac OSX Bison version may be too old)
ROSE_SUPPORT_BISON

# DQ (11/5/2009): Added test for GraphViz's ``dot'' program
ROSE_SUPPORT_GRAPHVIZ

AX_LIB_SQLITE3
AX_LIB_MYSQL
AM_CONDITIONAL(ROSE_USE_MYSQL,test "$found_mysql" = yes)

# DQ (9/15/2009): I have moved this to before the backend compiler selection so that
# we can make the backend selection a bit more compiler dependent. Actually we likely
# don't need this!
# DQ (9/17/2006): These should be the same for both C and C++ (else we will need separate macros)
# Setup the -D<xxx> defines required to allow EDG to take the same path through the compiler
# specific and system specific header files as for the backend compiler.  These depend
# upon the selection of the back-end compiler.
# GET_COMPILER_SPECIFIC_DEFINES

# Test this macro here at the start to avoid long processing times (before it fails)
CHOOSE_BACKEND_COMPILER

# *****************************************************************

# echo "DQ (7/26/2020): Exiting after CHOOSE_BACKEND_COMPILER"
# exit 1

# *****************************************************************

# Calling available macro from Autoconf (test by optionally pushing C language onto the internal autoconf language stack).
# This function must be called from this support-rose file (error in ./build if called from the GET COMPILER SPECIFIC DEFINES macro.
# AC_LANG_PUSH(C)

# Get frontend compiler vendor
AX_COMPILER_VENDOR
FRONTEND_CXX_COMPILER_VENDOR="$ax_cv_cxx_compiler_vendor"
unset ax_cv_cxx_compiler_vendor

# Get backend compiler vendor
  saved_compiler_name=$CXX
  CXX=$BACKEND_CXX_COMPILER
  AC_MSG_NOTICE([after resetting CXX to be the backend compiler: CXX = "$CXX"])

  AX_COMPILER_VENDOR
# returns string ax_cv_cxx_compiler_vendor if this is the C++ compiler else returns
# the vendor for the C compiler in ax_cv_c_compiler_vendor for the C compiler.
# CcompilerVendorName= $ax_cv_c_compiler_vendor
# CxxcompilerVendorName= $ax_cv_cxx_compiler_vendor
# echo "Output the names of the vendor for the C or C++ backend compilers."
# echo "Using back-end C   compiler = \"$BACKEND_CXX_COMPILER\" compiler vendor name = $ax_cv_c_compiler_vendor   for processing of unparsed source files from ROSE preprocessors."
  AC_MSG_NOTICE([using back-end C++ compiler = "$BACKEND_CXX_COMPILER" compiler vendor name = $ax_cv_cxx_compiler_vendor for processing of unparsed source files from ROSE preprocessors])
  BACKEND_CXX_COMPILER_VENDOR="$ax_cv_cxx_compiler_vendor"

  CXX=$saved_compiler_name
  AC_MSG_NOTICE([after resetting CXX to be the saved name of the original compiler: CXX = "$CXX"])

AC_MSG_NOTICE([FRONTEND_CXX_COMPILER_VENDOR = "$FRONTEND_CXX_COMPILER_VENDOR"])

# echo "Exiting after computing the backend compiler vendor"
# exit 1

# *****************************************************************

# DQ (2/27/2016): Added version 4.9.x to supported compilers.
AC_MSG_CHECKING([whether your compiler is a GNU compiler and the version that is supported by ROSE (4.0.x - 6.3.x)])
AC_ARG_ENABLE([gcc-version-check],AS_HELP_STRING([--disable-gcc-version-check],[Disable GCC version 4.0.x - 6.3.x verification check]),,[enableval=yes])
if test "x$FRONTEND_CXX_COMPILER_VENDOR" = "xgnu" ; then
if test "x$enableval" = "xyes" ; then
      AC_LANG_PUSH([C])
      # http://www.gnu.org/s/hello/manual/autoconf/Running-the-Compiler.html
      AC_COMPILE_IFELSE([
        AC_LANG_SOURCE([[
          #if (__GNUC__ >= 4 && __GNUC_MINOR__ <= 9)
            int rose_supported_gcc;
          #else
            not gcc, or gcc version is not supported by rose
          #endif
        ]])
       ],
       [AC_MSG_RESULT([done])],
       gcc_version=`gcc -dumpversion`
       [AC_MSG_FAILURE([your GCC $gcc_version version is currently NOT supported by ROSE; GCC 4.0.x to 4.8.x is supported now])])
      AC_LANG_POP([C])
else
    AC_MSG_RESULT([skipping])
fi
else
    AC_MSG_RESULT([not a GNU compiler])
fi

# *****************************************************************

# DQ (2/7/17): This is a problem reported by Robb (sometimes gcc is not installed).
# This is used in EDG (host_envir.h)  Test by building a bad version of gcc
# use shell script called gcc with "exit 1" inside.
if test "x$FRONTEND_CXX_COMPILER_VENDOR" = "xgnu" ; then
   GCC_VERSION=`gcc -dumpversion | cut -d\. -f1`
   GCC_MINOR_VERSION=`gcc -dumpversion | cut -d\. -f2`

   AC_MSG_NOTICE([initial compiler version test: GCC_VERSION = "$GCC_VERSION"])
   AC_MSG_NOTICE([initial compiler version test: GCC_MINOR_VERSION = "$GCC_MINOR_VERSION"])

   AC_SUBST(GCC_VERSION)
   AC_SUBST(GCC_MINOR_VERSION)
else
 # DQ (2/8/2017): Default configuration of EDG will behave like GNU 4.8.x (unclear if this is idea).
   GCC_VERSION=4
   GCC_MINOR_VERSION=8
fi

# echo "Exiting after test for GNU compiler and setting the version info for EDG (GCC_VERSION and GCC_MINOR_VERSION)."
# exit 1

# DQ (7/27/2020): debugging info
# echo "After computing GNU version: GCC_VERSION       = $GCC_VERSION"
# echo "After computing GNU version: GCC_MINOR_VERSION = $GCC_MINOR_VERSION"

# *****************************************************************

# DQ (2/7/2017): These macros test for C++11 and C++14 features and
# the default behavior of the CXX compiler.  Unfortunately the also
# modify the CXX value so we have to save it and reset it after the
# macros are called.  We modified the macros as well to save the
# default behavior of the CXX compiler so that we can detect C++11
# mode within the frontend compiler used to compile ROSE.  Thi is used
# mostly so far to just disable some test that are causing GNU g++
# version 4.8.x internal errors (because the C++11 support is new).

AC_MSG_NOTICE([before checking C++11 support: CXX = $CXX CXXCPP = "$CXXCPP"])

AC_MSG_NOTICE([calling AX CXX COMPILE STDCXX 11 macro])
save_CXX="$CXX"
AX_CXX_COMPILE_STDCXX_11(, optional)

AC_MSG_NOTICE([after checking C++11 support: CXX = "$CXX", CXXCPP = "$CXXCPP"])

AC_MSG_NOTICE([rose_frontend_compiler_default_is_cxx11_success = "$rose_frontend_compiler_default_is_cxx11_success"])
AC_MSG_NOTICE([gcc_version_4_8                                 = "$gcc_version_4_8"])

AM_CONDITIONAL(ROSE_USING_GCC_VERSION_4_8_CXX11, [test "x$gcc_version_4_8" = "xyes" && test "x$rose_frontend_compiler_default_is_cxx11_success" = "xyes"])

AC_MSG_NOTICE([calling AX CXX COMPILE STDCXX 14 macro])
AX_CXX_COMPILE_STDCXX_14(, optional)

AC_MSG_NOTICE([after checking C++14 support: CXX = "$CXX", CXXCPP = "$CXXCPP"])
CXX="$save_CXX"

AC_MSG_NOTICE([after restoring the saved value of CXX: CXX = "$CXX", CXXCPP = "$CXXCPP"])

# echo "Exiting in support-rose after computing the C++ mode (c++11, and c++14 modes)"
# exit 1

# *****************************************************************

# DQ (12/7/2016): Added support for specification of specific warnings a for those specific warnings to be treated as errors.
ROSE_SUPPORT_FATAL_WARNINGS

# *****************************************************************

# echo "Exiting in support-rose after computing the compiler vendor name for the C and C++ compilers."
# exit 1

# End macro ROSE_SUPPORT_ROSE_PART_1.

])
m4trace:config/support-rose.m4:821: -1- AC_DEFUN([ROSE_SUPPORT_ROSE_BUILD_INCLUDE_FILES], [
# Begin macro ROSE_SUPPORT_ROSE_BUILD_INCLUDE_FILES.

AC_MSG_NOTICE([in ROSE SUPPORT ROSE BUILD INCLUDE FILES: Using back-end C++ compiler = "$BACKEND_CXX_COMPILER" compiler vendor name = "$ax_cv_cxx_compiler_vendor" for processing of unparsed source files from ROSE preprocessors])

# DQ (7/26/2020): Spelling it correctly so that we can force the directory of header files to be rebuilt.
# Note that this directory name is not spelled correctly, is this a typo?
# JJW (12/10/2008): We don't preprocess the header files for the new interface
# rm -rf ./include-stagin
# echo "Changes spelling of include-stagin to force the directory of header files to be rebuilt."
rm -rf ./include-stagin

# DQ (7/27/2020): debugging info
# echo "Before processing include files: GCC_VERSION       = $GCC_VERSION"
# echo "Before processing include files: GCC_MINOR_VERSION = $GCC_MINOR_VERSION"

if test x$enable_clang_frontend = xyes; then
  INSTALL_CLANG_SPECIFIC_HEADERS
else

# DQ (7/26/2020): Process this macro only to better support testing.
# GENERATE_BACKEND_CXX_COMPILER_SPECIFIC_HEADERS

  # DQ (11/1/2011): I think that we need these for more complex header file
  # requirements than we have seen in testing C code to date.  Previously
  # in testing C codes with the EDG 4.x we didn't need as many header files.
    GENERATE_BACKEND_C_COMPILER_SPECIFIC_HEADERS
    GENERATE_BACKEND_CXX_COMPILER_SPECIFIC_HEADERS
fi

# End macro ROSE_SUPPORT_ROSE_BUILD_INCLUDE_FILES.

# *****************************************************************
# echo "DQ (7/26/2020): Exiting after ROSE SUPPORT ROSE BUILD INCLUDE FILES (Skipped C header files!)"
# exit 1
# *****************************************************************

])
m4trace:config/support-rose.m4:869: -1- AC_DEFUN([ROSE_SUPPORT_ROSE_PART_2], [
# Begin macro ROSE_SUPPORT_ROSE_PART_2.

# DQ (9/26/2015): Since the config/ltdl.m4 file in regenerated, we can't edit it easily.
# So make this a requirement so that it will not be expanded there.
m4_require([_LT_SYS_DYNAMIC_LINKER])

# AC_REQUIRE([AC_PROG_CXX])
AC_PROG_CXX

AC_MSG_NOTICE([in configure.in ... CXX = "$CXX"])

# DQ (9/17/2006): These should be the same for both C and C++ (else we will need separate macros)
# Setup the -D<xxx> defines required to allow EDG to take the same path through the compiler
# specific and system specific header files as for the backend compiler.  These depend
# upon the selection of the back-end compiler.
GET_COMPILER_SPECIFIC_DEFINES
ROSE_CONFIG_TOKEN="$ROSE_CONFIG_TOKEN $FRONTEND_CXX_COMPILER_VENDOR-$FRONTEND_CXX_VERSION_MAJOR.$FRONTEND_CXX_VERSION_MINOR"

# This must go after the setup of the headers options
# Setup the CXX_INCLUDE_STRING to be used by EDG to find the correct headers
# SETUP_BACKEND_COMPILER_SPECIFIC_REFERENCES
# JJW (12/10/2008): We don't preprocess the header files for the new interface,
# but we still need to use the original C++ header directories
ROSE_CONFIGURE_SECTION([Checking backend C/C++ compiler specific references])
SETUP_BACKEND_C_COMPILER_SPECIFIC_REFERENCES
SETUP_BACKEND_CXX_COMPILER_SPECIFIC_REFERENCES

# echo "In configure.in ... CXX = $CXX : exiting after call to setup backend C and C++ compilers specific references."
# exit 1

# DQ (1/15/2007): Check if longer internal make check rule is to be used (default is short tests)
ROSE_SUPPORT_LONG_MAKE_CHECK_RULE

# Make the use of longer test optional where it is used in some ROSE/tests directories
AM_CONDITIONAL(ROSE_USE_LONG_MAKE_CHECK_RULE,test "$with_ROSE_LONG_MAKE_CHECK_RULE" = yes)

# The libxml2 library is availabe in /usr/lib on most Linux systems, however this is not
# enough when using the Intel compilers.  So we need to turn it on explicitly when we
# expect it to work with a specific platform/compiler combination.

# JJW -- use standard version in /usr/share/aclocal, and configure XML only
# once for roseHPCT and BinaryContextLookup
with_xml="no"
AM_PATH_XML2(2.0.0, [with_xml="yes"])

# Make the use of libxml2 explicitly controlled.
AM_CONDITIONAL(ROSE_USE_XML,test "$with_xml" != no)

# DQ (10/17/2009): This is a bug introduced (again) into ROSE which disables the Java support.
# See elsewhere in this file where this macro is commented out and the reason explained in
# more details.
# AS Check for ssl for the binary clone detection work
# CHECK_SSL

# Check for objdump for BinaryContextLookup since it doesn't normally exist on
# Mac
AC_CHECK_TOOL(ROSE_OBJDUMP_PATH, [objdump], [no])
AM_CONDITIONAL(ROSE_USE_OBJDUMP, [test "$ROSE_OBJDUMP_PATH" != "no"])
AM_CONDITIONAL(ROSE_USE_BINARYCONTEXTLOOKUP, [test "$with_xml" != "no" -a "$ROSE_OBJDUMP_PATH" != "no"])

# Check for availability of wget (used for downloading the EDG binaries used in ROSE).
AC_CHECK_TOOL(ROSE_WGET_PATH, [wget], [no])
AM_CONDITIONAL(ROSE_USE_WGET, [test "$ROSE_WGET_PATH" != "no"])
if test "$ROSE_WGET_PATH" = "no"; then
   AC_MSG_FAILURE([wget was not found; ROSE requires wget to download EDG binaries automatically])
else
   # Not clear if we really should have ROSE configure automatically do something like this.
   AC_MSG_NOTICE([ROSE might use wget to automatically download EDG binaries as required during the build])
fi
# Check for availability of ps2pdf, part of ghostscript (used for generating pdf files).
AC_CHECK_TOOL(ROSE_PS2PDF_PATH, [ps2pdf], [no])
AM_CONDITIONAL(ROSE_USE_PS2PDF, [test "$ROSE_PS2PDF_PATH" != "no"])
if test "$ROSE_PS2PDF_PATH" = "no"; then
   AC_MSG_FAILURE([ps2pdf was not found; ROSE requires ps2pdf (part of ghostscript) to generate pdf files])
fi

AC_C_BIGENDIAN
AC_CHECK_HEADERS([byteswap.h machine/endian.h])

ROSE_SUPPORT_VALGRIND

AC_ARG_WITH(wave-default, [  --with-wave-default     Use Wave as the default preprocessor],
            [AC_DEFINE([ROSE_WAVE_DEFAULT], true, [Use Wave as default in ROSE])],
            [AC_DEFINE([ROSE_WAVE_DEFAULT], false, [Simple preprocessor as default in ROSE])]
            )

# Add --disable-binary-analysis-tests flag to turn off tests that sometimes
# sometimes break.
# Pei-Hung (10/24/2016) use only ROSE_BUILD_BINARY_ANALYSIS_SUPPORT to control binary analysis tests
# AC_ARG_ENABLE(binary-analysis-tests, AS_HELP_STRING([--disable-binary-analysis-tests], [Disable tests of ROSE binary analysis code]), binary_analysis_tests="$withval", binary_analysis_tests=yes)
# AM_CONDITIONAL(USE_BINARY_ANALYSIS_TESTS, test "x$binary_analysis_tests" = "xyes")

# Figure out what version of lex we have available
# flex works better than lex (this gives a preference to flex (flex is gnu))
AM_PROG_LEX
AC_SUBST(LEX)
AC_PROG_YACC
AC_SUBST(YACC)

# echo "After test for LEX: CC (CC = $CC)"

# DQ (4/1/2001) Need to call this macro to avoid having "MAKE" set to "make" in the
# top level Makefile (this is important to getting gmake to be used in the "make distcheck"
# makefile rule.  (This does not seem to work, since calling "make distcheck" still fails and
# only "gmake distcheck" seems to work.  I don't know why!
AC_PROG_MAKE_SET

# DQ (9/21/2009): Debugging for RH release 5
AC_MSG_NOTICE([testing the value of CC: (CC = "$CC")])
AC_MSG_NOTICE([testing the value of CPPFLAGS: (CPPFLAGS = "$CPPFLAGS")])

# Call supporting macro for MAPLE
ROSE_SUPPORT_MAPLE

# Setup Automake conditional in Projects/programModeling/Makefile.am
AM_CONDITIONAL(ROSE_USE_MAPLE,test ! "$with_maple" = no)

# DQ (5/21/2017): I don't think we use this anymore.
#ROSE_SUPPORT_VXWORKS

# Setup Automake conditional.
AM_CONDITIONAL(ROSE_USE_VXWORKS,test ! "$with_vxworks" = no)

# DQ (5/23/2017): I don't think we use this anymore.
# DQ (4/10/2010): Added configure support for Backstroke project.
# ROSE_SUPPORT_BACKSTROKE

#Call supporting macro for IDA PRO
ROSE_SUPPORT_IDA

# Setup Automake conditional in projects/AstEquivalence/Makefile.am
AM_CONDITIONAL(ROSE_USE_IDA,test ! "$with_ida" = no)

# Call supporting macro for libffi (Foreign Function Interface library)
# This library is used by Peter's work on the Interpreter in ROSE.
ROSE_SUPPORT_LIBFFI

# Setup Automake conditional in projects/interpreter/Makefile.am
AM_CONDITIONAL(ROSE_USE_LIBFFI,test ! "$with_libffi" = no)


# DQ (3/13/2009): Trying to get Intel Pin and ROSE to both use the same version of libdwarf.
# DQ (3/10/2009): The Dwarf support in Intel Pin conflicts with the Dwarf support in ROSE.
# Maybe there is a way to fix this later, for now we want to disallow it.
# echo "with_dwarf    = $with_dwarf"
# echo "with_IntelPin = $with_IntelPin"
#if test "$with_dwarf" != no && test "$with_IntelPin" != no; then
# # echo "Support for both DWARF and Intel Pin fails, these configure options are incompatable."
#   AC_MSG_ERROR([Support for both DWARF and Intel Pin fails, these configure options are incompatable!])
#fi

# DQ (3/14/2013): Adding support for Aterm library use in ROSE.
ROSE_SUPPORT_ATERM

# DQ (1/22/2016): Added support for stratego (need to know the path to sglri executable for Experimental Fortran support).
ROSE_SUPPORT_STRATEGO

# RASMUSSEN (11/16/2017): Removed check for OFP Stratego tools binary installation (Experimental Fortran support).
# Now assumes that the OFP Fortran parse table (Fortran.tbl) is stored in the source directory.
# RASMUSSEN (2/22/2017): Added support for OFP Stratego tools binary installation (Experimental Fortran support).
# This assumes that OFP is installed from an OFP release and not imported and built with ROSE directly.

#ROSE_SUPPORT_OFP_STRATEGO

if test "x$enable_experimental_fortran_frontend" = "xyes"; then
   if test "x$ATERM_LIBRARY_PATH" = "x"; then
      AC_MSG_ERROR([support for experimental_fortran_frontend requires Aterm library support, --with-aterm=PATH must be specified])
   fi
   if test "x$STRATEGO_LIBRARY_PATH" = "x"; then
      AC_MSG_ERROR([support for experimental_fortran_frontend requires Stratego library support, --with-stratego=PATH must be specified])
   fi
fi

# Rasmussen (10/24/2017): ATerm and Stratego/XT tools binary installation required for Jovial support.
if test "x$enable_experimental_jovial_frontend" = "xyes"; then
   if test "x$ATERM_LIBRARY_PATH" = "x"; then
      AC_MSG_ERROR([support for experimental_jovial_frontend requires Aterm library support, --with-aterm=PATH must be specified!])
   fi
   if test "x$STRATEGO_LIBRARY_PATH" = "x"; then
      AC_MSG_ERROR([support for experimental_jovial_frontend requires Stratego library support, --with-stratego=PATH must be specified!])
   fi
fi

# Rasmussen (10/24/2017): GnuCobol parse-tree library installation required for Cobol support.
if test "x$enable_experimental_cobol_frontend" = "xyes"; then
   if test "x$COBPT_LIBRARY_PATH" = "x"; then
      AC_MSG_ERROR([support for experimental_cobol_frontend requires GnuCobol parse-tree library support, --with-cobpt=PATH must be specified!])
   fi
fi

# Rasmussen (11/19/2017): Octave/Matlab parser installation required for Matlab support.
if test "x$enable_experimental_matlab_frontend" = "xyes"; then
   if test "x$OCTAVE_PARSER_INSTALL_TARFILE" = "x"; then
      AC_MSG_ERROR([support for experimental_matlab_frontend requires the modified GNU Octave parser, --with-octave-parser=PATH must be specified!])
   fi
fi


ROSE_SUPPORT_MINT

ROSE_SUPPORT_VECTORIZATION

# Pei-Hung (12/17/2014): Adding support for POCC.
ROSE_SUPPORT_POCC

ROSE_SUPPORT_LIBHARU

ROSE_SUPPORT_PHP

AM_CONDITIONAL(ROSE_USE_PHP,test ! "$with_php" = no)

#ASR
ROSE_SUPPORT_LLVM

AM_CONDITIONAL(ROSE_USE_LLVM,test ! "$with_llvm" = no)

# Call supporting macro for Windows Source Code Analysis
ROSE_SUPPORT_WINDOWS_ANALYSIS

# Setup Automake conditional in Projects/programModeling/Makefile.am
AM_CONDITIONAL(ROSE_USE_WINDOWS_ANALYSIS_SUPPORT,test ! "$with_wine" = no)

# Control use of debugging support to convert most unions in EDG to structs.
ROSE_SUPPORT_EDG_DEBUGGING

# Call supporting macro for Omni OpenMP
#
ROSE_SUPPORT_OMNI_OPENMP

# call supporting macro for GCC 4.4.x gomp OpenMP runtime library
# AM_CONDITIONAL is already included into the macro
ROSE_WITH_GOMP_OPENMP_LIBRARY

# Call supporting macro for GCC OpenMP
ROSE_SUPPORT_GCC_OMP

# Configuration commandline support for OpenMP in ROSE
AM_CONDITIONAL(ROSE_USE_GCC_OMP,test ! "$with_parallel_ast_traversal_omp" = no)


# JJW and TP (3-17-2008) -- added MPI support
AC_ARG_WITH(parallel_ast_traversal_mpi,
[  --with-parallel_ast_traversal_mpi     Enable AST traversal in parallel using MPI.],
[ AC_MSG_NOTICE([setting up optional MPI-based tools])
])
AM_CONDITIONAL(ROSE_MPI,test "$with_parallel_ast_traversal_mpi" = yes)
AC_CHECK_TOOLS(MPICXX, [mpiCC mpic++ mpicxx])


# TPS (2-11-2009) -- added PCH Support
AC_ARG_WITH(pch,
[  --with-pch                    Configure option to have pre-compiled header support enabled.],
[ AC_MSG_NOTICE([enabling precompiled header])
])
AM_CONDITIONAL(ROSE_PCH,test "$with_pch" = yes)
if test "x$with_pch" = xyes; then
  AC_MSG_NOTICE(["PCH enabled: CPPFLAGS = "$CPPFLAGS"])
  if test "x$with_parallel_ast_traversal_mpi" = xyes; then
    AC_MSG_ERROR([PCH support cannot be configured together with MPI support])
  fi
  if test "x$with_parallel_ast_traversal_omp" = xyes; then
    AC_MSG_ERROR([PCH Support cannot be configured together with GCC_OMP support])
  fi
else
  AC_MSG_NOTICE("PCH disabled: no Support for PCH")
fi





# TP (2-27-2009) -- support for RTED
ROSE_SUPPORT_RTED

AM_CONDITIONAL(ROSE_USE_RTED,test ! "$with_rted" = no)

# TP SUPPORT FOR OPENGL
#AC_DEFINE([openGL],1,[By default OpenGL is disabled.])
AC_ARG_ENABLE([rose-openGL],
  [  --enable-rose-openGL  enable openGL],
  [  rose_openGL=${enableval}
AC_PATH_X dnl We need to do this by hand for some reason

# DQ (9/26/2015): Using more recent autoconf macro to avoid warnings.
# MDL_HAVE_OPENGL
AC_FIND_OPENGL

AC_MSG_NOTICE([have_GL = "$have_GL" and have_glut = "$have_glut" and rose_openGL = "$rose_openGL"])
#AM_CONDITIONAL(ROSE_USE_OPENGL, test ! "x$have_GL" = xno -a ! "x$openGL" = xno)
if test ! "x$rose_openGL" = xno; then
   AC_MSG_NOTICE([checking OpenGL dependencies..."])
  if test "x$have_GL" = xyes; then
    AC_MSG_NOTICE([OpenGL enabled: found OpenGL])
  else
    AC_MSG_ERROR([OpenGL not found])
  fi
 if test "x$have_glut" = xyes; then
    AC_MSG_NOTICE([OpenGL enabled: found GLUT])
 else
   AC_MSG_NOTICE([OpenGL GLUT not found; please use --with-glut])
 fi
fi
], [ rose_openGL=no
  AC_MSG_NOTICE([OpenGL disabled])
])
AM_CONDITIONAL(ROSE_USE_OPENGL, test ! "x$have_GL" = xno -a ! "x$rose_openGL" = xno)


AM_CONDITIONAL(USE_ROSE_GLUT_SUPPORT, false)

AC_ARG_WITH(glut,
[  --with-glut=PATH     Configure option to have GLUT enabled.],
,
if test ! "$with_glut" ; then
   with_glut=no
fi
)

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_glut = "$with_glut"])

if test "$with_glut" = no; then
   # If dwarf is not specified, then don't use it.
   AC_MSG_NOTICE([skipping use of GLUT support])
else
   AM_CONDITIONAL(USE_ROSE_GLUT_SUPPORT, true)
   glut_path=$with_glut
   AC_MSG_NOTICE([setup GLUT support in ROSE. path = "$glut_path"])
   AC_DEFINE([USE_ROSE_GLUT_SUPPORT],1,[Controls use of ROSE support for GLUT library.])
fi


AC_SUBST(glut_path)



AC_CHECK_PROGS(PERL, [perl])

# DQ (9/4/2009): Added checking for indent command (common in Linux, but not on some platforms).
# This command is used in the tests/nonsmoke/functional/roseTests/astInterfaceTests/Makefile.am file.
AC_CHECK_PROGS(INDENT, [indent])
AM_CONDITIONAL(ROSE_USE_INDENT, [test "x$INDENT" = "xindent"])
AC_MSG_NOTICE([INDENT = "$INDENT"])

# DQ (9/30/2009): Added checking for tclsh command (common in Linux, but not on some platforms).
AC_CHECK_PROGS(TCLSH, [tclsh])
AM_CONDITIONAL(ROSE_USE_TCLSH, [test "x$TCLSH" = "xtclsh"])
AC_MSG_NOTICE([TCLSH = "$TCLSH"])

# Call supporting macro for OFP
ROSE_SUPPORT_OFP

# DQ (3/6/2013): The major version number must match or the ac_pkg_swig.m4 will report
# we are using the wrong version of swig (likely we need a newer version of this m4 script).
# AC_PROG_SWIG(1.3.31)
AC_PROG_SWIG(2.0.0)
SWIG_ENABLE_CXX
#AS (10/23/07): introduced conditional use of javaport
AC_ARG_WITH([javaport],
   [  --with-javaport ... Enable generation of Java bindings for ROSE using Swig],
   [with_javaport=$withval],
   [with_javaport=no])
AM_CONDITIONAL(ENABLE_JAVAPORT,test "$with_javaport" = yes)

if test "x$with_javaport" = "xyes"; then
  if test "x$USE_JAVA" = "x0"; then
    AC_MSG_ERROR([trying to enable --with-javaport without --with-java also being set])
  fi
  if /bin/sh -c "$SWIG -version" >& /dev/null; then
    :
  else
    AC_MSG_ERROR([trying to enable --with-javaport without SWIG installed])
  fi
  AC_MSG_WARN([enabling Java binding support -- SWIG produces invalid C++ code, so -fno-strict-aliasing is being added to CXXFLAGS to work around this issue.  If you are not using GCC as a compiler, this flag will need to be changed.])
  CXXFLAGS="$CXXFLAGS -fno-strict-aliasing"

# DQ (3/6/2013): Added support to permit conditional compilation for use of SWIG.
# SWIG has restricted support for C++ and so we need to tailor ROSE to fix into
# the subset of C++ that SWIG can support.  We only want to turn this ON when SWIG
# is processing the ROSE source code.  So it need not generate an entry in rose_config.h.
# AC_DEFINE([ROSE_USE_SWIG_SUPPORT], [], [Whether to use SWIG support or not within ROSE])
fi

# Call supporting macro for Haskell
ROSE_SUPPORT_HASKELL

ROSE_SUPPORT_CUDA

# if swi-prolog is available
ROSE_SUPPORT_SWIPL

# Call support macro for Z3

ROSE_SUPPORT_Z3

# Call supporting macro for bddbddb
ROSE_SUPPORT_BDDBDDB

# Setup Automake conditional in Projects/DatalogAnalysis/Makefile.am
AM_CONDITIONAL(ROSE_USE_BDDBDDB,test ! "$with_bddbddb" = no)

# Call supporting macro for VISUALIZATION (FLTK and GraphViz)
ROSE_SUPPORT_VISUALIZATION

# if ((test ! "$with_FLTK_include" = no) || (test ! "$with_FLTK_libs" = no) || (test ! "$with_GraphViz_include" = no) || (test ! "$with_GraphViz_libs" = no)); then
#   echo "Skipping visualization support!"
# else
#   echo "Setting up visualization support!"
# fi

# Setup Automake conditional in src/roseIndependentSupport/visualization/Makefile.am
AM_CONDITIONAL(ROSE_USE_VISUALIZATION,(test ! "$with_FLTK_include" = no) || (test ! "$with_FLTK_libs" = no) || (test ! "$with_GraphViz_include" = no) || (test ! "$with_GraphViz_libs" = no))

# *********************************************************************
# Option to control internal support of PPL (Parma Polyhedron Library)
# *********************************************************************

# TV (05/25/2010): Check for Parma Polyhedral Library (PPL)

AC_ARG_WITH(
        [ppl],
        AS_HELP_STRING([--with-ppl@<:@=DIR@:>@], [use Parma Polyhedral Library (PPL)]),
        [
        if test "$withval" = "no"; then
      AC_MSG_FAILURE([--with-ppl=PATH must be specified to use option --with-ppl (a valid Parma Polyhedral Library (PPL) intallation)])
        elif test "$withval" = "yes"; then
      AC_MSG_FAILURE([--with-ppl=PATH must be specified to use option --with-ppl (a valid Parma Polyhedral Library (PPL) intallation)])
        else
            has_ppl_path="yes"
            ppl_path="$withval"
        fi
        ],
        [has_ppl_path="no"]
)

AC_ARG_ENABLE(
        ppl,
        AS_HELP_STRING(
                [--enable-ppl],
                [Support for Parma Polyhedral Library (PPL)]
        )
)
AM_CONDITIONAL(
        ROSE_USE_PPL,
        [test "x$enable_ppl" = "xyes"])
if test "x$enable_ppl" = "xyes"; then
        if test "x$has_ppl_path" = "xyes"; then
                PPL_PATH="$ppl_path"
                AC_DEFINE([ROSE_USE_PPL], [], [Whether to use Parma Polyhedral Library (PPL) support or not within ROSE])
        fi
fi
AC_SUBST(ROSE_USE_PPL)
AC_SUBST(PPL_PATH)

# *********************************************************************************
# Option to control internal support of Cloog (Code generator for Polyhedral Model)
# *********************************************************************************

AC_ARG_WITH(
        [cloog],
        AS_HELP_STRING([--with-cloog@<:@=DIR@:>@], [use Cloog]),
        [
        if test "$withval" = "no"; then
      AC_MSG_FAILURE([--with-cloog=PATH must be specified to use option --with-cloog (a valid Cloog intallation)])
        elif test "$withval" = "yes"; then
            AC_MSG_FAILURE([--with-cloog=PATH must be specified to use option --with-cloog (a valid Cloog intallation)])
        else
            has_cloog_path="yes"
            cloog_path="$withval"
        fi
        ],
        [has_cloog_path="no"]
)

AC_ARG_ENABLE(
        cloog,
        AS_HELP_STRING(
                [--enable-cloog],
                [Support for Cloog]
        )
)
AM_CONDITIONAL(
        ROSE_USE_CLOOG,
        [test "x$enable_cloog" = "xyes"])
if test "x$enable_cloog" = "xyes"; then
        if test "x$has_cloog_path" = "xyes"; then
                CLOOG_PATH="$cloog_path"
                AC_DEFINE([ROSE_USE_CLOOG], [], [Whether to use Cloog support or not within ROSE])
        fi
fi
AC_SUBST(ROSE_USE_CLOOG)
AC_SUBST(CLOOG_PATH)

# **************************************************************************************
# Option to control internal support of ScopLib (A classic library for Polyhedral Model)
# **************************************************************************************

AC_ARG_WITH(
        [scoplib],
        AS_HELP_STRING([--with-scoplib@<:@=DIR@:>@], [use ScopLib]),
        [
        if test "$withval" = "no"; then
      AC_MSG_FAILURE([--with-scoplib=PATH must be specified to use option --with-scoplib (a valid ScopLib intallation)])
        elif test "$withval" = "yes"; then
      AC_MSG_FAILURE([--with-scoplib=PATH must be specified to use option --with-scoplib (a valid ScopLib intallation)])
        else
            has_scoplib_path="yes"
            scoplib_path="$withval"
        fi
        ],
        [has_scoplib_path="no"]
)

AC_ARG_ENABLE(
        scoplib,
        AS_HELP_STRING(
                [--enable-scoplib],
                [Support for ScopLib]
        )
)
AM_CONDITIONAL(
        ROSE_USE_SCOPLIB,
        [test "x$enable_scoplib" = "xyes"])
if test "x$enable_scoplib" = "xyes"; then
        if test "x$has_scoplib_path" = "xyes"; then
                SCOPLIB_PATH="$scoplib_path"
                AC_DEFINE([ROSE_USE_SCOPLIB], [], [Whether to use ScopLib support or not within ROSE])
        fi
fi
AC_SUBST(ROSE_USE_SCOPLIB)
AC_SUBST(SCOPLIB_PATH)

# *************************************************************************************
# Option to control internal support of Candl (Dependency analysis in Polyhedral Model)
# *************************************************************************************

AC_ARG_WITH(
        [candl],
        AS_HELP_STRING([--with-candl@<:@=DIR@:>@], [use Candl]),
        [
        if test "$withval" = "no"; then
            AC_MSG_FAILURE([--with-candl=PATH must be specified to use option --with-candl (a valid Candl intallation)])
        elif test "$withval" = "yes"; then
            AC_MSG_FAILURE([--with-candl=PATH must be specified to use option --with-candl (a valid Candl intallation)])
        else
            has_candl_path="yes"
            candl_path="$withval"
        fi
        ],
        [has_candl_path="no"]
)

AC_ARG_ENABLE(
        candl,
        AS_HELP_STRING(
                [--enable-candl],
                [Support for Candl]
        )
)
AM_CONDITIONAL(
        ROSE_USE_CANDL,
        [test "x$enable_candl" = "xyes"])
if test "x$enable_candl" = "xyes"; then
        if test "x$has_candl_path" = "xyes"; then
                CANDL_PATH="$candl_path"
                AC_DEFINE([ROSE_USE_CANDL], [], [Whether to use Candl support or not within ROSE])
        fi
fi
AC_SUBST(ROSE_USE_CANDL)
AC_SUBST(CANDL_PATH)

# *****************************************************************
#            Accelerator Support (CUDA, OpenCL)
# *****************************************************************

# Check: --with-cuda-inc, --with-cuda-lib, and  --with-cuda-bin
ROSE_CHECK_CUDA
# Check: --with-opencl-inc, --with-opencl-lib
ROSE_CHECK_OPENCL

# *****************************************************************
#            Option to define DOXYGEN SUPPORT
# *****************************************************************

# allow either user or developer level documentation using Doxygen
ROSE_SUPPORT_DOXYGEN

# DQ (8/25/2004): Disabled fast docs option.
# Setup Automake conditional to allow use of Doxygen Tag file to speedup
# generation of Rose documentation this does not however provide the
# best organized documentation so we use it as an option to speed up
# the development of the documenation and then alternatively build the
# final documentation.
# AM_CONDITIONAL(DOXYGEN_GENERATE_FAST_DOCS,test "$enable_doxygen_generate_fast_docs" = yes)
# echo "In configure.in: enable_doxygen_generate_fast_docs = $enable_doxygen_generate_fast_docs"

# Test for setup of document merge of Sage docs with Rose docs
# Causes document build process to take longer but builds better documentation
if (test "$enable_doxygen_generate_fast_docs" = yes) ; then
   AC_MSG_NOTICE([generate Doxygen documentation faster (using tag file mechanism)])
else
   AC_MSG_NOTICE([generate Doxygen documentation slower (reading all of Sage III and Rose together)])
fi

AC_PROG_CXXCPP
dnl AC_PROG_RANLIB
# echo "In configure.in (before libtool win32 setup): libtool test for 64 bit libs = `/usr/bin/file conftest.o`"
dnl AC_LIBTOOL_WIN32_DLL -- ROSE is probably not set up for this

# echo "In configure.in (before libtool setup): disabling static libraries by default (use --enable-static or --enable-static= to override)"
AC_DISABLE_STATIC

# echo "In configure.in (before libtool setup): libtool test for 64 bit libs = `/usr/bin/file conftest.o`"
LT_AC_PROG_SED dnl This seems to not be called, even though it is needed in the other macros
m4_pattern_allow([LT_LIBEXT])dnl From http://www.mail-archive.com/libtool-commit@gnu.org/msg01369.html

# Liao 8/17/2010. Tried to work around a undefined SED on NERSC hopper.
# But this line is expanded after AC_PROG_LIBTOOL.
# I had to promote it to configure.in, right before calling  ROSE_SUPPORT_ROSE_PART_2
#test -z "$SED" && SED=sed

AC_PROG_LIBTOOL
AC_LIBLTDL_CONVENIENCE dnl We need to use our version because libtool can't handle when we use libtool v2 but the v1 libltdl is installed on a system
AC_SUBST(LTDLINCL)
AC_SUBST(LIBLTDL)
AC_LIBTOOL_DLOPEN
AC_LIB_LTDL(recursive)
dnl AC_LT DL_SHLIBPATH dnl Get the environment variable like LD_LIBRARY_PATH for the Fortran support to use
dnl This seems to be an internal variable, set by different macros in different
dnl Libtool versions, but with the same name
AC_DEFINE_UNQUOTED(ROSE_SHLIBPATH_VAR, ["$shlibpath_var"], [Variable like LD_LIBRARY_PATH])

#echo 'int i;' > conftest.$ac_ext
AC_TRY_EVAL(ac_compile);
# echo "In configure.in (after libtool setup): libtool test for 64 bit libs = `/usr/bin/file conftest.o`"

# Various functions for finding the location of librose.* (used to make the
# ROSE executables relocatable to different locations without recompilation on
# some platforms)
AC_CHECK_HEADERS([dlfcn.h], [have_dladdr=yes], [have_dladdr=no])
if test "x$have_dladdr" = "xyes"; then
  AC_CHECK_LIB([dl], [dladdr], [], [have_dladdr=no])
fi
if test "x$have_dladdr" = "xyes"; then
  AC_DEFINE([HAVE_DLADDR], [], [Whether <dlfcn.h> and -ldl contain dladdr()])
  use_rose_in_build_tree_var=no
else
  AC_MSG_WARN([ROSE cannot find the locations of loaded shared libraries using your dynamic linker.  ROSE can only be used with the given build directory or prefix, and the ROSE_IN_BUILD_TREE environment variable must be used to distinguish the two cases.])
  use_rose_in_build_tree_var=yes
fi
AM_CONDITIONAL(USE_ROSE_IN_BUILD_TREE_VAR, [test "x$use_rose_in_build_tree_var" = "xyes"])

# Figure out what version of lex we have available
# flex works better than lex (this gives a preference to flex (flex is gnu))
dnl AM_PROG_LEX
dnl AC_SUBST(LEX)
# This will work with flex and lex (but flex will not set LEXLIB to -ll unless it finds the gnu
# flex library which is not often installed (and at any rate not installed on our system at CASC)).
# Once the lex file contains its own version of yywrap then we will not need this set explicitly.

# next two lines commented out by BP : 10/29/2001,
# the flex library IS installed on our systems, setting it to -ll causes problems on
# Linux systems
# echo "Setting LEXLIB explicitly to -ll (even if flex is used: remove this once lex file contains it's own version of yywrap)"
# dnl LEXLIB='-ll'
# dnl AC_SUBST(LEXLIB)

# Determine what C++ compiler is being used.
AC_MSG_CHECKING(what the C++ compiler $CXX really is)
BTNG_INFO_CXX_ID
AC_MSG_RESULT($CXX_ID-$CXX_VERSION)

# Define various C++ compiler options.
# echo "Before ROSE_FLAG _ CXX_OPTIONS macro"
# ROSE_FLAG_C_OPTIONS
# ROSE_FLAG_CXX_OPTIONS
# echo "Outside of ROSE_FLAG _ CXX_OPTIONS macro: CXX_DEBUG= $CXX_DEBUG"

# Enable turning on purify and setting its options, etc.
ROSE_SUPPORT_PURIFY
# echo "In ROSE/configure: AUX_LINKER = $AUX_LINKER"

# Enable turning on Insure and setting its options, etc.
ROSE_SUPPORT_INSURE
# echo "In ROSE/configure: AUX_LINKER = $AUX_LINKER"

# DQ (7/8/2004): Added support for shared libraries using Brian's macros
# ROSE_TEST_LIBS="-L`pwd`/src"

# DQ (9/7/2006): build the directory where libs will be placed.
# mkdir -p $prefix/libs
# echo "Before calling \"mkdir -p $prefix/lib\": prefix = $prefix"
# mkdir -p $prefix/lib

# DQ (1/14/2007): I don't think this is required any more!
# ROSE_TEST_LIBS="-L$prefix/lib"

# Determine how to create C++ libraries.
AC_MSG_CHECKING(how to create C++ libraries)
BTNG_CXX_AR
AC_MSG_RESULT($CXX_STATIC_LIB_UPDATE and $CXX_DYNAMIC_LIB_UPDATE)

# DQ (6/23/2004) Commented out due to warning in running build
# I do not know why in this case, INCLUDES is not generically
# defined and automatically substituted.  It usually is.  BTNG.
# INCLUDES='-I. -I$(srcdir) -I$(top_builddir)'
# AC_SUBST(INCLUDES)

# We don't need to select between SAGE 2 and SAGE 3 anymore (must use SAGE 3)
# SAGE_VAR_INCLUDES_AND_LIBS

# Let user specify where to find A++P++ installation.
# Specify by --with-AxxPxx= or setting AxxPxx_PREFIX.
# Note that the prefix specified should be that specified
# when installing A++P++.  The prefix appendages are also
# added here.
# BTNG.
AC_MSG_CHECKING(for A++P++)
AC_ARG_WITH(AxxPxx,
[  --with-AxxPxx=PATH   Specify the prefix where A++P++ is installed],
,
if test "$AxxPxx_PREFIX" ; then
   with_AxxPxx="$AxxPxx_PREFIX"
else
   with_AxxPxx=no
fi
)
test "$with_AxxPxx" && test "$with_AxxPxx" != no && AxxPxx_PREFIX="$with_AxxPxx"
AC_MSG_RESULT($AxxPxx_PREFIX)
if test "$AxxPxx_PREFIX" ; then
  # Note that the prefix appendages are added to AxxPxx_PREFIX to find A++ and P++.
  AC_MSG_RESULT(using $AxxPxx_PREFIX as path to A++ Library)
  Axx_INCLUDES="-I$AxxPxx_PREFIX/A++/lib/include"
  Axx_LIBS="-L$AxxPxx_PREFIX/A++/lib/lib -lApp -lApp_static -lApp"
  Pxx_INCLUDES="-I$AxxPxx_PREFIX/P++/lib/include"
  Pxx_LIBS="-L$AxxPxx_PREFIX/P++/lib/lib -lApp -lApp_static -lApp"
  # optional_AxxPxxSpecificExample_subdirs="EXAMPLES"
  # we will want to setup subdirectories in the TESTS directory later so set it up now
  # optional_AxxPxxSpecificTest_subdirs="A++Tests"
else
  AC_MSG_RESULT(No path specified for A++ Library)
fi
AC_SUBST(Axx_INCLUDES)
AC_SUBST(Axx_LIBS)
AC_SUBST(Pxx_INCLUDES)
AC_SUBST(Pxx_LIBS)
# AC_SUBST(optional_AxxPxxSpecificExample_subdirs)
# AC_SUBST(optional_AxxPxxSpecificTest_subdirs)
# Do not append to INCLUDES and LIBS because Axx is not needed everywhere.
# It is only needed in EXAMPLES.
# Set up A++/P++ directories that require A++/P++ Libraries (EXAMPLES)
AM_CONDITIONAL(AXXPXX_SPECIFIC_TESTS,test ! "$with_AxxPxx" = no)

# BTNG_CHOOSE_STL defines STL_DIR and STL_INCLUDES
# BTNG_CHOOSE_STL
# echo "STL_INCLUDE = $STL_INCLUDE"
# AC _SUB ST(STL_INCLUDES)
# AC _SUB ST(STL_DIR)

# We no longer want to have the ROSE configure.in setup the PerformanceTests/Makefile
# PerformanceTests/Makefile
AC_ARG_WITH(PERFORMANCE_TESTS,
   [  --with-PERFORMANCE_TESTS ... compile and run performance tests within both A++ and P++],, with_PERFORMANCE_TESTS=no )
# BTNG_AC_LOG(with_PERFORMANCE_TESTS is $with_PERFORMANCE_TESTS)
# with_PERFORMANCE_TESTS variable is exported so that other packages
# (e.g. indirect addressing) can set
# themselves up dependent upon the use/non-use of PADRE
export with_PERFORMANCE_TESTS;

# Inclusion of PerformanceTests and/or its sublibraries.
# if test "$with_PERFORMANCE_TESTS" = no; then
#   # If PerformanceTests is not specified, then don't use it.
#     echo "Skipping PerformanceTests!"
# else
#   # If PERFORMANCE_TESTS is specified, then configure in PERFORMANCE_TESTS
#   # without regard to its sublibraries.
#   # subdir_list="BenchmarkBase $subdir_list"
#   # optional_PERFORMANCE_subdirs="TESTS/PerformanceTests/BenchmarkBase"
#   # optional_PERFORMANCE_subdirs="TESTS/PerformanceTests"
#   optional_PERFORMANCE_subdirs="PerformanceTests"
#   # echo "Setup PerformanceTests! optional_PERFORMANCE_subdirs = $optional_PERFORMANCE_subdirs"
#   AC_CONFIG_SUBDIRS(TESTS/PerformanceTests/BenchmarkBase)
# fi

dnl # PC (8/16/2006): Now we test for GCJ since MOPS uses it
dnl AC_ARG_WITH([gcj],
dnl [  --with-gcj .................. Specify use of Java (gcj must be in path, required for use with ROSE/projects/FiniteStateModelChecker which uses MOPS internally)], [
dnl    AM_PROG_GCJ
dnl    echo "GCJ = '$GCJ'"
dnl    if test "x$GCJ" == "x" ; then
dnl      echo "gcj not found in path; please add gcj to path or omit --with-gcj option"
dnl      exit 1
dnl    fi
dnl    with_gcj=yes
dnl ],[
dnl    _AM_IF_OPTION([no-dependencies],, [_AM_DEPENDENCIES(GCJ)])
dnl ])
with_gcj=no ; # JJW 5-22-2008 The code that was here before broke if gcj was not present, even if the --with-gcj flag was absent
AM_CONDITIONAL(USE_GCJ,test "$with_gcj" = yes)

ROSE_CONFIGURE_SECTION([Checking system capabilities])

AC_SEARCH_LIBS(clock_gettime, [rt], [
  RT_LIBS="$LIBS"
  LIBS=""
],[
  RT_LIBS=""
])
AC_SUBST(RT_LIBS)

# DQ (9/11/2006): Removed performance tests conditional, the performance tests were
# removed previously, but we still have the tests/nonsmoke/functional/PerformanceTests directory.
# AM_CONDITIONAL(ROSE_PERFORMANCE_TESTS,test ! "$with_PERFORMANCE_TESTS" = no)

# DQ (9/11/2006): skipping use of optional_PERFORMANCE_subdirs
# There is no configure.in in TESTS/PerformanceTests (only in TESTS/PerformanceTests/BenchmarkBase)
# AC_CONFIG_SUBDIRS(TESTS/PerformanceTests)
# AC_CONFIG_SUBDIRS(TESTS/PerformanceTests/BenchmarkBase)
# AC_SUBST(optional_PERFORMANCE_subdirs)

# DQ (12/16/2009): This option is now removed since the developersScratchSpace has been
# removed from the ROSE's git repository and it is a separate git repository that can be
# checked out internally by ROSE developers.
# Set up for Dan Quinlan's development test directory.
# AC_ARG_ENABLE(dq-developer-tests,
# [--enable-dq-developer-tests   Development option for Dan Quinlan (disregard).],
# [ echo "Setting up optional ROSE/developersScratchSpace/Dan directory"
# if test -d ${srcdir}/developersScratchSpace; then
#   :
# else
#   echo "This is a non-developer version of ROSE (source distributed with EDG binary)"
#   enable_dq_developer_tests=no
# fi
# ])
# AM_CONDITIONAL(DQ_DEVELOPER_TESTS,test "$enable_dq_developer_tests" = yes)

## This should be set after a complex test (turn it on as default)
AC_DEFINE([HAVE_EXPLICIT_TEMPLATE_INSTANTIATION],[],[Use explicit template instantiation.])

# Copied from the P++/configure.in
# Determine how to build a C++ library.
AC_MSG_CHECKING(how to build C++ libraries)
BTNG_CXX_AR
if test "$CXX_ID" = ibm; then
  # IBM does not have a method for supporting shared libraries
  # Here is a kludge.
  CXX_SHARED_LIB_UPDATE="`cd ${srcdir}/../config && pwd`/mklib.aix -o"
  BTNG_AC_LOG(CXX_SHARED_LIB_UPDATE changed to $CXX_SHARED_LIB_UPDATE especially for the IBM)
fi
AC_MSG_RESULT($CXX_STATIC_LIB_UPDATE and $CXX_SHARED_LIB_UPDATE)
AC_SUBST(CXX_STATIC_LIB_UPDATE)
AC_SUBST(CXX_SHARED_LIB_UPDATE)

# The STL tests use the CC command line which specifies -ptr$(CXX_TEMPLATE_REPOSITORY_PATH) but this
# is not defined in the shell so no substitution is done and a directory named
# $(CXX_TEMPLATE_REPOSITORY_PATH) is built in the top level directory.  The least we can do is
# delete it if we can't stop it from being generated.
# AC_MSG_RESULT(deleting temporary template directory built during STL tests.)
# rm -rf '$(CXX_TEMPLATE_REPOSITORY_PATH)'
rm -rf Templates.DB

# End macro ROSE_SUPPORT_ROSE_PART_2.

])
m4trace:config/support-rose.m4:1738: -1- AC_DEFUN([ROSE_SUPPORT_ROSE_PART_3], [
# Begin macro ROSE_SUPPORT_ROSE_PART_3.

## Setup the EDG specific stuff
SETUP_EDG


ROSE_ARG_ENABLE(
  [alternate-edg-build-cpu],
  [for alternate EDG build cpu],
  [allows you to generate EDG binaries with a different CPU type in the name string]
)

#The build_triplet_without_redhat variable is used only in src/frontend/CxxFrontend/Makefile.am to determine the binary edg name
build_triplet_without_redhat=`${srcdir}/config/cleanConfigGuessOutput "$build" "$build_cpu" "$build_vendor"`
if test "x$CONFIG_HAS_ROSE_ENABLE_ALTERNATE_EDG_BUILD_CPU" = "xyes"; then
  # Manually modify the build CPU <build_cpu>-<build_vendor>-<build>
  build_triplet_without_redhat="$(echo "$build_triplet_without_redhat" | sed 's/^[[^-]]*\(.*\)/'$ROSE_ENABLE_ALTERNATE_EDG_BUILD_CPU'\1/')"
fi
AC_SUBST(build_triplet_without_redhat) dnl This is done even with EDG source, since it is used to determine the binary to make in roseFreshTest

# End macro ROSE_SUPPORT_ROSE_PART_3.
])
m4trace:config/support-rose.m4:1765: -1- AC_DEFUN([ROSE_SUPPORT_ROSE_PART_4], [
# Begin macro ROSE_SUPPORT_ROSE_PART_4.

dnl ---------------------------------------------------------------------
dnl (8/29/2007): This was added to provide more portable times upon the
dnl suggestion of Matt Sottile at LANL.
dnl ---------------------------------------------------------------------
AC_C_INLINE
AC_HEADER_TIME
AC_CHECK_HEADERS([sys/time.h c_asm.h intrinsics.h mach/mach_time.h])

AC_CHECK_TYPE([hrtime_t],[AC_DEFINE(HAVE_HRTIME_T, 1, [Define to 1 if hrtime_t is defined in <sys/time.h>])],,[#if HAVE_SYS_TIME_H
#include <sys/time.h>
#endif])

AC_CHECK_FUNCS([gethrtime read_real_time time_base_to_time clock_gettime mach_absolute_time])

dnl Cray UNICOS _rtc() (real-time clock) intrinsic
AC_MSG_CHECKING([for _rtc intrinsic])
rtc_ok=yes
AC_TRY_LINK([#ifdef HAVE_INTRINSICS_H
#include <intrinsics.h>
#endif], [_rtc()], [AC_DEFINE(HAVE__RTC,1,[Define if you have the UNICOS _rtc() intrinsic.])], [rtc_ok=no])
AC_MSG_RESULT($rtc_ok)
dnl ---------------------------------------------------------------------


# Record the location of the build tree (so it can be substituted into ROSE/docs/Rose/rose.cfg)
top_pwd=$PWD
AC_SUBST(top_pwd)
# echo "In ROSE/con figure: top_pwd = $top_pwd"

absolute_path_srcdir="`cd $srcdir; pwd`"
AC_SUBST(absolute_path_srcdir)

# Liao 6/20/2011, store source path without symbolic links, used to have consistent source and compile paths for ROSE
# when call graph analysis tests are used.
res_top_src=$(cd "$srcdir" && pwd -P)
AC_DEFINE_UNQUOTED([ROSE_SOURCE_TREE_PATH],"$res_top_src",[Location of ROSE Source Tree.])

# kelly64 (6/26/2013): Compass2 xml configuration files require fully-resolved
#                      absolute paths.
AC_SUBST(res_top_src)

# This is silly, but it is done to hide an include command (in
# projects/compass/Makefile.am, including compass-makefile.inc in the build
# tree) from Automake because the needed include file does not exist when
# automake is run
INCLUDE_COMPASS_MAKEFILE_INC="include compass_makefile.inc"
AC_SUBST(INCLUDE_COMPASS_MAKEFILE_INC)

# ROSE-HPCT module -- note that this needs the XML check to have already
# happened
ACROSE_ENABLE_ROSEHPCT

# PC (08/20/2009): Symbolic links need to be resolved for the callgraph analysis tests
res_top_pwd=$(cd "$top_pwd" && pwd -P)

# DQ (11/10/2007): Add paths defined by automake to the generated rose.h.in and rose.h
# header files so that this information will be available at compile time. Unclear
# which syntax is best for the specification of these paths.
AC_DEFINE_UNQUOTED([ROSE_COMPILE_TREE_PATH],"$res_top_pwd",[Location of ROSE Compile Tree.])

# This block turns off features of libharu that don't work with Java
with_png=no
export with_png
with_zlib=no
export with_zlib

# DQ (4/11/2010): This seems to have to appear before the Qt macros
# because the "AC PATH QT" are defined in config/qrose_indigo_1.m4.
# *****************************************************
#  Support for QRose Qt GUI (work at Imperial College)
# *****************************************************

# GMY (9/3/2008) QT4 & QROSE Optional Packages
AC_ARG_WITH(QRose, [  --with-QRose=PATH     prefix of QRose installation],
   [QROSE_PREFIX=$with_QRose
    if test "x$with_QRose" = xyes; then
       AC_MSG_FAILURE([--with-QRose=PATH must be specified to use option --with-QRose (a valid QRose intallation)])
    fi
    if test "x$with_QRose" = x; then
       AC_MSG_FAILURE([empty path used in --with-QRose=PATH must be specified to use option --with-QRose (a valid Qt intallation)])
    fi
   ],
        [with_QRose=no])

AC_SUBST(QROSE_PREFIX)
AM_CONDITIONAL(ROSE_USE_QROSE,test "x$with_QRose" != xno)

AC_MSG_NOTICE([with_QRose = "$with_QRose"])

#AM_CONDITIONAL(USE_QROSE, test "$with_QRose" != no)
#QROSE_LDFLAGS="-L${QROSE_PREFIX}/lib -lqrose"
#QROSE_CXXFLAGS="-I${QROSE_PREFIX}/include"
#AC_SUBST(QROSE_LDFLAGS)
#AC_SUBST(QROSE_CXXFLAGS)


# DQ (4/11/2010): Organized the Qt configure support.
# ****************************************************
#         Support for Qt (General GUI support)
# ****************************************************

# These are defined in config/qrose_indigo_1.m4, they
# are not standard AC macros.
AC_PATH_QT
AC_PATH_QT_MOC
AC_PATH_QT_RCC
AC_PATH_QT_UIC

# The code to set ROSEQT is in this macro's definition.
AC_PATH_QT_VERSION

AC_MSG_NOTICE([with_qt     = "$with_qt"])
AM_CONDITIONAL(ROSE_USE_QT,test x"$with_qt" != x"no")
if test "x$with_qt" = xyes; then
   AC_MSG_FAILURE([path to Qt not specified (usage: --with-qt=PATH)])
fi

# If QRose was specified then make sure that Qt was specified.
if test "x$with_QRose" != xno; then
   if test "x$with_qt" = xno; then
      AC_MSG_FAILURE([QRose requires valid specification of Qt installation (requires option: --with-qt=PATH)])
   fi
fi

# *****************************************************
#   Support for RoseQt GUI (ROSE specific Qt widgets)
# *****************************************************

# ROSE_SUPPORT_ROSEQT
# echo "with_roseQt = $with_roseQt"
# AM_CONDITIONAL(ROSE_WITH_ROSEQT,test x"$with_roseQt" != x"no")

# ****************************************************
#   Support for Assembly Semantics (binary analysis)
ROSE_SUPPORT_BINARY
# ****************************************************

ROSE_SUPPORT_PYTHON_API

# Added support for detection of libnuma, a NUMA aware memory allocation mechanism for many-core optimizations.
AC_CHECK_HEADERS(numa.h, [found_libnuma=yes])

if test "x$found_libnuma" = xyes; then
  AC_DEFINE([HAVE_NUMA_H],[],[Support for libnuma a NUMA memory allocation library for many-core optimizations])
fi

AM_CONDITIONAL(ROSE_USE_LIBNUMA, [test "x$found_libnuma" = xyes])


# PC (7/10/2009): The Haskell build system expects a fully numeric version number.
PACKAGE_VERSION_NUMERIC=`echo $PACKAGE_VERSION | sed -e 's/\([[a-z]]\+\)/\.\1/; y/a-i/1-9/'`
AC_SUBST(PACKAGE_VERSION_NUMERIC)

# This CPP symbol is defined so we can check whether rose_config.h is included into a public header file.  It serves
# no other purpose.  The name must not begin with "ROSE_" but must have a high probability of being globally unique (which
# is why it ends with "_ROSE").
AC_DEFINE(CONFIG_ROSE, 1, [Always defined and used for checking whether global CPP namespace is polluted])

# End macro ROSE_SUPPORT_ROSE_PART_4.

])
m4trace:config/support-rose.m4:1940: -1- AC_DEFUN([CLASSPATH_COND_IF], [m4_ifdef([AM_COND_IF],
  [AM_COND_IF([$1], [$3], [$4])],
  [if $2; then
     m4_default([$3], [:])
   else
     m4_default([$4], [:])
   fi
])])
m4trace:config/support-rose.m4:1952: -1- AC_DEFUN([ROSE_SUPPORT_ROSE_PART_5], [
# Begin macro ROSE_SUPPORT_ROSE_PART_5.

# DQ (9/21/2009): Debugging for RH release 5
AC_MSG_NOTICE([CC = "$CC"])
AC_MSG_NOTICE([CPPFLAGS = "$CPPFLAGS"])

AC_MSG_NOTICE([subdirs = "$subdirs"])
AC_CONFIG_SUBDIRS([libltdl])

# This list should be the same as in build (search for Makefile.in)

CLASSPATH_COND_IF([ROSE_HAS_EDG_SOURCE], [test "x$has_edg_source" = "xyes"], [
AC_CONFIG_FILES([
src/frontend/CxxFrontend/EDG/Makefile
src/frontend/CxxFrontend/EDG/EDG_4.12/Makefile
src/frontend/CxxFrontend/EDG/EDG_4.12/misc/Makefile
src/frontend/CxxFrontend/EDG/EDG_4.12/src/Makefile
src/frontend/CxxFrontend/EDG/EDG_4.12/src/disp/Makefile
src/frontend/CxxFrontend/EDG/EDG_4.12/lib/Makefile
src/frontend/CxxFrontend/EDG/EDG_5.0/Makefile
src/frontend/CxxFrontend/EDG/EDG_5.0/misc/Makefile
src/frontend/CxxFrontend/EDG/EDG_5.0/src/Makefile
src/frontend/CxxFrontend/EDG/EDG_5.0/src/disp/Makefile
src/frontend/CxxFrontend/EDG/EDG_5.0/lib/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.0/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.0/misc/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.0/src/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.0/src/disp/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.0/lib/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.1/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.1/misc/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.1/src/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.1/src/disp/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.1/lib/Makefile
src/frontend/CxxFrontend/EDG/edgRose/Makefile
])], [])

# End macro ROSE_SUPPORT_ROSE_PART_5.

])
m4trace:config/support-rose.m4:1997: -1- AC_DEFUN([ROSE_SUPPORT_ROSE_PART_6], [
# Begin macro ROSE_SUPPORT_ROSE_PART_6.

# RV 9/14/2005: Removed src/3rdPartyLibraries/PDFLibrary/Makefile
# JJW 1/30/2008: Removed rose_paths.h as it is now built by a separate Makefile included from $(top_srcdir)/Makefile.am
AC_CONFIG_FILES([
Makefile
config/Makefile
docs/Makefile
docs/Rose/Makefile
docs/Rose/ROSE_DemoGuide.tex
docs/Rose/ROSE_DeveloperInstructions.tex
docs/Rose/ROSE_Exam.tex
docs/Rose/ROSE_InstallationInstructions.tex
docs/Rose/Tutorial/Makefile
docs/Rose/Tutorial/gettingStarted.tex
docs/Rose/Tutorial/tutorial.tex
docs/Rose/footer.html
docs/Rose/gettingStarted.tex
docs/Rose/leftmenu.html
docs/Rose/manual.tex
docs/Rose/rose-install-demo.cfg
docs/Rose/rose.cfg
docs/Rose/roseQtWidgets.doxygen
docs/Rose/sage.cfg
docs/testDoxygen/Makefile
docs/testDoxygen/test.cfg
exampleTranslators/AstCopyReplTester/Makefile
exampleTranslators/DOTGenerator/Makefile
exampleTranslators/Makefile
exampleTranslators/PDFGenerator/Makefile
exampleTranslators/defaultTranslator/Makefile
exampleTranslators/documentedExamples/AstRewriteExamples/Makefile
exampleTranslators/documentedExamples/Makefile
exampleTranslators/documentedExamples/dataBaseExamples/Makefile
exampleTranslators/documentedExamples/simpleTranslatorExamples/Makefile
exampleTranslators/documentedExamples/simpleTranslatorExamples/exampleMakefile
LicenseInformation/Makefile
projects/ArithmeticMeasureTool/Makefile
projects/BinaryCloneDetection/Makefile
projects/BinaryCloneDetection/compression/Makefile
projects/BinaryCloneDetection/semantic/Makefile
projects/BinaryCloneDetection/syntactic/Makefile
projects/BinaryCloneDetection/syntactic/gui/Makefile
projects/CertSecureCodeProject/Makefile
projects/CloneDetection/Makefile
projects/RaaS/Makefile
projects/RaaS/src/Makefile
projects/RaaS/include/nlohmann/Makefile
projects/RaaS/examples/demo/Makefile
projects/RaaS/examples/demo/compile_commands.json
projects/CompilationDB/Makefile
projects/CompilationDB/scripts/Makefile
projects/CompilationDB/examples/demo/Makefile
projects/CompilationDB/examples/demo/compile_commands.json
projects/CompilationDB/examples/kripke/Makefile
projects/CompilationDB/examples/doxygen/Makefile
projects/CompilationDB/static/js/Makefile
projects/CompilationDB/static/css/Makefile
projects/EditDistanceMetric/Makefile
projects/Fortran_to_C/Makefile
projects/Fortran_to_C/src/Makefile
projects/Fortran_to_C/tests/Makefile
projects/HeaderFilesInclusion/HeaderFilesGraphGenerator/Makefile
projects/HeaderFilesInclusion/HeaderFilesNotIncludedList/Makefile
projects/HeaderFilesInclusion/Makefile
projects/MPI_Tools/MPICodeMotion/Makefile
projects/MPI_Tools/MPIDeterminismAnalysis/Makefile
projects/MPI_Tools/Makefile
projects/Makefile
projects/ManyCoreRuntime/Makefile
projects/ManyCoreRuntime/docs/Makefile
projects/MapleDSL/Makefile
projects/QtDesignerPlugins/Makefile
projects/RTED/CppRuntimeSystem/DebuggerQt/Makefile
projects/RTED/CppRuntimeSystem/Makefile
projects/RTED/Makefile
projects/RoseBlockLevelTracing/Makefile
projects/RoseBlockLevelTracing/src/Makefile
projects/RoseQt/AstViewer/Makefile
projects/RoseQt/Makefile
projects/SMTPathFeasibility/Makefile
projects/ShiftCalculus4/Makefile
projects/TemplateAnalysis/Makefile
projects/TemplateAnalysis/include/ROSE/Analysis/Template/Makefile
projects/TemplateAnalysis/include/ROSE/proposed/Makefile
projects/TemplateAnalysis/include/nlohmann/Makefile
projects/TemplateAnalysis/lib/ROSE/Analysis/Template/Makefile
projects/TemplateAnalysis/lib/ROSE/proposed/Makefile
projects/TemplateAnalysis/src/Makefile
projects/TemplateAnalysis/examples/Makefile
projects/TemplateAnalysis/examples/inspect-autovar/Makefile
projects/TileK/Makefile
projects/TileK/doc/Makefile
projects/TileK/doc/dlx.doxy
projects/TileK/doc/index.html
projects/TileK/doc/klt-rtl.doxy
projects/TileK/doc/klt.doxy
projects/TileK/doc/mdcg.doxy
projects/TileK/doc/mfb.doxy
projects/TileK/doc/tilek-basic.doxy
projects/TileK/doc/tilek-cuda.doxy
projects/TileK/doc/tilek-opencl.doxy
projects/TileK/doc/tilek-rtl-basic.doxy
projects/TileK/doc/tilek-rtl-cuda.doxy
projects/TileK/doc/tilek-rtl-opencl.doxy
projects/TileK/doc/tilek-rtl-threads.doxy
projects/TileK/doc/tilek-threads.doxy
projects/TileK/include/DLX/TileK/Makefile
projects/TileK/include/RTL/Host/Makefile
projects/TileK/include/RTL/Kernel/CUDA/Makefile
projects/TileK/include/RTL/Kernel/OpenCL/Makefile
projects/TileK/lib/Makefile
projects/TileK/src/Makefile
projects/TileK/tests/accelerator/CUDA/Makefile
projects/TileK/tests/accelerator/Makefile
projects/TileK/tests/accelerator/OpenCL/Makefile
projects/TileK/tests/basic/Makefile
projects/TileK/tests/rtl/Makefile
projects/TileK/tests/threads/Makefile
projects/UpcTranslation/Makefile
projects/UpcTranslation/tests/Makefile
projects/Viz/Makefile
projects/Viz/examples/Makefile
projects/Viz/include/Makefile
projects/Viz/include/Viz/Makefile
projects/Viz/include/Viz/Traversals/Makefile
projects/Viz/lib/Makefile
projects/Viz/src/Makefile
projects/Viz/tools/Makefile
projects/amrShiftDSLcompiler/AMRShift/Makefile
projects/amrShiftDSLcompiler/Makefile
projects/arrayDSLcompiler/Makefile
projects/POET_ROSE/Makefile
projects/POET_ROSE/test/Makefile
projects/POET_ROSE/manycore-stencil/Makefile
projects/POET_ROSE/manycore-stencil/include/Makefile
projects/POET_ROSE/manycore-stencil/benchmarks/Makefile
projects/arrayOptimization/Makefile
projects/arrayOptimization/test/Makefile
projects/autoParallelization/Makefile
projects/autoParallelization/tests/Makefile
projects/autoParallelization/difftests/Makefile
projects/autoTuning/Makefile
projects/autoTuning/doc/Makefile
projects/autoTuning/tests/Makefile
projects/compass/Makefile
projects/compass/src/Makefile
projects/compass/src/compassSupport/Makefile
projects/compass/src/util/C-API/Makefile
projects/compass/src/util/MPIAbstraction/Makefile
projects/compass/src/util/MPIAbstraction/alt-mpi-headers/Makefile
projects/compass/src/util/MPIAbstraction/alt-mpi-headers/mpich-1.2.7p1/Makefile
projects/compass/src/util/MPIAbstraction/alt-mpi-headers/mpich-1.2.7p1/include/Makefile
projects/compass/src/util/MPIAbstraction/alt-mpi-headers/mpich-1.2.7p1/include/mpi2c++/Makefile
projects/compass/src/util/Makefile
projects/compass/tools/Makefile
projects/compass/tools/compass/Makefile
projects/compass/tools/compass/buildInterpreter/Makefile
projects/compass/tools/compass/doc/Makefile
projects/compass/tools/compass/doc/compass.tex
projects/compass/tools/compass/gui/Makefile
projects/compass/tools/compass/gui2/Makefile
projects/compass/tools/compass/tests/Compass_C_tests/Makefile
projects/compass/tools/compass/tests/Compass_Cxx_tests/Makefile
projects/compass/tools/compass/tests/Compass_OpenMP_tests/Makefile
projects/compass/tools/compass/tests/Makefile
projects/compass/tools/compassVerifier/Makefile
projects/compass/tools/sampleCompassSubset/Makefile
projects/dsl_infrastructure/Makefile
projects/extractMPISkeleton/Makefile
projects/extractMPISkeleton/src/Makefile
projects/extractMPISkeleton/tests/Makefile
projects/fuse/Makefile
projects/fuse/src/Makefile
projects/fuse/tests/Makefile
projects/interpreter/Makefile
projects/palette/Makefile
projects/pragmaParsing/Makefile
projects/xgenTranslator/Makefile
python/Makefile
python/Rose/Makefile
python/Rose/BinaryAnalysis/Makefile
python/Rose/BinaryAnalysis/Partitioner2/Makefile
python/Rose/BinaryAnalysis/Unparser/Makefile
scripts/Makefile
src/3rdPartyLibraries/MSTL/Makefile
src/3rdPartyLibraries/Makefile
src/3rdPartyLibraries/antlr-jars/Makefile
src/3rdPartyLibraries/flang-parser/Makefile
src/3rdPartyLibraries/fortran-parser/Makefile
src/3rdPartyLibraries/java-parser/Makefile
src/3rdPartyLibraries/qrose/Components/Common/Makefile
src/3rdPartyLibraries/qrose/Components/Common/icons/Makefile
src/3rdPartyLibraries/qrose/Components/Makefile
src/3rdPartyLibraries/qrose/Components/QueryBox/Makefile
src/3rdPartyLibraries/qrose/Components/SourceBox/Makefile
src/3rdPartyLibraries/qrose/Components/TreeBox/Makefile
src/3rdPartyLibraries/qrose/Framework/Makefile
src/3rdPartyLibraries/qrose/Makefile
src/3rdPartyLibraries/qrose/QRoseLib/Makefile
src/3rdPartyLibraries/qrose/Widgets/Makefile
src/Makefile
src/ROSETTA/Makefile
src/ROSETTA/src/Makefile
src/backend/Makefile
src/frontend/BinaryFormats/Makefile
src/frontend/BinaryLoader/Makefile
src/frontend/CxxFrontend/Clang/Makefile
src/frontend/CxxFrontend/Makefile
src/frontend/DLX/Makefile
src/frontend/DLX/include/DLX/Core/Makefile
src/frontend/DLX/lib/core/Makefile
src/frontend/Disassemblers/Makefile
src/frontend/ECJ_ROSE_Connection/Makefile
src/frontend/Experimental_General_Language_Support/Makefile
src/frontend/Experimental_General_Language_Support/ATerm/Makefile
src/frontend/Experimental_OpenFortranParser_ROSE_Connection/Makefile
src/frontend/Experimental_Flang_ROSE_Connection/Makefile
src/frontend/Experimental_Csharp_ROSE_Connection/Makefile
src/frontend/Experimental_Ada_ROSE_Connection/Makefile
src/frontend/Experimental_Jovial_ROSE_Connection/Makefile
src/frontend/Experimental_Cobol_ROSE_Connection/Makefile
src/frontend/Experimental_Matlab_ROSE_Connection/Makefile
src/frontend/Makefile
src/frontend/OpenFortranParser_SAGE_Connection/Makefile
src/frontend/PHPFrontend/Makefile
src/frontend/Partitioner2/Makefile
src/frontend/PythonFrontend/Makefile
src/frontend/SageIII/GENERATED_CODE_DIRECTORY_Cxx_Grammar/Makefile
src/frontend/SageIII/Makefile
src/frontend/SageIII/astFileIO/Makefile
src/frontend/SageIII/astFixup/Makefile
src/frontend/SageIII/astFromString/Makefile
src/frontend/SageIII/astHiddenTypeAndDeclarationLists/Makefile
src/frontend/SageIII/astMerge/Makefile
src/frontend/SageIII/astPostProcessing/Makefile
src/frontend/SageIII/astTokenStream/Makefile
src/frontend/SageIII/astVisualization/Makefile
src/frontend/SageIII/includeDirectivesProcessing/Makefile
src/frontend/SageIII/sage.docs
src/frontend/SageIII/sageInterface/Makefile
src/frontend/SageIII/virtualCFG/Makefile
src/frontend/X10_ROSE_Connection/Makefile
src/midend/KLT/Makefile
src/midend/KLT/include/KLT/Core/Makefile
src/midend/KLT/include/KLT/DLX/Makefile
src/midend/KLT/include/KLT/MDCG/Makefile
src/midend/KLT/include/KLT/RTL/Makefile
src/midend/KLT/lib/core/Makefile
src/midend/KLT/lib/mdcg/Makefile
src/midend/KLT/lib/rtl/Makefile
src/midend/MDCG/Makefile
src/midend/MDCG/include/MDCG/Model/Makefile
src/midend/MDCG/include/MDCG/Tools/Makefile
src/midend/MDCG/lib/model/Makefile
src/midend/MDCG/lib/tools/Makefile
src/midend/MFB/Makefile
src/midend/MFB/include/MFB/KLT/Makefile
src/midend/MFB/include/MFB/Makefile
src/midend/MFB/include/MFB/Sage/Makefile
src/midend/MFB/lib/klt/Makefile
src/midend/MFB/lib/sage/Makefile
src/midend/MFB/lib/utils/Makefile
src/midend/Makefile
src/midend/BinaryAnalysis/Makefile
src/midend/programAnalysis/Makefile
src/midend/programAnalysis/ssaUnfilteredCfg/Makefile
src/midend/programAnalysis/staticSingleAssignment/Makefile
src/midend/programAnalysis/systemDependenceGraph/Makefile
src/midend/programTransformation/extractFunctionArgumentsNormalization/Makefile
src/midend/programTransformation/loopProcessing/Makefile
src/midend/programTransformation/singleStatementToBlockNormalization/Makefile
src/roseExtensions/Makefile
src/roseExtensions/dataStructureTraversal/Makefile
src/roseExtensions/failSafe/Makefile
src/roseExtensions/highLevelGrammar/Makefile
src/roseExtensions/qtWidgets/AsmInstructionBar/Makefile
src/roseExtensions/qtWidgets/AsmView/Makefile
src/roseExtensions/qtWidgets/AstBrowserWidget/Makefile
src/roseExtensions/qtWidgets/AstGraphWidget/Makefile
src/roseExtensions/qtWidgets/AstProcessing/Makefile
src/roseExtensions/qtWidgets/BeautifiedAst/Makefile
src/roseExtensions/qtWidgets/FlopCounter/Makefile
src/roseExtensions/qtWidgets/InstructionCountAnnotator/Makefile
src/roseExtensions/qtWidgets/KiviatView/Makefile
src/roseExtensions/qtWidgets/Makefile
src/roseExtensions/qtWidgets/MetricFilter/Makefile
src/roseExtensions/qtWidgets/MetricsConfig/Makefile
src/roseExtensions/qtWidgets/MetricsKiviat/Makefile
src/roseExtensions/qtWidgets/NodeInfoWidget/Makefile
src/roseExtensions/qtWidgets/ProjectManager/Makefile
src/roseExtensions/qtWidgets/PropertyTreeWidget/Makefile
src/roseExtensions/qtWidgets/QCodeEditWidget/Makefile
src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/Makefile
src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/document/Makefile
src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/qnfa/Makefile
src/roseExtensions/qtWidgets/QCodeEditWidget/QCodeEdit/widgets/Makefile
src/roseExtensions/qtWidgets/QtGradientEditor/Makefile
src/roseExtensions/qtWidgets/RoseCodeEdit/Makefile
src/roseExtensions/qtWidgets/RoseFileSelector/Makefile
src/roseExtensions/qtWidgets/SrcBinView/Makefile
src/roseExtensions/qtWidgets/TaskSystem/Makefile
src/roseExtensions/qtWidgets/TreeModel/Makefile
src/roseExtensions/qtWidgets/WidgetCreator/Makefile
src/roseExtensions/qtWidgets/util/Makefile
src/roseExtensions/roseHPCToolkit/Makefile
src/roseExtensions/roseHPCToolkit/docs/Makefile
src/roseExtensions/roseHPCToolkit/include/Makefile
src/roseExtensions/roseHPCToolkit/include/rosehpct/Makefile
src/roseExtensions/roseHPCToolkit/include/rosehpct/gprof/Makefile
src/roseExtensions/roseHPCToolkit/include/rosehpct/profir/Makefile
src/roseExtensions/roseHPCToolkit/include/rosehpct/profir2sage/Makefile
src/roseExtensions/roseHPCToolkit/include/rosehpct/sage/Makefile
src/roseExtensions/roseHPCToolkit/include/rosehpct/util/Makefile
src/roseExtensions/roseHPCToolkit/include/rosehpct/xml-xercesc/Makefile
src/roseExtensions/roseHPCToolkit/include/rosehpct/xml/Makefile
src/roseExtensions/roseHPCToolkit/include/rosehpct/xml2profir/Makefile
src/roseExtensions/roseHPCToolkit/src/Makefile
src/roseExtensions/roseHPCToolkit/src/gprof/Makefile
src/roseExtensions/roseHPCToolkit/src/profir/Makefile
src/roseExtensions/roseHPCToolkit/src/profir2sage/Makefile
src/roseExtensions/roseHPCToolkit/src/sage/Makefile
src/roseExtensions/roseHPCToolkit/src/util/Makefile
src/roseExtensions/roseHPCToolkit/src/xml-xercesc/Makefile
src/roseExtensions/roseHPCToolkit/src/xml/Makefile
src/roseExtensions/roseHPCToolkit/src/xml2profir/Makefile
src/roseExtensions/sqlite3x/Makefile
src/roseIndependentSupport/Makefile
src/roseIndependentSupport/dot2gml/Makefile
src/roseSupport/Makefile
src/util/Makefile
src/util/commandlineProcessing/Makefile
src/util/graphs/Makefile
src/util/Sawyer/Makefile
src/util/stringSupport/Makefile
src/util/support/Makefile
stamp-h
tests/Makefile
tests/nonsmoke/ExamplesForTestWriters/Makefile
tests/nonsmoke/Makefile
tests/nonsmoke/acceptance/Makefile
tests/nonsmoke/functional/BinaryAnalysis/Dwarf_tests/Makefile
tests/nonsmoke/functional/BinaryAnalysis/Makefile
tests/nonsmoke/functional/BinaryAnalysis/Pin_tests/Makefile
tests/nonsmoke/functional/BinaryAnalysis/libraryIdentification_tests/Makefile
tests/nonsmoke/functional/BinaryAnalysis/Concolic/Makefile
tests/nonsmoke/functional/CompileTests/A++Code/Makefile
tests/nonsmoke/functional/CompileTests/A++Tests/Makefile
tests/nonsmoke/functional/CompileTests/C_tests/Makefile
tests/nonsmoke/functional/CompileTests/C_subset_of_Cxx_tests/Makefile
tests/nonsmoke/functional/CompileTests/C89_std_c89_tests/Makefile
tests/nonsmoke/functional/CompileTests/C99_tests/Makefile
tests/nonsmoke/functional/CompileTests/C11_tests/Makefile
tests/nonsmoke/functional/CompileTests/CudaTests/Makefile
tests/nonsmoke/functional/CompileTests/Cxx_tests/Makefile
tests/nonsmoke/functional/CompileTests/Cxx03_tests/Makefile
tests/nonsmoke/functional/CompileTests/Cxx11_tests/Makefile
tests/nonsmoke/functional/CompileTests/Cxx14_tests/Makefile
tests/nonsmoke/functional/CompileTests/Cxx17_tests/Makefile
tests/nonsmoke/functional/CompileTests/Cxx20_tests/Makefile
tests/nonsmoke/functional/CompileTests/ElsaTestCases/Makefile
tests/nonsmoke/functional/CompileTests/ElsaTestCases/ctests/Makefile
tests/nonsmoke/functional/CompileTests/ElsaTestCases/gnu/Makefile
tests/nonsmoke/functional/CompileTests/ElsaTestCases/kandr/Makefile
tests/nonsmoke/functional/CompileTests/ElsaTestCases/std/Makefile
tests/nonsmoke/functional/CompileTests/ExpressionTemplateExample_tests/Makefile
tests/nonsmoke/functional/CompileTests/FailSafe_tests/Makefile
tests/nonsmoke/functional/CompileTests/Fortran_tests/LANL_POP/Makefile
tests/nonsmoke/functional/CompileTests/Fortran_tests/Makefile
tests/nonsmoke/functional/CompileTests/Fortran_tests/experimental_frontend_tests/Makefile
tests/nonsmoke/functional/CompileTests/Fortran_tests/gfortranTestSuite/Makefile
tests/nonsmoke/functional/CompileTests/Fortran_tests/gfortranTestSuite/gfortran.dg/Makefile
tests/nonsmoke/functional/CompileTests/Fortran_tests/gfortranTestSuite/gfortran.fortran-torture/Makefile
tests/nonsmoke/functional/CompileTests/Java_tests/Makefile
tests/nonsmoke/functional/CompileTests/Java_tests/unit_tests/Makefile
tests/nonsmoke/functional/CompileTests/experimental_csharp_tests/Makefile
tests/nonsmoke/functional/CompileTests/experimental_ada_tests/Makefile
tests/nonsmoke/functional/CompileTests/experimental_fortran_tests/Makefile
tests/nonsmoke/functional/CompileTests/experimental_jovial_tests/Makefile
tests/nonsmoke/functional/CompileTests/experimental_cobol_tests/Makefile
tests/nonsmoke/functional/CompileTests/experimental_matlab_tests/Makefile
tests/nonsmoke/functional/CompileTests/Makefile
tests/nonsmoke/functional/CompileTests/MicrosoftWindows_C_tests/Makefile
tests/nonsmoke/functional/CompileTests/MicrosoftWindows_Cxx_tests/Makefile
tests/nonsmoke/functional/CompileTests/MicrosoftWindows_Java_tests/Makefile
tests/nonsmoke/functional/CompileTests/MicrosoftWindows_tests/Makefile
tests/nonsmoke/functional/CompileTests/OpenClTests/Makefile
tests/nonsmoke/functional/CompileTests/OpenACC_tests/Makefile
tests/nonsmoke/functional/CompileTests/OpenACC_tests/fortran/Makefile
tests/nonsmoke/functional/CompileTests/OpenMP_tests/Makefile
tests/nonsmoke/functional/CompileTests/OpenMP_tests/cvalidation/Makefile
tests/nonsmoke/functional/CompileTests/OpenMP_tests/fortran/Makefile
tests/nonsmoke/functional/CompileTests/OvertureCode/Makefile
tests/nonsmoke/functional/CompileTests/P++Tests/Makefile
tests/nonsmoke/functional/CompileTests/PythonExample_tests/Makefile
tests/nonsmoke/functional/CompileTests/Python_tests/Makefile
tests/nonsmoke/functional/CompileTests/RoseExample_tests/Makefile
tests/nonsmoke/functional/CompileTests/STL_tests/Makefile
tests/nonsmoke/functional/CompileTests/UPC_tests/Makefile
tests/nonsmoke/functional/CompileTests/UnparseHeadersTests/Makefile
tests/nonsmoke/functional/CompileTests/UnparseHeadersUsingTokenStream_tests/Makefile
tests/nonsmoke/functional/CompileTests/boost_tests/Makefile
tests/nonsmoke/functional/CompileTests/colorAST_tests/Makefile
tests/nonsmoke/functional/CompileTests/copyAST_tests/Makefile
tests/nonsmoke/functional/CompileTests/frontend_integration/Makefile
tests/nonsmoke/functional/CompileTests/hiddenTypeAndDeclarationListTests/Makefile
tests/nonsmoke/functional/CompileTests/mergeAST_tests/Makefile
tests/nonsmoke/functional/CompileTests/mixLanguage_tests/Makefile
tests/nonsmoke/functional/CompileTests/nameQualificationAndTypeElaboration_tests/Makefile
tests/nonsmoke/functional/CompileTests/sizeofOperation_tests/Makefile
tests/nonsmoke/functional/CompileTests/sourcePosition_tests/Makefile
tests/nonsmoke/functional/CompileTests/staticCFG_tests/Makefile
tests/nonsmoke/functional/CompileTests/systemc_tests/Makefile
tests/nonsmoke/functional/CompileTests/vxworks_tests/Makefile
tests/nonsmoke/functional/CompileTests/uninitializedField_tests/Makefile
tests/nonsmoke/functional/CompileTests/unparseToString_tests/Makefile
tests/nonsmoke/functional/CompileTests/virtualCFG_tests/Makefile
tests/nonsmoke/functional/CompileTests/x10_tests/Makefile
tests/nonsmoke/functional/CompileTests/unparse_template_from_ast/Makefile
tests/nonsmoke/functional/CompilerOptionsTests/Makefile
tests/nonsmoke/functional/CompilerOptionsTests/collectAllCommentsAndDirectives_tests/Makefile
tests/nonsmoke/functional/CompilerOptionsTests/preinclude_tests/Makefile
tests/nonsmoke/functional/CompilerOptionsTests/testCpreprocessorOption/Makefile
tests/nonsmoke/functional/CompilerOptionsTests/testFileNamesAndExtensions/Makefile
tests/nonsmoke/functional/CompilerOptionsTests/testForSpuriousOutput/Makefile
tests/nonsmoke/functional/CompilerOptionsTests/testGenerateSourceFileNames/Makefile
tests/nonsmoke/functional/CompilerOptionsTests/testGnuOptions/Makefile
tests/nonsmoke/functional/CompilerOptionsTests/testHeaderFileOutput/Makefile
tests/nonsmoke/functional/CompilerOptionsTests/testIncludeOptions/Makefile
tests/nonsmoke/functional/CompilerOptionsTests/testOutputFileOption/Makefile
tests/nonsmoke/functional/CompilerOptionsTests/testWave/Makefile
tests/nonsmoke/functional/CompilerOptionsTests/tokenStream_tests/Makefile
tests/nonsmoke/functional/Makefile
tests/nonsmoke/functional/moveDeclarationTool/Makefile
tests/nonsmoke/functional/PerformanceTests/Makefile
tests/nonsmoke/functional/RunTests/A++Tests/Makefile
tests/nonsmoke/functional/RunTests/AstDeleteTests/Makefile
tests/nonsmoke/functional/RunTests/FortranTests/LANL_POP/Makefile
tests/nonsmoke/functional/RunTests/FortranTests/Makefile
tests/nonsmoke/functional/RunTests/Makefile
tests/nonsmoke/functional/RunTests/PythonTests/Makefile
tests/nonsmoke/functional/UnitTests/Makefile
tests/nonsmoke/functional/UnitTests/Rose/Makefile
tests/nonsmoke/functional/UnitTests/Rose/SageBuilder/Makefile
tests/nonsmoke/functional/Utility/Makefile
tests/nonsmoke/functional/roseTests/Makefile
tests/nonsmoke/functional/roseTests/PHPTests/Makefile
tests/nonsmoke/functional/roseTests/ROSETTA/Makefile
tests/nonsmoke/functional/roseTests/abstractMemoryObjectTests/Makefile
tests/nonsmoke/functional/roseTests/astFileIOTests/Makefile
tests/nonsmoke/functional/roseTests/astInliningTests/Makefile
tests/nonsmoke/functional/roseTests/astInterfaceTests/Makefile
tests/nonsmoke/functional/roseTests/astInterfaceTests/typeEquivalenceTests/Makefile
tests/nonsmoke/functional/roseTests/astInterfaceTests/unitTests/Makefile
tests/nonsmoke/functional/roseTests/astLValueTests/Makefile
tests/nonsmoke/functional/roseTests/astMergeTests/Makefile
tests/nonsmoke/functional/roseTests/astOutliningTests/Makefile
tests/nonsmoke/functional/roseTests/astPerformanceTests/Makefile
tests/nonsmoke/functional/roseTests/astProcessingTests/Makefile
tests/nonsmoke/functional/roseTests/astQueryTests/Makefile
tests/nonsmoke/functional/roseTests/astRewriteTests/Makefile
tests/nonsmoke/functional/roseTests/astSnippetTests/Makefile
tests/nonsmoke/functional/roseTests/astSymbolTableTests/Makefile
tests/nonsmoke/functional/roseTests/astTokenStreamTests/Makefile
tests/nonsmoke/functional/roseTests/fileLocation_tests/Makefile
tests/nonsmoke/functional/roseTests/graph_tests/Makefile
tests/nonsmoke/functional/roseTests/loopProcessingTests/Makefile
tests/nonsmoke/functional/roseTests/mergeTraversal_tests/Makefile
tests/nonsmoke/functional/roseTests/ompLoweringTests/Makefile
tests/nonsmoke/functional/roseTests/ompLoweringTests/fortran/Makefile
tests/nonsmoke/functional/roseTests/programAnalysisTests/Makefile
tests/nonsmoke/functional/roseTests/programAnalysisTests/defUseAnalysisTests/Makefile
tests/nonsmoke/functional/roseTests/programAnalysisTests/generalDataFlowAnalysisTests/Makefile
tests/nonsmoke/functional/roseTests/programAnalysisTests/ssa_UnfilteredCfg_Test/Makefile
tests/nonsmoke/functional/roseTests/programAnalysisTests/staticInterproceduralSlicingTests/Makefile
tests/nonsmoke/functional/roseTests/programAnalysisTests/staticSingleAssignmentTests/Makefile
tests/nonsmoke/functional/roseTests/programAnalysisTests/systemDependenceGraphTests/Makefile
tests/nonsmoke/functional/roseTests/programAnalysisTests/testCallGraphAnalysis/Makefile
tests/nonsmoke/functional/roseTests/programAnalysisTests/typeTraitTests/Makefile
tests/nonsmoke/functional/roseTests/programAnalysisTests/variableLivenessTests/Makefile
tests/nonsmoke/functional/roseTests/programAnalysisTests/variableRenamingTests/Makefile
tests/nonsmoke/functional/roseTests/programTransformationTests/Makefile
tests/nonsmoke/functional/roseTests/programTransformationTests/extractFunctionArgumentsTest/Makefile
tests/nonsmoke/functional/roseTests/programTransformationTests/singleStatementToBlockNormalization/Makefile
tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/Makefile
tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/01/ANALYSIS/Makefile
tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/01/Makefile
tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/01/PROFILE/Makefile
tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/01/PROGRAM/Makefile
tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/02/Makefile
tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/02/PROFILE/Makefile
tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/02/struct_ls/Makefile
tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/03/Makefile
tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/03/PROFILE/Makefile
tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/03/struct_ls/Makefile
tests/nonsmoke/functional/roseTests/roseHPCToolkitTests/data/Makefile
tests/nonsmoke/functional/roseTests/varDeclNorm/Makefile
tests/nonsmoke/functional/testSupport/Makefile
tests/nonsmoke/functional/testSupport/gtest/Makefile
tests/nonsmoke/functional/translatorTests/Makefile
tests/nonsmoke/specimens/Makefile
tests/nonsmoke/specimens/binary/Makefile
tests/nonsmoke/specimens/c++/Makefile
tests/nonsmoke/specimens/c/Makefile
tests/nonsmoke/specimens/fortran/Makefile
tests/nonsmoke/specimens/java/Makefile
tests/nonsmoke/unit/Makefile
tests/nonsmoke/unit/SageInterface/Makefile
tests/roseTests/Makefile
tests/roseTests/ompLoweringTests/Makefile
tests/roseTests/programAnalysisTests/Makefile
tests/roseTests/programAnalysisTests/typeTraitTests/Makefile
tests/smoke/ExamplesForTestWriters/Makefile
tests/smoke/Makefile
tests/smoke/functional/BinaryAnalysis/Makefile
tests/smoke/functional/Fortran/Makefile
tests/smoke/functional/Makefile
tests/smoke/specimens/Makefile
tests/smoke/specimens/binary/Makefile
tests/smoke/specimens/c++/Makefile
tests/smoke/specimens/c/Makefile
tests/smoke/specimens/fortran/Makefile
tests/smoke/specimens/java/Makefile
tests/smoke/unit/BinaryAnalysis/Makefile
tests/smoke/unit/Boost/Makefile
tests/smoke/unit/Makefile
tests/smoke/unit/Sawyer/Makefile
tests/smoke/unit/Utility/Makefile
tools/Makefile
tools/BinaryAnalysis/Makefile
tools/globalVariablesInLambdas/Makefile
tools/classMemberVariablesInLambdas/Makefile
tools/checkFortranInterfaces/Makefile
tutorial/Makefile
tutorial/binaryAnalysis/Makefile
tutorial/exampleMakefile
tutorial/intelPin/Makefile
tutorial/outliner/Makefile
tutorial/roseHPCT/Makefile
])

# DQ (3/8/2017): Removed these directories from testing (pre-smoke and pre-nonsmoke test directories.
# tests/CompileTests/Makefile
# tests/CompileTests/OpenMP_tests/Makefile
# tests/CompileTests/x10_tests/Makefile

# DQ (11/14/2017): Removed GNAT test directory since it is redundant with the ADA test directory.
# tests/nonsmoke/functional/CompileTests/gnat_tests/Makefile

# Liao, 1/16/2014, comment out a few directories which are turned off for EDG 4.x upgrade
#projects/BinaryDataStructureRecognition/Makefile
#tests/nonsmoke/functional/CompileTests/CAF2_tests/Makefile


# DQ (10/27/2010): New Fortran tests (from gfortan test suite).
# tests/nonsmoke/functional/CompileTests/Fortran_tests/gfortranTestSuite/Makefile
# tests/nonsmoke/functional/CompileTests/Fortran_tests/gfortranTestSuite/gfortran.fortran-torture/Makefile
# tests/nonsmoke/functional/CompileTests/Fortran_tests/gfortranTestSuite/gfortran.dg/Makefile

# DQ (8/12/2010): We want to get permission to distribute these files as test codes.
# tests/nonsmoke/functional/CompileTests/Fortran_tests/LANL_POP/Makefile

# DQ (10/24/2009): We don't need to support EDG 3.10 anymore.
# src/frontend/CxxFrontend/EDG_3.10/Makefile
# src/frontend/CxxFrontend/EDG_3.10/misc/Makefile
# src/frontend/CxxFrontend/EDG_3.10/src/Makefile
# src/frontend/CxxFrontend/EDG_3.10/src/disp/Makefile
# src/frontend/CxxFrontend/EDG_3.10/lib/Makefile

# DQ (12/31/2008): Skip these, since we don't have SPEC and NAS benchmarks setup yet.
# developersScratchSpace/Dan/Fortran_tests/NPB3.2-SER/Makefile
# developersScratchSpace/Dan/Fortran_tests/NPB3.2-SER/BT/Makefile
# developersScratchSpace/Dan/SpecCPU2006/Makefile
# developersScratchSpace/Dan/SpecCPU2006/config/Makefile
# developersScratchSpace/Dan/SpecCPU2006/config/rose.cfg

# DQ (9/12/2008): Removed older version of QRose (now an external project)
# src/roseIndependentSupport/graphicalUserInterface/Makefile
# src/roseIndependentSupport/graphicalUserInterface/src/Makefile
# src/roseIndependentSupport/graphicalUserInterface/src/QRTree/Makefile
# src/roseIndependentSupport/graphicalUserInterface/src/QRCodeBox/Makefile
# src/roseIndependentSupport/graphicalUserInterface/src/QRGui/Makefile
# src/roseIndependentSupport/graphicalUserInterface/src/QRGui/icons22/Makefile
# src/roseIndependentSupport/graphicalUserInterface/src/QRQueryBox/Makefile
# exampleTranslators/graphicalUserInterfaceExamples/Makefile
# exampleTranslators/graphicalUserInterfaceExamples/slicing/Makefile
# exampleTranslators/graphicalUserInterfaceExamples/attributes/Makefile
# exampleTranslators/graphicalUserInterfaceExamples/query/Makefile
# exampleTranslators/graphicalUserInterfaceExamples/layout/Makefile

# End macro ROSE_SUPPORT_ROSE_PART_6.

])
m4trace:config/support-rose.m4:2597: -1- AC_DEFUN([ROSE_SUPPORT_ROSE_PART_7], [
# Begin macro ROSE_SUPPORT_ROSE_PART_7.

AC_CONFIG_COMMANDS([default],
    [
     AC_MSG_NOTICE([ensuring Grammar in the compile tree (assuming source tree is not the same as the compile tree)])
     pathToSourceDir="`cd $srcdir && pwd`"
     test -d src/ROSETTA/Grammar || ( rm -rf src/ROSETTA/Grammar && ln -s "$pathToSourceDir/src/ROSETTA/Grammar" src/ROSETTA/Grammar )
    ],
    [])

# Generate rose_paths.C
AC_CONFIG_COMMANDS([rose_paths.C], [
    AC_MSG_NOTICE([building src/util/rose_paths.C])
    make src/util/rose_paths.C
])

# Generate public config file from private config file. The public config file adds "ROSE_" to the beginning of
# certain symbols. See scripts/publicConfiguration.pl for details.
AC_CONFIG_COMMANDS([rosePublicConfig.h],[
    AC_MSG_NOTICE([building rosePublicConfig.h])
    make rosePublicConfig.h
])

# [TOO1, 2014-04-22]
# TODO: Re-enable once we phase out support for older version of Autotools.
#       Specifically, Pontetec is using Autoconf 2.59 and Automake 1.9.6.
# Rewrite the definitions for srcdir, top_srcdir, builddir, and top_builddir so they use the "abs_" versions instead.
#AC_CONFIG_COMMANDS([absoluteNames],
#[[
#       echo "rewriting makefiles to use absolute paths for srcdir, top_srcdir, builddir, and top_builddir..."
#       find . -name Makefile | xargs sed -i~ \
#           -re 's/^(srcdir|top_srcdir|builddir|top_builddir) = \..*/\1 = $(abs_\1)/'
#]])



# End macro ROSE_SUPPORT_ROSE_PART_7.

])
m4trace:config/support-rted.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_RTED], [
# Begin macro ROSE_SUPPORT_RTED.

AC_MSG_CHECKING(for rted)
AC_ARG_WITH(rted,
[  --with-rted=PATH     Configure option to have RTED enabled.],
,
if test ! "$with_rted" ; then
   with_rted=no
fi
)

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_rted = "$with_rted"])

if test "$with_rted" = no; then
   # If RTED is not specified, then don't use it.
   AC_MSG_NOTICE([skipping use of RTED support])
else
   rted_path=$with_rted
   AC_MSG_NOTICE([setup RTED support in ROSE. path = "$rted_path"])
   AC_DEFINE([USE_ROSE_RTED_SUPPORT],1,[Controls use of ROSE support for RTED library.])
fi

AC_SUBST(rted_path)


])
m4trace:config/support-rtedupc.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_UPC], [
# Begin macro ROSE_SUPPORT_UPC.
# Automake-UPC Support http://www.gnu.org/software/hello/manual/automake/Unified-Parallel-C-Support.html
# Handling new file extensions: https://idlebox.net/2009/apidocs/automake-1.11.zip/automake_18.html#SEC148

AC_MSG_CHECKING([for RTEDUPC])
AC_ARG_ENABLE(rtedupc,AS_HELP_STRING([--enable-rtedupc],[Enable UPC support in ROSE (default=no)]),,[enableval=no])

# set the dependence variables to avoid problems when UPC is not specified and not present
am__fastdepUPC_TRUE='#'
am__fastdepUPC_FALSE=

AM_CONDITIONAL(ROSE_WITH_UPC, [test "x$enableval" = "xyes"])
AS_IF([test "x$enableval" = "xyes"], [AM_PROG_UPC])
AC_MSG_RESULT([$enableval])
])
m4trace:config/support-sanitizer.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_SANITIZER], [
# Begin macro ROSE_SUPPORT_SANITIZER (Google project: Adress Sanitizer, Memory Sanitizer, etc.).

# We may be asked to guess the correct flags,
# so we must know our host and the compiler used.
AC_REQUIRE([AC_CANONICAL_HOST])
AC_REQUIRE([AC_PROG_CXX])

dnl *********************************************************************
dnl * Set the sanitizer tool compiler flags in CXXFLAGS and CFLAGS
dnl *********************************************************************

AC_MSG_NOTICE([setup CXXFLAGS and CFLAGS for CXX = "$CXX"])

AC_ARG_ENABLE(sanitizer, AS_HELP_STRING([--enable-sanitizer], [Support address sanitizer and related sanitizer tools (compiler options) for ROSE development]),[enableval=yes],[enableval=no])

AC_MSG_NOTICE([enable_sanitizer = "$enable_sanitizer"])

if test "x$enable_sanitizer" = "x"; then
   if test "x$enableval" = "xyes"; then
      enable_sanitizer=$enableval
   else 
      if test "x$enableval" = "xno"; then
         enable_sanitizer=$enableval
      fi
   fi
else
   AC_MSG_NOTICE([enable_sanitizer is explictly set to "$enable_sanitizer"])
fi

AC_MSG_NOTICE([after initialization: enable_sanitizer = "$enable_sanitizer"])

if test "x$enable_sanitizer" = "xyes"; then
# enable_sanitizer was activated but not specified, so set it.
  AC_MSG_NOTICE([using default options for maximal warnings (true case)])
  case $CXX in
    g++)
    # For GNU the support for sanitizer captured using a single options (I think).
      CXXFLAGS+=" -fsanitize=address"
      CFLAGS+=" -fsanitize=address"
      ;;
    clang)
    # For LLVM the support for sanitizer is the best (but add this later).
      AC_MSG_NOTICE([Clang compilers do support sanitizer tools (but support in ROSE not implemented)])
      ;;
    icpc)
    # For Intel turn on 64bit migration/portability warnings
      AC_MSG_NOTICE([Intel compilers don't support sanitizer tools])
      ;;
  esac
fi

# The strings used to setup the environment are specificed in config/Makefile.for.ROSE.includes.and.libs
# AC_SUBST(CXX_WARNINGS)

# This is where we could set up the use of a prefix to CC and CXX if that is a better implementation in the future.
# if test "$CXXFLAGS"; then CXXFLAGS="$CXXFLAGS $CXX_WARNINGS"; fi

AM_CONDITIONAL(ROSE_USE_SANITIZER,test "$enable_sanitizer" = yes)

AC_MSG_NOTICE([CXXFLAGS = "$CXXFLAGS"])
AC_MSG_NOTICE([CFLAGS   = "$CFLAGS"])

# exit 1

# End macro ROSE_SUPPORT_SANITIZER.

])
m4trace:config/support-sat.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_SAT], [
# Begin macro ROSE_SUPPORT_SAT.

# Inclusion of test for Internal SAT Solver 

# There are currently no prerequisites
AC_ARG_WITH(sat,
[  --with-sat	Specify if we should compile internal sata solver],
,
if test ! "$with_sat" ; then
   with_sat=no
fi
)

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_sat = "$with_sat"])

if test "$with_sat" = no; then
   AC_MSG_NOTICE([skipping use of internal SAT Solver support])
else
   AC_MSG_NOTICE([setup internal SAT solver support in ROSE. with_sat = "$with_sat"])
   AC_DEFINE([USE_ROSE_SAT_SUPPORT],1,[Controls use of ROSE support for internal Satisfiability (SAT) Solver.])
fi

# End macro ROSE_SUPPORT_SAT.

])
m4trace:config/support-spot.m4:13: -1- AC_DEFUN([ROSE_SUPPORT_SPOT], [
  ROSE_ARG_WITH(
    [spot],
    [for  (SPOT)],
    [use the SPOT LTL model checking library],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_SPOT" != "xno"; then
    SPOT_INSTALL_PATH="$ROSE_WITH_SPOT"
    SPOT_INCLUDE_PATH="$ROSE_WITH_SPOT/include"
    SPOT_LIBRARY_PATH="$ROSE_WITH_SPOT/lib"
    AC_DEFINE([HAVE_SPOT], [1], [Define to 1 if you have SPOT libs and headers.])
  else
    SPOT_INSTALL_PATH=
    SPOT_INCLUDE_PATH=
    SPOT_LIBRARY_PATH=
  fi

  if test "x$SPOT_INCLUDE_PATH" != "x"; then
      AC_CHECK_FILE(
          [${SPOT_INCLUDE_PATH}/bdd.h],
          [],
          [ROSE_MSG_ERROR([bdd.h is missing, can't compile with SPOT])])
  fi

  AM_CONDITIONAL(ROSE_WITH_SPOT, [test "x$SPOT_INCLUDE_PATH" != "x" && test "x$SPOT_LIBRARY_PATH" != "x"])

  AC_SUBST(SPOT_INSTALL_PATH)
  AC_SUBST(SPOT_INCLUDE_PATH)
  AC_SUBST(SPOT_LIBRARY_PATH)

# End macro ROSE_SUPPORT_SPOT.
])
m4trace:config/support-ssl.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_SSL], [
# Begin macro ROSE_SUPPORT_SSL.

# Adding support for the SSL library to provide access to MD5 checksum support for binary library identification.

AC_MSG_CHECKING(for ssl)
AC_ARG_ENABLE(ssl,
[  --enable-ssl ................................ Enable use of SSL library (MD5 checksums)],
,
if test ! "$enable_ssl" ; then
   enable_ssl=no
fi
)

#if test "$enable_ssl" = yes ; then
#  AC_DEFINE([USE_ROSE_SSL_SUPPORT],[],[Support for ssl])
#fi

AC_MSG_NOTICE([enable_ssl = $enable_ssl])

if test "$enable_ssl" = no; then
   # If SSL is not specified, then don't use it.
   AC_MSG_NOTICE([SSL support (libssl) disabled])
else
   AC_MSG_NOTICE([SSL supported in ROSE: SSL path is "$enable_ssl"])
   AC_DEFINE([USE_ROSE_SSL_SUPPORT],1,[Controls use of ROSE support for SSL (libssl -- MD5) library (incompatable with Java, so disables Fortran support).])
fi


])
m4trace:config/support-stratego.m4:51: -1- AC_DEFUN([ROSE_SUPPORT_STRATEGO], [
  AC_BEFORE([$0], [ROSE_SUPPORT_STRATEGO_FRONTEND])

  ROSE_CONFIGURE_SECTION([Checking STRATEGO library])

  #============================================================================
  # --with-stratego=/path/to/stratego-trunk/stratego.dist/
  #============================================================================
  ROSE_ARG_WITH(
    [stratego],
    [for an installation of the Stratego library],
    [support the Stratego library],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_STRATEGO" != "xno"; then
    STRATEGO_INSTALL_PATH="$ROSE_WITH_STRATEGO"
    STRATEGO_BIN_PATH="${ROSE_WITH_STRATEGO}/bin"
    STRATEGO_LIBRARY_PATH="${ROSE_WITH_STRATEGO}/lib"
  else
    STRATEGO_INSTALL_PATH=
    STRATEGO_BIN_PATH=
    STRATEGO_LIBRARY_PATH=
  fi

  #============================================================================
  # --with-stratego-bin=/path/to/stratego-trunk/stratego.dist/bin/
  #============================================================================
  ROSE_ARG_WITH(
    [stratego-bin],
    [if the STRATEGO compiler bin directory was specified],
    [use this STRATEGO bin directory],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_STRATEGO_BIN" != "xno"; then
      STRATEGO_BIN_PATH="$ROSE_WITH_STRATEGO_BIN"
  fi

  #============================================================================
  # --with-stratego-lib=/path/to/stratego-trunk/stratego.dist/lib/
  #============================================================================
  ROSE_ARG_WITH(
    [stratego-lib],
    [if the STRATEGO compiler library directory was specified],
    [use this STRATEGO library directory],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_STRATEGO_LIB" != "xno"; then
      STRATEGO_LIBRARY_PATH="$ROSE_WITH_STRATEGO_LIB"
  fi

# DQ (3/23/2013): debugging...
AC_MSG_NOTICE([STRATEGO_INSTALL_PATH = "$STRATEGO_INSTALL_PATH"])
AC_MSG_NOTICE([STRATEGO_BIN_PATH     = "$STRATEGO_BIN_PATH"])
AC_MSG_NOTICE([STRATEGO_LIBRARY_PATH = "$STRATEGO_LIBRARY_PATH"])

  #============================================================================
  # Validate installation (if provided)
  #============================================================================
  if test "x$STRATEGO_BIN_PATH" != "x"; then
      #======================================
      # strategoc - Check for the STRATEGO compiler
      #======================================
      AC_CHECK_FILE(
          [${STRATEGO_BIN_PATH}],
          [],
          [ROSE_MSG_ERROR([bin directory is missing, can't use this STRATEGO installation])])

      #======================================
      # Using atrmannos to check version of STRATEGO library
      #======================================
      # AC_MSG_CHECKING([for the Stratego version])
      # STRATEGO_VERSION="`${STRATEGO_BIN_PATH}/atrmannos -v | grep 'atrmannos - Version:' | awk '{print [$][3]}'`"
      # exit_status=$?
      # pipe_status=[${PIPESTATUS[0]}]
      # if test ${exit_status} -ne 0 || test ${pipe_status} -ne 0; then
      #     ROSE_MSG_ERROR([Could not determine your STRATEGO version])
      # else
      #     AC_MSG_RESULT([$STRATEGO_VERSION])
      # fi
  fi

  #============================================================================
  # Set Automake Conditionals and Substitutions
  #============================================================================
  AM_CONDITIONAL(ROSE_WITH_STRATEGO, [test "x$STRATEGO_BIN_PATH" != "x" && test "x$STRATEGO_LIBRARY_PATH" != "x"])
  AM_CONDITIONAL(ROSE_WITH_STRATEGO_BIN, [test "x$STRATEGO_BIN_PATH" != "x"])
  AM_CONDITIONAL(ROSE_WITH_STRATEGO_LIB, [test "x$STRATEGO_LIBRARY_PATH" != "x"])

  AC_SUBST(STRATEGO_INSTALL_PATH)
  AC_SUBST(STRATEGO_BIN_PATH)
  AC_SUBST(STRATEGO_LIBRARY_PATH)
  # AC_SUBST(STRATEGO_VERSION)

  #============================================================================
  # Set CPP #defines
  #============================================================================
  AC_DEFINE_UNQUOTED(
    STRATEGO_INSTALL_PATH,
    ["$STRATEGO_INSTALL_PATH"],
    [Absolute path of the STRATEGO installation])
  AC_DEFINE_UNQUOTED(
    STRATEGO_BIN_PATH,
    ["$STRATEGO_BIN_PATH"],
    [Absolute path of the STRATEGO installation bin directory])
  AC_DEFINE_UNQUOTED(
    STRATEGO_LIBRARY_PATH,
    ["$STRATEGO_LIBRARY_PATH"],
    [Absolute path of the STRATEGO installation lib directory])
  # AC_DEFINE_UNQUOTED(
  #  STRATEGO_VERSION,
  #  ["$STRATEGO_VERSION"],
  #  [Version number of the user-specified STRATEGO compiler])


# DQ (10/4/2014): Adding macro for rose_config.h so we know when Strategos are supported.
# usingStratego = 'test "x$STRATEGO_LIBRARY_PATH" != "x" && echo "true"'
# AC_DEFINE(USE_ROSE_STRATEGO_SUPPORT,[$usingStratego],[Controls use of ROSE support for Stratego Library.])
if test "x$STRATEGO_LIBRARY_PATH" != "x"; then
   AC_DEFINE([USE_ROSE_STRATEGO_SUPPORT], [1], [Controls use of ROSE support for Stratego Library.])
fi

# End macro ROSE_SUPPORT_STRATEGO.
])
m4trace:config/support-summary.m4:14: -1- AC_DEFUN([ROSE_SUMMARY_HEADING], [
    echo "  $1"
])
m4trace:config/support-summary.m4:18: -1- AC_DEFUN([ROSE_SUPPORT_SUMMARY], [
    echo "${T_BM}Configuration summary:${T_NM}"

    #--------------------------------------------------------------------------------
    # ROSE conflates the compilers used to compile ROSE with the compiler frontend
    # compiler used for C++ analysis, thus the variables printed for this section
    # of the summary are named "FRONTEND".
    ROSE_SUMMARY_HEADING([Compilers for ROSE source code])
    echo "    C++ compiler                     ${CXX}"
    echo "    C++ vendor                       ${HOST_CXX_VENDOR:-unknown}"
    echo "    C++ version                      ${HOST_CXX_VERSION:-unknown}"
    echo "    C++ language                     ${HOST_CXX_LANGUAGE:-unknown}"
    echo "    Bison version                    ${bison_version:-unknown}"

    #--------------------------------------------------------------------------------
    ROSE_SUMMARY_HEADING([Languages supported for analysis])
    echo "    Binaries                         ${support_binaries_frontend:-no}"
    echo "    C                                ${support_c_frontend:-no}"
    echo "    C++                              ${support_cxx_frontend:-no}"
    echo "    C preprocessor                   ${support_cpp_frontend:-no}"
    echo "    Cuda                             ${support_cuda_frontend:-no}"
    echo "    Fortran                          ${support_fortran_frontend:-no}"
    echo "    Java                             ${support_java_frontend:-no}"
    echo "    OpenCL                           ${support_opencl_frontend:-no}"
    echo "    PHP                              ${support_php_frontend:-no}"
    echo "    Python                           ${support_python_frontend:-no}"

    #--------------------------------------------------------------------------------
    ROSE_SUMMARY_HEADING([Boost library])
    echo "    location                         ${ac_boost_path:-unknown}"
    echo "    version constant                 ${rose_boost_version:-unknown}"
    echo "    asio library                     ${BOOST_ASIO_LIB:-none}"
    echo "    chrono library                   ${BOOST_CHRONO_LIB:-none}"
    echo "    date/time library                ${BOOST_DATE_TIME_LIB:-none}"
    echo "    filesystem library               ${BOOST_FILESYSTEM_LIB:-none}"
    echo "    iostreams library                ${BOOST_IOSTREAMS_LIB:-none}"
    echo "    program options library          ${BOOST_PROGRAM_OPTIONS_LIB:-none}"
    echo "    python library                   ${BOOST_PYTHON_LIB:-none}"
    echo "    random library                   ${BOOST_RANDOM_LIB:-none}"
    echo "    regex library                    ${BOOST_REGEX_LIB:-none}"
    echo "    serialization library            ${BOOST_SERIALIZATION_LIB:-none}"
    echo "    signals library                  ${BOOST_SIGNALS_LIB:-none}"
    echo "    system library                   ${BOOST_SYSTEM_LIB:-none}"
    echo "    test exec monitor library        ${BOOST_TEST_EXEC_MONITOR_LIB:-none}"
    echo "    thread library                   ${BOOST_THREAD_LIB:-none}"
    echo "    unit test framework library      ${BOOST_UNIT_TEST_FRAMEWORK_LIB:-none}"
    echo "    wave library                     ${BOOST_WAVE_LIB:-none}"
    echo "    wserialization library           ${BOOST_WSERIALIZATION_LIB:-none}"

    #--------------------------------------------------------------------------------
    if test -n "$support_binaries_frontend" -o -n "$verbose"; then
        ROSE_SUMMARY_HEADING([Binary analysis support])
	echo "    i386 support                     ${CFLAGS32:-none}"
	echo "    libcapstone                      ${ROSE_HAVE_CAPSTONE:-none}"
	echo "    libmagic                         ${ROSE_HAVE_LIBMAGIC:-none}"
	echo "    readline                         ${LIBREADLINE_LIBRARY_PATH:-none}"
	echo "    SQLite3                          ${SQLITE3_VERSION:-none}"
	echo "    YAML-cpp                         ${ROSE_YAML_PREFIX:-none}"
	echo "    yices executable                 ${ROSE_YICES:-none}"
	echo "    yices library                    ${ROSE_HAVE_LIBYICES:-none}"
	echo "    z3 version                       ${Z3_VERSION:-unknown}"
	echo "    z3 executable                    ${Z3:-none}"
	echo "    z3 library                       ${Z3_LIBRARY_PATH:-none}"
    fi

    #--------------------------------------------------------------------------------
    if test -n "$support_cxx_frontend" -o -n "$verbose"; then
        ROSE_SUMMARY_HEADING([C/C++ analysis support])
	echo "    frontend C++ parser              EDG-${edg_major_version_number}.${edg_minor_version_number}"
	echo "    compiling EDG from source        $has_edg_source"
	echo "    generating EDG binary tarball    $binary_edg_tarball_enabled"
	echo "    backend C++ compiler             ${BACKEND_CXX_COMPILER_COMMAND:-none}"
	echo "    C++ vendor                       ${BACKEND_CXX_COMPILER_VENDOR:-unknown}"
	echo "    C++ version                      ${BACKEND_CXX_VERSION_TRIPLET:-unknown}"
	echo "    backend C compiler               ${BACKEND_C_COMPILER:-none}"
    fi

    #--------------------------------------------------------------------------------
    if test -n "$support_fortran_frontend" -o -n "$verbose"; then
        ROSE_SUMMARY_HEADING([Fortran analysis support])
	echo "    fortran compiler                 ${BACKEND_FORTRAN_COMPILER:-none}"
    fi

    #--------------------------------------------------------------------------------
    if test -n "$support_java_frontend" -o -n "$verbose"; then
        ROSE_SUMMARY_HEADING([Java analysis support])
        echo "    installation path            	   ${JAVA_PATH:-none}"
	echo "    C++ header switches          	   ${JAVA_JVM_INCLUDE:-none}"
	echo "    C++ link switches            	   ${JAVA_JVM_LINK:-none}"
	echo "    runtime command                  ${JAVA:-none}"
	echo "    compiler command                 ${JAVAC:-none}"
	echo "    archive tool                     ${JAR:-none}"
    fi

    #--------------------------------------------------------------------------------
    if test -n "$support_python_frontend" -o -n "$verbose"; then
        ROSE_SUMMARY_HEADING([Python analysis support])
        echo "    executable                       ${PYTHON:-none}"
	echo "    version                          $PYTHON_VERSION_MAJOR_VERSION.$PYTHON_VERSION_MAJOR_VERSION.$PYTHON_VERSION_MINOR_VERSION.$PYTHON_VERSION_PATCH_VERSION"
	echo "    site pkg                         ${PYTHON_SITE_PKG:-none}"
        echo "    dev exists                       $PYTHON_DEV_EXISTS"
        echo "    c preprocessor switches          ${PYTHON_CPPFLAGS:-none}"
        echo "    linker switches                  ${PYTHON_LDFLAGS:-none}"
        echo "    extra libraries                  ${PYTHON_EXTRA_LIBS:-none}"
        echo "    extra linker switches            ${PYTHON_EXTRA_LDFLAGS:-none}"
        echo "    use python                       ${PYTHON:-no}"
        echo "    use python development           ${ROSE_USE_PYTHON_DEV:-no}"
    fi

    #--------------------------------------------------------------------------------
    if test -n "$DOXYGEN" -o -n "$verbose"; then
        ROSE_SUMMARY_HEADING([Doxygen documentation generator])
	echo "    executable                       ${DOXYGEN:-none}"
	echo "    version                          ${DOXYGEN_VERSION:-unknown}"
        echo "    indexer                          ${DOXYINDEXER:-none}"
        echo "    stubs for undocumented entities  ${DOXYGEN_EXTRACT_ALL:-no}"
        echo "    document private entities        ${DOXYGEN_EXTRACT_PRIVATE:-no}"
        echo "    document static entities         ${DOXYGEN_EXTRACT_STATIC:-no}"
        echo "    document internal entities       ${DOXYGEN_INTERNAL_DOCS:-no}"
        echo "    hide undocumented members        ${DOXYGEN_HIDE_UNDOC_MEMBERS:-no}"
        echo "    hide undocumented classes        ${DOXYGEN_HIDE_UNDOC_CLASSES:-no}"
        echo "    hide friend compounds            ${DOXYGEN_HIDE_FRIEND_COMPOUNDS:-no}"
    fi
])
m4trace:config/support-swipl.m4:2: -1- AC_DEFUN([ROSE_SUPPORT_SWIPL], [

AC_MSG_CHECKING(for SWI Prolog)

AC_ARG_WITH([swi-prolog],
        AS_HELP_STRING([--with-swi-prolog=PATH],
                [use swi-prolog for prolog support (default autodetect).  PATH is bin directory containing swipl if given]),
        [swiplsetting=$withval],
        [swiplsetting=try])

ROSE_HAVE_SWI_PROLOG=0

if test "x$swiplsetting" != xno; then
        if test "x$swiplsetting" = xtry -o "x$swiplsetting" = xyes ; then
# autodetect swipl bin PATH
                if which swipl > /dev/null 2> /dev/null; then
                        SWIPL="`which swipl`"
                        SWIPLBIN="`dirname $SWIPL`"
                        ROSE_HAVE_SWI_PROLOG=1
                elif test "x$swiplsetting" = xyes ; then
                        AC_MSG_ERROR([--with-swi-prolog set but swipl command not found in PATH])
                fi

        else
                if test -d "$swiplsetting"; then
#Verification of the bin directory containing the program is deferred later
                        SWIPLBIN="$swiplsetting"
                        ROSE_HAVE_SWI_PROLOG=1
                else
                        AC_MSG_ERROR([argument to --with-swi-prolog must be path to bin directory, but argument is not a directory])
                fi
        fi
fi

if test $ROSE_HAVE_SWI_PROLOG = 1; then
        if test ! -x "$SWIPLBIN/swipl" ; then
                AC_MSG_ERROR([swipl could not be found in bin directory $SWIPLBIN])
        fi
        AC_MSG_RESULT([$SWIPLBIN])
else
        AC_MSG_RESULT([no])
fi

AC_SUBST(SWIPLBIN)
AM_CONDITIONAL(ROSE_HAVE_SWI_PROLOG,test "$ROSE_HAVE_SWI_PROLOG" = 1)

])
m4trace:config/support-valgrind.m4:19: -1- AC_DEFUN([ROSE_SUPPORT_VALGRIND], [
  ROSE_CONFIGURE_SECTION([Checking Valgrind])

  ROSE_ARG_WITH(
    [valgrind],
    [for Valgrind installation],
    [add Valgrind support in ROSE],
    []
  )

  if test "x$CONFIG_HAS_ROSE_WITH_VALGRIND" != "xno"; then
    VALGRIND_INSTALL_PATH="$ROSE_WITH_VALGRIND"
    VALGRIND_BIN_PATH="$ROSE_WITH_VALGRIND/bin"
    VALGRIND_INCLUDE_PATH="$ROSE_WITH_VALGRIND/include"
    VALGRIND_LIBRARY_PATH="$ROSE_WITH_VALGRIND/lib"
  else
    VALGRIND_INSTALL_PATH=
    VALGRIND_BIN_PATH=
    VALGRIND_INCLUDE_PATH=
    VALGRIND_LIBRARY_PATH=
  fi

  ROSE_ARG_WITH(
    [valgrind-bin],
    [if the Valgrind bin directory was specified],
    [use this Valgrind bin directory],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_VALGRIND_BIN" != "xno"; then
      VALGRIND_BIN_PATH="$ROSE_WITH_VALGRIND_BIN"
  fi

  ROSE_ARG_WITH(
    [valgrind-include],
    [if the Valgrind include directory was specified],
    [use this Valgrind include directory],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_VALGRIND_INCLUDE" != "xno"; then
      VALGRIND_INCLUDE_PATH="$ROSE_WITH_VALGRIND_INCLUDE"
  fi

  ROSE_ARG_WITH(
    [valgrind-lib],
    [if the Valgrind library directory was specified],
    [use this Valgrind library directory],
    []
  )
  if test "x$CONFIG_HAS_ROSE_WITH_VALGRIND_LIB" != "xno"; then
      VALGRIND_LIBRARY_PATH="$ROSE_WITH_VALGRIND_LIB"
  fi

  if test "x$VALGRIND_BIN_PATH" != "x"; then
      AC_CHECK_FILE(
          [${VALGRIND_BIN_PATH}/valgrind],
          [],
          [ROSE_MSG_ERROR([valgrind binary is missing, can't configure with Valgrind])])
      if ! valgrind_version="$(${VALGRIND_BIN_PATH}/valgrind --version)"; then
          ROSE_MSG_ERROR([could not execute your Valgrind binary])
      else
          AC_MSG_CHECKING([valgrind version])
          AC_MSG_RESULT([$valgrind_version])
      fi
  fi

  if test "x$VALGRIND_INCLUDE_PATH" != "x"; then
      AC_CHECK_FILE(
          [${VALGRIND_INCLUDE_PATH}/valgrind/valgrind.h],
          [],
          [ROSE_MSG_ERROR([valgrind.h is missing, can't compile with Valgrind])])
  fi

  AM_CONDITIONAL(ROSE_WITH_VALGRIND, [test "x$VALGRIND_BIN_PATH" != "x"])
  AM_CONDITIONAL(ROSE_WITH_VALGRIND_BIN, [test "x$VALGRIND_BIN_PATH" != "x"])
  AM_CONDITIONAL(ROSE_WITH_VALGRIND_INCLUDE, [test "x$VALGRIND_INCLUDE_PATH" != "x"])
  AM_CONDITIONAL(ROSE_WITH_VALGRIND_LIBRARY, [test "x$VALGRIND_LIBRARY_PATH" != "x"])

  AC_SUBST(VALGRIND_INSTALL_PATH)
  AC_SUBST(VALGRIND_BIN_PATH)
  AC_SUBST(VALGRIND_INCLUDE_PATH)
  AC_SUBST(VALGRIND_LIBRARY_PATH)

# Don't set VALGRIND here because that turns on actually running valgrind in
# many tests, as opposed to just having the path available for
# uninitializedField_tests
VALGRIND_BINARY="${VALGRIND_BIN_PATH}/valgrind"
AC_SUBST(VALGRIND_BINARY)
#AC_SUBST(VALGRIND, $VALGRIND_BINARY)
AM_CONDITIONAL(USE_VALGRIND, [test "x$VALGRIND_BINARY" != "x" && test "x$VALGRIND_BIN_PATH" != "x"])

# End macro ROSE_SUPPORT_VALGRIND.
])
m4trace:config/support-vectorization.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_VECTORIZATION], [
# Begin macro ROSE_SUPPORT_VECTORIZATION.

VECTORIZATION="\$(top_builddir)/projects/vectorization/src/vectorization"
AC_SUBST(VECTORIZATION)

])
m4trace:config/support-visualization.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_VISUALIZATION], [
# Begin macro ROSE_SUPPORT_VISUALIZATION.

# Inclusion of test for FLTK and GraphViz in support of the visualization 
# provided by dotgl (Nils' work)
#  1) FLTK location path (include and libs path)
#  2) GraphViz location path (include and libs path)

# Note that due to the way in which these libraries are installed in Nils
# directory we have to specify the include and libs paths separately for
# each library.  I don't know if this mechanism has be always be this general.

AC_MSG_CHECKING(for FLTK library include path)
AC_ARG_WITH(FLTK_include,
[  --with-FLTK_include=PATH	Specify the prefix where FLTK include files is installed],
,
if test ! "$with_FLTK_include" ; then
   with_FLTK_include=no
fi
)

AC_MSG_CHECKING(for FLTK library libs path)
AC_ARG_WITH(FLTK_libs,
[  --with-FLTK_libs=PATH	Specify the prefix where FLTK libraries are installed],
,
if test ! "$with_FLTK_libs" ; then
   with_FLTK_libs=no
fi
)

AC_MSG_CHECKING(for GraphViz library include path)
AC_ARG_WITH(GraphViz_include,
[  --with-GraphViz_include=PATH	Specify the prefix where GraphViz include files are installed],
,
if test ! "$with_GraphViz_include" ; then
   with_GraphViz_include=no
fi
)

AC_MSG_CHECKING(for GraphViz library libs path)
AC_ARG_WITH(GraphViz_libs,
[  --with-GraphViz_libs=PATH	Specify the prefix where GraphViz libraries are installed],
,
if test ! "$with_GraphViz_libs" ; then
   with_GraphViz_libs=no
fi
)

# DQ (9/1/2005): Added support for GLUT library (FreeGlut)
AC_MSG_CHECKING(for GLUT library include path)
AC_ARG_WITH(GLUT_include,
[  --with-GLUT_include=PATH	Specify the prefix where GLUT include files are installed])

if test ! "$with_GLUT_include" ; then
   with_GLUT_include=no
fi


# DQ (9/1/2005): Added support for GLUT library (FreeGlut)
AC_MSG_CHECKING(for GLUT library libs path)
AC_ARG_WITH(GLUT_libs,
[  --with-GLUT_libs=PATH	Specify the prefix where GLUT libraries are installed])

if test ! "$with_GLUT_libs" ; then
   with_GLUT_libs=no
fi

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_FLTK_include     = "$with_FLTK_include"])
AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_FLTK_libs        = "$with_FLTK_libs"])
AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_GraphViz_include = "$with_GraphViz_include"])
AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_GraphViz_libs    = "$with_GraphViz_libs"])

if (test "$with_FLTK_include" = no) || (test "$with_FLTK_libs" = no) || 
   (test "$with_GraphViz_include" = no) || (test "$with_GraphViz_libs" = no) ||
   (test "$with_GLUT_include" = no) || (test "$with_GLUT_libs" = no); then
   # If none of these are specified, then don't use visualization (don't build dotGL).
   AC_MSG_NOTICE([skipping use of dotgl visualization])
else
 # optional_Visualization_subdirs="visualization"
   FLTK_include_path=$with_FLTK_include
   FLTK_libs_path=$with_FLTK_libs
   GraphViz_include_path=$with_GraphViz_include
   GraphViz_libs_path=$with_GraphViz_libs
   GLUT_include_path=$with_GLUT_include
   GLUT_libs_path=$with_GLUT_libs

   AC_MSG_NOTICE([setup VIZUALIZATION. FLTK include path     = "$FLTK_include_path"])
   AC_MSG_NOTICE([setup VIZUALIZATION. FLTK libs path        = "$FLTK_libs_path"])
   AC_MSG_NOTICE([setup VIZUALIZATION. GraphViz include path = "$GraphViz_include_path"])
   AC_MSG_NOTICE([setup VIZUALIZATION. GraphViz libs path    = "$GraphViz_libs_path"])
   AC_MSG_NOTICE([setup VIZUALIZATION. GLUT include path     = "$GLUT_include_path"])
   AC_MSG_NOTICE([setup VIZUALIZATION. GLUT libs path        = "$GLUT_libs_path"])

 # echo "Setup VIZUALIZATION! optional_Visualization_subdirs = $optional_Visualization_subdirs"

#  AC_CONFIG_SUBDIRS(src/roseIndependentSupport/visualization)
fi

# These are all used to buld dotGL
AC_SUBST(optional_Visualization_subdirs)
AC_SUBST(FLTK_include_path)
AC_SUBST(FLTK_libs_path)
AC_SUBST(GraphViz_include_path)
AC_SUBST(GraphViz_libs_path)
AC_SUBST(GLUT_include_path)
AC_SUBST(GLUT_libs_path)

# End macro ROSE_SUPPORT_VISUALIZATION.

])
m4trace:config/support-windows.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_WINDOWS_ANALYSIS], [
# Begin macro ROSE_SUPPORT_WINDOWS_ANALYSIS.

AC_MSG_CHECKING(for Wine -- Wine is not an emulator)
AC_ARG_WITH(wine,
[  --with-wine=PATH	Specify the prefix where Wine is installed],
,
if test ! "$with_wine" ; then
   with_wine=no
fi
)

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_wine = "$with_wine"])

if test "$with_wine" = no; then
   # If wine is not specified, then don't use it.
   AC_MSG_NOTICE([skipping use of Wine for Windows Binary Analysis])
else
   wine_path=$with_wine
   AC_MSG_NOTICE([setup Wine support in ROSE. path = "$wine_path"])
   AC_DEFINE([USE_ROSE_WINDOWS_ANALYSIS_SUPPORT],1,[Wine provides access to Windows header files for analysis of windows applications under Linux.])
fi

AC_SUBST(wine_path)

# End macro ROSE_SUPPORT_WINDOWS_BINARY_ANALYSIS.

])
m4trace:config/support-x10.m4:3: -1- AC_DEFUN([ROSE_SUPPORT_X10], [
    X10_INSTALL_PATH=
    X10_BIN_PATH=
    X10_LIBRARY_PATH=


  #============================================================================
  # Set Automake Conditionals and Substitutions
  #============================================================================
  AM_CONDITIONAL(ROSE_WITH_X10, [false])
  AM_CONDITIONAL(ROSE_WITH_X10_BIN, [false])
  AM_CONDITIONAL(ROSE_WITH_X10_LIB, [false])

  AC_SUBST(X10_INSTALL_PATH)
  AC_SUBST(X10_BIN_PATH)
  AC_SUBST(X10_LIBRARY_PATH)
  AC_SUBST(X10_VERSION)

  #============================================================================
  # Set CPP #defines
  #============================================================================
  AC_DEFINE_UNQUOTED(
    X10_INSTALL_PATH,
    ["$X10_INSTALL_PATH"],
    [Absolute path of the X10 installation])
  AC_DEFINE_UNQUOTED(
    X10_BIN_PATH,
    ["$X10_BIN_PATH"],
    [Absolute path of the X10 installation bin directory])
  AC_DEFINE_UNQUOTED(
    X10_LIBRARY_PATH,
    ["$X10_LIBRARY_PATH"],
    [Absolute path of the X10 installation lib directory])
  AC_DEFINE_UNQUOTED(
    X10_VERSION,
    ["$X10_VERSION"],
    [Version number of the user-specified X10 compiler])

# End macro ROSE_SUPPORT_X10.
])
m4trace:config/support-yaml.m4:2: -1- AC_DEFUN([ROSE_SUPPORT_YAML], [

    dnl Parse configure command-line switches for YAML and/or obtain the value from the cache.
    AC_ARG_WITH(
        [yaml],
        AS_HELP_STRING(
            [--with-yaml=PREFIX],
            [Use libyaml-cpp available from https://code.google.com/p/yaml-cpp for free.
             The PREFIX, if specified, should be the prefix used to install libyaml-cpp,
             such as "/usr/local".  The default is the empty prefix, in which case the
             headers and library must be installed in a place where they will be found.
             Saying "no" for the prefix is the same as saying "--without-yaml".]),
            [ac_cv_use_yaml=$withval],
            [ac_cv_use_yaml=no])
    AC_CACHE_CHECK([whether to use yaml], [ac_cv_use_yaml], [ac_cv_use_yaml=no])

    dnl YAML root directory
    if test "$ac_cv_use_yaml" = yes; then
        ROSE_YAML_PREFIX=
    elif test -n "$ac_cv_use_yaml" -a "$ac_cv_use_yaml" != no; then
        ROSE_YAML_PREFIX="$ac_cv_use_yaml"
    fi

    dnl Is the YAML library available?
    ROSE_HAVE_LIBYAML=
    if test "$ac_cv_use_yaml" != "no"; then
        # Save variables
        AC_LANG_PUSH(C++)
        saved_LDFLAGS="$LDFLAGS"
        saved_LIBS="$LIBS"
        saved_CPPFLAGS="$CPPFLAGS"

        # Set include and library search paths
        CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS"
        LDFLAGS="$LDFLAGS $BOOST_LDFLAGS"
        if test "$ROSE_YAML_PREFIX" != ""; then
            LDFLAGS="$LDFLAGS -L$ROSE_YAML_PREFIX/lib"
            CPPFLAGS="$CPPFLAGS -I$ROSE_YAML_PREFIX/include"
        fi
        LIBS="$LIBS -lyaml-cpp"

        # Look for the YAML library
        AC_LINK_IFELSE(
            [AC_LANG_PROGRAM([#include <yaml-cpp/yaml.h>],
                             [YAML::Node configFile = YAML::LoadFile(std::string());])],
            [ROSE_HAVE_LIBYAML=yes],
            [AC_MSG_ERROR([did not find yaml-cpp library but --with-yaml was specified])])

        # Restore variables
        LDFLAGS="$saved_LDFLAGS"
        LIBS="$saved_LIBS_"
        CPPFLAGS="$saved_CPPFLAGS"
        AC_LANG_POP(C++)
    fi

    dnl Results
    dnl   ROSE_LIBYAML_PREFIX -- name of the directory where yaml-cpp is installed
    dnl   ROSE_HAVE_LIBYAML   -- defined if the yaml-cpp library is available
    AC_SUBST(ROSE_YAML_PREFIX)
    AM_CONDITIONAL(ROSE_HAVE_LIBYAML, [test -n "$ROSE_HAVE_LIBYAML"])
    if test -n "$ROSE_HAVE_LIBYAML"; then
        AC_DEFINE(ROSE_HAVE_LIBYAML, [], [Defined when libyaml-cpp is available])
    fi
])
m4trace:config/support-yices.m4:2: -1- AC_DEFUN([ROSE_SUPPORT_YICES], [

    dnl Parse configure command-line switches for Yices and/or obtain the value from the cache.
    AC_ARG_WITH(
        [yices],
        AS_HELP_STRING(
            [--with-yices=PREFIX],
            [Use the Yices SMT solver available as a non-free download from https://yices.csl.sri.com (consider
             using the Z3 solver instead, which is free and better supported). The PREFIX, if specified,
             should be the prefix used to install Yices, such as "/usr/local". The default is the empty prefix,
             in which case the headers and library must be installed in a place where they will be found. Saying
             "no" for the prefix is the same as saying "--without-yices".]),
            [ac_cv_use_yices=$withval],
            [ac_cv_use_yices=no])
    AC_CACHE_CHECK([whether to use yices], [ac_cv_use_yices], [ac_cv_use_yices=no])


    dnl Find the yices executable and/or library.
    HAVE_LIBYICES=
    if test $ac_cv_use_yices = yes; then
        ROSE_YICES_PREFIX=
        AC_PATH_PROG(ROSE_YICES, yices)
        AC_CHECK_LIB(yices, yicesl_version,
                     [AC_DEFINE(ROSE_HAVE_LIBYICES, [], [Defined when the Yices SMT-Solver library is present and should be used.])
                      ROSE_HAVE_LIBYICES=yes])
    elif test -n "$ac_cv_use_yices" -a "$ac_cv_use_yices" != no; then
        ROSE_YICES_PREFIX="$ac_cv_use_yices"
        AC_PATH_PROG(ROSE_YICES, yices, [], [$ROSE_YICES_PREFIX/bin])
        AC_CHECK_FILE(["$ROSE_YICES_PREFIX/lib/libyices.a"],
                      [AC_DEFINE(ROSE_HAVE_LIBYICES, [], [Defined when the Yices SMT-Solver library is present and should be used.])
                       ROSE_HAVE_LIBYICES=yes])
    fi

    dnl Sanity check... If the user told us to use yices, then we must find either an executable or the library.
    if test "$ac_cv_use_yices" != no -a -z "$ROSE_YICES" -a -z "$ROSE_HAVE_LIBYICES"; then
        AC_MSG_ERROR([found neither yices executable nor libyices.a for --with-yices])
    fi

    dnl Results
    dnl   ROSE_YICES         -- defined as the name of the "yices" executable if available
    dnl   ROSE_YICES_PREFIX  -- the name of the directory where Yices software is installed if no on search paths
    dnl   ROSE_HAVE_LIBYICES -- defined if the Yices library and include files are available
    if test -n "$ROSE_YICES"; then
        AC_DEFINE_UNQUOTED(ROSE_YICES, ["$ROSE_YICES"], [Absolute name of yices executable, or the empty string.])
    fi
    AC_SUBST(ROSE_YICES)
    AC_SUBST(ROSE_YICES_PREFIX)
    AM_CONDITIONAL(ROSE_HAVE_LIBYICES, [test -n "$ROSE_HAVE_LIBYICES"])
    AM_CONDITIONAL(ROSE_HAVE_YICES,    [test -n "$ROSE_YICES"])
])
m4trace:config/support-z3.m4:1: -1- AC_DEFUN([ROSE_SUPPORT_Z3], [

    dnl Parse configure command-line switches for Z3 and/or obtain the value from the cache.
    AC_ARG_WITH([z3],
        AS_HELP_STRING([--with-z3=PREFIX],
            [Use the Z3 SMT solver available from https://github.com/Z3Prover/z3.
             The PREFIX, if specified, should be the prefix used to install Z3, such as "/usr/local".
             The default is the empty prefix, in which case the headers and library must be installed
             in a place where they will be found. Saying "no" for the prefix is the same as saying
             "--without-z3".]),
        [ac_cv_use_z3=$withval],
        [ac_cv_use_z3=no])

    USE_Z3=0
    if test "$ac_cv_use_z3" != no; then
        if test "$ac_cv_use_z3" = try -o "$ac_cv_use_z3" = yes ; then
            if which z3 > /dev/null 2> /dev/null; then
                Z3="`which z3`"
                Z3BIN="`dirname $Z3`"
                Z3_PREFIX="`dirname $Z3BIN`"
                Z3_INCLUDE_PATH="$Z3_PREFIX/include"
                Z3_LIBRARY_PATH="$Z3_PREFIX/lib"
                AC_DEFINE([HAVE_Z3], [1], [Define to 1 if you have Z3 libs and headers.])
                AC_DEFINE([ROSE_HAVE_Z3], [1], [Define to 1 if you have Z3 libs and headers.])
                USE_Z3=1
            elif test "$ac_cv_use_z3" = yes ; then
                AC_MSG_ERROR([--with-z3 set but z3 not found in PATH])
            fi
        else
            if test -d "$ac_cv_use_z3"; then
                Z3_PREFIX="$ac_cv_use_z3"
                Z3BIN="$Z3_PREFIX/bin"
                Z3="$Z3BIN/z3"
                Z3_INCLUDE_PATH="$Z3_PREFIX/include"
                Z3_LIBRARY_PATH="$Z3_PREFIX/lib"
                AC_DEFINE([HAVE_Z3], [1], [Define to 1 if you have Z3 libs and headers.])
                AC_DEFINE([ROSE_HAVE_Z3], [1], [Define to 1 if you have Z3 libs and headers.])
                USE_Z3=1
            else
                AC_MSG_ERROR([argument to --with-z3 must be a path to prefix directory, but argument is not a directory])
            fi
        fi
    fi

    if test $USE_Z3 = 1; then
        # Try to figure out a version number because the blacklisting needs it.
        if test -r "$Z3_INCLUDE_PATH/z3_version.h"; then
            Z3_VERSION=`sed -n 's/#define Z3_FULL_VERSION.*"Z3 \(.*\)"/\1/p' "$Z3_INCLUDE_PATH/z3_version.h"`
        elif test -r "$Z3_LIBRARY_PATH/cmake/z3/Z3Config.cmake"; then
            Z3_VERSION=`sed -n 's/set(Z3_VERSION_\(MAJOR\|MINOR\|PATCH\|TWEAK\) \(@<:@0-9@:>@*\).*/\2/p' "$Z3_LIBRARY_PATH/cmake/z3/Z3Config.cmake" |tr '\n' . |sed 's/\.$//'`
        else
            Z3_VERSION=unknown
        fi

        # z3_version.h was added in 4.8.1 but not included by z3.h. Therefore ROSE needs to include it explicitly
        # but only if the file exists.
        AC_CHECK_HEADER($Z3_INCLUDE_PATH/z3_version.h,
                        [AC_DEFINE(ROSE_HAVE_Z3_VERSION_H, 1, [Define if z3_version.h exists])])

        if test ! -x "$Z3BIN/z3" ; then
            AC_MSG_ERROR([z3 could not be found in the z3 bin directory $Z3BIN])
        fi
        AC_MSG_RESULT([$Z3BIN])
    fi

    AC_DEFINE_UNQUOTED(ROSE_Z3, ["$Z3"], [Absolute name of z3 executable, or the empty string.])
    AC_SUBST(Z3BIN)
    AC_SUBST(Z3_INCLUDE_PATH)
    AC_SUBST(Z3_LIBRARY_PATH)
    AC_SUBST(Z3_PREFIX)
    AM_CONDITIONAL(USE_Z3, test "$USE_Z3" = 1)

    # Correct names should have used the ROSE_ prefix. I don't want to break existing code, so I'll only add the
    # correct names here and not remove the wrong names above. [Robb Matzke, 2017-10-17]
    ROSE_Z3_PREFIX="$Z3_PREFIX"
    AC_SUBST(ROSE_Z3_PREFIX)

    AM_CONDITIONAL(ROSE_HAVE_LIBZ3, [test -n "$Z3_LIBRARY_PATH"])
    AM_CONDITIONAL(ROSE_HAVE_Z3,    [test -n "$Z3BIN"])
])
m4trace:config/support_POET.m4:1: -1- AC_DEFUN([CONFIGURE_POET], [
AC_MSG_CHECKING(for POET)
# Begin macro CONFIGURE_POET

AC_ARG_WITH(poet,
[  --with-poet	Specify if we should build POET],
)
if test ! "$with_poet" ; then
   with_poet=no
else
   with_poet=yes
fi

AC_MSG_NOTICE([in ROSE SUPPORT MACRO: with_poet = "$with_poet"])

if test "$with_poet" = no; then
   AC_MSG_NOTICE([skipping installation for POET])
else
   test -n "$poet_dir" || poet_dir=$(top_srcdir)/src/3rdPartyLibraries/POET
   POET_INCL="-I\$(poet_dir)"
   POET_LIBS="\$(poet_dir)/libpoet.la"
   AC_SUBST(POET_LIB)
   AC_SUBST(POET_INCL)
   AC_CONFIG_FILES([src/3rdPartyLibraries/POET/Makefile])
   AC_ARG_VAR(poet_dir, directory of the POET interpreter (default: ROSE/src/3rdPartyLibraries/POET))
fi
   AC_MSG_NOTICE([setup installation for POET in ROSE. with_poet = "$with_poet"])
   AM_CONDITIONAL(ROSE_WITH_POET, [test "x$with_poet" = xyes])
])
m4trace:config/swig_enable_cxx.m4:48: -1- AC_DEFUN([SWIG_ENABLE_CXX], [
        AC_REQUIRE([AC_PROG_SWIG])
        AC_REQUIRE([AC_PROG_CXX])
        SWIG="$SWIG -c++"
])
m4trace:configure.ac:7: -1- m4_pattern_forbid([^_?A[CHUM]_])
m4trace:configure.ac:7: -1- m4_pattern_forbid([_AC_])
m4trace:configure.ac:7: -1- m4_pattern_forbid([^LIBOBJS$], [do not use LIBOBJS directly, use AC_LIBOBJ (see section `AC_LIBOBJ vs LIBOBJS'])
m4trace:configure.ac:7: -1- m4_pattern_allow([^AS_FLAGS$])
m4trace:configure.ac:7: -1- m4_pattern_forbid([^_?m4_])
m4trace:configure.ac:7: -1- m4_pattern_forbid([^dnl$])
m4trace:configure.ac:7: -1- m4_pattern_forbid([^_?AS_])
m4trace:configure.ac:7: -1- m4_pattern_allow([^SHELL$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^PATH_SEPARATOR$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^exec_prefix$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^prefix$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^program_transform_name$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^bindir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^sbindir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^libexecdir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^datarootdir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^datadir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^sysconfdir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^sharedstatedir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^localstatedir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^runstatedir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^includedir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^oldincludedir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^docdir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^infodir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^htmldir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^dvidir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^pdfdir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^psdir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^libdir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^localedir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^mandir$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^DEFS$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^ECHO_C$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^ECHO_N$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^ECHO_T$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^build_alias$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^host_alias$])
m4trace:configure.ac:7: -1- m4_pattern_allow([^target_alias$])
m4trace:configure.ac:12: -1- m4_pattern_allow([^ROSE_SCM_VERSION_ID$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^ROSE_VERSION$])
m4trace:configure.ac:46: -1- ROSE_CONFIGURE_SECTION([Configuring ${T_BM}ROSE${T_NM}])
m4trace:configure.ac:60: -1- AM_INIT_AUTOMAKE([foreign tar-pax 1.11])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AM_[A-Z]+FLAGS$])
m4trace:configure.ac:60: -1- AM_SET_CURRENT_AUTOMAKE_VERSION
m4trace:configure.ac:60: -1- AM_AUTOMAKE_VERSION([1.16.2])
m4trace:configure.ac:60: -1- _AM_AUTOCONF_VERSION([2.69])
m4trace:configure.ac:60: -1- m4_pattern_allow([^INSTALL_PROGRAM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^INSTALL_SCRIPT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^INSTALL_DATA$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^am__isrc$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([am__isrc])
m4trace:configure.ac:60: -1- m4_pattern_allow([^CYGPATH_W$])
m4trace:configure.ac:60: -1- _AM_SET_OPTIONS([foreign tar-pax 1.11])
m4trace:configure.ac:60: -1- _AM_SET_OPTION([foreign])
m4trace:configure.ac:60: -2- _AM_MANGLE_OPTION([foreign])
m4trace:configure.ac:60: -1- _AM_SET_OPTION([tar-pax])
m4trace:configure.ac:60: -2- _AM_MANGLE_OPTION([tar-pax])
m4trace:configure.ac:60: -1- _AM_SET_OPTION([1.11])
m4trace:configure.ac:60: -2- _AM_MANGLE_OPTION([1.11])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PACKAGE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^VERSION$])
m4trace:configure.ac:60: -1- _AM_IF_OPTION([no-define], [], [AC_DEFINE_UNQUOTED([PACKAGE], ["$PACKAGE"], [Name of package])
 AC_DEFINE_UNQUOTED([VERSION], ["$VERSION"], [Version number of package])])
m4trace:configure.ac:60: -2- _AM_MANGLE_OPTION([no-define])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PACKAGE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^VERSION$])
m4trace:configure.ac:60: -1- AM_SANITY_CHECK
m4trace:configure.ac:60: -1- AM_MISSING_PROG([ACLOCAL], [aclocal-${am__api_version}])
m4trace:configure.ac:60: -1- AM_MISSING_HAS_RUN
m4trace:configure.ac:60: -1- AM_AUX_DIR_EXPAND
m4trace:configure.ac:60: -1- m4_pattern_allow([^ACLOCAL$])
m4trace:configure.ac:60: -1- AM_MISSING_PROG([AUTOCONF], [autoconf])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AUTOCONF$])
m4trace:configure.ac:60: -1- AM_MISSING_PROG([AUTOMAKE], [automake-${am__api_version}])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AUTOMAKE$])
m4trace:configure.ac:60: -1- AM_MISSING_PROG([AUTOHEADER], [autoheader])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AUTOHEADER$])
m4trace:configure.ac:60: -1- AM_MISSING_PROG([MAKEINFO], [makeinfo])
m4trace:configure.ac:60: -1- m4_pattern_allow([^MAKEINFO$])
m4trace:configure.ac:60: -1- AM_PROG_INSTALL_SH
m4trace:configure.ac:60: -1- m4_pattern_allow([^install_sh$])
m4trace:configure.ac:60: -1- AM_PROG_INSTALL_STRIP
m4trace:configure.ac:60: -1- m4_pattern_allow([^STRIP$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^INSTALL_STRIP_PROGRAM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^MKDIR_P$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^mkdir_p$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AWK$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^SET_MAKE$])
m4trace:configure.ac:60: -1- AM_SET_LEADING_DOT
m4trace:configure.ac:60: -1- m4_pattern_allow([^am__leading_dot$])
m4trace:configure.ac:60: -1- _AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])], [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],
			     [_AM_PROG_TAR([v7])])])
m4trace:configure.ac:60: -2- _AM_MANGLE_OPTION([tar-ustar])
m4trace:configure.ac:60: -1- _AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])], [_AM_PROG_TAR([v7])])
m4trace:configure.ac:60: -2- _AM_MANGLE_OPTION([tar-pax])
m4trace:configure.ac:60: -1- _AM_PROG_TAR([pax])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AMTAR$])
m4trace:configure.ac:60: -1- AM_RUN_LOG([$_am_tar --version])
m4trace:configure.ac:60: -1- AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])
m4trace:configure.ac:60: -1- AM_RUN_LOG([$am__untar <conftest.tar])
m4trace:configure.ac:60: -1- AM_RUN_LOG([cat conftest.dir/file])
m4trace:configure.ac:60: -1- m4_pattern_allow([^am__tar$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^am__untar$])
m4trace:configure.ac:60: -1- _AM_IF_OPTION([no-dependencies], [], [AC_PROVIDE_IFELSE([AC_PROG_CC],
		  [_AM_DEPENDENCIES([CC])],
		  [m4_define([AC_PROG_CC],
			     m4_defn([AC_PROG_CC])[_AM_DEPENDENCIES([CC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_CXX],
		  [_AM_DEPENDENCIES([CXX])],
		  [m4_define([AC_PROG_CXX],
			     m4_defn([AC_PROG_CXX])[_AM_DEPENDENCIES([CXX])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJC],
		  [_AM_DEPENDENCIES([OBJC])],
		  [m4_define([AC_PROG_OBJC],
			     m4_defn([AC_PROG_OBJC])[_AM_DEPENDENCIES([OBJC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJCXX],
		  [_AM_DEPENDENCIES([OBJCXX])],
		  [m4_define([AC_PROG_OBJCXX],
			     m4_defn([AC_PROG_OBJCXX])[_AM_DEPENDENCIES([OBJCXX])])])dnl
])
m4trace:configure.ac:60: -2- _AM_MANGLE_OPTION([no-dependencies])
m4trace:configure.ac:60: -1- AM_SILENT_RULES
m4trace:configure.ac:60: -1- m4_pattern_allow([^AM_V$])
m4trace:configure.ac:60: -1- AM_SUBST_NOTMAKE([AM_V])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([AM_V])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AM_DEFAULT_V$])
m4trace:configure.ac:60: -1- AM_SUBST_NOTMAKE([AM_DEFAULT_V])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([AM_DEFAULT_V])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AM_DEFAULT_VERBOSITY$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AM_BACKSLASH$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([AM_BACKSLASH])
m4trace:configure.ac:62: -1- AM_CONFIG_HEADER([rose_config.h])
m4trace:configure.ac:62: -1- _m4_warn([obsolete], ['AM_CONFIG_HEADER': this macro is obsolete.
You should use the 'AC_CONFIG_HEADERS' macro instead.], [/usr/share/aclocal-1.16/obsolete.m4:11: AM_CONFIG_HEADER is expanded from...
configure.ac:62: the top level])
m4trace:configure.ac:74: -1- AM_SILENT_RULES([yes])
m4trace:configure.ac:74: -1- m4_pattern_allow([^AM_V$])
m4trace:configure.ac:74: -1- AM_SUBST_NOTMAKE([AM_V])
m4trace:configure.ac:74: -1- _AM_SUBST_NOTMAKE([AM_V])
m4trace:configure.ac:74: -1- m4_pattern_allow([^AM_DEFAULT_V$])
m4trace:configure.ac:74: -1- AM_SUBST_NOTMAKE([AM_DEFAULT_V])
m4trace:configure.ac:74: -1- _AM_SUBST_NOTMAKE([AM_DEFAULT_V])
m4trace:configure.ac:74: -1- m4_pattern_allow([^AM_DEFAULT_VERBOSITY$])
m4trace:configure.ac:74: -1- m4_pattern_allow([^AM_BACKSLASH$])
m4trace:configure.ac:74: -1- _AM_SUBST_NOTMAKE([AM_BACKSLASH])
m4trace:configure.ac:100: -1- AM_PROG_CC_C_O
m4trace:configure.ac:100: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^CFLAGS$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^ac_ct_CC$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^EXEEXT$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^OBJEXT$])
m4trace:configure.ac:100: -1- _AM_PROG_CC_C_O
m4trace:configure.ac:100: -1- AM_RUN_LOG([$CC -c conftest.$ac_ext -o conftest2.$ac_objext])
m4trace:configure.ac:100: -1- _AM_DEPENDENCIES([CC])
m4trace:configure.ac:100: -1- AM_SET_DEPDIR
m4trace:configure.ac:100: -1- m4_pattern_allow([^DEPDIR$])
m4trace:configure.ac:100: -1- AM_OUTPUT_DEPENDENCY_COMMANDS
m4trace:configure.ac:100: -1- AM_MAKE_INCLUDE
m4trace:configure.ac:100: -1- AM_RUN_LOG([${MAKE-make} -f confmf.$s && cat confinc.out])
m4trace:configure.ac:100: -1- m4_pattern_allow([^am__include$])
m4trace:configure.ac:100: -1- AM_DEP_TRACK
m4trace:configure.ac:100: -1- AM_CONDITIONAL([AMDEP], [test "x$enable_dependency_tracking" != xno])
m4trace:configure.ac:100: -1- m4_pattern_allow([^AMDEP_TRUE$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^AMDEP_FALSE$])
m4trace:configure.ac:100: -1- _AM_SUBST_NOTMAKE([AMDEP_TRUE])
m4trace:configure.ac:100: -1- _AM_SUBST_NOTMAKE([AMDEP_FALSE])
m4trace:configure.ac:100: -1- m4_pattern_allow([^AMDEPBACKSLASH$])
m4trace:configure.ac:100: -1- _AM_SUBST_NOTMAKE([AMDEPBACKSLASH])
m4trace:configure.ac:100: -1- m4_pattern_allow([^am__nodep$])
m4trace:configure.ac:100: -1- _AM_SUBST_NOTMAKE([am__nodep])
m4trace:configure.ac:100: -1- m4_pattern_allow([^CCDEPMODE$])
m4trace:configure.ac:100: -1- AM_CONDITIONAL([am__fastdepCC], [
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_CC_dependencies_compiler_type" = gcc3])
m4trace:configure.ac:100: -1- m4_pattern_allow([^am__fastdepCC_TRUE$])
m4trace:configure.ac:100: -1- m4_pattern_allow([^am__fastdepCC_FALSE$])
m4trace:configure.ac:100: -1- _AM_SUBST_NOTMAKE([am__fastdepCC_TRUE])
m4trace:configure.ac:100: -1- _AM_SUBST_NOTMAKE([am__fastdepCC_FALSE])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_ROSE_PART_1
m4trace:configure.ac:121: -1- m4_pattern_allow([^build$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^build_cpu$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^build_vendor$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^build_os$])
m4trace:configure.ac:121: -1- DETERMINE_OS
m4trace:configure.ac:121: -1- AM_CONDITIONAL([OS_MACOSX], [ test "x$MACOSX"  = xyes  ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_MACOSX_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_MACOSX_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_MACOSX_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_MACOSX_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([OS_LINUX], [ test "x$LINUX"   = xyes  ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_LINUX_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_LINUX_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_LINUX_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_LINUX_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([OS_MINGW], [ test "x$MINGW"   = xyes  ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_MINGW_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_MINGW_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_MINGW_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_MINGW_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([OS_MSDOS], [ test "x$MSDOS"   = xyes  ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_MSDOS_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_MSDOS_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_MSDOS_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_MSDOS_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([OS_SOLARIS], [ test "x$SOLARIS" = xyes  ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_SOLARIS_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_SOLARIS_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_SOLARIS_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_SOLARIS_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_OS_IS_OSX], [test "x$build_vendor" = xapple])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_OS_IS_OSX_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_OS_IS_OSX_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_OS_IS_OSX_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_OS_IS_OSX_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_OS_IS_CYGWIN], [test "x$build_os" = xcygwin])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_OS_IS_CYGWIN_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_OS_IS_CYGWIN_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_OS_IS_CYGWIN_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_OS_IS_CYGWIN_FALSE])
m4trace:configure.ac:121: -1- DETERMINE_OS_VENDOR
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_LSB_RELEASE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBIAN_OS_VENDOR$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_REDHAT_OS_VENDOR$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_UBUNTU_OS_VENDOR$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_CENTOS_OS_VENDOR$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_APPLE_OS_VENDOR$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([OS_VENDOR_DEBIAN], [ test "x$DEBIAN" = xyes ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_DEBIAN_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_DEBIAN_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_DEBIAN_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_DEBIAN_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([OS_VENDOR_REDHAT], [ test "x$REDHAT" = xyes ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_REDHAT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_REDHAT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_REDHAT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_REDHAT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([OS_VENDOR_UBUNTU], [ test "x$UBUNTU" = xyes ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_UBUNTU_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_UBUNTU_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_UBUNTU_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_UBUNTU_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([OS_VENDOR_CENTOS], [ test "x$CENTOS" = xyes ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_CENTOS_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_CENTOS_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_CENTOS_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_CENTOS_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([OS_VENDOR_APPLE], [ test "x$APPLE"  = xyes ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_APPLE_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_APPLE_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_APPLE_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_APPLE_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([OS_32BIT], [ test "x$build_cpu" = xi686 ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_32BIT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_32BIT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_32BIT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_32BIT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([OS_64BIT], [ test "x$build_cpu" = xx86_64 ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_64BIT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_64BIT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_64BIT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_64BIT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([OS_VENDOR_REDHAT_32BIT], [ test "x$REDHAT" = xyes -a "x$build_cpu" = xi686 ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_REDHAT_32BIT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_REDHAT_32BIT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_REDHAT_32BIT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_REDHAT_32BIT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([OS_VENDOR_REDHAT_REL5], [ test "x$REDHAT" = xyes -a "x$OS_major_release_number" = x5])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_REDHAT_REL5_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_REDHAT_REL5_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_REDHAT_REL5_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_REDHAT_REL5_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([OS_VENDOR_REDHAT_REL6], [ test "x$REDHAT" = xyes -a "x$OS_major_release_number" = x6])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_REDHAT_REL6_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_VENDOR_REDHAT_REL6_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_REDHAT_REL6_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([OS_VENDOR_REDHAT_REL6_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_vendor$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_release$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_OS_MAJOR_RELEASE_NUMBER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_OS_MINOR_RELEASE_NUMBER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_major_release_number$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OS_minor_release_number$])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_SSL
m4trace:configure.ac:121: -1- m4_pattern_allow([^USE_ROSE_SSL_SUPPORT$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_SSL_SUPPORT], [test "x$enable_ssl" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_SSL_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_SSL_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_SSL_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_SSL_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^configure_date$])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_JAVA
m4trace:configure.ac:121: -1- ROSE_CONFIGURE_SECTION([Checking Java])
m4trace:configure.ac:121: -1- ROSE_CANON_SYMLINK([JAVAC], ["${JAVAC}"])
m4trace:configure.ac:121: -1- ROSE_MSG_ERROR([An error occurred while trying to determine your java version: one or more extracted major, minor, patch and release version numbers displayed above are empty. Please look into rose/config/support-java.m4 to make sure the extraction commands inside the m4 file work as expected.])
m4trace:configure.ac:121: -1- AM_COND_IF([OS_MACOSX], [JAVA_JVM_INCLUDE="-I${JAVA_PATH}/include -I${JAVA_PATH}/include/darwin"], [JAVA_JVM_INCLUDE="-I${JAVA_PATH}/include -I${JAVA_PATH}/include/linux"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USE_ROSE_JAVA_SUPPORT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USE_ROSE_INTERNAL_JAVA_SUPPORT$])
m4trace:configure.ac:121: -1- AM_COND_IF([OS_MACOSX], [LDFLAGS="-Xlinker -rpath ${JAVA_HOME}/jre/lib/server $LDFLAGS"], [])
m4trace:configure.ac:121: -1- m4_pattern_allow([^CPP$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^CPP$])
m4trace:configure.ac:121: -1- AC_PROG_EGREP
m4trace:configure.ac:121: -1- m4_pattern_allow([^GREP$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^EGREP$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^STDC_HEADERS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_JNI_H$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL], [test "x$USE_JAVA" = x1])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_INTERNAL_JAVA_SUPPORT], [test "x$USE_JAVA" = x1])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_INTERNAL_JAVA_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_INTERNAL_JAVA_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_INTERNAL_JAVA_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_INTERNAL_JAVA_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^JAVA_JVM_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^JAVA_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^JAVA_JVM_LINK$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^JAVA_JVM_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^JAVA_JVM_INCLUDE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^JAVA$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^JAVAC$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^JAR$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_JAVA_6], [test "x${JAVA_VERSION_MINOR}" != "x6"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_JAVA_6_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_JAVA_6_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_JAVA_6_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_JAVA_6_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_JAVA_7], [test "x${JAVA_VERSION_MINOR}" != "x7"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_JAVA_7_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_JAVA_7_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_JAVA_7_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_JAVA_7_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_JAVA_8], [test "x${JAVA_VERSION_MINOR}" != "x8"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_JAVA_8_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_JAVA_8_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_JAVA_8_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_JAVA_8_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^JAVA_VERSION_MAJOR$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^JAVA_VERSION_MINOR$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^JAVA_VERSION_PATCH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^JAVA_VERSION_RELEASE$])
m4trace:configure.ac:121: -1- ROSE_CONFIGURE_SECTION([Checking GNU Fortran])
m4trace:configure.ac:121: -1- AX_WITH_PROG([GFORTRAN_PATH], [gfortran], [])
m4trace:configure.ac:121: -1- m4_pattern_allow([^GFORTRAN_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^GFORTRAN_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^GFORTRAN_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USE_GFORTRAN_IN_ROSE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USE_GFORTRAN_IN_ROSE$])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_X10([])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_X10], [false])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_X10_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_X10_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_X10_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_X10_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_X10_BIN], [false])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_X10_BIN_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_X10_BIN_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_X10_BIN_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_X10_BIN_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_X10_LIB], [false])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_X10_LIB_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_X10_LIB_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_X10_LIB_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_X10_LIB_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^X10_INSTALL_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^X10_BIN_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^X10_LIBRARY_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^X10_VERSION$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^X10_INSTALL_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^X10_BIN_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^X10_LIBRARY_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^X10_VERSION$])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_LANGUAGE_CONFIG_OPTIONS
m4trace:configure.ac:121: -1- ROSE_CONFIGURE_SECTION([Checking analyzable languages])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_LANGUAGE_CONFIG_OPTIONS_DEPRECATED
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_BINARY_ANALYSIS_SUPPORT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_C_LANGUAGE_SUPPORT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_CXX_LANGUAGE_SUPPORT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_CUDA_LANGUAGE_SUPPORT$])
m4trace:configure.ac:121: -1- GENERATE_CUDA_SPECIFIC_HEADERS
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_JAVA_LANGUAGE_SUPPORT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_PHP_LANGUAGE_SUPPORT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT$])
m4trace:configure.ac:121: -1- GENERATE_OPENCL_SPECIFIC_HEADERS
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_C_LANGUAGE_SUPPORT], [test "x$support_c_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_C_LANGUAGE_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_C_LANGUAGE_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_C_LANGUAGE_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_C_LANGUAGE_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_CXX_LANGUAGE_SUPPORT], [test "x$support_cxx_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_CXX_LANGUAGE_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_CXX_LANGUAGE_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_CXX_LANGUAGE_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_CXX_LANGUAGE_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT], [test "x$support_fortran_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_JAVA_LANGUAGE_SUPPORT], [test "x$support_java_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_X10_LANGUAGE_SUPPORT], [false])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_X10_LANGUAGE_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_X10_LANGUAGE_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_X10_LANGUAGE_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_X10_LANGUAGE_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_PHP_LANGUAGE_SUPPORT], [test "x$support_php_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_PHP_LANGUAGE_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_PHP_LANGUAGE_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_PHP_LANGUAGE_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_PHP_LANGUAGE_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT], [test "x$support_python_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_BINARY_ANALYSIS_SUPPORT], [test "x$support_binaries_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_CUDA_LANGUAGE_SUPPORT], [test "x$support_cuda_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT], [test "x$support_opencl_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_CPP_LANGUAGE_SUPPORT], [test "$support_cpp_frontend" = yes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_CPP_LANGUAGE_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_CPP_LANGUAGE_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_CPP_LANGUAGE_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_CPP_LANGUAGE_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_CPP_LANGUAGE_SUPPORT$])
m4trace:configure.ac:121: -1- ROSE_CONFIGURE_SECTION([])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([HAS_LIBRARY_CURL], [test "x$HAVE_CURL" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAS_LIBRARY_CURL_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAS_LIBRARY_CURL_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([HAS_LIBRARY_CURL_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([HAS_LIBRARY_CURL_FALSE])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_UPC
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_UPC], [test "x$enableval" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_UPC_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_UPC_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_UPC_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_UPC_FALSE])
m4trace:configure.ac:121: -1- AM_PROG_UPC
m4trace:configure.ac:121: -1- m4_pattern_allow([^UPC$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^UPCFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^UPC$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ac_ct_UPC$])
m4trace:configure.ac:121: -1- _AM_IF_OPTION([no-dependencies], [], [_AM_DEPENDENCIES([UPC])])
m4trace:configure.ac:121: -2- _AM_MANGLE_OPTION([no-dependencies])
m4trace:configure.ac:121: -1- _AM_DEPENDENCIES([UPC])
m4trace:configure.ac:121: -1- m4_pattern_allow([^UPCDEPMODE$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([am__fastdepUPC], [
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_UPC_dependencies_compiler_type" = gcc3])
m4trace:configure.ac:121: -1- m4_pattern_allow([^am__fastdepUPC_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^am__fastdepUPC_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([am__fastdepUPC_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([am__fastdepUPC_FALSE])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_COMPASS2
m4trace:configure.ac:121: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/support-compass2.m4:25: ROSE_SUPPORT_COMPASS2 is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- AC_DEFUN([AX_PTHREAD], [])
m4trace:configure.ac:121: -1- AX_LIB_XERCES([3.1.1])
m4trace:configure.ac:121: -1- AX_PTHREAD
m4trace:configure.ac:121: -1- m4_pattern_allow([^CXX$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^CXXFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^CXX$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ac_ct_CXX$])
m4trace:configure.ac:121: -1- _AM_DEPENDENCIES([CXX])
m4trace:configure.ac:121: -1- m4_pattern_allow([^CXXDEPMODE$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([am__fastdepCXX], [
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_CXX_dependencies_compiler_type" = gcc3])
m4trace:configure.ac:121: -1- m4_pattern_allow([^am__fastdepCXX_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^am__fastdepCXX_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([am__fastdepCXX_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([am__fastdepCXX_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^XERCES_CPPFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^XERCES_LDFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^XERCES_LIBS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^XERCES_VERSION$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_COMPASS2], [test "x$HAVE_XERCES" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_COMPASS2_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_COMPASS2_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_COMPASS2_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_COMPASS2_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ABS_COMPASS2_XML_SRCDIR$])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_GMP
m4trace:configure.ac:121: -1- ROSE_ARG_WITH([gmp], [for  (GMP)], [use the GNU Multiple Precision Arithmetic Library (GMP)], [
  ])
m4trace:configure.ac:121: -1- ROSE_REAL_ARG_WITH([gmp], [for  (GMP)], [use the GNU Multiple Precision Arithmetic Library (GMP)], [
  ], [ROSE_WITH_GMP])
m4trace:configure.ac:121: -1- ROSE_ARG_WITH([gmp-include], [if the  GNU Multiple Precision Arithmetic Library (GMP) include directory was specified], [use this GNU Multiple Precision Arithmetic Library (GMP) include directory], [
  ])
m4trace:configure.ac:121: -1- ROSE_REAL_ARG_WITH([gmp-include], [if the  GNU Multiple Precision Arithmetic Library (GMP) include directory was specified], [use this GNU Multiple Precision Arithmetic Library (GMP) include directory], [
  ], [ROSE_WITH_GMP_INCLUDE])
m4trace:configure.ac:121: -1- ROSE_ARG_WITH([gmp-lib], [if the GNU Multiple Precision Arithmetic Library (GMP) library directory was specified], [use this GNU Multiple Precision Arithmetic Library (GMP) library directory], [
  ])
m4trace:configure.ac:121: -1- ROSE_REAL_ARG_WITH([gmp-lib], [if the GNU Multiple Precision Arithmetic Library (GMP) library directory was specified], [use this GNU Multiple Precision Arithmetic Library (GMP) library directory], [
  ], [ROSE_WITH_GMP_LIB])
m4trace:configure.ac:121: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-gmp.m4:19: ROSE_SUPPORT_GMP is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- ROSE_MSG_ERROR([gmp.h is missing, can't compile with GMP])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_GMP], [test "x$GMP_INCLUDE_PATH" != "x" && test "x$GMP_LIBRARY_PATH" != "x"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_GMP_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_GMP_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_GMP_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_GMP_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_GMP_INCLUDE], [test "x$GMP_INCLUDE_PATH" != "x"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_GMP_INCLUDE_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_GMP_INCLUDE_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_GMP_INCLUDE_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_GMP_INCLUDE_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^GMP_INSTALL_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^GMP_INCLUDE_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^GMP_LIBRARY_PATH$])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_ISL
m4trace:configure.ac:121: -1- ROSE_ARG_WITH([isl], [for  (ISL)], [use the Integer Set Library (ISL)], [
  ])
m4trace:configure.ac:121: -1- ROSE_REAL_ARG_WITH([isl], [for  (ISL)], [use the Integer Set Library (ISL)], [
  ], [ROSE_WITH_ISL])
m4trace:configure.ac:121: -1- ROSE_ARG_WITH([isl-include], [if the Integer Set Library (ISL) include directory was specified], [use this Integer Set Library (ISL) include directory], [
  ])
m4trace:configure.ac:121: -1- ROSE_REAL_ARG_WITH([isl-include], [if the Integer Set Library (ISL) include directory was specified], [use this Integer Set Library (ISL) include directory], [
  ], [ROSE_WITH_ISL_INCLUDE])
m4trace:configure.ac:121: -1- ROSE_ARG_WITH([isl-lib], [if the Integer Set Library (ISL) library directory was specified], [use this Integer Set Library (ISL) library directory], [
  ])
m4trace:configure.ac:121: -1- ROSE_REAL_ARG_WITH([isl-lib], [if the Integer Set Library (ISL) library directory was specified], [use this Integer Set Library (ISL) library directory], [
  ], [ROSE_WITH_ISL_LIB])
m4trace:configure.ac:121: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-isl.m4:19: ROSE_SUPPORT_ISL is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- ROSE_MSG_ERROR([set.h is missing, can't compile with ISL])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_ISL], [test "x$ISL_INCLUDE_PATH" != "x" && test "x$ISL_LIBRARY_PATH" != "x"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_ISL_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_ISL_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_ISL_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_ISL_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_ISL_INCLUDE], [test "x$ISL_INCLUDE_PATH" != "x"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_ISL_INCLUDE_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_ISL_INCLUDE_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_ISL_INCLUDE_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_ISL_INCLUDE_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ISL_INSTALL_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ISL_INCLUDE_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ISL_LIBRARY_PATH$])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_MPI
m4trace:configure.ac:121: -1- ROSE_CONFIGURE_SECTION([Checking message passing interface (MPI)])
m4trace:configure.ac:121: -1- ROSE_ARG_WITH([mpi], [for the Message Passing Interface (MPI)], [use the Message Passing Interface (MPI)
    Note: `mpicc` will be used to determine the MPI include and library flags], [
  ])
m4trace:configure.ac:121: -1- ROSE_REAL_ARG_WITH([mpi], [for the Message Passing Interface (MPI)], [use the Message Passing Interface (MPI)
    Note: `mpicc` will be used to determine the MPI include and library flags], [
  ], [ROSE_WITH_MPI])
m4trace:configure.ac:121: -1- LX_QUERY_MPI_COMPILER([MPICC], [mpicc mpiicc mpixlc mpipgcc], [C], [$MPI_BIN_PATH])
m4trace:configure.ac:121: -1- m4_pattern_allow([^MPICC$])
m4trace:configure.ac:121: -1- _m4_warn([obsolete], [The macro `AC_TRY_LINK' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:2698: AC_TRY_LINK is expanded from...
config/support-mpi.m4:96: LX_QUERY_MPI_COMPILER is expanded from...
config/support-mpi.m4:19: ROSE_SUPPORT_MPI is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_MPI$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^MPICC$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_MPI_CFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_MPI_CLDFLAGS$])
m4trace:configure.ac:121: -1- LX_QUERY_MPI_COMPILER([MPICXX], [mpicxx mpiCC mpic++ mpig++ mpiicpc mpipgCC mpixlC], [CXX], [$MPI_BIN_PATH])
m4trace:configure.ac:121: -1- m4_pattern_allow([^MPICXX$])
m4trace:configure.ac:121: -1- _m4_warn([obsolete], [The macro `AC_TRY_LINK' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:2698: AC_TRY_LINK is expanded from...
config/support-mpi.m4:96: LX_QUERY_MPI_COMPILER is expanded from...
config/support-mpi.m4:19: ROSE_SUPPORT_MPI is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_MPI$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^MPICXX$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_MPI_CXXFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_MPI_CXXLDFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^F77$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^FFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^F77$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ac_ct_F77$])
m4trace:configure.ac:121: -1- LX_QUERY_MPI_COMPILER([MPIF77], [mpif77 mpiifort mpixlf77 mpixlf77_r], [F77], [$MPI_BIN_PATH])
m4trace:configure.ac:121: -1- m4_pattern_allow([^MPIF77$])
m4trace:configure.ac:121: -1- _m4_warn([obsolete], [The macro `AC_TRY_LINK' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:2698: AC_TRY_LINK is expanded from...
config/support-mpi.m4:96: LX_QUERY_MPI_COMPILER is expanded from...
config/support-mpi.m4:19: ROSE_SUPPORT_MPI is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_MPI$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^MPIF77$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_MPI_F77FLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_MPI_F77LDFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^FC$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^FCFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^FC$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ac_ct_FC$])
m4trace:configure.ac:121: -1- LX_QUERY_MPI_COMPILER([MPIFC], [$mpi_default_fc $mpi_intel_fc $mpi_xl_fc $mpi_pg_fc], [F], [$MPI_BIN_PATH])
m4trace:configure.ac:121: -1- m4_pattern_allow([^MPIFC$])
m4trace:configure.ac:121: -1- _m4_warn([obsolete], [The macro `AC_TRY_LINK' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:2698: AC_TRY_LINK is expanded from...
config/support-mpi.m4:96: LX_QUERY_MPI_COMPILER is expanded from...
config/support-mpi.m4:19: ROSE_SUPPORT_MPI is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_MPI$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^MPIFC$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_MPI_FFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_MPI_FLDFLAGS$])
m4trace:configure.ac:121: -1- ROSE_MSG_ERROR([cannot detect MPI binaries (C, CXX, F77, F)])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_MPI_C], [test "x$MPICC" != "xnot-found" || test "x$MPICXX" != "xnot-found"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_MPI_C_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_MPI_C_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_MPI_C_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_MPI_C_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_MPI_FORTRAN], [test "x$MPIFC" != "xnot-found" || test "x$MPIF77" != "xnot-found"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_MPI_FORTRAN_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_MPI_FORTRAN_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_MPI_FORTRAN_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_MPI_FORTRAN_FALSE])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_SPOT
m4trace:configure.ac:121: -1- ROSE_ARG_WITH([spot], [for  (SPOT)], [use the SPOT LTL model checking library], [
  ])
m4trace:configure.ac:121: -1- ROSE_REAL_ARG_WITH([spot], [for  (SPOT)], [use the SPOT LTL model checking library], [
  ], [ROSE_WITH_SPOT])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_SPOT$])
m4trace:configure.ac:121: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-spot.m4:13: ROSE_SUPPORT_SPOT is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- ROSE_MSG_ERROR([bdd.h is missing, can't compile with SPOT])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_SPOT], [test "x$SPOT_INCLUDE_PATH" != "x" && test "x$SPOT_LIBRARY_PATH" != "x"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_SPOT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_SPOT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_SPOT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_SPOT_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^SPOT_INSTALL_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^SPOT_INCLUDE_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^SPOT_LIBRARY_PATH$])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_COBOL
m4trace:configure.ac:121: -1- ROSE_CONFIGURE_SECTION([Checking GnuCOBOL parse-tree library])
m4trace:configure.ac:121: -1- ROSE_ARG_WITH([cobpt], [for an installation of the GnuCobol parse-tree library], [support the GnuCobol cobpt library], [
  ])
m4trace:configure.ac:121: -1- ROSE_REAL_ARG_WITH([cobpt], [for an installation of the GnuCobol parse-tree library], [support the GnuCobol cobpt library], [
  ], [ROSE_WITH_COBPT])
m4trace:configure.ac:121: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-cobol.m4:29: ROSE_SUPPORT_COBOL is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- ROSE_MSG_ERROR([lib directory is missing, can't use this GnuCOBOL parse-tree installation])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_GNU_COBOL_PT_LIB], [test "x$COBPT_INSTALL_PATH" != "x" && test "x$COBPT_LIBRARY_PATH" != "x"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_GNU_COBOL_PT_LIB_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_GNU_COBOL_PT_LIB_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_GNU_COBOL_PT_LIB_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_GNU_COBOL_PT_LIB_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^COBPT_INSTALL_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^COBPT_LIBRARY_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^COBPT_INSTALL_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^COBPT_LIBRARY_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USE_ROSE_GNU_COBOL_PT_SUPPORT$])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_OCTAVE
m4trace:configure.ac:121: -1- ROSE_CONFIGURE_SECTION([Checking modified GNU Octave parser])
m4trace:configure.ac:121: -1- ROSE_ARG_WITH([octave-parser], [for an installation of the modified GNU Octave parser], [support for the GNU Octave parser], [
  ])
m4trace:configure.ac:121: -1- ROSE_REAL_ARG_WITH([octave-parser], [for an installation of the modified GNU Octave parser], [support for the GNU Octave parser], [
  ], [ROSE_WITH_OCTAVE_PARSER])
m4trace:configure.ac:121: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-octave.m4:27: ROSE_SUPPORT_OCTAVE is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- ROSE_MSG_ERROR([octave install file is missing, can't use this GNU Octave parser installation])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_GNU_OCTAVE_PARSER], [test "x$OCTAVE_PARSER_INSTALL_TARFILE" != "x"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_GNU_OCTAVE_PARSER_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_GNU_OCTAVE_PARSER_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_GNU_OCTAVE_PARSER_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_GNU_OCTAVE_PARSER_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OCTAVE_PARSER_INSTALL_TARFILE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^OCTAVE_PARSER_INSTALL_TARFILE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USE_ROSE_GNU_OCTAVE_SUPPORT$])
m4trace:configure.ac:121: -1- ROSE_ARG_ENABLE([projects-directory], [if we should enable the ROSE/projects directory], [Toggle compilation and testing of the the ROSE/projects directory (disabled by default)], [no])
m4trace:configure.ac:121: -1- ROSE_REAL_ARG_ENABLE([projects-directory], [if we should enable the ROSE/projects directory], [Toggle compilation and testing of the the ROSE/projects directory (disabled by default)], [no], [ROSE_ENABLE_PROJECTS_DIRECTORY])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT], [test "x$ROSE_ENABLE_PROJECTS_DIRECTORY" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_TESTS_DIRECTORY_SUPPORT$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_TESTS_DIRECTORY_SUPPORT], [test "x$support_tests_directory" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT], [test "x$support_tutorial_directory" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_MEMORY_POOL_NO_REUSE], [test "x$enable_memory_pool_no_reuse" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_MEMORY_POOL_NO_REUSE_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_MEMORY_POOL_NO_REUSE_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_MEMORY_POOL_NO_REUSE_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_MEMORY_POOL_NO_REUSE_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_MEMORY_POOL_NO_REUSE$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_SMALLER_GENERATED_FILES], [test "x$enable_smaller_generated_files" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_SMALLER_GENERATED_FILES_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_SMALLER_GENERATED_FILES_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_SMALLER_GENERATED_FILES_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_SMALLER_GENERATED_FILES_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_SMALLER_GENERATED_FILES$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT], [test "x$enable_internalFrontendDevelopment" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_EDG
m4trace:configure.ac:121: -1- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
../../lib/autoconf/general.m4:1473: AC_ARG_ENABLE is expanded from...
config/support-edg.m4:1: ROSE_SUPPORT_EDG is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_VERSION_4_12$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_VERSION_5_0$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_VERSION_6_0$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_VERSION_6_1$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EDG_MAJOR_VERSION_NUMBER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EDG_MINOR_VERSION_NUMBER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EDG_MAJOR_VERSION_NUMBER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EDG_MINOR_VERSION_NUMBER$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_EDG_VERSION_4_12], [test "x$enable_edg_version412" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_VERSION_4_12_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_VERSION_4_12_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_EDG_VERSION_4_12_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_EDG_VERSION_4_12_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_EDG_VERSION_5_0], [test "x$enable_edg_version50" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_VERSION_5_0_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_VERSION_5_0_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_EDG_VERSION_5_0_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_EDG_VERSION_5_0_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_EDG_VERSION_6_0], [test "x$enable_edg_version60" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_VERSION_6_0_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_VERSION_6_0_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_EDG_VERSION_6_0_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_EDG_VERSION_6_0_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_EDG_VERSION_6_1], [test "x$enable_edg_version61" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_VERSION_6_1_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_VERSION_6_1_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_EDG_VERSION_6_1_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_EDG_VERSION_6_1_FALSE])
m4trace:configure.ac:121: -1- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
../../lib/autoconf/general.m4:1473: AC_ARG_ENABLE is expanded from...
config/support-edg.m4:1: ROSE_SUPPORT_EDG is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_HAS_EDG_SOURCE], [test "$has_edg_source" = "yes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_HAS_EDG_SOURCE_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_HAS_EDG_SOURCE_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_HAS_EDG_SOURCE_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_HAS_EDG_SOURCE_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^MD5$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^MD5$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([BINARY_EDG_TARBALL_ENABLED], [test "$binary_edg_tarball_enabled" = "yes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BINARY_EDG_TARBALL_ENABLED_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BINARY_EDG_TARBALL_ENABLED_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([BINARY_EDG_TARBALL_ENABLED_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([BINARY_EDG_TARBALL_ENABLED_FALSE])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_CLANG
m4trace:configure.ac:121: -1- ROSE_ARG_ENABLE([clang-frontend], [if the Clang frontend should be enabled], [whether or not we will use Clang as a frontend for C/C++-like languages], [
])
m4trace:configure.ac:121: -1- ROSE_REAL_ARG_ENABLE([clang-frontend], [if the Clang frontend should be enabled], [whether or not we will use Clang as a frontend for C/C++-like languages], [
], [ROSE_ENABLE_CLANG_FRONTEND])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_CLANG_FRONTEND], [test "x$enable_clang_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_CLANG_FRONTEND_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_CLANG_FRONTEND_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_CLANG_FRONTEND_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_CLANG_FRONTEND_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^LLVM_CONFIG$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^CLANG_CXXFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^CLANG_LDFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^CLANG_LIBDIR$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_CLANG_FRONTEND$])
m4trace:configure.ac:121: -1- ROSE_MSG_ERROR([requested Clang frontend, but llvm-config was not found])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_CLANG_FRONTEND], [test "x$CONFIG_HAS_ROSE_ENABLE_CLANG_FRONTEND" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_CLANG_FRONTEND_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_CLANG_FRONTEND_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_CLANG_FRONTEND_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_CLANG_FRONTEND_FALSE])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_FLANG
m4trace:configure.ac:121: -1- ROSE_CONFIGURE_SECTION([Checking FLANG library])
m4trace:configure.ac:121: -1- ROSE_ARG_WITH([flang], [for an installation of the Flang compiler libraries], [specify the path to the Flang installation], [
  ])
m4trace:configure.ac:121: -1- ROSE_REAL_ARG_WITH([flang], [for an installation of the Flang compiler libraries], [specify the path to the Flang installation], [
  ], [ROSE_WITH_FLANG])
m4trace:configure.ac:121: -1- ROSE_ARG_WITH([flang-src], [for an installation of the Flang compiler source files], [specify the path to the Flang compiler source files], [
  ])
m4trace:configure.ac:121: -1- ROSE_REAL_ARG_WITH([flang-src], [for an installation of the Flang compiler source files], [specify the path to the Flang compiler source files], [
  ], [ROSE_WITH_FLANG_SRC])
m4trace:configure.ac:121: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-flang.m4:35: ROSE_SUPPORT_FLANG is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- ROSE_MSG_ERROR([flang_install_path/lib directory is missing, can't use this FLANG installation])
m4trace:configure.ac:121: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-flang.m4:35: ROSE_SUPPORT_FLANG is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- ROSE_MSG_ERROR([flang_source_path/lib/parser directory is missing, can't use this FLANG installation])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_FLANG], [test "x$FLANG_INSTALL_PATH" != "x"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_FLANG_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_FLANG_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_FLANG_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_FLANG_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_WITH_FLANG_SRC], [test "x$FLANG_SOURCE_PATH" != "x"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_FLANG_SRC_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WITH_FLANG_SRC_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_FLANG_SRC_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_FLANG_SRC_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION], [test "x$FLANG_INSTALL_PATH" != "x" && test "x$FLANG_SOURCE_PATH" != "x"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^FLANG_INSTALL_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^FLANG_SOURCE_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^FLANG_INSTALL_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^FLANG_SOURCE_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_SUPPORT_GNU_EXTENSIONS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_MICROSOFT_EXTENSIONS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_SUPPORT_MICROSOFT_EXTENSIONS$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_MICROSOFT_EXTENSIONS], [test "x$enable_microsoft_extensions" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_MICROSOFT_EXTENSIONS_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_MICROSOFT_EXTENSIONS_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_MICROSOFT_EXTENSIONS_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_MICROSOFT_EXTENSIONS_FALSE])
m4trace:configure.ac:121: -1- AX_COMPILER_VENDOR
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_QUAD_FLOAT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_QUAD_FLOAT$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_EDG_QUAD_FLOAT], [ test $rose_use_edg_quad_float == yes ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_QUAD_FLOAT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_EDG_QUAD_FLOAT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_EDG_QUAD_FLOAT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_EDG_QUAD_FLOAT_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_DEBUG_NEW_EDG_ROSE_CONNECTION], [test "x$enable_debug_output_for_new_edg_interface" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_NEW_EDG_ROSE_CONNECTION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_NEW_EDG_ROSE_CONNECTION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_DEBUG_NEW_EDG_ROSE_CONNECTION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_DEBUG_NEW_EDG_ROSE_CONNECTION_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_NEW_EDG_ROSE_CONNECTION$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_EXPERIMENTAL_OFP_ROSE_CONNECTION], [test "x$enable_experimental_fortran_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_OFP_ROSE_CONNECTION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_OFP_ROSE_CONNECTION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_OFP_ROSE_CONNECTION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_OFP_ROSE_CONNECTION_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_OFP_ROSE_CONNECTION$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_DEBUG_EXPERIMENTAL_OFP_ROSE_CONNECTION], [test "x$enable_debug_output_for_experimental_fortran_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_OFP_ROSE_CONNECTION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_OFP_ROSE_CONNECTION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_DEBUG_EXPERIMENTAL_OFP_ROSE_CONNECTION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_DEBUG_EXPERIMENTAL_OFP_ROSE_CONNECTION_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_OFP_ROSE_CONNECTION$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION], [test "x$enable_experimental_flang_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_EXPERIMENTAL_CSHARP_ROSE_CONNECTION], [test "x$enable_experimental_csharp_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_CSHARP_ROSE_CONNECTION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_CSHARP_ROSE_CONNECTION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_CSHARP_ROSE_CONNECTION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_CSHARP_ROSE_CONNECTION_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_CSHARP_ROSE_CONNECTION$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_CSHARP_ROSE_CONNECTION_MONO_HOME$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_CSHARP_ROSE_CONNECTION_ROSLYN_HOME$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^mono_home$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^rosyln_home$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_DEBUG_EXPERIMENTAL_CSHARP_ROSE_CONNECTION], [test "x$enable_debug_output_for_experimental_csharp_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_CSHARP_ROSE_CONNECTION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_CSHARP_ROSE_CONNECTION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_DEBUG_EXPERIMENTAL_CSHARP_ROSE_CONNECTION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_DEBUG_EXPERIMENTAL_CSHARP_ROSE_CONNECTION_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_CSHARP_ROSE_CONNECTION$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION], [test "x$enable_experimental_ada_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_DEBUG_EXPERIMENTAL_ADA_ROSE_CONNECTION], [test "x$enable_debug_output_for_experimental_ada_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_ADA_ROSE_CONNECTION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_ADA_ROSE_CONNECTION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_DEBUG_EXPERIMENTAL_ADA_ROSE_CONNECTION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_DEBUG_EXPERIMENTAL_ADA_ROSE_CONNECTION_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_ADA_ROSE_CONNECTION$])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_GNAT
m4trace:configure.ac:121: -1- m4_pattern_allow([^GNAT_INCLUDES$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USE_ROSE_GNAT_SUPPORT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^gnat_path$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_GNAT], [test ! "$with_gnat" = no])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_GNAT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_GNAT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_GNAT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_GNAT_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION_GNAT_HOME$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^gnat_home$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION], [test "x$enable_experimental_jovial_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_DEBUG_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION], [test "x$enable_debug_output_for_experimental_jovial_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_DEBUG_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_DEBUG_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_JOVIAL_ROSE_CONNECTION$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_EXPERIMENTAL_COBOL_ROSE_CONNECTION], [test "x$enable_experimental_cobol_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_COBOL_ROSE_CONNECTION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_COBOL_ROSE_CONNECTION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_COBOL_ROSE_CONNECTION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_COBOL_ROSE_CONNECTION_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_COBOL_ROSE_CONNECTION$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_DEBUG_EXPERIMENTAL_COBOL_ROSE_CONNECTION], [test "x$enable_debug_output_for_experimental_cobol_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_COBOL_ROSE_CONNECTION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_COBOL_ROSE_CONNECTION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_DEBUG_EXPERIMENTAL_COBOL_ROSE_CONNECTION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_DEBUG_EXPERIMENTAL_COBOL_ROSE_CONNECTION_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_COBOL_ROSE_CONNECTION$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_EXPERIMENTAL_MATLAB_ROSE_CONNECTION], [test "x$enable_experimental_matlab_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_MATLAB_ROSE_CONNECTION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_MATLAB_ROSE_CONNECTION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_MATLAB_ROSE_CONNECTION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_EXPERIMENTAL_MATLAB_ROSE_CONNECTION_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_EXPERIMENTAL_MATLAB_ROSE_CONNECTION$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_DEBUG_EXPERIMENTAL_MATLAB_ROSE_CONNECTION], [test "x$enable_debug_output_for_experimental_matlab_frontend" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_MATLAB_ROSE_CONNECTION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_MATLAB_ROSE_CONNECTION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_DEBUG_EXPERIMENTAL_MATLAB_ROSE_CONNECTION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_DEBUG_EXPERIMENTAL_MATLAB_ROSE_CONNECTION_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_DEBUG_EXPERIMENTAL_MATLAB_ROSE_CONNECTION$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY], [test "x$enable_use_new_graph_node_backward_compatability" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([DOT_TO_GML_TRANSLATOR], [test "$enable_dot2gml_translator" = yes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^DOT_TO_GML_TRANSLATOR_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^DOT_TO_GML_TRANSLATOR_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([DOT_TO_GML_TRANSLATOR_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([DOT_TO_GML_TRANSLATOR_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^host$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^host_cpu$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^host_vendor$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^host_os$])
m4trace:configure.ac:121: -1- AX_COMPILER_VENDOR
m4trace:configure.ac:121: -1- ROSE_FLAG_C_OPTIONS
m4trace:configure.ac:121: -1- m4_pattern_allow([^C_DEBUG$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^C_OPTIMIZE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^C_WARNINGS$])
m4trace:configure.ac:121: -1- ROSE_FLAG_CXX_OPTIONS
m4trace:configure.ac:121: -1- ROSE_COMPILER_FEATURES([c++], [$CXX $CPPFLAGS $CXXFLAGS], [HOST_CXX_])
m4trace:configure.ac:121: -1- m4_pattern_allow([^CXX_DEBUG$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^CXX_OPTIMIZE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^CXX_WARNINGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^CXX_TEMPLATE_REPOSITORY_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^CXX_TEMPLATE_OBJECTS$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT], [test "x$enable_advanced_warnings" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_ASSERTION_BEHAVIOR$])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_SANITIZER
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_SANITIZER], [test "$enable_sanitizer" = yes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_SANITIZER_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_SANITIZER_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_SANITIZER_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_SANITIZER_FALSE])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_LCOV
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_LCOV], [test "$enable_lcov" = yes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_LCOV_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_LCOV_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_LCOV_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_LCOV_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_HOME$])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_PYTHON
m4trace:configure.ac:121: -1- ROSE_CONFIGURE_SECTION([Checking Python])
m4trace:configure.ac:121: -1- AX_PYTHON_DEVEL([2.6.6], [4.0.0])
m4trace:configure.ac:121: -1- m4_pattern_allow([^PYTHON$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^PYTHON$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^PYTHON$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^PYTHON_VERSION$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^PYTHON_ROOT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^PYTHON_VERSION_MM$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_PYTHON$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^PYTHON_SITE_PKG$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^PYTHON_CPPFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^PYTHON_LDFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^PYTHON_EXTRA_LIBS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^PYTHON_EXTRA_LDFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USE_ROSE_PYTHON_SUPPORT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_PYTHON_INTERPRETER_NAME_WITH_PATH$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_PYTHON], [test "$ROSE_USE_PYTHON" = yes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_PYTHON_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_PYTHON_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_PYTHON_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_PYTHON_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_PYTHON_DEV], [test "$ROSE_USE_PYTHON_DEV" = yes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_PYTHON_DEV_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_PYTHON_DEV_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_PYTHON_DEV_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_PYTHON_DEV_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_APPROVED_PYTHON_VERSION], [true])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_APPROVED_PYTHON_VERSION_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_APPROVED_PYTHON_VERSION_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_APPROVED_PYTHON_VERSION_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_APPROVED_PYTHON_VERSION_FALSE])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_BOOST
m4trace:configure.ac:121: -1- ROSE_CONFIGURE_SECTION([Checking Boost])
m4trace:configure.ac:121: -1- ROSE_ARG_ENABLE([boost-version-check], [if we should validate your Boost version], [validate version of Boost C++ libraries (default: yes)], [yes
  ])
m4trace:configure.ac:121: -1- ROSE_REAL_ARG_ENABLE([boost-version-check], [if we should validate your Boost version], [validate version of Boost C++ libraries (default: yes)], [yes
  ], [ROSE_ENABLE_BOOST_VERSION_CHECK])
m4trace:configure.ac:121: -1- AX_BOOST_BASE([1.51.0], [], [echo "Boost 1.51.0 - 1.61.0 except 1.54 is required for ROSE" 1>&2; exit 1])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_CPPFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_LDFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_BOOST$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BOOST_PREINCLUDE_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BOOST_NORMAL_INCLUDE_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ac_boost_path$])
m4trace:configure.ac:121: -1- ROSE_MSG_ERROR([Unable to find $ac_boost_path/include/boost/version.hpp . Please specify the right boost installation path with --with-boost=/path/to/boost])
m4trace:configure.ac:121: -1- ROSE_MSG_ERROR([Unable to compute the version of your Boost C++ libraries from '$ac_boost_path'/include/boost/version.hpp . Please make sure the file exists or specify the right path with --with-boost])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_35], [test "$rose_boost_version" = "103500" -o "$_version" = "1.35"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_35_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_35_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_35_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_35_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_36], [test "$rose_boost_version" = "103600" -o "$_version" = "1.36"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_36_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_36_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_36_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_36_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_37], [test "$rose_boost_version" = "103700" -o "$_version" = "1.37"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_37_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_37_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_37_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_37_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_38], [test "$rose_boost_version" = "103800" -o "$_version" = "1.38"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_38_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_38_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_38_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_38_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_39], [test "$rose_boost_version" = "103900" -o "$_version" = "1.39"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_39_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_39_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_39_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_39_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_40], [test "$rose_boost_version" = "104000" -o "$_version" = "1.40"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_40_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_40_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_40_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_40_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_41], [test "$rose_boost_version" = "104100" -o "$_version" = "1.41"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_41_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_41_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_41_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_41_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_42], [test "$rose_boost_version" = "104200" -o "$_version" = "1.42"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_42_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_42_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_42_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_42_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_43], [test "$rose_boost_version" = "104300" -o "$_version" = "1.43"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_43_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_43_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_43_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_43_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_44], [test "$rose_boost_version" = "104400" -o "$_version" = "1.44"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_44_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_44_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_44_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_44_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_45], [test "$rose_boost_version" = "104500" -o "$_version" = "1.45"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_45_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_45_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_45_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_45_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_46], [test "$rose_boost_version" = "104600" -o "$_version" = "1.46"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_46_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_46_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_46_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_46_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_46], [test "$rose_boost_version" = "104601" -o "$_version" = "1.46"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_46_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_46_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_46_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_46_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_47], [test "$rose_boost_version" = "104700" -o "$_version" = "1.47"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_47_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_47_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_47_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_47_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_48], [test "$rose_boost_version" = "104800" -o "$_version" = "1.48"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_48_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_48_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_48_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_48_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_49], [test "$rose_boost_version" = "104900" -o "$_version" = "1.49"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_49_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_49_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_49_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_49_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_50], [test "$rose_boost_version" = "105000" -o "$_version" = "1.50"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_50_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_50_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_50_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_50_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_51], [test "$rose_boost_version" = "105100" -o "$_version" = "1.51"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_51_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_51_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_51_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_51_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_52], [test "$rose_boost_version" = "105200" -o "$_version" = "1.52"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_52_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_52_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_52_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_52_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_53], [test "$rose_boost_version" = "105300" -o "$_version" = "1.53"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_53_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_53_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_53_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_53_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_54], [test "$rose_boost_version" = "105400" -o "$_version" = "1.54"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_54_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_54_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_54_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_54_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_55], [test "$rose_boost_version" = "105500" -o "$_version" = "1.55"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_55_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_55_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_55_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_55_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_56], [test "$rose_boost_version" = "105600" -o "$_version" = "1.56"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_56_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_56_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_56_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_56_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_57], [test "$rose_boost_version" = "105700" -o "$_version" = "1.57"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_57_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_57_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_57_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_57_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_58], [test "$rose_boost_version" = "105800" -o "$_version" = "1.58"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_58_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_58_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_58_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_58_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_59], [test "$rose_boost_version" = "105900" -o "$_version" = "1.59"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_59_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_59_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_59_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_59_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_60], [test "$rose_boost_version" = "106000" -o "$_version" = "1.60"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_60_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_60_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_60_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_60_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_61], [test "$rose_boost_version" = "106100" -o "$_version" = "1.61"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_61_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_61_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_61_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_61_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_62], [test "$rose_boost_version" = "106200" -o "$_version" = "1.62"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_62_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_62_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_62_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_62_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_63], [test "$rose_boost_version" = "106300" -o "$_version" = "1.63"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_63_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_63_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_63_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_63_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_64], [test "$rose_boost_version" = "106400" -o "$_version" = "1.64"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_64_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_64_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_64_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_64_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_65], [test "$rose_boost_version" = "106500" -o "$_version" = "1.65"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_65_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_65_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_65_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_65_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_66], [test "$rose_boost_version" = "106600" -o "$_version" = "1.66"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_66_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_66_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_66_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_66_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_67], [test "$rose_boost_version" = "106700" -o "$_version" = "1.67"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_67_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_67_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_67_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_67_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_68], [test "$rose_boost_version" = "106800" -o "$_version" = "1.68"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_68_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_68_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_68_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_68_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_1_69], [test "$rose_boost_version" = "106900" -o "$_version" = "1.69"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_69_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_1_69_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_69_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_1_69_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_35], [test $rose_boost_version -ge 103500])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_35_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_35_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_35_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_35_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_36], [test $rose_boost_version -ge 103600])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_36_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_36_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_36_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_36_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_37], [test $rose_boost_version -ge 103700])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_37_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_37_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_37_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_37_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_38], [test $rose_boost_version -ge 103800])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_38_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_38_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_38_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_38_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_39], [test $rose_boost_version -ge 103900])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_39_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_39_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_39_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_39_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_40], [test $rose_boost_version -ge 104000])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_40_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_40_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_40_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_40_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_41], [test $rose_boost_version -ge 104100])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_41_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_41_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_41_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_41_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_42], [test $rose_boost_version -ge 104200])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_42_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_42_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_42_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_42_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_43], [test $rose_boost_version -ge 104300])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_43_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_43_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_43_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_43_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_44], [test $rose_boost_version -ge 104400])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_44_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_44_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_44_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_44_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_45], [test $rose_boost_version -ge 104500])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_45_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_45_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_45_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_45_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_46], [test $rose_boost_version -ge 104600])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_46_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_46_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_46_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_46_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_46], [test $rose_boost_version -ge 104601])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_46_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_46_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_46_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_46_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_47], [test $rose_boost_version -ge 104700])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_47_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_47_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_47_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_47_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_48], [test $rose_boost_version -ge 104800])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_48_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_48_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_48_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_48_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_49], [test $rose_boost_version -ge 104900])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_49_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_49_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_49_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_49_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_50], [test $rose_boost_version -ge 105000])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_50_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_50_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_50_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_50_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_51], [test $rose_boost_version -ge 105100])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_51_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_51_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_51_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_51_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_52], [test $rose_boost_version -ge 105200])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_52_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_52_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_52_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_52_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_53], [test $rose_boost_version -ge 105300])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_53_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_53_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_53_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_53_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_54], [test $rose_boost_version -ge 105400])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_54_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_54_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_54_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_54_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_55], [test $rose_boost_version -ge 105500])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_55_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_55_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_55_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_55_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_56], [test $rose_boost_version -ge 105600])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_56_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_56_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_56_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_56_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_57], [test $rose_boost_version -ge 105700])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_57_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_57_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_57_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_57_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_58], [test $rose_boost_version -ge 105800])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_58_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_58_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_58_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_58_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_59], [test $rose_boost_version -ge 105900])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_59_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_59_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_59_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_59_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_60], [test $rose_boost_version -ge 106000])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_60_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_60_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_60_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_60_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_61], [test $rose_boost_version -ge 106100])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_61_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_61_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_61_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_61_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_62], [test $rose_boost_version -ge 106200])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_62_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_62_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_62_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_62_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_63], [test $rose_boost_version -ge 106300])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_63_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_63_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_63_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_63_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_64], [test $rose_boost_version -ge 106400])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_64_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_64_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_64_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_64_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_65], [test $rose_boost_version -ge 106500])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_65_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_65_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_65_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_65_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_66], [test $rose_boost_version -ge 106600])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_66_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_66_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_66_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_66_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_67], [test $rose_boost_version -ge 106700])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_67_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_67_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_67_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_67_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_68], [test $rose_boost_version -ge 106800])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_68_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_68_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_68_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_68_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_BOOST_VERSION_GE_1_69], [test $rose_boost_version -ge 106900])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_69_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_BOOST_VERSION_GE_1_69_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_69_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_BOOST_VERSION_GE_1_69_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BOOST_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_WAVE_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_BOOST_VERSION$])
m4trace:configure.ac:121: -1- AX_BOOST_SYSTEM
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_CPPFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_BOOST_SYSTEM$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_SYSTEM_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_SYSTEM_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_SYSTEM_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USE_ROSE_BOOST_WAVE_SUPPORT$])
m4trace:configure.ac:121: -1- AX_BOOST_THREAD
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_CPPFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_BOOST_THREAD$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_THREAD_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_THREAD_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_THREAD_LIB$])
m4trace:configure.ac:121: -1- AX_BOOST_DATE_TIME
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_BOOST_DATE_TIME$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_DATE_TIME_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_DATE_TIME_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_DATE_TIME_LIB$])
m4trace:configure.ac:121: -1- AX_BOOST_CHRONO
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_CPPFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_BOOST_CHRONO$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_CHRONO_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_CHRONO_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_CHRONO_LIB$])
m4trace:configure.ac:121: -1- AX_BOOST_RANDOM
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_CPPFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_BOOST_RANDOM$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_RANDOM_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_RANDOM_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_RANDOM_LIB$])
m4trace:configure.ac:121: -1- AX_BOOST_REGEX
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_BOOST_REGEX$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_REGEX_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_REGEX_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_REGEX_LIB$])
m4trace:configure.ac:121: -1- AX_BOOST_PROGRAM_OPTIONS
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_BOOST_PROGRAM_OPTIONS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_PROGRAM_OPTIONS_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_PROGRAM_OPTIONS_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_PROGRAM_OPTIONS_LIB$])
m4trace:configure.ac:121: -1- AX_BOOST_FILESYSTEM
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_BOOST_FILESYSTEM$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_FILESYSTEM_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_FILESYSTEM_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_FILESYSTEM_LIB$])
m4trace:configure.ac:121: -1- AX_BOOST_WAVE
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_BOOST_WAVE], [test "x$want_boost" = "xyes"  ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_BOOST_WAVE_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_BOOST_WAVE_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_BOOST_WAVE_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_BOOST_WAVE_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_BOOST_WAVE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_WAVE_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_WAVE_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BOOST_WAVE_LIB$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USE_ROSE_BOOST_WAVE_SUPPORT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USE_ROSE_BOOST_WAVE_SUPPORT$])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_BISON
m4trace:configure.ac:121: -1- ROSE_CONFIGURE_SECTION([Checking Bison])
m4trace:configure.ac:121: -1- AX_WITH_PROG([BISON], [bison])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BISON$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BISON$])
m4trace:configure.ac:121: -1- AX_PROG_BISON_VERSION([2.4.1], [AC_MSG_NOTICE([[Bison version >= 2.4.1 has been detected]])], [AC_MSG_ERROR([[Bison >= 2.4.1 required for building ROSE]])])
m4trace:configure.ac:121: -1- m4_pattern_allow([^SED$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BISON_VERSION$])
m4trace:configure.ac:121: -1- AX_COMPARE_VERSION([$bison_version], [ge], [$ax_bison_version], [
	    :
            AC_MSG_NOTICE([[Bison version >= 2.4.1 has been detected]])
        ], [
	    :
            AC_MSG_ERROR([[Bison >= 2.4.1 required for building ROSE]])
        ])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_GRAPHVIZ
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_GRAPHVIZ_DOT], [ test "x$DOT_AVAILABLE" = xyes  ])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_GRAPHVIZ_DOT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_GRAPHVIZ_DOT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_GRAPHVIZ_DOT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_GRAPHVIZ_DOT_FALSE])
m4trace:configure.ac:121: -1- AX_LIB_SQLITE3
m4trace:configure.ac:121: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/ax_lib_sqlite3.m4:36: AX_LIB_SQLITE3 is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- m4_pattern_allow([^SQLITE3_CFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^SQLITE3_LDFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^SQLITE3_VERSION$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_SQLITE3$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_SQLITE_DATABASE], [test "$SQLITE3_VERSION" != ""])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_SQLITE_DATABASE_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_SQLITE_DATABASE_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_SQLITE_DATABASE_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_SQLITE_DATABASE_FALSE])
m4trace:configure.ac:121: -1- AX_LIB_MYSQL
m4trace:configure.ac:121: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/ax_lib_mysql.m4:46: AX_LIB_MYSQL is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- m4_pattern_allow([^MYSQL_CONFIG$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_MYSQL$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^MYSQL_VERSION$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^MYSQL_INCLUDE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^MYSQL_CFLAGS$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^MYSQL_LDFLAGS$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_MYSQL], [test "$found_mysql" = yes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_MYSQL_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_MYSQL_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_MYSQL_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_MYSQL_FALSE])
m4trace:configure.ac:121: -1- CHOOSE_BACKEND_COMPILER
m4trace:configure.ac:121: -1- ROSE_CONFIGURE_SECTION([Checking ROSE backend])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_X10_BACKEND([])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_X10_COMPILER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_X10_COMPILER_NAME_WITH_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_CXX_COMPILER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_C_COMPILER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_FORTRAN_COMPILER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_JAVA_COMPILER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_CSHARP_COMPILER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_ADA_COMPILER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_JOVIAL_COMPILER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_COBOL_COMPILER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_MATLAB_COMPILER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_FORTRAN_IS_GNU_COMPILER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_FORTRAN_IS_INTEL_COMPILER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_FORTRAN_IS_GNU_COMPILER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^INTEL_FPP_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_INTEL_FPP$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^INTEL_FPP_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_FORTRAN_IS_PGI_COMPILER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_FORTRAN_IS_GNU_COMPILER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_FORTRAN_IS_GNU_COMPILER$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GFORTRAN_VERSION_4_0], [test "x$gfortran_version_4_0" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_4_0_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_4_0_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_4_0_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_4_0_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GFORTRAN_VERSION_4_1], [test "x$gfortran_version_4_1" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_4_1_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_4_1_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_4_1_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_4_1_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GFORTRAN_VERSION_4_2], [test "x$gfortran_version_4_2" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_4_2_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_4_2_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_4_2_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_4_2_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GFORTRAN_VERSION_4_4], [test "x$gfortran_version_4_4" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_4_4_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_4_4_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_4_4_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_4_4_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GFORTRAN_VERSION_4_5], [test "x$gfortran_version_4_5" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_4_5_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_4_5_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_4_5_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_4_5_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GFORTRAN_VERSION_4_6], [test "x$gfortran_version_4_6" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_4_6_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_4_6_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_4_6_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_4_6_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GFORTRAN_VERSION_LATER_4_5], [test "x$gfortran_version_later_4_5" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_LATER_4_5_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_LATER_4_5_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_LATER_4_5_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_LATER_4_5_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GFORTRAN_VERSION_LATER_4_4], [test "x$gfortran_version_later_4_4" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_LATER_4_4_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GFORTRAN_VERSION_LATER_4_4_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_LATER_4_4_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GFORTRAN_VERSION_LATER_4_4_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_4_4], [test "x$gcc_version_later_4_4" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_4_4_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_4_4_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_4_4_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_4_4_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_4_5], [test "x$gcc_version_later_4_5" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_4_5_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_4_5_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_4_5_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_4_5_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_4_6], [test "x$gcc_version_later_4_6" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_4_6_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_4_6_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_4_6_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_4_6_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_4_7], [test "x$gcc_version_later_4_7" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_4_7_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_4_7_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_4_7_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_4_7_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_4_8], [test "x$gcc_version_later_4_8" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_4_8_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_4_8_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_4_8_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_4_8_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_4_9], [test "x$gcc_version_later_4_9" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_4_9_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_4_9_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_4_9_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_4_9_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_EQUAL_4_9_1], [test "x$gcc_version_equal_4_9_1" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_EQUAL_4_9_1_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_EQUAL_4_9_1_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_EQUAL_4_9_1_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_EQUAL_4_9_1_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_5_1], [test "x$gcc_version_later_5_1" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_5_1_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_5_1_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_5_1_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_5_1_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_5_2], [test "x$gcc_version_later_5_2" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_5_2_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_5_2_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_5_2_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_5_2_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_5_3], [test "x$gcc_version_later_5_3" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_5_3_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_5_3_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_5_3_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_5_3_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_6_0], [test "x$gcc_version_later_6_0" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_6_0_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_6_0_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_6_0_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_6_0_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_6_1], [test "x$gcc_version_later_6_1" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_6_1_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_6_1_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_6_1_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_6_1_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_6_2], [test "x$gcc_version_later_6_2" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_6_2_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_6_2_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_6_2_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_6_2_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_6_3], [test "x$gcc_version_later_6_3" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_6_3_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_6_3_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_6_3_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_6_3_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_6_4], [test "x$gcc_version_later_6_4" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_6_4_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_6_4_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_6_4_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_6_4_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_6_5], [test "x$gcc_version_later_6_5" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_6_5_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_6_5_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_6_5_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_6_5_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_7_1], [test "x$gcc_version_later_7_1" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_7_1_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_7_1_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_7_1_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_7_1_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_7_2], [test "x$gcc_version_later_7_2" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_7_2_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_7_2_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_7_2_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_7_2_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_7_3], [test "x$gcc_version_later_7_3" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_7_3_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_7_3_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_7_3_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_7_3_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_7_4], [test "x$gcc_version_later_7_4" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_7_4_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_7_4_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_7_4_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_7_4_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_7_5], [test "x$gcc_version_later_7_5" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_7_5_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_7_5_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_7_5_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_7_5_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_8_1], [test "x$gcc_version_later_8_1" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_8_1_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_8_1_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_8_1_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_8_1_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_8_2], [test "x$gcc_version_later_8_2" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_8_2_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_8_2_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_8_2_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_8_2_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_8_3], [test "x$gcc_version_later_8_3" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_8_3_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_8_3_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_8_3_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_8_3_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_8_4], [test "x$gcc_version_later_8_4" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_8_4_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_8_4_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_8_4_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_8_4_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_9_1], [test "x$gcc_version_later_9_1" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_9_1_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_9_1_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_9_1_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_9_1_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_9_2], [test "x$gcc_version_later_9_2" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_9_2_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_9_2_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_9_2_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_9_2_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_9_3], [test "x$gcc_version_later_9_3" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_9_3_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_9_3_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_9_3_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_9_3_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_10_1], [test "x$gcc_version_later_10_1" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_10_1_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_10_1_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_10_1_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_10_1_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_10_2], [test "x$gcc_version_later_10_2" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_10_2_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_10_2_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_10_2_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_10_2_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_LATER_10_3], [test "x$gcc_version_later_10_3" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_10_3_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_LATER_10_3_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_10_3_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_LATER_10_3_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_CXX_COMPILER_NAME_WITHOUT_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_C_COMPILER_NAME_WITHOUT_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_FORTRAN_COMPILER_NAME_WITHOUT_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_CXX_COMPILER_NAME_WITH_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_C_COMPILER_NAME_WITH_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_FORTRAN_COMPILER_NAME_WITH_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_JAVA_COMPILER_NAME_WITH_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_CSHARP_COMPILER_NAME_WITH_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_ADA_COMPILER_NAME_WITH_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_JOVIAL_COMPILER_NAME_WITH_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_COBOL_COMPILER_NAME_WITH_PATH$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_CXX_COMPILER_MAJOR_VERSION_NUMBER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_CXX_COMPILER_MINOR_VERSION_NUMBER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_FORTRAN_COMPILER_MAJOR_VERSION_NUMBER$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_FORTRAN_COMPILER_MINOR_VERSION_NUMBER$])
m4trace:configure.ac:121: -1- _m4_warn([cross], [AC_RUN_IFELSE called without default to allow cross compiling], [../../lib/autoconf/general.m4:2759: AC_RUN_IFELSE is expanded from...
config/choose-backend-compiler.m4:1: CHOOSE_BACKEND_COMPILER is expanded from...
config/support-rose.m4:3: ROSE_SUPPORT_ROSE_PART_1 is expanded from...
configure.ac:121: the top level])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ALTERNATE_BACKEND_C_CROSS_COMPILER], ["$IS_ALTERNATE_BACKEND_C_CROSS_COMPILER"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ALTERNATE_BACKEND_C_CROSS_COMPILER_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ALTERNATE_BACKEND_C_CROSS_COMPILER_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ALTERNATE_BACKEND_C_CROSS_COMPILER_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ALTERNATE_BACKEND_C_CROSS_COMPILER_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_ALTERNATE_BACKEND_CXX_COMPILER], [test "x$with_alternate_backend_Cxx_compiler" != "x"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_ALTERNATE_BACKEND_CXX_COMPILER_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_ALTERNATE_BACKEND_CXX_COMPILER_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_ALTERNATE_BACKEND_CXX_COMPILER_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_ALTERNATE_BACKEND_CXX_COMPILER_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_ALTERNATE_BACKEND_C_COMPILER], [test "x$with_alternate_backend_C_compiler" != "x"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([USING_GCC_3_4_4_BACKEND_COMPILER], [test "x$BACKEND_C_COMPILER_VERSION" == "x3.4.4"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USING_GCC_3_4_4_BACKEND_COMPILER_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USING_GCC_3_4_4_BACKEND_COMPILER_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([USING_GCC_3_4_4_BACKEND_COMPILER_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([USING_GCC_3_4_4_BACKEND_COMPILER_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([USING_GCC_4_0_4_BACKEND_COMPILER], [test "x$BACKEND_C_COMPILER_VERSION" == "x4.0.4"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USING_GCC_4_0_4_BACKEND_COMPILER_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USING_GCC_4_0_4_BACKEND_COMPILER_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([USING_GCC_4_0_4_BACKEND_COMPILER_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([USING_GCC_4_0_4_BACKEND_COMPILER_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([USING_XTENSA_BACKEND_COMPILER], [true])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USING_XTENSA_BACKEND_COMPILER_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USING_XTENSA_BACKEND_COMPILER_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([USING_XTENSA_BACKEND_COMPILER_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([USING_XTENSA_BACKEND_COMPILER_FALSE])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([USING_XTENSA_BACKEND_COMPILER], [false])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USING_XTENSA_BACKEND_COMPILER_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^USING_XTENSA_BACKEND_COMPILER_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([USING_XTENSA_BACKEND_COMPILER_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([USING_XTENSA_BACKEND_COMPILER_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_C_COMPILER_SUPPORTS_ASM$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_C_COMPILER_SUPPORTS_UNDESCORE_ASM$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^BACKEND_C_COMPILER_SUPPORTS_LONG_STRING_ASM$])
m4trace:configure.ac:121: -1- AX_COMPILER_VENDOR
m4trace:configure.ac:121: -1- AX_COMPILER_VENDOR
m4trace:configure.ac:121: -1- m4_pattern_allow([^GCC_VERSION$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^GCC_MINOR_VERSION$])
m4trace:configure.ac:121: -1- AX_CXX_COMPILE_STDCXX_11([], [optional])
m4trace:configure.ac:121: -1- AX_CXX_COMPILE_STDCXX([11], [], [optional])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_FRONTEND_COMPILER_DEFAULT_IS_CXX11], [test "x$ac_success" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_FRONTEND_COMPILER_DEFAULT_IS_CXX11_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_FRONTEND_COMPILER_DEFAULT_IS_CXX11_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_FRONTEND_COMPILER_DEFAULT_IS_CXX11_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_FRONTEND_COMPILER_DEFAULT_IS_CXX11_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_CXX11$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_CXX11$])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USING_GCC_VERSION_4_8_CXX11], [test "x$gcc_version_4_8" = "xyes" && test "x$rose_frontend_compiler_default_is_cxx11_success" = "xyes"])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_4_8_CXX11_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USING_GCC_VERSION_4_8_CXX11_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_4_8_CXX11_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USING_GCC_VERSION_4_8_CXX11_FALSE])
m4trace:configure.ac:121: -1- AX_CXX_COMPILE_STDCXX_14([], [optional])
m4trace:configure.ac:121: -1- AX_CXX_COMPILE_STDCXX([14], [], [optional])
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_FRONTEND_COMPILER_DEFAULT_IS_CXX14], [test "x$ac_success" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_FRONTEND_COMPILER_DEFAULT_IS_CXX14_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_FRONTEND_COMPILER_DEFAULT_IS_CXX14_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_FRONTEND_COMPILER_DEFAULT_IS_CXX14_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_FRONTEND_COMPILER_DEFAULT_IS_CXX14_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_CXX14$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^HAVE_CXX14$])
m4trace:configure.ac:121: -1- ROSE_SUPPORT_FATAL_WARNINGS
m4trace:configure.ac:121: -1- AM_CONDITIONAL([ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT], [test "x$enable_fatal_rose_warnings" = xyes])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT_TRUE$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT_FALSE$])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT_TRUE])
m4trace:configure.ac:121: -1- _AM_SUBST_NOTMAKE([ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT_FALSE])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT$])
m4trace:configure.ac:121: -1- m4_pattern_allow([^ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT$])
m4trace:configure.ac:123: -1- ROSE_SUPPORT_ROSE_BUILD_INCLUDE_FILES
m4trace:configure.ac:123: -1- INSTALL_CLANG_SPECIFIC_HEADERS
m4trace:configure.ac:123: -1- GENERATE_BACKEND_C_COMPILER_SPECIFIC_HEADERS
m4trace:configure.ac:123: -1- GENERATE_BACKEND_CXX_COMPILER_SPECIFIC_HEADERS
m4trace:configure.ac:124: -1- CONFIGURE_POET
m4trace:configure.ac:124: -1- m4_pattern_allow([^POET_LIB$])
m4trace:configure.ac:124: -1- m4_pattern_allow([^POET_INCL$])
m4trace:configure.ac:124: -1- m4_pattern_allow([^poet_dir$])
m4trace:configure.ac:124: -1- AM_CONDITIONAL([ROSE_WITH_POET], [test "x$with_poet" = xyes])
m4trace:configure.ac:124: -1- m4_pattern_allow([^ROSE_WITH_POET_TRUE$])
m4trace:configure.ac:124: -1- m4_pattern_allow([^ROSE_WITH_POET_FALSE$])
m4trace:configure.ac:124: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_POET_TRUE])
m4trace:configure.ac:124: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_POET_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_ROSE_PART_2
m4trace:configure.ac:139: -1- m4_pattern_allow([^FGREP$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^GREP$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^OBJDUMP$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^OBJDUMP$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^SED$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_SYS_LIBRARY_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXXFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ac_ct_CXX$])
m4trace:configure.ac:139: -1- _AM_DEPENDENCIES([CXX])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXXDEPMODE$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([am__fastdepCXX], [
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_CXX_dependencies_compiler_type" = gcc3])
m4trace:configure.ac:139: -1- m4_pattern_allow([^am__fastdepCXX_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^am__fastdepCXX_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([am__fastdepCXX_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([am__fastdepCXX_FALSE])
m4trace:configure.ac:139: -1- GET_COMPILER_SPECIFIC_DEFINES
m4trace:configure.ac:139: -1- ROSE_CONFIGURE_SECTION([Checking frontend compiler])
m4trace:configure.ac:139: -1- GET_CXX_VERSION_INFO([$CXX], [$FRONTEND_CXX_COMPILER_VENDOR])
m4trace:configure.ac:139: -1- GET_CXX_VERSION_MACROS
m4trace:configure.ac:139: -1- SAVE_CXX_VERSION_INFO([FRONTEND])
m4trace:configure.ac:139: -1- ROSE_CONFIGURE_SECTION([Checking backend compiler])
m4trace:configure.ac:139: -1- GET_CXX_VERSION_INFO([$BACKEND_CXX_COMPILER], [$BACKEND_CXX_COMPILER_VENDOR])
m4trace:configure.ac:139: -1- GET_CXX_VERSION_MACROS
m4trace:configure.ac:139: -1- SAVE_BACKEND_VERSION_INFO
m4trace:configure.ac:139: -1- SAVE_CXX_VERSION_INFO([BACKEND])
m4trace:configure.ac:139: -1- GET_BACKEND_COMPILER_MACROS
m4trace:configure.ac:139: -1- m4_pattern_allow([^FRONTEND_CXX_VENDOR_AND_VERSION3$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^FRONTEND_CXX_VENDOR_AND_VERSION2$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^BACKEND_CXX_VENDOR_AND_VERSION3$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^BACKEND_CXX_VENDOR_AND_VERSION2$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX_SPEC_DEF$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([USING_INTEL_COMPILER], [test "$BACKEND_CXX_COMPILER_VENDOR" = "intel"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USING_INTEL_COMPILER_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USING_INTEL_COMPILER_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USING_INTEL_COMPILER_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USING_INTEL_COMPILER_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([USING_GNU_COMPILER], [test "$BACKEND_CXX_COMPILER_VENDOR" = "gnu"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USING_GNU_COMPILER_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USING_GNU_COMPILER_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USING_GNU_COMPILER_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USING_GNU_COMPILER_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([USING_CLANG_COMPILER], [test "$BACKEND_CXX_COMPILER_VENDOR" = "clang"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USING_CLANG_COMPILER_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USING_CLANG_COMPILER_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USING_CLANG_COMPILER_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USING_CLANG_COMPILER_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USING_ROSE], [test "ROSE_USING_ROSE" != ""])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USING_ROSE_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USING_ROSE_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USING_ROSE_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USING_ROSE_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USING_ROSE_TRANSLATOR], [test "$backendCompilerBaseName" = roseTranslator -o "$backendCompilerBaseName" = testTranslator])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USING_ROSE_TRANSLATOR_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USING_ROSE_TRANSLATOR_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USING_ROSE_TRANSLATOR_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USING_ROSE_TRANSLATOR_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USING_ROSE_CODE_GENERATION], [test "$ROSE_USING_ROSE_CODE_GENERATION" != ""])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USING_ROSE_CODE_GENERATION_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USING_ROSE_CODE_GENERATION_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USING_ROSE_CODE_GENERATION_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USING_ROSE_CODE_GENERATION_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USING_ROSE_ANALYSIS], [test "$ROSE_USING_ROSE_ANALYSIS" != ""])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USING_ROSE_ANALYSIS_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USING_ROSE_ANALYSIS_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USING_ROSE_ANALYSIS_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USING_ROSE_ANALYSIS_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USING_ROSE_AST_FILE_IO], [test "$ROSE_USING_ROSE_AST_FILE_IO" != ""])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USING_ROSE_AST_FILE_IO_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USING_ROSE_AST_FILE_IO_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USING_ROSE_AST_FILE_IO_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USING_ROSE_AST_FILE_IO_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX_IS_ROSE_ANALYSIS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX_IS_ROSE_AST_FILE_IO$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX_IS_ROSE_CODE_GENERATION$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX_IS_ROSE_ANALYSIS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX_IS_ROSE_CODE_GENERATION$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX_IS_ROSE_ANALYSIS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX_IS_ROSE_TRANSLATOR$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX_IS_ROSE_CODE_GENERATION$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX_IS_ROSE_ANALYSIS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^BACKEND_CXX_IS_INTEL_COMPILER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^BACKEND_CXX_IS_GNU_COMPILER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^BACKEND_CXX_IS_CLANG_COMPILER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([OLD_COMPILER_VERSION], [test "$BACKEND_COMPILER_VERSION_NAME" = "GNU" -a \
              "$BACKEND_COMPILER_VERSION_MAJOR_NUMBER" = 3 -a \
              "$BACKEND_COMPILER_VERSION_MINOR_NUMBER" = 4])
m4trace:configure.ac:139: -1- m4_pattern_allow([^OLD_COMPILER_VERSION_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^OLD_COMPILER_VERSION_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([OLD_COMPILER_VERSION_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([OLD_COMPILER_VERSION_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^BACKEND_COMPILER_VERSION_NAME$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^BACKEND_COMPILER_VERSION_MAJOR_NUMBER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^BACKEND_COMPILER_VERSION_MINOR_NUMBER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER$])
m4trace:configure.ac:139: -1- ROSE_CONFIGURE_SECTION([Checking backend C/C++ compiler specific references])
m4trace:configure.ac:139: -1- SETUP_BACKEND_C_COMPILER_SPECIFIC_REFERENCES
m4trace:configure.ac:139: -1- m4_pattern_allow([^C_INCLUDE_STRING$])
m4trace:configure.ac:139: -1- SETUP_BACKEND_CXX_COMPILER_SPECIFIC_REFERENCES
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX_INCLUDE_STRING$])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_LONG_MAKE_CHECK_RULE
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_LONG_MAKE_CHECK_RULE], [test "$with_ROSE_LONG_MAKE_CHECK_RULE" = yes])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_LONG_MAKE_CHECK_RULE_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_LONG_MAKE_CHECK_RULE_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_LONG_MAKE_CHECK_RULE_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_LONG_MAKE_CHECK_RULE_FALSE])
m4trace:configure.ac:139: -1- AM_PATH_XML2([2.0.0], [with_xml="yes"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^XML2_CONFIG$])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_TRY_RUN' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:2775: AC_TRY_RUN is expanded from...
config/libxml.m4:12: AM_PATH_XML2 is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_TRY_LINK' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:2698: AC_TRY_LINK is expanded from...
config/libxml.m4:12: AM_PATH_XML2 is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- m4_pattern_allow([^XML_CPPFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^XML_LIBS$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_XML], [test "$with_xml" != no])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_XML_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_XML_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_XML_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_XML_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_OBJDUMP_PATH$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_OBJDUMP], [test "$ROSE_OBJDUMP_PATH" != "no"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_OBJDUMP_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_OBJDUMP_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_OBJDUMP_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_OBJDUMP_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_BINARYCONTEXTLOOKUP], [test "$with_xml" != "no" -a "$ROSE_OBJDUMP_PATH" != "no"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_BINARYCONTEXTLOOKUP_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_BINARYCONTEXTLOOKUP_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_BINARYCONTEXTLOOKUP_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_BINARYCONTEXTLOOKUP_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WGET_PATH$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_WGET], [test "$ROSE_WGET_PATH" != "no"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_WGET_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_WGET_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_WGET_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_WGET_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_PS2PDF_PATH$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_PS2PDF], [test "$ROSE_PS2PDF_PATH" != "no"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_PS2PDF_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_PS2PDF_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_PS2PDF_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_PS2PDF_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^WORDS_BIGENDIAN$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^AC_APPLE_UNIVERSAL_BUILD$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXXCPP$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXXCPP$])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_VALGRIND
m4trace:configure.ac:139: -1- ROSE_CONFIGURE_SECTION([Checking Valgrind])
m4trace:configure.ac:139: -1- ROSE_ARG_WITH([valgrind], [for Valgrind installation], [add Valgrind support in ROSE], [
  ])
m4trace:configure.ac:139: -1- ROSE_REAL_ARG_WITH([valgrind], [for Valgrind installation], [add Valgrind support in ROSE], [
  ], [ROSE_WITH_VALGRIND])
m4trace:configure.ac:139: -1- ROSE_ARG_WITH([valgrind-bin], [if the Valgrind bin directory was specified], [use this Valgrind bin directory], [
  ])
m4trace:configure.ac:139: -1- ROSE_REAL_ARG_WITH([valgrind-bin], [if the Valgrind bin directory was specified], [use this Valgrind bin directory], [
  ], [ROSE_WITH_VALGRIND_BIN])
m4trace:configure.ac:139: -1- ROSE_ARG_WITH([valgrind-include], [if the Valgrind include directory was specified], [use this Valgrind include directory], [
  ])
m4trace:configure.ac:139: -1- ROSE_REAL_ARG_WITH([valgrind-include], [if the Valgrind include directory was specified], [use this Valgrind include directory], [
  ], [ROSE_WITH_VALGRIND_INCLUDE])
m4trace:configure.ac:139: -1- ROSE_ARG_WITH([valgrind-lib], [if the Valgrind library directory was specified], [use this Valgrind library directory], [
  ])
m4trace:configure.ac:139: -1- ROSE_REAL_ARG_WITH([valgrind-lib], [if the Valgrind library directory was specified], [use this Valgrind library directory], [
  ], [ROSE_WITH_VALGRIND_LIB])
m4trace:configure.ac:139: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-valgrind.m4:19: ROSE_SUPPORT_VALGRIND is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- ROSE_MSG_ERROR([valgrind binary is missing, can't configure with Valgrind])
m4trace:configure.ac:139: -1- ROSE_MSG_ERROR([could not execute your Valgrind binary])
m4trace:configure.ac:139: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-valgrind.m4:19: ROSE_SUPPORT_VALGRIND is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- ROSE_MSG_ERROR([valgrind.h is missing, can't compile with Valgrind])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_WITH_VALGRIND], [test "x$VALGRIND_BIN_PATH" != "x"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_VALGRIND_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_VALGRIND_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_VALGRIND_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_VALGRIND_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_WITH_VALGRIND_BIN], [test "x$VALGRIND_BIN_PATH" != "x"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_VALGRIND_BIN_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_VALGRIND_BIN_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_VALGRIND_BIN_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_VALGRIND_BIN_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_WITH_VALGRIND_INCLUDE], [test "x$VALGRIND_INCLUDE_PATH" != "x"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_VALGRIND_INCLUDE_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_VALGRIND_INCLUDE_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_VALGRIND_INCLUDE_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_VALGRIND_INCLUDE_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_WITH_VALGRIND_LIBRARY], [test "x$VALGRIND_LIBRARY_PATH" != "x"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_VALGRIND_LIBRARY_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_VALGRIND_LIBRARY_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_VALGRIND_LIBRARY_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_VALGRIND_LIBRARY_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^VALGRIND_INSTALL_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^VALGRIND_BIN_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^VALGRIND_INCLUDE_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^VALGRIND_LIBRARY_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^VALGRIND_BINARY$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([USE_VALGRIND], [test "x$VALGRIND_BINARY" != "x" && test "x$VALGRIND_BIN_PATH" != "x"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_VALGRIND_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_VALGRIND_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_VALGRIND_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_VALGRIND_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WAVE_DEFAULT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WAVE_DEFAULT$])
m4trace:configure.ac:139: -1- AM_PROG_LEX
m4trace:configure.ac:139: -1- m4_pattern_allow([^LEX$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LEX_OUTPUT_ROOT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LEXLIB$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^YYTEXT_POINTER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LEX$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^YACC$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^YACC$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^YFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^YACC$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^SET_MAKE$])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_MAPLE
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_ERROR' is obsolete.
You should run autoupdate.], [../../lib/autoconf/oldnames.m4:34: AC_ERROR is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/libs.m4:99: AC_CHECK_LIB is expanded from...
config/support-maple.m4:1: ROSE_SUPPORT_MAPLE is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- m4_pattern_allow([^MAPLE_INCLUDES$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^MAPLE_LIBS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^MAPLE_LIBDIR$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_MAPLE_SUPPORT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^maple_path$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_MAPLE], [test ! "$with_maple" = no])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_MAPLE_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_MAPLE_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_MAPLE_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_MAPLE_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_VXWORKS], [test ! "$with_vxworks" = no])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_VXWORKS_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_VXWORKS_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_VXWORKS_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_VXWORKS_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_IDA
m4trace:configure.ac:139: -1- m4_pattern_allow([^IDA_PRO_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_IDA_SUPPORT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ida_path$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_IDA], [test ! "$with_ida" = no])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_IDA_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_IDA_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_IDA_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_IDA_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_LIBFFI
m4trace:configure.ac:139: -1- PKG_CHECK_MODULES([LIBFFI], [libffi], [with_libffi=yes], [with_libffi=no])
m4trace:configure.ac:139: -1- m4_pattern_allow([^PKG_CONFIG$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LIBFFI_CFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LIBFFI_LIBS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_FFI_H$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_LIBFFI], [test ! "$with_libffi" = no])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_LIBFFI_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_LIBFFI_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_LIBFFI_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_LIBFFI_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_ATERM
m4trace:configure.ac:139: -1- ROSE_CONFIGURE_SECTION([Checking ATERM library])
m4trace:configure.ac:139: -1- ROSE_ARG_WITH([aterm], [for an installation of the Aterm library], [specify the path to the ATerm installation], [
  ])
m4trace:configure.ac:139: -1- ROSE_REAL_ARG_WITH([aterm], [for an installation of the Aterm library], [specify the path to the ATerm installation], [
  ], [ROSE_WITH_ATERM])
m4trace:configure.ac:139: -1- ROSE_ARG_WITH([aterm-bin], [if the ATERM compiler bin directory was specified], [use this ATERM bin directory], [
  ])
m4trace:configure.ac:139: -1- ROSE_REAL_ARG_WITH([aterm-bin], [if the ATERM compiler bin directory was specified], [use this ATERM bin directory], [
  ], [ROSE_WITH_ATERM_BIN])
m4trace:configure.ac:139: -1- ROSE_ARG_WITH([aterm-lib], [if the ATERM compiler library directory was specified], [use this ATERM library directory], [
  ])
m4trace:configure.ac:139: -1- ROSE_REAL_ARG_WITH([aterm-lib], [if the ATERM compiler library directory was specified], [use this ATERM library directory], [
  ], [ROSE_WITH_ATERM_LIB])
m4trace:configure.ac:139: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-aterm.m4:52: ROSE_SUPPORT_ATERM is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- ROSE_MSG_ERROR([bin directory is missing, can't use this ATERM installation])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_WITH_ATERM], [test "x$ATERM_BIN_PATH" != "x" && test "x$ATERM_LIBRARY_PATH" != "x"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_ATERM_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_ATERM_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_ATERM_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_ATERM_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_WITH_ATERM_BIN], [test "x$ATERM_BIN_PATH" != "x"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_ATERM_BIN_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_ATERM_BIN_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_ATERM_BIN_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_ATERM_BIN_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_WITH_ATERM_LIB], [test "x$ATERM_LIBRARY_PATH" != "x"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_ATERM_LIB_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_ATERM_LIB_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_ATERM_LIB_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_ATERM_LIB_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_BUILD_ATERM_SUPPORT], [test "x$ATERM_LIBRARY_PATH" != "x"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_BUILD_ATERM_SUPPORT_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_BUILD_ATERM_SUPPORT_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_ATERM_SUPPORT_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_ATERM_SUPPORT_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ATERM_INSTALL_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ATERM_BIN_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ATERM_LIBRARY_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ATERM_INSTALL_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ATERM_BIN_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ATERM_LIBRARY_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_ATERM_SUPPORT$])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_STRATEGO
m4trace:configure.ac:139: -1- ROSE_CONFIGURE_SECTION([Checking STRATEGO library])
m4trace:configure.ac:139: -1- ROSE_ARG_WITH([stratego], [for an installation of the Stratego library], [support the Stratego library], [
  ])
m4trace:configure.ac:139: -1- ROSE_REAL_ARG_WITH([stratego], [for an installation of the Stratego library], [support the Stratego library], [
  ], [ROSE_WITH_STRATEGO])
m4trace:configure.ac:139: -1- ROSE_ARG_WITH([stratego-bin], [if the STRATEGO compiler bin directory was specified], [use this STRATEGO bin directory], [
  ])
m4trace:configure.ac:139: -1- ROSE_REAL_ARG_WITH([stratego-bin], [if the STRATEGO compiler bin directory was specified], [use this STRATEGO bin directory], [
  ], [ROSE_WITH_STRATEGO_BIN])
m4trace:configure.ac:139: -1- ROSE_ARG_WITH([stratego-lib], [if the STRATEGO compiler library directory was specified], [use this STRATEGO library directory], [
  ])
m4trace:configure.ac:139: -1- ROSE_REAL_ARG_WITH([stratego-lib], [if the STRATEGO compiler library directory was specified], [use this STRATEGO library directory], [
  ], [ROSE_WITH_STRATEGO_LIB])
m4trace:configure.ac:139: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-stratego.m4:51: ROSE_SUPPORT_STRATEGO is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- ROSE_MSG_ERROR([bin directory is missing, can't use this STRATEGO installation])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_WITH_STRATEGO], [test "x$STRATEGO_BIN_PATH" != "x" && test "x$STRATEGO_LIBRARY_PATH" != "x"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_STRATEGO_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_STRATEGO_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_STRATEGO_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_STRATEGO_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_WITH_STRATEGO_BIN], [test "x$STRATEGO_BIN_PATH" != "x"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_STRATEGO_BIN_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_STRATEGO_BIN_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_STRATEGO_BIN_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_STRATEGO_BIN_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_WITH_STRATEGO_LIB], [test "x$STRATEGO_LIBRARY_PATH" != "x"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_STRATEGO_LIB_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_STRATEGO_LIB_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_STRATEGO_LIB_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_STRATEGO_LIB_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^STRATEGO_INSTALL_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^STRATEGO_BIN_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^STRATEGO_LIBRARY_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^STRATEGO_INSTALL_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^STRATEGO_BIN_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^STRATEGO_LIBRARY_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_STRATEGO_SUPPORT$])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_MINT
m4trace:configure.ac:139: -1- m4_pattern_allow([^MINT$])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_VECTORIZATION
m4trace:configure.ac:139: -1- m4_pattern_allow([^VECTORIZATION$])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_POCC
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_WITH_POCC], [test "x$with_pocc" = xyes])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_POCC_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_POCC_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_POCC_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_POCC_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_LIBHARU
m4trace:configure.ac:139: -1- m4_pattern_allow([^subdirs$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_LIBHARU$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_WITH_LIBHARU], [test "x$with_libharu" = xyes])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_LIBHARU_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_WITH_LIBHARU_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_LIBHARU_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_LIBHARU_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_PHP
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_PHP_SUPPORT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^php_path$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_PHP], [test ! "$with_php" = no])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_PHP_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_PHP_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_PHP_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_PHP_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_LLVM
m4trace:configure.ac:139: -1- ROSE_CONFIGURE_SECTION([Checking LLVM])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_LLVM_SUPPORT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^llvm_path$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LLVM_CONFIG$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USING_LLVM_6_0_0], [test "x$llvm_version_6_0_0" = "xyes"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USING_LLVM_6_0_0_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USING_LLVM_6_0_0_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USING_LLVM_6_0_0_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USING_LLVM_6_0_0_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LLVM_CPPFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LLVM_LDFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LLVM_LIBS$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_LLVM], [test ! "$with_llvm" = no])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_LLVM_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_LLVM_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_LLVM_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_LLVM_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_WINDOWS_ANALYSIS
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_WINDOWS_ANALYSIS_SUPPORT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^wine_path$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_WINDOWS_ANALYSIS_SUPPORT], [test ! "$with_wine" = no])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_EDG_DEBUGGING
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_EDG_DEBUGGING_SUPPORT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^edg_union_struct_debugging_value$])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_OMNI_OPENMP
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_OMNI_OPENMP_SUPPORT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^OMNI_OPENMP_LIB_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^omni_omp_runtime_support_path$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_OMNI_OPENMP], [test ! "$with_omni_omp_runtime_support" = no])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_OMNI_OPENMP_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_OMNI_OPENMP_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_OMNI_OPENMP_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_OMNI_OPENMP_FALSE])
m4trace:configure.ac:139: -1- ROSE_WITH_GOMP_OPENMP_LIBRARY
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_GOMP_OPENMP_LIBRARY$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^GCC_GOMP_OPENMP_LIB_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_INSTALLATION_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^gomp_omp_runtime_library_path$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([WITH_GOMP_OPENMP_LIB], [test ! "$with_gomp_omp_runtime_library" = no])
m4trace:configure.ac:139: -1- m4_pattern_allow([^WITH_GOMP_OPENMP_LIB_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^WITH_GOMP_OPENMP_LIB_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([WITH_GOMP_OPENMP_LIB_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([WITH_GOMP_OPENMP_LIB_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_GCC_OMP
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_GCC_OMP$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^parallel_ast_traversal_omp_path$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_GCC_OMP], [test ! "$with_parallel_ast_traversal_omp" = no])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_GCC_OMP_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_GCC_OMP_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_GCC_OMP_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_GCC_OMP_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_MPI], [test "$with_parallel_ast_traversal_mpi" = yes])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_MPI_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_MPI_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_MPI_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_MPI_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^MPICXX$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ac_ct_MPICXX$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_PCH], [test "$with_pch" = yes])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_PCH_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_PCH_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_PCH_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_PCH_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_RTED
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_RTED_SUPPORT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^rted_path$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_RTED], [test ! "$with_rted" = no])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_RTED_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_RTED_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_RTED_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_RTED_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^XMKMF$])
m4trace:configure.ac:139: -1- AC_FIND_OPENGL
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_LANG_SAVE' is obsolete.
You should run autoupdate.], [../../lib/autoconf/lang.m4:125: AC_LANG_SAVE is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/general.m4:2042: AC_CACHE_VAL is expanded from...
../../lib/autoconf/general.m4:2063: AC_CACHE_CHECK is expanded from...
config/mdl_have_opengl_2014.m4:1: AC_FIND_OPENGL is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/general.m4:1473: AC_ARG_ENABLE is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_LANG_C' is obsolete.
You should run autoupdate.], [../../lib/autoconf/c.m4:72: AC_LANG_C is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/general.m4:2042: AC_CACHE_VAL is expanded from...
../../lib/autoconf/general.m4:2063: AC_CACHE_CHECK is expanded from...
config/mdl_have_opengl_2014.m4:1: AC_FIND_OPENGL is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/general.m4:1473: AC_ARG_ENABLE is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_FD_MSG' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:384: AC_FD_MSG is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/general.m4:2042: AC_CACHE_VAL is expanded from...
../../lib/autoconf/general.m4:2063: AC_CACHE_CHECK is expanded from...
config/mdl_have_opengl_2014.m4:1: AC_FIND_OPENGL is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/general.m4:1473: AC_ARG_ENABLE is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_FD_MSG' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:384: AC_FD_MSG is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/general.m4:2042: AC_CACHE_VAL is expanded from...
../../lib/autoconf/general.m4:2063: AC_CACHE_CHECK is expanded from...
config/mdl_have_opengl_2014.m4:1: AC_FIND_OPENGL is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/general.m4:1473: AC_ARG_ENABLE is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_FD_MSG' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:384: AC_FD_MSG is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/general.m4:2042: AC_CACHE_VAL is expanded from...
../../lib/autoconf/general.m4:2063: AC_CACHE_CHECK is expanded from...
config/mdl_have_opengl_2014.m4:1: AC_FIND_OPENGL is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/general.m4:1473: AC_ARG_ENABLE is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_LANG_RESTORE' is obsolete.
You should run autoupdate.], [../../lib/autoconf/lang.m4:134: AC_LANG_RESTORE is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/general.m4:2042: AC_CACHE_VAL is expanded from...
../../lib/autoconf/general.m4:2063: AC_CACHE_CHECK is expanded from...
config/mdl_have_opengl_2014.m4:1: AC_FIND_OPENGL is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/general.m4:1473: AC_ARG_ENABLE is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- m4_pattern_allow([^GL_CFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^GL_LIBS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^GLUT_CFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^GLUT_LIBS$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_OPENGL], [test ! "x$have_GL" = xno -a ! "x$rose_openGL" = xno])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_OPENGL_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_OPENGL_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_OPENGL_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_OPENGL_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([USE_ROSE_GLUT_SUPPORT], [false])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_GLUT_SUPPORT_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_GLUT_SUPPORT_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_ROSE_GLUT_SUPPORT_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_ROSE_GLUT_SUPPORT_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([USE_ROSE_GLUT_SUPPORT], [true])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_GLUT_SUPPORT_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_GLUT_SUPPORT_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_ROSE_GLUT_SUPPORT_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_ROSE_GLUT_SUPPORT_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_GLUT_SUPPORT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^glut_path$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^PERL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^INDENT$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_INDENT], [test "x$INDENT" = "xindent"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_INDENT_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_INDENT_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_INDENT_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_INDENT_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^TCLSH$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_TCLSH], [test "x$TCLSH" = "xtclsh"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_TCLSH_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_TCLSH_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_TCLSH_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_TCLSH_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_OFP
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_GFORTRAN_IN_ROSE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^OPEN_FORTRAN_PARSER_PATH$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_OFP_CONTAINS_JAVA_FILE], [test "x$ofp_jar_file_contains_java_file" = true])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_OFP_CONTAINS_JAVA_FILE_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_OFP_CONTAINS_JAVA_FILE_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_OFP_CONTAINS_JAVA_FILE_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_OFP_CONTAINS_JAVA_FILE_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_OFP_VERSION_NUMBER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_OFP_MAJOR_VERSION_NUMBER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_OFP_MINOR_VERSION_NUMBER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_OFP_PATCH_VERSION_NUMBER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_OFP_VERSION_NUMBER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_OFP_MAJOR_VERSION_NUMBER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_OFP_MINOR_VERSION_NUMBER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_OFP_PATCH_VERSION_NUMBER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_OFP_JAR_FILE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_OFP_JAR_FILE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CLASSPATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_OFP_CLASSPATH$])
m4trace:configure.ac:139: -1- AC_PROG_SWIG([2.0.0])
m4trace:configure.ac:139: -1- m4_pattern_allow([^SWIG$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^SWIG_LIB$])
m4trace:configure.ac:139: -1- SWIG_ENABLE_CXX
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ENABLE_JAVAPORT], [test "$with_javaport" = yes])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ENABLE_JAVAPORT_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ENABLE_JAVAPORT_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ENABLE_JAVAPORT_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ENABLE_JAVAPORT_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_HASKELL
m4trace:configure.ac:139: -1- m4_pattern_allow([^GHCBIN$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([USE_HASKELL], [test "$USE_HASKELL" = 1])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_HASKELL_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_HASKELL_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_HASKELL_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_HASKELL_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HS_CONFIG_OPTS$])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_CUDA
m4trace:configure.ac:139: -1- m4_pattern_allow([^NVCCBIN$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([USE_CUDA], [test "$USE_CUDA" = 1])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_CUDA_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_CUDA_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_CUDA_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_CUDA_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_SWIPL
m4trace:configure.ac:139: -1- m4_pattern_allow([^SWIPLBIN$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_HAVE_SWI_PROLOG], [test "$ROSE_HAVE_SWI_PROLOG" = 1])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_SWI_PROLOG_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_SWI_PROLOG_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_SWI_PROLOG_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_SWI_PROLOG_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_Z3
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_Z3$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_Z3$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_Z3$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_Z3$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_Z3_VERSION_H$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_Z3$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^Z3BIN$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^Z3_INCLUDE_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^Z3_LIBRARY_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^Z3_PREFIX$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([USE_Z3], [test "$USE_Z3" = 1])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_Z3_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_Z3_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_Z3_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_Z3_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_Z3_PREFIX$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_HAVE_LIBZ3], [test -n "$Z3_LIBRARY_PATH"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_LIBZ3_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_LIBZ3_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBZ3_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBZ3_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_HAVE_Z3], [test -n "$Z3BIN"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_Z3_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_Z3_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_Z3_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_Z3_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_BDDBDDB
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_BDDBDDB_SUPPORT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^bddbddb_path$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_BDDBDDB], [test ! "$with_bddbddb" = no])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_BDDBDDB_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_BDDBDDB_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_BDDBDDB_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_BDDBDDB_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_VISUALIZATION
m4trace:configure.ac:139: -1- m4_pattern_allow([^optional_Visualization_subdirs$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^FLTK_include_path$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^FLTK_libs_path$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^GraphViz_include_path$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^GraphViz_libs_path$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^GLUT_include_path$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^GLUT_libs_path$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_VISUALIZATION], [(test ! "$with_FLTK_include" = no) || (test ! "$with_FLTK_libs" = no) || (test ! "$with_GraphViz_include" = no) || (test ! "$with_GraphViz_libs" = no)])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_VISUALIZATION_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_VISUALIZATION_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_VISUALIZATION_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_VISUALIZATION_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_PPL], [test "x$enable_ppl" = "xyes"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_PPL_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_PPL_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_PPL_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_PPL_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_PPL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_PPL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^PPL_PATH$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_CLOOG], [test "x$enable_cloog" = "xyes"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_CLOOG_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_CLOOG_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_CLOOG_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_CLOOG_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_CLOOG$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_CLOOG$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CLOOG_PATH$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_SCOPLIB], [test "x$enable_scoplib" = "xyes"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_SCOPLIB_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_SCOPLIB_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_SCOPLIB_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_SCOPLIB_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_SCOPLIB$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_SCOPLIB$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^SCOPLIB_PATH$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_CANDL], [test "x$enable_candl" = "xyes"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_CANDL_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_CANDL_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_CANDL_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_CANDL_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_CANDL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_CANDL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CANDL_PATH$])
m4trace:configure.ac:139: -1- ROSE_CHECK_CUDA
m4trace:configure.ac:139: -1- m4_pattern_allow([^CUDA_INC_DIR$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CUDA_INC_DIR$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CUDA_INC_DIR$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CUDA_INC_DIR$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_HAVE_CUDA_INC], [test "$with_cuda_inc" != ""])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_CUDA_INC_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_CUDA_INC_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_CUDA_INC_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_CUDA_INC_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CUDA_LIB_DIR$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CUDA_LIB_DIR$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_HAVE_CUDA_LIB], [test "$with_cuda_lib" != ""])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_CUDA_LIB_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_CUDA_LIB_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_CUDA_LIB_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_CUDA_LIB_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CUDA_BIN_DIR$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CUDA_BIN_DIR$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_HAVE_CUDA_BIN], [test "$with_cuda_bin" != ""])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_CUDA_BIN_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_CUDA_BIN_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_CUDA_BIN_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_CUDA_BIN_FALSE])
m4trace:configure.ac:139: -1- ROSE_CHECK_OPENCL
m4trace:configure.ac:139: -1- m4_pattern_allow([^OPENCL_INC_DIR$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^OPENCL_INC_DIR$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_HAVE_OPENCL_INC], [test "$with_opencl_inc" != ""])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_OPENCL_INC_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_OPENCL_INC_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_OPENCL_INC_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_OPENCL_INC_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^OPENCL_LIB_DIR$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^OPENCL_LIB_DIR$])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_ERROR' is obsolete.
You should run autoupdate.], [../../lib/autoconf/oldnames.m4:34: AC_ERROR is expanded from...
config/support-accelerator.m4:55: ROSE_CHECK_OPENCL is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_HAVE_OPENCL_LIB], [test "$with_opencl_lib" != ""])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_OPENCL_LIB_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_OPENCL_LIB_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_OPENCL_LIB_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_OPENCL_LIB_FALSE])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_DOXYGEN
m4trace:configure.ac:139: -1- ROSE_CONFIGURE_SECTION([Checking Doxygen])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DOXYINDEXER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DOXYINDEXER$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_HAVE_DOXYGEN], [test "$DOXYGEN" != ""])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_DOXYGEN_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_DOXYGEN_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_DOXYGEN_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_DOXYGEN_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DOXYGEN$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_HAVE_DOXYINDEXER], [test "$DOXYINDEXER" != ""])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_DOXYINDEXER_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_HAVE_DOXYINDEXER_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_DOXYINDEXER_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_DOXYINDEXER_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DOXYINDEXER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DOXYGEN_EXTRACT_ALL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DOXYGEN_EXTRACT_PRIVATE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DOXYGEN_EXTRACT_STATIC$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DOXYGEN_INTERNAL_DOCS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DOXYGEN_HIDE_UNDOC_MEMBERS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DOXYGEN_HIDE_UNDOC_CLASSES$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DOXYGEN_HIDE_FRIEND_COMPOUNDS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DOXYGEN_ENABLED_SECTIONS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DOXYGEN_ADDED_DIRECTORY_1$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DOXYGEN_ADDED_DIRECTORY_2$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DOXYGEN_USE_TAG_FILE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXXCPP$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXXCPP$])
m4trace:configure.ac:139: -1- AC_DISABLE_STATIC
m4trace:configure.ac:139: -1- LT_AC_PROG_SED
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `LT_AC_PROG_SED' is obsolete.
You should run autoupdate.], [config/libtool.m4:8295: LT_AC_PROG_SED is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- m4_pattern_allow([^SED$])
m4trace:configure.ac:139: -1- m4_pattern_allow([LT_LIBEXT])
m4trace:configure.ac:139: -1- AC_PROG_LIBTOOL
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_PROG_LIBTOOL' is obsolete.
You should run autoupdate.], [config/libtool.m4:99: AC_PROG_LIBTOOL is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- LT_INIT
m4trace:configure.ac:139: -1- m4_pattern_forbid([^_?LT_[A-Z_]+$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])
m4trace:configure.ac:139: -1- LTOPTIONS_VERSION
m4trace:configure.ac:139: -1- LTSUGAR_VERSION
m4trace:configure.ac:139: -1- LTVERSION_VERSION
m4trace:configure.ac:139: -1- LTOBSOLETE_VERSION
m4trace:configure.ac:139: -1- _LT_PROG_LTMAIN
m4trace:configure.ac:139: -1- m4_pattern_allow([^LIBTOOL$])
m4trace:configure.ac:139: -1- _LT_PREPARE_SED_QUOTE_VARS
m4trace:configure.ac:139: -1- _LT_PROG_ECHO_BACKSLASH
m4trace:configure.ac:139: -1- LT_PATH_LD
m4trace:configure.ac:139: -1- m4_pattern_allow([^LD$])
m4trace:configure.ac:139: -1- LT_PATH_NM
m4trace:configure.ac:139: -1- m4_pattern_allow([^DUMPBIN$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ac_ct_DUMPBIN$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DUMPBIN$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^NM$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LN_S$])
m4trace:configure.ac:139: -1- LT_CMD_MAX_LEN
m4trace:configure.ac:139: -1- m4_pattern_allow([^DLLTOOL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^DLLTOOL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^AR$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ac_ct_AR$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^STRIP$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^RANLIB$])
m4trace:configure.ac:139: -1- _LT_WITH_SYSROOT
m4trace:configure.ac:139: -1- m4_pattern_allow([LT_OBJDIR])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_OBJDIR$])
m4trace:configure.ac:139: -1- _LT_CC_BASENAME([$compiler])
m4trace:configure.ac:139: -1- _LT_PATH_TOOL_PREFIX([${ac_tool_prefix}file], [/usr/bin$PATH_SEPARATOR$PATH])
m4trace:configure.ac:139: -1- _LT_PATH_TOOL_PREFIX([file], [/usr/bin$PATH_SEPARATOR$PATH])
m4trace:configure.ac:139: -1- LT_SUPPORTED_TAG([CC])
m4trace:configure.ac:139: -1- _LT_COMPILER_BOILERPLATE
m4trace:configure.ac:139: -1- _LT_LINKER_BOILERPLATE
m4trace:configure.ac:139: -1- _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions], [lt_cv_prog_compiler_rtti_exceptions], [-fno-rtti -fno-exceptions], [], [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, )="$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, ) -fno-rtti -fno-exceptions"])
m4trace:configure.ac:139: -1- _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, ) works], [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, )], [$_LT_TAGVAR(lt_prog_compiler_pic, )@&t@m4_if([],[],[ -DPIC],[m4_if([],[CXX],[ -DPIC],[])])], [], [case $_LT_TAGVAR(lt_prog_compiler_pic, ) in
     "" | " "*) ;;
     *) _LT_TAGVAR(lt_prog_compiler_pic, )=" $_LT_TAGVAR(lt_prog_compiler_pic, )" ;;
     esac], [_LT_TAGVAR(lt_prog_compiler_pic, )=
     _LT_TAGVAR(lt_prog_compiler_can_build_shared, )=no])
m4trace:configure.ac:139: -1- _LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works], [lt_cv_prog_compiler_static_works], [$lt_tmp_static_flag], [], [_LT_TAGVAR(lt_prog_compiler_static, )=])
m4trace:configure.ac:139: -1- m4_pattern_allow([^MANIFEST_TOOL$])
m4trace:configure.ac:139: -1- _LT_DLL_DEF_P([$export_symbols])
m4trace:configure.ac:139: -1- _LT_DLL_DEF_P([$export_symbols])
m4trace:configure.ac:139: -1- _LT_REQUIRED_DARWIN_CHECKS
m4trace:configure.ac:139: -1- m4_pattern_allow([^DSYMUTIL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^NMEDIT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LIPO$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^OTOOL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^OTOOL64$])
m4trace:configure.ac:139: -1- _LT_LINKER_OPTION([if $CC understands -b], [lt_cv_prog_compiler__b], [-b], [_LT_TAGVAR(archive_cmds, )='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'], [_LT_TAGVAR(archive_cmds, )='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_SYS_LIBRARY_PATH$])
m4trace:configure.ac:139: -1- LT_SYS_DLOPEN_SELF
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_DLFCN_H$])
m4trace:configure.ac:139: -1- LT_LANG([CXX])
m4trace:configure.ac:139: -1- LT_SUPPORTED_TAG([CXX])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXXCPP$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXXCPP$])
m4trace:configure.ac:139: -1- _LT_COMPILER_BOILERPLATE
m4trace:configure.ac:139: -1- _LT_LINKER_BOILERPLATE
m4trace:configure.ac:139: -1- _LT_CC_BASENAME([$compiler])
m4trace:configure.ac:139: -1- LT_PATH_LD
m4trace:configure.ac:139: -1- m4_pattern_allow([^LD$])
m4trace:configure.ac:139: -1- _LT_DLL_DEF_P([$export_symbols])
m4trace:configure.ac:139: -1- _LT_DLL_DEF_P([$export_symbols])
m4trace:configure.ac:139: -1- _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, CXX) works], [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, CXX)], [$_LT_TAGVAR(lt_prog_compiler_pic, CXX)@&t@m4_if([CXX],[],[ -DPIC],[m4_if([CXX],[CXX],[ -DPIC],[])])], [], [case $_LT_TAGVAR(lt_prog_compiler_pic, CXX) in
     "" | " "*) ;;
     *) _LT_TAGVAR(lt_prog_compiler_pic, CXX)=" $_LT_TAGVAR(lt_prog_compiler_pic, CXX)" ;;
     esac], [_LT_TAGVAR(lt_prog_compiler_pic, CXX)=
     _LT_TAGVAR(lt_prog_compiler_can_build_shared, CXX)=no])
m4trace:configure.ac:139: -1- _LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works], [lt_cv_prog_compiler_static_works_CXX], [$lt_tmp_static_flag], [], [_LT_TAGVAR(lt_prog_compiler_static, CXX)=])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_SYS_LIBRARY_PATH$])
m4trace:configure.ac:139: -1- LT_LANG([F77])
m4trace:configure.ac:139: -1- LT_SUPPORTED_TAG([F77])
m4trace:configure.ac:139: -1- _LT_COMPILER_BOILERPLATE
m4trace:configure.ac:139: -1- _LT_LINKER_BOILERPLATE
m4trace:configure.ac:139: -1- _LT_CC_BASENAME([$compiler])
m4trace:configure.ac:139: -1- _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, F77) works], [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, F77)], [$_LT_TAGVAR(lt_prog_compiler_pic, F77)@&t@m4_if([F77],[],[ -DPIC],[m4_if([F77],[CXX],[ -DPIC],[])])], [], [case $_LT_TAGVAR(lt_prog_compiler_pic, F77) in
     "" | " "*) ;;
     *) _LT_TAGVAR(lt_prog_compiler_pic, F77)=" $_LT_TAGVAR(lt_prog_compiler_pic, F77)" ;;
     esac], [_LT_TAGVAR(lt_prog_compiler_pic, F77)=
     _LT_TAGVAR(lt_prog_compiler_can_build_shared, F77)=no])
m4trace:configure.ac:139: -1- _LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works], [lt_cv_prog_compiler_static_works_F77], [$lt_tmp_static_flag], [], [_LT_TAGVAR(lt_prog_compiler_static, F77)=])
m4trace:configure.ac:139: -1- _LT_DLL_DEF_P([$export_symbols])
m4trace:configure.ac:139: -1- _LT_DLL_DEF_P([$export_symbols])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_SYS_LIBRARY_PATH$])
m4trace:configure.ac:139: -1- LT_LANG([FC])
m4trace:configure.ac:139: -1- LT_SUPPORTED_TAG([FC])
m4trace:configure.ac:139: -1- _LT_COMPILER_BOILERPLATE
m4trace:configure.ac:139: -1- _LT_LINKER_BOILERPLATE
m4trace:configure.ac:139: -1- _LT_CC_BASENAME([$compiler])
m4trace:configure.ac:139: -1- _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, FC) works], [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, FC)], [$_LT_TAGVAR(lt_prog_compiler_pic, FC)@&t@m4_if([FC],[],[ -DPIC],[m4_if([FC],[CXX],[ -DPIC],[])])], [], [case $_LT_TAGVAR(lt_prog_compiler_pic, FC) in
     "" | " "*) ;;
     *) _LT_TAGVAR(lt_prog_compiler_pic, FC)=" $_LT_TAGVAR(lt_prog_compiler_pic, FC)" ;;
     esac], [_LT_TAGVAR(lt_prog_compiler_pic, FC)=
     _LT_TAGVAR(lt_prog_compiler_can_build_shared, FC)=no])
m4trace:configure.ac:139: -1- _LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works], [lt_cv_prog_compiler_static_works_FC], [$lt_tmp_static_flag], [], [_LT_TAGVAR(lt_prog_compiler_static, FC)=])
m4trace:configure.ac:139: -1- _LT_DLL_DEF_P([$export_symbols])
m4trace:configure.ac:139: -1- _LT_DLL_DEF_P([$export_symbols])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_SYS_LIBRARY_PATH$])
m4trace:configure.ac:139: -1- AC_LIBLTDL_CONVENIENCE
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_LIBLTDL_CONVENIENCE' is obsolete.
You should run autoupdate.], [config/ltdl.m4:81: AC_LIBLTDL_CONVENIENCE is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LIBLTDL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LTDLDEPS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LTDLINCL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^INCLTDL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LTDLINCL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LIBLTDL$])
m4trace:configure.ac:139: -1- AC_LIBTOOL_DLOPEN
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_LIBTOOL_DLOPEN' is obsolete.
You should run autoupdate.], [config/ltoptions.m4:113: AC_LIBTOOL_DLOPEN is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [AC_LIBTOOL_DLOPEN: Remove this warning and the call to _LT_SET_OPTION when you
put the 'dlopen' option into LT_INIT's first parameter.], [config/ltoptions.m4:113: AC_LIBTOOL_DLOPEN is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- AC_LIB_LTDL([recursive])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_LIB_LTDL' is obsolete.
You should run autoupdate.], [config/ltdl.m4:352: AC_LIB_LTDL is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- LTDL_INIT([recursive])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LIBLTDL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LTDLDEPS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LTDLINCL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^INCLTDL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_LTDL$])
m4trace:configure.ac:139: -1- _LTDL_SETUP
m4trace:configure.ac:139: -1- LT_SYS_MODULE_EXT
m4trace:configure.ac:139: -1- m4_pattern_allow([LT_MODULE_EXT])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_MODULE_EXT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([LT_SHARED_EXT])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_SHARED_EXT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([LT_SHARED_LIB_MEMBER])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_SHARED_LIB_MEMBER$])
m4trace:configure.ac:139: -1- LT_SYS_MODULE_PATH
m4trace:configure.ac:139: -1- m4_pattern_allow([LT_MODULE_PATH_VAR])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_MODULE_PATH_VAR$])
m4trace:configure.ac:139: -1- LT_SYS_DLSEARCH_PATH
m4trace:configure.ac:139: -1- m4_pattern_allow([LT_DLSEARCH_PATH])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_DLSEARCH_PATH$])
m4trace:configure.ac:139: -1- LT_LIB_DLLOAD
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_DLLOADERS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_DLLOADERS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_LIBDL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_LIBDL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_LIBDL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_DLERROR$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LIBADD_DLOPEN$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_SHL_LOAD$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_SHL_LOAD$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LIBADD_SHL_LOAD$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_DYLD$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_DECL_CYGWIN_CONV_PATH$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_DLD$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LIBADD_DLD_LINK$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_DLPREOPEN$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_LIBDLLOADER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_DLPREOPEN$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LIBADD_DL$])
m4trace:configure.ac:139: -1- LT_SYS_SYMBOL_USCORE
m4trace:configure.ac:139: -1- m4_pattern_allow([^sys_symbol_underscore$])
m4trace:configure.ac:139: -1- LT_FUNC_DLSYM_USCORE
m4trace:configure.ac:139: -1- _m4_warn([syntax], [AC_REQUIRE: `_LT_COMPILER_PIC' was expanded before it was required
http://www.gnu.org/software/autoconf/manual/autoconf.html#Expanded-Before-Required], [config/ltdl.m4:800: LT_FUNC_DLSYM_USCORE is expanded from...
config/ltdl.m4:367: _LTDL_SETUP is expanded from...
config/ltdl.m4:226: LTDL_INIT is expanded from...
config/ltdl.m4:352: AC_LIB_LTDL is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, ) works], [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, )], [$_LT_TAGVAR(lt_prog_compiler_pic, )@&t@m4_if([],[],[ -DPIC],[m4_if([],[CXX],[ -DPIC],[])])], [], [case $_LT_TAGVAR(lt_prog_compiler_pic, ) in
     "" | " "*) ;;
     *) _LT_TAGVAR(lt_prog_compiler_pic, )=" $_LT_TAGVAR(lt_prog_compiler_pic, )" ;;
     esac], [_LT_TAGVAR(lt_prog_compiler_pic, )=
     _LT_TAGVAR(lt_prog_compiler_can_build_shared, )=no])
m4trace:configure.ac:139: -1- _LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works], [lt_cv_prog_compiler_static_works], [$lt_tmp_static_flag], [], [_LT_TAGVAR(lt_prog_compiler_static, )=])
m4trace:configure.ac:139: -1- m4_pattern_allow([^NEED_USCORE$])
m4trace:configure.ac:139: -1- LT_SYS_DLOPEN_DEPLIBS
m4trace:configure.ac:139: -1- m4_pattern_allow([^LTDL_DLOPEN_DEPLIBS$])
m4trace:configure.ac:139: -1- LT_FUNC_ARGZ
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_ARGZ_H$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_ERROR_T$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^error_t$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^__error_t_defined$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^_LT_LIBOBJS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_WORKING_ARGZ$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^_LT_LIBOBJS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_ARGZ_H$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_PRELOADED_SYMBOLS$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([INSTALL_LTDL], [test no != "${enable_ltdl_install-no}"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^INSTALL_LTDL_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^INSTALL_LTDL_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([INSTALL_LTDL_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([INSTALL_LTDL_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([CONVENIENCE_LTDL], [test no != "${enable_ltdl_convenience-no}"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CONVENIENCE_LTDL_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CONVENIENCE_LTDL_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([CONVENIENCE_LTDL_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([CONVENIENCE_LTDL_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_CONFIG_H$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^_LT_LIBOBJS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^_LT_LIBOBJS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([LT_LIBEXT])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_LIBEXT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([LT_LIBPREFIX])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LT_LIBPREFIX$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LTDLOPEN$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_SHLIBPATH_VAR$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_DLFCN_H$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_LIBDL$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_DLADDR$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([USE_ROSE_IN_BUILD_TREE_VAR], [test "x$use_rose_in_build_tree_var" = "xyes"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_IN_BUILD_TREE_VAR_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_ROSE_IN_BUILD_TREE_VAR_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_ROSE_IN_BUILD_TREE_VAR_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_ROSE_IN_BUILD_TREE_VAR_FALSE])
m4trace:configure.ac:139: -1- BTNG_INFO_CXX_ID
m4trace:configure.ac:139: -1- BTNG_INFO_CXX_ID_NAMES([CXX_ID], [CXX_VERSION])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_LANG_SAVE' is obsolete.
You should run autoupdate.], [../../lib/autoconf/lang.m4:125: AC_LANG_SAVE is expanded from...
acmacros/compiler-id.m4:38: BTNG_INFO_CXX_ID_NAMES is expanded from...
acmacros/compiler-id.m4:15: BTNG_INFO_CXX_ID is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_LANG_CPLUSPLUS' is obsolete.
You should run autoupdate.], [../../lib/autoconf/c.m4:252: AC_LANG_CPLUSPLUS is expanded from...
acmacros/compiler-id.m4:38: BTNG_INFO_CXX_ID_NAMES is expanded from...
acmacros/compiler-id.m4:15: BTNG_INFO_CXX_ID is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- BTNG_AC_LOG([CXXP is $CXX])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_FD_CC' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:383: AC_FD_CC is expanded from...
acmacros/configure-log.m4:1: BTNG_AC_LOG is expanded from...
acmacros/compiler-id.m4:38: BTNG_INFO_CXX_ID_NAMES is expanded from...
acmacros/compiler-id.m4:15: BTNG_INFO_CXX_ID is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- BTNG_AC_LOG([CXXCPP is $CXXCPP])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_FD_CC' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:383: AC_FD_CC is expanded from...
acmacros/configure-log.m4:1: BTNG_AC_LOG is expanded from...
acmacros/compiler-id.m4:38: BTNG_INFO_CXX_ID_NAMES is expanded from...
acmacros/compiler-id.m4:15: BTNG_INFO_CXX_ID is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- BTNG_AC_LOG([checking if $CXX is sunpro])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_FD_CC' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:383: AC_FD_CC is expanded from...
acmacros/configure-log.m4:1: BTNG_AC_LOG is expanded from...
acmacros/compiler-id.m4:38: BTNG_INFO_CXX_ID_NAMES is expanded from...
acmacros/compiler-id.m4:15: BTNG_INFO_CXX_ID is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- BTNG_AC_LOG([checking if $CXX is gnu])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_FD_CC' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:383: AC_FD_CC is expanded from...
acmacros/configure-log.m4:1: BTNG_AC_LOG is expanded from...
acmacros/compiler-id.m4:38: BTNG_INFO_CXX_ID_NAMES is expanded from...
acmacros/compiler-id.m4:15: BTNG_INFO_CXX_ID is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- BTNG_AC_LOG([checking if $CXX is dec])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_FD_CC' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:383: AC_FD_CC is expanded from...
acmacros/configure-log.m4:1: BTNG_AC_LOG is expanded from...
acmacros/compiler-id.m4:38: BTNG_INFO_CXX_ID_NAMES is expanded from...
acmacros/compiler-id.m4:15: BTNG_INFO_CXX_ID is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- BTNG_AC_LOG([checking if $CXX is kai])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_FD_CC' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:383: AC_FD_CC is expanded from...
acmacros/configure-log.m4:1: BTNG_AC_LOG is expanded from...
acmacros/compiler-id.m4:38: BTNG_INFO_CXX_ID_NAMES is expanded from...
acmacros/compiler-id.m4:15: BTNG_INFO_CXX_ID is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- BTNG_AC_LOG([checking if $CXX is sgi])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_FD_CC' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:383: AC_FD_CC is expanded from...
acmacros/configure-log.m4:1: BTNG_AC_LOG is expanded from...
acmacros/compiler-id.m4:38: BTNG_INFO_CXX_ID_NAMES is expanded from...
acmacros/compiler-id.m4:15: BTNG_INFO_CXX_ID is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- BTNG_AC_LOG([checking if $CXX is xlc])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_FD_CC' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:383: AC_FD_CC is expanded from...
acmacros/configure-log.m4:1: BTNG_AC_LOG is expanded from...
acmacros/compiler-id.m4:38: BTNG_INFO_CXX_ID_NAMES is expanded from...
acmacros/compiler-id.m4:15: BTNG_INFO_CXX_ID is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_LANG_RESTORE' is obsolete.
You should run autoupdate.], [../../lib/autoconf/lang.m4:134: AC_LANG_RESTORE is expanded from...
acmacros/compiler-id.m4:38: BTNG_INFO_CXX_ID_NAMES is expanded from...
acmacros/compiler-id.m4:15: BTNG_INFO_CXX_ID is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- BTNG_AC_LOG_VAR([CXX_ID CXX_VERSION])
m4trace:configure.ac:139: -1- BTNG_AC_LOG(["$btng_log_vars_index is $btng_log_vars_value"])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_FD_CC' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:383: AC_FD_CC is expanded from...
acmacros/configure-log.m4:1: BTNG_AC_LOG is expanded from...
acmacros/configure-log.m4:3: BTNG_AC_LOG_VAR is expanded from...
acmacros/compiler-id.m4:38: BTNG_INFO_CXX_ID_NAMES is expanded from...
acmacros/compiler-id.m4:15: BTNG_INFO_CXX_ID is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_PURIFY
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_PURIFY$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_PURIFY_API$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_PURIFY_LINKER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^purify_PREFIX$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^purify_INCLUDES$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^purify_LIBS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^purify_BIN$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^PURIFY_OPTIONS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^AUX_LINKER$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CCLD$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXXLD$])
m4trace:configure.ac:139: -1- ROSE_SUPPORT_INSURE
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_INSURE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^insure_PREFIX$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^insure_LIBS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^insure_BIN$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^INSURE_OPTIONS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^AUX_LINKER$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([ROSE_USE_INSURE], [test "x$enable_insure" = "xyes"])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_INSURE_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ROSE_USE_INSURE_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_INSURE_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([ROSE_USE_INSURE_FALSE])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CCLD$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXXLD$])
m4trace:configure.ac:139: -1- BTNG_CXX_AR
m4trace:configure.ac:139: -1- m4_pattern_allow([^Axx_INCLUDES$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^Axx_LIBS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^Pxx_INCLUDES$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^Pxx_LIBS$])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([AXXPXX_SPECIFIC_TESTS], [test ! "$with_AxxPxx" = no])
m4trace:configure.ac:139: -1- m4_pattern_allow([^AXXPXX_SPECIFIC_TESTS_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^AXXPXX_SPECIFIC_TESTS_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([AXXPXX_SPECIFIC_TESTS_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([AXXPXX_SPECIFIC_TESTS_FALSE])
m4trace:configure.ac:139: -1- AM_CONDITIONAL([USE_GCJ], [test "$with_gcj" = yes])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_GCJ_TRUE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^USE_GCJ_FALSE$])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_GCJ_TRUE])
m4trace:configure.ac:139: -1- _AM_SUBST_NOTMAKE([USE_GCJ_FALSE])
m4trace:configure.ac:139: -1- ROSE_CONFIGURE_SECTION([Checking system capabilities])
m4trace:configure.ac:139: -1- m4_pattern_allow([^RT_LIBS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^HAVE_EXPLICIT_TEMPLATE_INSTANTIATION$])
m4trace:configure.ac:139: -1- BTNG_CXX_AR
m4trace:configure.ac:139: -1- BTNG_AC_LOG([CXX_SHARED_LIB_UPDATE changed to $CXX_SHARED_LIB_UPDATE especially for the IBM])
m4trace:configure.ac:139: -1- _m4_warn([obsolete], [The macro `AC_FD_CC' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:383: AC_FD_CC is expanded from...
acmacros/configure-log.m4:1: BTNG_AC_LOG is expanded from...
config/support-rose.m4:869: ROSE_SUPPORT_ROSE_PART_2 is expanded from...
configure.ac:139: the top level])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX_STATIC_LIB_UPDATE$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX_SHARED_LIB_UPDATE$])
m4trace:configure.ac:140: -1- ROSE_SUPPORT_ROSE_PART_3
m4trace:configure.ac:140: -1- SETUP_EDG
m4trace:configure.ac:140: -1- m4_pattern_allow([^SAGE_TRANSFORM$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^STDC_HEADERS$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^off_t$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^size_t$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^TM_IN_SYS_TIME$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^__CHAR_UNSIGNED__$])
m4trace:configure.ac:140: -1- _m4_warn([obsolete], [The macro `AC_C_LONG_DOUBLE' is obsolete.
You should run autoupdate.], [../../lib/autoconf/types.m4:452: AC_C_LONG_DOUBLE is expanded from...
config/EDG.m4:1: SETUP_EDG is expanded from...
config/support-rose.m4:1738: ROSE_SUPPORT_ROSE_PART_3 is expanded from...
configure.ac:140: the top level])
m4trace:configure.ac:140: -1- m4_pattern_allow([^HAVE_LONG_DOUBLE_WIDER$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^HAVE_LONG_DOUBLE$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^SIZEOF_CHAR$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^SIZEOF_SHORT$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^SIZEOF_INT$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^SIZEOF_LONG$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^SIZEOF_FLOAT$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^SIZEOF_DOUBLE$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^SIZEOF_VOID_P$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^SIZEOF_LONG_DOUBLE$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^SIZEOF_LONG_LONG$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^LIB@&t@OBJS$])
m4trace:configure.ac:140: -1- AC_DEFUN([_AC_Header_stdlib_h], [m4_divert_text([INIT_PREPARE], [AS_VAR_APPEND([ac_header_list], [" stdlib.h"])])
_AC_HEADERS_EXPANSION])
m4trace:configure.ac:140: -1- AC_DEFUN([_AC_Header_unistd_h], [m4_divert_text([INIT_PREPARE], [AS_VAR_APPEND([ac_header_list], [" unistd.h"])])
_AC_HEADERS_EXPANSION])
m4trace:configure.ac:140: -1- AC_DEFUN([_AC_Header_sys_param_h], [m4_divert_text([INIT_PREPARE], [AS_VAR_APPEND([ac_header_list], [" sys/param.h"])])
_AC_HEADERS_EXPANSION])
m4trace:configure.ac:140: -1- m4_pattern_allow([^HAVE_GETPAGESIZE$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^HAVE_MMAP$])
m4trace:configure.ac:140: -1- _m4_warn([obsolete], [The macro `AC_FUNC_SETVBUF_REVERSED' is obsolete.  Remove it and all references to SETVBUF_REVERSED.], [../../lib/autoconf/functions.m4:1712: AC_FUNC_SETVBUF_REVERSED is expanded from...
config/EDG.m4:1: SETUP_EDG is expanded from...
config/support-rose.m4:1738: ROSE_SUPPORT_ROSE_PART_3 is expanded from...
configure.ac:140: the top level])
m4trace:configure.ac:140: -1- _m4_warn([obsolete], [The macro `AC_TYPE_SIGNAL' is obsolete.
You should run autoupdate.], [../../lib/autoconf/types.m4:746: AC_TYPE_SIGNAL is expanded from...
config/EDG.m4:1: SETUP_EDG is expanded from...
config/support-rose.m4:1738: ROSE_SUPPORT_ROSE_PART_3 is expanded from...
configure.ac:140: the top level])
m4trace:configure.ac:140: -1- m4_pattern_allow([^RETSIGTYPE$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^HAVE_STRCOLL$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^HAVE_VPRINTF$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^HAVE_DOPRNT$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^OBJ$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^EXE$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^USING_PURIFY$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^CHECKING$])
m4trace:configure.ac:140: -1- m4_pattern_allow([^GEN_BE$])
m4trace:configure.ac:140: -1- ROSE_ARG_ENABLE([alternate-edg-build-cpu], [for alternate EDG build cpu], [allows you to generate EDG binaries with a different CPU type in the name string
])
m4trace:configure.ac:140: -1- ROSE_REAL_ARG_ENABLE([alternate-edg-build-cpu], [for alternate EDG build cpu], [allows you to generate EDG binaries with a different CPU type in the name string
], [], [ROSE_ENABLE_ALTERNATE_EDG_BUILD_CPU])
m4trace:configure.ac:140: -1- m4_pattern_allow([^build_triplet_without_redhat$])
m4trace:configure.ac:141: -1- ROSE_SUPPORT_ROSE_PART_4
m4trace:configure.ac:141: -1- m4_pattern_allow([^TIME_WITH_SYS_TIME$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^HAVE_HRTIME_T$])
m4trace:configure.ac:141: -1- _m4_warn([obsolete], [The macro `AC_TRY_LINK' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:2698: AC_TRY_LINK is expanded from...
config/support-rose.m4:1765: ROSE_SUPPORT_ROSE_PART_4 is expanded from...
configure.ac:141: the top level])
m4trace:configure.ac:141: -1- m4_pattern_allow([^HAVE__RTC$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^top_pwd$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^absolute_path_srcdir$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_SOURCE_TREE_PATH$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^res_top_src$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^INCLUDE_COMPASS_MAKEFILE_INC$])
m4trace:configure.ac:141: -1- ACROSE_ENABLE_ROSEHPCT
m4trace:configure.ac:141: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
config/enable-rosehpct.m4:21: ACROSE_ENABLE_ROSEHPCT is expanded from...
config/support-rose.m4:1765: ROSE_SUPPORT_ROSE_PART_4 is expanded from...
configure.ac:141: the top level])
m4trace:configure.ac:141: -1- ACROSE_CHECK_ROSEHPCT([], [acrose_enable_rosehpct=no])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSEHPCT_DEP_INCLUDES$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSEHPCT_DEP_LIBS$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_BUILD_ROSEHPCT], [test x"${acrose_enable_rosehpct}" = xyes])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_BUILD_ROSEHPCT_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_BUILD_ROSEHPCT_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_ROSEHPCT_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_BUILD_ROSEHPCT_FALSE])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_COMPILE_TREE_PATH$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^QROSE_PREFIX$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_USE_QROSE], [test "x$with_QRose" != xno])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_QROSE_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_QROSE_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_QROSE_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_QROSE_FALSE])
m4trace:configure.ac:141: -1- AC_PATH_QT
m4trace:configure.ac:141: -1- AC_FIND_FILE([QtGui/qapplication.h], [$qt_incdirs], [qt_incdir])
m4trace:configure.ac:141: -1- m4_pattern_allow([^QT_INCLUDES$])
m4trace:configure.ac:141: -1- AC_FIND_FILE_EXT([libQtGui], [$qt_libdirs], [qt_libdir])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_USE_QT], [test "$with_qt" != no])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_QT_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_QT_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_QT_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_QT_FALSE])
m4trace:configure.ac:141: -1- m4_pattern_allow([^QT_LDFLAGS$])
m4trace:configure.ac:141: -1- AC_PATH_QT_MOC
m4trace:configure.ac:141: -1- AC_CHECK_WINDOWS
m4trace:configure.ac:141: -1- m4_pattern_allow([^USING_WINDOWS$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([QROSE_USE_MINGW32], [test $USING_MINGW32 = 1])
m4trace:configure.ac:141: -1- m4_pattern_allow([^QROSE_USE_MINGW32_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^QROSE_USE_MINGW32_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([QROSE_USE_MINGW32_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([QROSE_USE_MINGW32_FALSE])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([QROSE_USE_WINDOWS], [test $USING_WINDOWS = 1])
m4trace:configure.ac:141: -1- m4_pattern_allow([^QROSE_USE_WINDOWS_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^QROSE_USE_WINDOWS_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([QROSE_USE_WINDOWS_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([QROSE_USE_WINDOWS_FALSE])
m4trace:configure.ac:141: -1- AC_FIND_FILE([$moc_binary], [$moc_dirs], [moc_dir])
m4trace:configure.ac:141: -1- m4_pattern_allow([^MOC$])
m4trace:configure.ac:141: -1- AC_PATH_QT_RCC
m4trace:configure.ac:141: -1- AC_FIND_FILE([$rcc_binary], [$rcc_dirs], [rcc_dir])
m4trace:configure.ac:141: -1- m4_pattern_allow([^RCC$])
m4trace:configure.ac:141: -1- AC_PATH_QT_UIC
m4trace:configure.ac:141: -1- AC_FIND_FILE([$uic_binary], [$uic_dirs], [uic_dir])
m4trace:configure.ac:141: -1- m4_pattern_allow([^UIC$])
m4trace:configure.ac:141: -1- AC_PATH_QT_VERSION
m4trace:configure.ac:141: -1- m4_pattern_allow([^QT_VERSION$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^QT_VERSION_MAJOR$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^QT_VERSION_MINOR$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_WITH_ROSEQT], [test x"$with_roseQt" != x"no"])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_WITH_ROSEQT_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_WITH_ROSEQT_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_ROSEQT_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_ROSEQT_FALSE])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_USE_QT], [test x"$with_qt" != x"no"])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_QT_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_QT_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_QT_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_QT_FALSE])
m4trace:configure.ac:141: -1- ROSE_SUPPORT_BINARY
m4trace:configure.ac:141: -1- ROSE_CONFIGURE_SECTION([Checking binary analysis])
m4trace:configure.ac:141: -1- AX_BOOST_IOSTREAMS
m4trace:configure.ac:141: -1- m4_pattern_allow([^HAVE_BOOST_IOSTREAMS$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^BOOST_IOSTREAMS_LIB$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^BOOST_IOSTREAMS_LIB$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^BOOST_IOSTREAMS_LIB$])
m4trace:configure.ac:141: -1- AX_BOOST_SERIALIZATION
m4trace:configure.ac:141: -1- _m4_warn([syntax], [AC_LANG_CONFTEST: no AC_LANG_SOURCE call detected in body], [../../lib/autoconf/lang.m4:193: AC_LANG_CONFTEST is expanded from...
../../lib/autoconf/general.m4:2601: _AC_COMPILE_IFELSE is expanded from...
../../lib/autoconf/general.m4:2617: AC_COMPILE_IFELSE is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/general.m4:2042: AC_CACHE_VAL is expanded from...
../../lib/autoconf/general.m4:2063: AC_CACHE_CHECK is expanded from...
config/ax_boost_serialization.m4:32: AX_BOOST_SERIALIZATION is expanded from...
config/support-binary.m4:32: ROSE_SUPPORT_BINARY is expanded from...
config/support-rose.m4:1765: ROSE_SUPPORT_ROSE_PART_4 is expanded from...
configure.ac:141: the top level])
m4trace:configure.ac:141: -1- m4_pattern_allow([^HAVE_BOOST_SERIALIZATION$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^HAVE_BOOST_SERIALIZATION_LIB$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^BOOST_SERIALIZATION_LIB$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^HAVE_BOOST_SERIALIZATION_LIB$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^BOOST_SERIALIZATION_LIB$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^HAVE_BOOST_SERIALIZATION_LIB$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^BOOST_SERIALIZATION_LIB$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_HAVE_BOOST_SERIALIZATION_LIB], [test "$BOOST_SERIALIZATION_LIB" != "" ])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_BOOST_SERIALIZATION_LIB_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_BOOST_SERIALIZATION_LIB_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_BOOST_SERIALIZATION_LIB_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_BOOST_SERIALIZATION_LIB_FALSE])
m4trace:configure.ac:141: -1- ROSE_SUPPORT_LIBMAGIC
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBMAGIC$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBMAGIC$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_LIBMAGIC_PREFIX$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_HAVE_LIBMAGIC], [test -n "$ROSE_HAVE_LIBMAGIC"])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBMAGIC_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBMAGIC_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBMAGIC_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBMAGIC_FALSE])
m4trace:configure.ac:141: -1- ROSE_SUPPORT_YICES
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_YICES$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBYICES$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_YICES$])
m4trace:configure.ac:141: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-yices.m4:2: ROSE_SUPPORT_YICES is expanded from...
config/support-binary.m4:32: ROSE_SUPPORT_BINARY is expanded from...
config/support-rose.m4:1765: ROSE_SUPPORT_ROSE_PART_4 is expanded from...
configure.ac:141: the top level])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBYICES$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_YICES$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_YICES$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_YICES_PREFIX$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_HAVE_LIBYICES], [test -n "$ROSE_HAVE_LIBYICES"])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBYICES_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBYICES_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBYICES_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBYICES_FALSE])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_HAVE_YICES], [test -n "$ROSE_YICES"])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_YICES_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_YICES_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_YICES_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_YICES_FALSE])
m4trace:configure.ac:141: -1- ROSE_SUPPORT_YAML
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_YAML_PREFIX$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_HAVE_LIBYAML], [test -n "$ROSE_HAVE_LIBYAML"])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBYAML_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBYAML_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBYAML_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBYAML_FALSE])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBYAML$])
m4trace:configure.ac:141: -1- ROSE_SUPPORT_LIBREADLINE
m4trace:configure.ac:141: -1- ROSE_ARG_WITH([libreadline], [whether to use GNU readline], [Enable the use of the GNU readline library for interactive input. If not present then interactive inputs can
            be edited only with basic terminal editing commands like backspace, kill word, and kill line.  A readline
            installation directory can be specified for this switch, otherwise the default is /usr. To disable readline
            support in ROSE set this to "no" or use --without-libreadline.  The other readline-related switches are only
            processed when --with-libreadline is enabled.], [
    ])
m4trace:configure.ac:141: -1- ROSE_REAL_ARG_WITH([libreadline], [whether to use GNU readline], [Enable the use of the GNU readline library for interactive input. If not present then interactive inputs can
            be edited only with basic terminal editing commands like backspace, kill word, and kill line.  A readline
            installation directory can be specified for this switch, otherwise the default is /usr. To disable readline
            support in ROSE set this to "no" or use --without-libreadline.  The other readline-related switches are only
            processed when --with-libreadline is enabled.], [
    ], [ROSE_WITH_LIBREADLINE])
m4trace:configure.ac:141: -1- ROSE_ARG_WITH([libreadline-include], [if the GNU readline include directory was specified], [Override the include directory for GNU readline rather than using a default based on --with-libreadline.], [
        ])
m4trace:configure.ac:141: -1- ROSE_REAL_ARG_WITH([libreadline-include], [if the GNU readline include directory was specified], [Override the include directory for GNU readline rather than using a default based on --with-libreadline.], [
        ], [ROSE_WITH_LIBREADLINE_INCLUDE])
m4trace:configure.ac:141: -1- ROSE_ARG_WITH([libreadline-lib], [if the GNU readline library directory was specified], [Override the library directory for GNU readline rather than using a default based on --with-libreadline.], [
        ])
m4trace:configure.ac:141: -1- ROSE_REAL_ARG_WITH([libreadline-lib], [if the GNU readline library directory was specified], [Override the library directory for GNU readline rather than using a default based on --with-libreadline.], [
        ], [ROSE_WITH_LIBREADLINE_LIB])
m4trace:configure.ac:141: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-readline.m4:3: ROSE_SUPPORT_LIBREADLINE is expanded from...
config/support-binary.m4:32: ROSE_SUPPORT_BINARY is expanded from...
config/support-rose.m4:1765: ROSE_SUPPORT_ROSE_PART_4 is expanded from...
configure.ac:141: the top level])
m4trace:configure.ac:141: -1- ROSE_MSG_ERROR([libreadline.h is missing; use --with-libreadline=no to disable])
m4trace:configure.ac:141: -1- ROSE_MSG_ERROR([libreadline.a is missing; use --with-libreadline=no to disable])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_WITH_LIBREADLINE], [test "$LIBREADLINE_INCLUDE_PATH" != "" && test "$LIBREADLINE_LIBRARY_PATH" != ""])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_WITH_LIBREADLINE_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_WITH_LIBREADLINE_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_LIBREADLINE_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_LIBREADLINE_FALSE])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_WITH_LIBREADLINE_INCLUDE], [test "$LIBREADLINE_INCLUDE_PATH" != ""])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_WITH_LIBREADLINE_INCLUDE_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_WITH_LIBREADLINE_INCLUDE_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_LIBREADLINE_INCLUDE_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_WITH_LIBREADLINE_INCLUDE_FALSE])
m4trace:configure.ac:141: -1- m4_pattern_allow([^LIBREADLINE_INSTALL_PATH$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^LIBREADLINE_INCLUDE_PATH$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^LIBREADLINE_LIBRARY_PATH$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^LIBREADLINE_LIBS$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBREADLINE$])
m4trace:configure.ac:141: -1- ROSE_SUPPORT_I386
m4trace:configure.ac:141: -1- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
../../lib/autoconf/general.m4:1473: AC_ARG_ENABLE is expanded from...
config/support-i386.m4:4: ROSE_SUPPORT_I386 is expanded from...
config/support-binary.m4:32: ROSE_SUPPORT_BINARY is expanded from...
config/support-rose.m4:1765: ROSE_SUPPORT_ROSE_PART_4 is expanded from...
configure.ac:141: the top level])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ENABLE_I386], [test "$ac_cv_enable_i386" != no])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ENABLE_I386_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ENABLE_I386_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ENABLE_I386_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ENABLE_I386_FALSE])
m4trace:configure.ac:141: -1- m4_pattern_allow([^CFLAGS32$])
m4trace:configure.ac:141: -1- ROSE_SUPPORT_SAT
m4trace:configure.ac:141: -1- m4_pattern_allow([^USE_ROSE_SAT_SUPPORT$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_USE_SAT], [test ! "$with_sat" = no])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_SAT_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_SAT_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_SAT_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_SAT_FALSE])
m4trace:configure.ac:141: -1- ROSE_SUPPORT_INTEL_PIN
m4trace:configure.ac:141: -1- m4_pattern_allow([^USE_ROSE_INTEL_PIN_SUPPORT$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^IntelPin_path$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_USE_INTEL_PIN], [test ! "$with_IntelPin" = no])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_INTEL_PIN_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_INTEL_PIN_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_INTEL_PIN_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_INTEL_PIN_FALSE])
m4trace:configure.ac:141: -1- ROSE_SUPPORT_ELF
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBELF$])
m4trace:configure.ac:141: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-elf.m4:2: ROSE_SUPPORT_ELF is expanded from...
config/support-binary.m4:32: ROSE_SUPPORT_BINARY is expanded from...
config/support-rose.m4:1765: ROSE_SUPPORT_ROSE_PART_4 is expanded from...
configure.ac:141: the top level])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBELF$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_HAVE_LIBELF], [test -n "$ROSE_HAVE_LIBELF"])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBELF_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBELF_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBELF_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBELF_FALSE])
m4trace:configure.ac:141: -1- m4_pattern_allow([^LIBELF_PREFIX$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^LIBELF_CPPFLAGS$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^LIBELF_LDFLAGS$])
m4trace:configure.ac:141: -1- ROSE_SUPPORT_DWARF
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBDWARF$])
m4trace:configure.ac:141: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-dwarf.m4:2: ROSE_SUPPORT_DWARF is expanded from...
config/support-binary.m4:32: ROSE_SUPPORT_BINARY is expanded from...
config/support-rose.m4:1765: ROSE_SUPPORT_ROSE_PART_4 is expanded from...
configure.ac:141: the top level])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBDWARF$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_HAVE_LIBDWARF], [test -n "$ROSE_HAVE_LIBDWARF"])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBDWARF_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBDWARF_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBDWARF_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBDWARF_FALSE])
m4trace:configure.ac:141: -1- m4_pattern_allow([^LIBDWARF_PREFIX$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^LIBDWARF_CPPFLAGS$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^LIBDWARF_LDFLAGS$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_ETHER$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ETHER_PREFIX$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_USE_ETHER], [test "$with_ether" != "no"])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_ETHER_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_ETHER_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_ETHER_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_ETHER_FALSE])
m4trace:configure.ac:141: -1- ROSE_SUPPORT_LIBGCRYPT
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBGCRYPT$])
m4trace:configure.ac:141: -1- _m4_warn([cross], [cannot check for file existence when cross compiling], [../../lib/autoconf/general.m4:2788: AC_CHECK_FILE is expanded from...
config/support-gcrypt.m4:1: ROSE_SUPPORT_LIBGCRYPT is expanded from...
config/support-binary.m4:32: ROSE_SUPPORT_BINARY is expanded from...
config/support-rose.m4:1765: ROSE_SUPPORT_ROSE_PART_4 is expanded from...
configure.ac:141: the top level])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBGCRYPT$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_HAVE_LIBGCRYPT], [test -n "$ROSE_HAVE_LIBGCRYPT"])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBGCRYPT_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBGCRYPT_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBGCRYPT_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBGCRYPT_FALSE])
m4trace:configure.ac:141: -1- m4_pattern_allow([^LIBGCRYPT_PREFIX$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^LIBGCRYPT_CPPFLAGS$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^LIBGCRYPT_LDFLAGS$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_DLIB$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^DLIB_PREFIX$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_HAVE_DLIB], [test "$with_dlib" != "no"])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_DLIB_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_DLIB_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_DLIB_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_DLIB_FALSE])
m4trace:configure.ac:141: -1- m4_pattern_allow([^HAVE_PTHREAD_H$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^HAVE_PIPE2$])
m4trace:configure.ac:141: -2- m4_pattern_allow([^HAVE_USER_DESC$])
m4trace:configure.ac:141: -1- ROSE_SUPPORT_LIBPQXX
m4trace:configure.ac:141: -1- _m4_warn([obsolete], [The macro `AC_CHECKING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:2277: AC_CHECKING is expanded from...
config/support-libpqxx.m4:2: ROSE_SUPPORT_LIBPQXX is expanded from...
config/support-binary.m4:32: ROSE_SUPPORT_BINARY is expanded from...
config/support-rose.m4:1765: ROSE_SUPPORT_ROSE_PART_4 is expanded from...
configure.ac:141: the top level])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBPQXX$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_LIBPQXX_PREFIX$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_HAVE_LIBPQXX], [test -n "$ROSE_HAVE_LIBPQXX"])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBPQXX_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_LIBPQXX_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBPQXX_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_LIBPQXX_FALSE])
m4trace:configure.ac:141: -2- _m4_warn([obsolete], [The macro `AC_ERROR' is obsolete.
You should run autoupdate.], [../../lib/autoconf/oldnames.m4:34: AC_ERROR is expanded from...
config/support-binary.m4:32: ROSE_SUPPORT_BINARY is expanded from...
config/support-rose.m4:1765: ROSE_SUPPORT_ROSE_PART_4 is expanded from...
configure.ac:141: the top level])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_USE_TEST_SMT_SOLVER], [test ! "$TEST_SMT_SOLVER" = ""])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_TEST_SMT_SOLVER_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_TEST_SMT_SOLVER_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_TEST_SMT_SOLVER_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_TEST_SMT_SOLVER_FALSE])
m4trace:configure.ac:141: -1- m4_pattern_allow([^TEST_SMT_SOLVER$])
m4trace:configure.ac:141: -1- ROSE_SUPPORT_CAPSTONE
m4trace:configure.ac:141: -1- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
../../lib/autoconf/general.m4:1492: AC_ARG_WITH is expanded from...
config/support-capstone.m4:2: ROSE_SUPPORT_CAPSTONE is expanded from...
config/support-binary.m4:32: ROSE_SUPPORT_BINARY is expanded from...
config/support-rose.m4:1765: ROSE_SUPPORT_ROSE_PART_4 is expanded from...
configure.ac:141: the top level])
m4trace:configure.ac:141: -1- _m4_warn([obsolete], [The macro `AC_CHECKING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:2277: AC_CHECKING is expanded from...
config/support-capstone.m4:2: ROSE_SUPPORT_CAPSTONE is expanded from...
config/support-binary.m4:32: ROSE_SUPPORT_BINARY is expanded from...
config/support-rose.m4:1765: ROSE_SUPPORT_ROSE_PART_4 is expanded from...
configure.ac:141: the top level])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_CAPSTONE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_CAPSTONE_PREFIX$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_HAVE_CAPSTONE], [test -n "$ROSE_HAVE_CAPSTONE"])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_CAPSTONE_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_HAVE_CAPSTONE_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_CAPSTONE_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_HAVE_CAPSTONE_FALSE])
m4trace:configure.ac:141: -1- ROSE_SUPPORT_PYTHON_API
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_ENABLE_PYTHON_API$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_ENABLE_PYTHON_API], [test "$enabled" = yes])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_ENABLE_PYTHON_API_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_ENABLE_PYTHON_API_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PYTHON_API_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PYTHON_API_FALSE])
m4trace:configure.ac:141: -1- m4_pattern_allow([^HAVE_NUMA_H$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^HAVE_NUMA_H$])
m4trace:configure.ac:141: -1- AM_CONDITIONAL([ROSE_USE_LIBNUMA], [test "x$found_libnuma" = xyes])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_LIBNUMA_TRUE$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^ROSE_USE_LIBNUMA_FALSE$])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_LIBNUMA_TRUE])
m4trace:configure.ac:141: -1- _AM_SUBST_NOTMAKE([ROSE_USE_LIBNUMA_FALSE])
m4trace:configure.ac:141: -1- m4_pattern_allow([^PACKAGE_VERSION_NUMERIC$])
m4trace:configure.ac:141: -1- m4_pattern_allow([^CONFIG_ROSE$])
m4trace:configure.ac:142: -1- ROSE_SUPPORT_ROSE_PART_5
m4trace:configure.ac:142: -1- m4_pattern_allow([^subdirs$])
m4trace:configure.ac:142: -1- CLASSPATH_COND_IF([ROSE_HAS_EDG_SOURCE], [test "x$has_edg_source" = "xyes"], [
AC_CONFIG_FILES([
src/frontend/CxxFrontend/EDG/Makefile
src/frontend/CxxFrontend/EDG/EDG_4.12/Makefile
src/frontend/CxxFrontend/EDG/EDG_4.12/misc/Makefile
src/frontend/CxxFrontend/EDG/EDG_4.12/src/Makefile
src/frontend/CxxFrontend/EDG/EDG_4.12/src/disp/Makefile
src/frontend/CxxFrontend/EDG/EDG_4.12/lib/Makefile
src/frontend/CxxFrontend/EDG/EDG_5.0/Makefile
src/frontend/CxxFrontend/EDG/EDG_5.0/misc/Makefile
src/frontend/CxxFrontend/EDG/EDG_5.0/src/Makefile
src/frontend/CxxFrontend/EDG/EDG_5.0/src/disp/Makefile
src/frontend/CxxFrontend/EDG/EDG_5.0/lib/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.0/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.0/misc/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.0/src/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.0/src/disp/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.0/lib/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.1/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.1/misc/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.1/src/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.1/src/disp/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.1/lib/Makefile
src/frontend/CxxFrontend/EDG/edgRose/Makefile
])], [])
m4trace:configure.ac:142: -1- AM_COND_IF([ROSE_HAS_EDG_SOURCE], [
AC_CONFIG_FILES([
src/frontend/CxxFrontend/EDG/Makefile
src/frontend/CxxFrontend/EDG/EDG_4.12/Makefile
src/frontend/CxxFrontend/EDG/EDG_4.12/misc/Makefile
src/frontend/CxxFrontend/EDG/EDG_4.12/src/Makefile
src/frontend/CxxFrontend/EDG/EDG_4.12/src/disp/Makefile
src/frontend/CxxFrontend/EDG/EDG_4.12/lib/Makefile
src/frontend/CxxFrontend/EDG/EDG_5.0/Makefile
src/frontend/CxxFrontend/EDG/EDG_5.0/misc/Makefile
src/frontend/CxxFrontend/EDG/EDG_5.0/src/Makefile
src/frontend/CxxFrontend/EDG/EDG_5.0/src/disp/Makefile
src/frontend/CxxFrontend/EDG/EDG_5.0/lib/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.0/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.0/misc/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.0/src/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.0/src/disp/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.0/lib/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.1/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.1/misc/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.1/src/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.1/src/disp/Makefile
src/frontend/CxxFrontend/EDG/EDG_6.1/lib/Makefile
src/frontend/CxxFrontend/EDG/edgRose/Makefile
])], [])
m4trace:configure.ac:143: -1- ROSE_OPTIONAL_PROJECTS
m4trace:configure.ac:143: -1- m4_pattern_allow([^OPTIONAL_PROJECTS$])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_USE_WT$])
m4trace:configure.ac:143: -1- m4_pattern_allow([^WT_PREFIX$])
m4trace:configure.ac:143: -1- AM_CONDITIONAL([ROSE_USE_WT], [test "$with_wt" != "no"])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_USE_WT_TRUE$])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_USE_WT_FALSE$])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_USE_WT_TRUE])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_USE_WT_FALSE])
m4trace:configure.ac:143: -1- AM_CONDITIONAL([ROSE_ENABLE_PROJECT_CODE_PROPERTIES], [test "$rose_enable_project_code_properties" = yes])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_ENABLE_PROJECT_CODE_PROPERTIES_TRUE$])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_ENABLE_PROJECT_CODE_PROPERTIES_FALSE$])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PROJECT_CODE_PROPERTIES_TRUE])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PROJECT_CODE_PROPERTIES_FALSE])
m4trace:configure.ac:143: -1- AM_CONDITIONAL([ROSE_ENABLE_PROJECT_CODETHORN], [test "$rose_enable_project_CodeThorn" = yes])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_ENABLE_PROJECT_CODETHORN_TRUE$])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_ENABLE_PROJECT_CODETHORN_FALSE$])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PROJECT_CODETHORN_TRUE])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PROJECT_CODETHORN_FALSE])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_MATLAB_USE_ARMADILLO$])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ARMA_PREFIX$])
m4trace:configure.ac:143: -1- AM_CONDITIONAL([ROSE_MATLAB_USE_ARMADILLO], [test "$with_armadillo" != "no"])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_MATLAB_USE_ARMADILLO_TRUE$])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_MATLAB_USE_ARMADILLO_FALSE$])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_MATLAB_USE_ARMADILLO_TRUE])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_MATLAB_USE_ARMADILLO_FALSE])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_USE_WT$])
m4trace:configure.ac:143: -1- m4_pattern_allow([^WT_PREFIX$])
m4trace:configure.ac:143: -1- AM_CONDITIONAL([ROSE_USE_WT], [test "$with_wt" != "no"])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_USE_WT_TRUE$])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_USE_WT_FALSE$])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_USE_WT_TRUE])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_USE_WT_FALSE])
m4trace:configure.ac:143: -1- AM_CONDITIONAL([ROSE_ENABLE_PROJECT_Rose_To_LLVM], [test "$rose_enable_project_Rose_To_LLVM" = yes])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_ENABLE_PROJECT_Rose_To_LLVM_TRUE$])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_ENABLE_PROJECT_Rose_To_LLVM_FALSE$])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PROJECT_Rose_To_LLVM_TRUE])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PROJECT_Rose_To_LLVM_FALSE])
m4trace:configure.ac:143: -1- AM_CONDITIONAL([ROSE_ENABLE_PROJECT_SCALARIZATION], [test "$rose_enable_project_scalarization" = yes])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_ENABLE_PROJECT_SCALARIZATION_TRUE$])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_ENABLE_PROJECT_SCALARIZATION_FALSE$])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PROJECT_SCALARIZATION_TRUE])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PROJECT_SCALARIZATION_FALSE])
m4trace:configure.ac:143: -1- AM_CONDITIONAL([ROSE_ENABLE_PROJECT_TALCDATALAYOUT], [test "$rose_enable_project_talcdatalayout" = yes])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_ENABLE_PROJECT_TALCDATALAYOUT_TRUE$])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_ENABLE_PROJECT_TALCDATALAYOUT_FALSE$])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PROJECT_TALCDATALAYOUT_TRUE])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PROJECT_TALCDATALAYOUT_FALSE])
m4trace:configure.ac:143: -1- AM_CONDITIONAL([ROSE_ENABLE_PROJECT_TRACE_ANALYSIS], [test "$rose_enable_project_trace_analysis" = yes])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_ENABLE_PROJECT_TRACE_ANALYSIS_TRUE$])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_ENABLE_PROJECT_TRACE_ANALYSIS_FALSE$])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PROJECT_TRACE_ANALYSIS_TRUE])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PROJECT_TRACE_ANALYSIS_FALSE])
m4trace:configure.ac:143: -1- AM_CONDITIONAL([ROSE_ENABLE_PROJECT_SCALARIZATION], [test "$rose_enable_project_ZFPTool" = yes])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_ENABLE_PROJECT_SCALARIZATION_TRUE$])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ROSE_ENABLE_PROJECT_SCALARIZATION_FALSE$])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PROJECT_SCALARIZATION_TRUE])
m4trace:configure.ac:143: -1- _AM_SUBST_NOTMAKE([ROSE_ENABLE_PROJECT_SCALARIZATION_FALSE])
m4trace:configure.ac:144: -1- ROSE_SUPPORT_ROSE_PART_6
m4trace:configure.ac:145: -1- ROSE_SUPPORT_ROSE_PART_7
m4trace:configure.ac:152: -1- m4_pattern_allow([^ROSE_CONFIG_TOKEN$])
m4trace:configure.ac:156: -1- ROSE_SUPPORT_BLACKLIST
m4trace:configure.ac:156: -1- ROSE_SUPPORT_SUMMARY
m4trace:configure.ac:156: -1- ROSE_SUMMARY_HEADING([Compilers for ROSE source code])
m4trace:configure.ac:156: -1- ROSE_SUMMARY_HEADING([Languages supported for analysis])
m4trace:configure.ac:156: -1- ROSE_SUMMARY_HEADING([Boost library])
m4trace:configure.ac:156: -1- ROSE_SUMMARY_HEADING([Binary analysis support])
m4trace:configure.ac:156: -1- ROSE_SUMMARY_HEADING([C/C++ analysis support])
m4trace:configure.ac:156: -1- ROSE_SUMMARY_HEADING([Fortran analysis support])
m4trace:configure.ac:156: -1- ROSE_SUMMARY_HEADING([Java analysis support])
m4trace:configure.ac:156: -1- ROSE_SUMMARY_HEADING([Python analysis support])
m4trace:configure.ac:156: -1- ROSE_SUMMARY_HEADING([Doxygen documentation generator])
m4trace:configure.ac:156: -1- ROSE_CONFIGURE_SECTION([Checking blacklisted configurations])
m4trace:configure.ac:159: -1- ROSE_CONFIGURE_SECTION([Generating files])
m4trace:configure.ac:160: -1- m4_pattern_allow([^LIB@&t@OBJS$])
m4trace:configure.ac:160: -1- m4_pattern_allow([^LTLIBOBJS$])
m4trace:configure.ac:160: -1- AM_CONDITIONAL([am__EXEEXT], [test -n "$EXEEXT"])
m4trace:configure.ac:160: -1- m4_pattern_allow([^am__EXEEXT_TRUE$])
m4trace:configure.ac:160: -1- m4_pattern_allow([^am__EXEEXT_FALSE$])
m4trace:configure.ac:160: -1- _AM_SUBST_NOTMAKE([am__EXEEXT_TRUE])
m4trace:configure.ac:160: -1- _AM_SUBST_NOTMAKE([am__EXEEXT_FALSE])
m4trace:configure.ac:160: -1- m4_pattern_allow([^LT_CONFIG_H$])
m4trace:configure.ac:160: -1- m4_pattern_allow([^ltdl_LIBOBJS$])
m4trace:configure.ac:160: -1- m4_pattern_allow([^ltdl_LTLIBOBJS$])
m4trace:configure.ac:160: -1- _AC_AM_CONFIG_HEADER_HOOK(["$ac_file"])
m4trace:configure.ac:160: -1- _AM_OUTPUT_DEPENDENCY_COMMANDS
m4trace:configure.ac:160: -1- AM_RUN_LOG([cd "$am_dirpart" \
      && sed -e '/# am--include-marker/d' "$am_filepart" \
        | $MAKE -f - am--depfiles])
m4trace:configure.ac:160: -1- _LT_PROG_LTMAIN
