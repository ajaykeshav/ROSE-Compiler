# Makefile.in generated by automake 1.16.2 from Makefile.am.
# tests/nonsmoke/functional/CompileTests/Cxx11_tests/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2020 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# These definitions are for the benefit of independent software contained			-*- makefile -*-
# in ROSE.  (Currently, this means SAGE and ROSETTA.)
# It defines ROSE_INCLUDES and ROSE_LIBS so they can use the ROSE codes.

# ROSE_INCLUDES contains the include flags for compiling with ROSE code.
# (ROSE software should set the include paths in their respective Makefile.am
# files, since they are expected to know the ROSE source tree structure.)
# To use ROSE_INCLUDES, the independent software packages contained in ROSE
# should define the variable ROSE_HOME to be the relative path to the root
# of the ROSE directory tree.

# This fixes some problem caused by automake or autoconf
# (detailed documentation is in the ChangeLog)
# MAKE=gmake

# DQ (8/10/2007): Valentin suggested this be commented out.
# DQ (4/23/2006): This is the default when build using automake version 1.6.3 but it
# causes errors so we would like to specify --run automake instead
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake-1.6
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake

# force ranlib to just call touch so that *.so (dynamic libraries) will not
# be run with ranlib (which is a error).  This allows us to use dynamic
# libraries as the default within ROSE.
# JJW 7/25/2008: Do we really need this?
VPATH = /home/meltdown1995/roseRoot/rose-compiler//src/tests/nonsmoke/functional/CompileTests/Cxx11_tests
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/rose
pkgincludedir = $(includedir)/rose
pkglibdir = $(libdir)/rose
pkglibexecdir = $(libexecdir)/rose
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu

# DQ (10/23/2020): Pei-Hung and I think this may not be required (not available on my system).
# I get the error: 
#    /bin/ld: skipping incompatible /lib/libtinfo.so when searching for -ltinfo
#    clang-10: error: linker command failed with exit code 1 (use -v to see invocation)
# ROSE_LIBS += $(CLANG_LDFLAGS) -ltinfo
#am__append_1 = $(CLANG_LDFLAGS)
#am__append_2 = -R $(DOT_ASIS_LIB_DIR_) 

# NOTE: test2016_40.C fails due to a problem isolated into test2019_167.C (which required a more general form of name qualification support).

# NOTE: Best examples of current issue are: test2019_50.C and test2019_52.C

# NOTE: test2019_34.C, test2019_37.C, and test2019_38.C don't compile with at least some versions of GNU g++ (e.g. version 5.1) but will 
# compile with EDG and ROSE now.  And the generated code is correct,
# NOTE: test2019_15.C fails for the GNU 4.8.5, but passes for everything else (or at least later versions of gnu, versions 5.1 and later).

# NOTE: test2012_10.C works on with GNU 5.1, but not GNU 6.1 (something different in the header files, not handled by EDG 4.12).
# Priority to fix: test2014_85.C, test2015_11.C, test2016_41.C, test2017_17.C
#am__append_3 = \
#    rose-2037.C

am__append_4 = \
    rose-2037.C

#am__append_5 = \
#    rose-2037.C

#am__append_6 = \
#     test2016_26.C \
#     test2016_27.C \
#     test2016_31.C \
#     test2019_162.C

am__append_7 = \
     test2016_26.C \
     test2016_27.C \
     test2016_31.C \
     test2019_162.C \
   test2019_299.C 


# INTEL compiler
#   TESTCODE_CURRENTLY_FAILING += \
#     rose-1380.C \
#     rose-1774.C \
#     test2012_14.C \
#     test2012_26.C \
#     test2018_105.C \
#     test2018_117.C \
#     test2018_118.C \
#     test2018_127.C \
#     test2018_136.C \
#     test2018_93.C \
#     test2018_96.C \
#     test2019_04.C \
#     test2019_110.C \
#     test2019_111.C \
#     test2019_112.C \
#     test2019_218.C \
#     test2019_219.C \
#     test2019_230.C \
#     test2019_231.C \
#     test2019_344.C \
#     test2019_355.C \
#     test2019_367.C \
#     test2019_94.C \
#     test2019_95.C
#am__append_8 = \
#        test2012_07.C \
#   test2014_88.C 

# CLANG compiler
#am__append_9 = \
#        rose-1380.C \
#        test2012_07.C 

#am__append_10 = \
#   test2019_247.C \
#   test2019_248.C \
#   test2019_272.C \
#   test2019_273.C \
#   test2019_274.C \
#   test2019_291.C \
#   test2019_292.C \
#   test2020_54.C \
#   test2020_55.C \
#   test2020_56.C 


#      TESTCODES_REQUIRED_TO_PASS += 
am__append_11 = \
     test2016_23.C \
     test2016_35.C \
     test2016_36.C 

#am__append_12 = \
#         test2020_69.C \
#         test2020_70.C 

am__append_13 = \
         rose-1973.C \
   test2012_07.C \
         test2012_25.C \
         test2016_16.C \
         test2016_20.C \
         test2019_39.C \
         test2019_41.C \
         test2019_42.C \
         test2019_463.C \
   test2020_69.C \
   test2020_70.C 

am__append_14 = \
        rose-1380.C \
   test2014_88.C \
   test2018_54.C \
        test2018_93.C \
        test2018_96.C \
        test2018_105.C \
        test2018_117.C \
        test2018_118.C \
        test2018_127.C \
        test2018_136.C \
        test2019_344.C \
   test2019_474.C \
   test2019_488.C \
   test2020_14.C \
   test2020_19.C \
   test2020_20.C \
   test2020_21.C 

am__append_15 = --edg:no_warnings --edg:restrict
subdir = tests/nonsmoke/functional/CompileTests/Cxx11_tests
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acmacros/canonicalize-symlink.m4 \
	$(top_srcdir)/acmacros/compiler-ar.m4 \
	$(top_srcdir)/acmacros/compiler-id.m4 \
	$(top_srcdir)/acmacros/configure-log.m4 \
	$(top_srcdir)/acmacros/pkg.m4 $(top_srcdir)/acmacros/upc.m4 \
	$(top_srcdir)/config/EDG.m4 $(top_srcdir)/config/ROSE.m4 \
	$(top_srcdir)/config/ac_pkg_swig.m4 \
	$(top_srcdir)/config/acinclude.m4 \
	$(top_srcdir)/config/ax_boost_base.m4 \
	$(top_srcdir)/config/ax_boost_chrono.m4 \
	$(top_srcdir)/config/ax_boost_date_time.m4 \
	$(top_srcdir)/config/ax_boost_filesystem.m4 \
	$(top_srcdir)/config/ax_boost_iostreams.m4 \
	$(top_srcdir)/config/ax_boost_program_options.m4 \
	$(top_srcdir)/config/ax_boost_random.m4 \
	$(top_srcdir)/config/ax_boost_regex.m4 \
	$(top_srcdir)/config/ax_boost_serialization.m4 \
	$(top_srcdir)/config/ax_boost_system.m4 \
	$(top_srcdir)/config/ax_boost_thread.m4 \
	$(top_srcdir)/config/ax_boost_wave.m4 \
	$(top_srcdir)/config/ax_compare_version.m4 \
	$(top_srcdir)/config/ax_compiler_vendor.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_11.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_14.m4 \
	$(top_srcdir)/config/ax_lib_mysql.m4 \
	$(top_srcdir)/config/ax_lib_sqlite3.m4 \
	$(top_srcdir)/config/ax_lib_xerces.m4 \
	$(top_srcdir)/config/ax_prog_bison_version.m4 \
	$(top_srcdir)/config/ax_python_devel.m4 \
	$(top_srcdir)/config/ax_with_prog.m4 \
	$(top_srcdir)/config/choose-backend-compiler.m4 \
	$(top_srcdir)/config/compiler-defs.m4 \
	$(top_srcdir)/config/determine-os.m4 \
	$(top_srcdir)/config/enable-rosehpct.m4 \
	$(top_srcdir)/config/generate-backend-compiler-specific-headers.m4 \
	$(top_srcdir)/config/libtool.m4 $(top_srcdir)/config/libxml.m4 \
	$(top_srcdir)/config/ltargz.m4 $(top_srcdir)/config/ltdl.m4 \
	$(top_srcdir)/config/ltoptions.m4 \
	$(top_srcdir)/config/ltsugar.m4 \
	$(top_srcdir)/config/ltversion.m4 \
	$(top_srcdir)/config/lt~obsolete.m4 \
	$(top_srcdir)/config/mdl_have_opengl_2014.m4 \
	$(top_srcdir)/config/qrose_indigo_1.m4 \
	$(top_srcdir)/config/qrose_indigo_1_windows.m4 \
	$(top_srcdir)/config/support-GraphViz.m4 \
	$(top_srcdir)/config/support-IntelPin.m4 \
	$(top_srcdir)/config/support-accelerator.m4 \
	$(top_srcdir)/config/support-aterm.m4 \
	$(top_srcdir)/config/support-backend-x10.m4 \
	$(top_srcdir)/config/support-bddbddb.m4 \
	$(top_srcdir)/config/support-binary.m4 \
	$(top_srcdir)/config/support-bison.m4 \
	$(top_srcdir)/config/support-blacklist.m4 \
	$(top_srcdir)/config/support-boost.m4 \
	$(top_srcdir)/config/support-capstone.m4 \
	$(top_srcdir)/config/support-clang.m4 \
	$(top_srcdir)/config/support-cobol.m4 \
	$(top_srcdir)/config/support-compass2.m4 \
	$(top_srcdir)/config/support-compiler-features.m4 \
	$(top_srcdir)/config/support-cuda.m4 \
	$(top_srcdir)/config/support-doxygen.m4 \
	$(top_srcdir)/config/support-dwarf.m4 \
	$(top_srcdir)/config/support-edg-debugging.m4 \
	$(top_srcdir)/config/support-edg.m4 \
	$(top_srcdir)/config/support-elf.m4 \
	$(top_srcdir)/config/support-fatal-rose-warnings.m4 \
	$(top_srcdir)/config/support-flang.m4 \
	$(top_srcdir)/config/support-gcc-omp.m4 \
	$(top_srcdir)/config/support-gcrypt.m4 \
	$(top_srcdir)/config/support-gmp.m4 \
	$(top_srcdir)/config/support-gnat.m4 \
	$(top_srcdir)/config/support-gomp-omp.m4 \
	$(top_srcdir)/config/support-haskell.m4 \
	$(top_srcdir)/config/support-i386.m4 \
	$(top_srcdir)/config/support-ida.m4 \
	$(top_srcdir)/config/support-insure.m4 \
	$(top_srcdir)/config/support-isl.m4 \
	$(top_srcdir)/config/support-java.m4 \
	$(top_srcdir)/config/support-languages.m4 \
	$(top_srcdir)/config/support-lcov.m4 \
	$(top_srcdir)/config/support-libffi.m4 \
	$(top_srcdir)/config/support-libharu.m4 \
	$(top_srcdir)/config/support-libpqxx.m4 \
	$(top_srcdir)/config/support-llvm.m4 \
	$(top_srcdir)/config/support-magic.m4 \
	$(top_srcdir)/config/support-maple.m4 \
	$(top_srcdir)/config/support-mint.m4 \
	$(top_srcdir)/config/support-mpi.m4 \
	$(top_srcdir)/config/support-octave.m4 \
	$(top_srcdir)/config/support-ofp.m4 \
	$(top_srcdir)/config/support-omp.m4 \
	$(top_srcdir)/config/support-php.m4 \
	$(top_srcdir)/config/support-pocc.m4 \
	$(top_srcdir)/config/support-projects.m4 \
	$(top_srcdir)/config/support-purify.m4 \
	$(top_srcdir)/config/support-python-api.m4 \
	$(top_srcdir)/config/support-python.m4 \
	$(top_srcdir)/config/support-readline.m4 \
	$(top_srcdir)/config/support-rose.m4 \
	$(top_srcdir)/config/support-rted.m4 \
	$(top_srcdir)/config/support-rtedupc.m4 \
	$(top_srcdir)/config/support-sanitizer.m4 \
	$(top_srcdir)/config/support-sat.m4 \
	$(top_srcdir)/config/support-spot.m4 \
	$(top_srcdir)/config/support-ssl.m4 \
	$(top_srcdir)/config/support-stratego.m4 \
	$(top_srcdir)/config/support-summary.m4 \
	$(top_srcdir)/config/support-swipl.m4 \
	$(top_srcdir)/config/support-valgrind.m4 \
	$(top_srcdir)/config/support-vectorization.m4 \
	$(top_srcdir)/config/support-visualization.m4 \
	$(top_srcdir)/config/support-windows.m4 \
	$(top_srcdir)/config/support-x10.m4 \
	$(top_srcdir)/config/support-yaml.m4 \
	$(top_srcdir)/config/support-yices.m4 \
	$(top_srcdir)/config/support-z3.m4 \
	$(top_srcdir)/config/support_POET.m4 \
	$(top_srcdir)/config/swig_enable_cxx.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/rose_config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
depcomp =
am__maybe_remake_depfiles =
SOURCES =
DIST_SOURCES =
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
am__DIST_COMMON = $(srcdir)/Makefile.in \
	$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs \
	$(top_srcdir)/config/mkinstalldirs
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ABS_COMPASS2_XML_SRCDIR = /home/meltdown1995/roseRoot/rose-compiler/src/projects/compass2/share/xml
ACLOCAL = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing aclocal-1.16
AMTAR = 
AM_DEFAULT_VERBOSITY = 0
AR = ar
ARMA_PREFIX = 
ATERM_BIN_PATH = 
ATERM_INSTALL_PATH = 
ATERM_LIBRARY_PATH = 
AUTOCONF = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing autoconf
AUTOHEADER = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing autoheader
AUTOMAKE = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing automake-1.16
AUX_LINKER = 
AWK = mawk
Axx_INCLUDES = 
Axx_LIBS = 
BACKEND_ADA_COMPILER = gnat
BACKEND_COBOL_COMPILER = cobc
BACKEND_COMPILER_VERSION_MAJOR_NUMBER = 8
BACKEND_COMPILER_VERSION_MINOR_NUMBER = 4
BACKEND_COMPILER_VERSION_NAME = gnu
BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER = 0
BACKEND_CSHARP_COMPILER = mcs
BACKEND_CXX_COMPILER = g++
BACKEND_CXX_VENDOR_AND_VERSION2 = gnu-8.4
BACKEND_CXX_VENDOR_AND_VERSION3 = gnu-8.4.0
BACKEND_C_COMPILER = gcc
BACKEND_FORTRAN_COMPILER = gfortran
BACKEND_JAVA_COMPILER = javac
BACKEND_JOVIAL_COMPILER = default_jovial_compiler
BACKEND_MATLAB_COMPILER = octave
BACKEND_X10_COMPILER = 
BISON = /usr/bin/bison
BISON_VERSION = bison (GNU Bison) 3.7
BOOST_CHRONO_LIB = -lboost_chrono
BOOST_CPPFLAGS = -pthread -I/usr/include
BOOST_DATE_TIME_LIB = -lboost_date_time
BOOST_FILESYSTEM_LIB = -lboost_filesystem
BOOST_IOSTREAMS_LIB = -lboost_iostreams
BOOST_LDFLAGS = -pthread -L/usr/lib/x86_64-linux-gnu
BOOST_PROGRAM_OPTIONS_LIB = -lboost_program_options
BOOST_RANDOM_LIB = -lboost_random
BOOST_REGEX_LIB = -lboost_regex
BOOST_SERIALIZATION_LIB = -lboost_serialization
BOOST_SYSTEM_LIB = -lboost_system
BOOST_THREAD_LIB = -lboost_thread
BOOST_WAVE_LIB = -lboost_wave
CANDL_PATH = 
CC = gcc
CCDEPMODE = depmode=gcc3
CCLD = gcc
CFLAGS = -g -O2  -g -O2 -Wall -Wstrict-prototypes -Wmissing-prototypes
CFLAGS32 = no
CLANG_CXXFLAGS = 
CLANG_LDFLAGS = 
CLANG_LIBDIR = 
CLASSPATH = /home/meltdown1995/roseRoot/rose-compiler//src/src/3rdPartyLibraries/antlr-jars/antlr-3.5.2-complete.jar:/home/meltdown1995/roseRoot/rose-compiler//src/src/3rdPartyLibraries/fortran-parser/OpenFortranParser-20200819-JDK8.jar
CLOOG_PATH = 
COBPT_INSTALL_PATH = 
COBPT_LIBRARY_PATH = 
CPP = gcc -E

# DQ (9/27/2015): Added to support new use of AM_CPPFLAGS instead of INCLUDES
# (depreicated in automake and for which many warnings are generated).
CPPFLAGS = $(AM_CPPFLAGS)
CUDA_BIN_DIR = 
CUDA_INC_DIR = /home/meltdown1995/roseRoot/rose-compiler/build/include-staging/cuda_HEADERS/cuda-7.5/targets/x86_64-linux/include/
CUDA_LIB_DIR = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS =   -g -fno-var-tracking-assignments -Wno-misleading-indentation -O2 -Wall
CXXLD = g++
CXX_DEBUG = -g -fno-var-tracking-assignments -Wno-misleading-indentation
CXX_OPTIMIZE = -O2
CXX_SHARED_LIB_UPDATE = ${CXX} -shared -o
CXX_STATIC_LIB_UPDATE = ${AR} ruv
CXX_TEMPLATE_OBJECTS = 
CXX_TEMPLATE_REPOSITORY_PATH = $(top_builddir)/src
CXX_WARNINGS = -Wall
CYGPATH_W = echo
C_DEBUG = -g
C_OPTIMIZE = -O2
C_WARNINGS = -Wall -Wstrict-prototypes -Wmissing-prototypes
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLIB_PREFIX = 
DLLTOOL = false
DOXYGEN = 
DOXYGEN_ADDED_DIRECTORY_1 = @top_pwd@/src/frontend/SageIII
DOXYGEN_ADDED_DIRECTORY_2 = /home/meltdown1995/roseRoot/rose-compiler//src/src/frontend/SageIII
DOXYGEN_ENABLED_SECTIONS = documentUserVersionUsingDoxygen
DOXYGEN_EXTRACT_ALL = NO
DOXYGEN_EXTRACT_PRIVATE = NO
DOXYGEN_EXTRACT_STATIC = NO
DOXYGEN_HIDE_FRIEND_COMPOUNDS = YES
DOXYGEN_HIDE_UNDOC_CLASSES = NO
DOXYGEN_HIDE_UNDOC_MEMBERS = NO
DOXYGEN_INTERNAL_DOCS = NO
DOXYGEN_USE_TAG_FILE = 
DOXYINDEXER = 
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
ETHER_PREFIX = 
EXE = 
EXEEXT = 
F77 = f77
FC = gfortran
FCFLAGS = -g -O2
FFLAGS = 
FGREP = /usr/bin/grep -F
FLANG_INSTALL_PATH = 
FLANG_SOURCE_PATH = 
FLTK_include_path = 
FLTK_libs_path = 
FRONTEND_CXX_VENDOR_AND_VERSION2 = gnu-8
FRONTEND_CXX_VENDOR_AND_VERSION3 = gnu-8.4.0
GCC_MINOR_VERSION = 8
GCC_VERSION = 8
GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX = gnu-8.4
GEN_BE = sage_gen_be.o
GFORTRAN_PATH = /usr/bin/gfortran
GHCBIN = 
GLUT_CFLAGS = 
GLUT_LIBS = ${glut_path}
GLUT_include_path = 
GLUT_libs_path = 
GL_CFLAGS = 
GL_LIBS = 
GMP_INCLUDE_PATH = 
GMP_INSTALL_PATH = 
GMP_LIBRARY_PATH = 
GNAT_INCLUDES = 
GREP = /usr/bin/grep
GraphViz_include_path = 
GraphViz_libs_path = 
HAVE_CXX11 = 1
HAVE_CXX14 = 1
HS_CONFIG_OPTS = --prefix=/home/meltdown1995/roseRoot/rose-compiler//install --user
INCLTDL = 
INCLUDE_COMPASS_MAKEFILE_INC = include compass_makefile.inc
INDENT = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INSURE_OPTIONS = 
INTEL_FPP_PATH = 
ISL_INCLUDE_PATH = 
ISL_INSTALL_PATH = 
ISL_LIBRARY_PATH = 
IntelPin_path = 
JAR = 
JAVA = 
JAVAC = 
JAVA_JVM_INCLUDE = 
JAVA_JVM_LINK = 
JAVA_JVM_PATH = 
JAVA_PATH = 
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LEX = flex
LEXLIB = 
LEX_OUTPUT_ROOT = lex.yy
LIBADD_DL = -ldl 
LIBADD_DLD_LINK = 
LIBADD_DLOPEN = -ldl
LIBADD_SHL_LOAD = 
LIBDWARF_CPPFLAGS = 
LIBDWARF_LDFLAGS = 
LIBDWARF_PREFIX = 
LIBELF_CPPFLAGS = 
LIBELF_LDFLAGS = 
LIBELF_PREFIX = 
LIBFFI_CFLAGS = 
LIBFFI_LIBS = 
LIBGCRYPT_CPPFLAGS = 
LIBGCRYPT_LDFLAGS = 
LIBGCRYPT_PREFIX = 
LIBLTDL = -lltdl
LIBOBJS = 
LIBREADLINE_INCLUDE_PATH = 
LIBREADLINE_INSTALL_PATH = 
LIBREADLINE_LIBRARY_PATH = 
LIBREADLINE_LIBS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LLVM_CONFIG = /bin/llvm-config
LLVM_CPPFLAGS =  -DLLVMVERSION=
LLVM_LDFLAGS =  -R
LLVM_LIBS =  
LN_S = ln -s
LTDLDEPS = 
LTDLINCL = 
LTDLOPEN = libltdl
LTLIBOBJS = 
LT_ARGZ_H = 
LT_CONFIG_H = rose_config.h
LT_DLLOADERS =  dlopen.la
LT_DLPREOPEN = -dlpreopen dlopen.la 
LT_SYS_LIBRARY_PATH = 
MAKEINFO = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing makeinfo
MANIFEST_TOOL = :
MAPLE_INCLUDES = 
MAPLE_LIBDIR = 
MAPLE_LIBS = 
MD5 = md5sum
MINT = $(top_builddir)/projects/mint/src/mint
MKDIR_P = /usr/bin/mkdir -p
MOC = NONE/moc
MPICC = not-found
MPICXX = not-found
MPIF77 = not-found
MPIFC = not-found
MYSQL_CFLAGS = 
MYSQL_CONFIG = 
MYSQL_INCLUDE = 
MYSQL_LDFLAGS = 
MYSQL_VERSION = 
NM = /usr/bin/nm -B
NMEDIT = 
NVCCBIN = 
OBJ = .o
OBJDUMP = objdump
OBJEXT = o
OCTAVE_PARSER_INSTALL_TARFILE = 
OPENCL_INC_DIR = 
OPENCL_LIB_DIR = 
OPEN_FORTRAN_PARSER_PATH = /src/3rdPartyLibraries/fortran-parser
OPTIONAL_PROJECTS =  AMReX-Translation BinaryAnalysisTools CodeProperties CodeThorn MatlabTranslation MatrixTesting OpenK Rose-To-LLVM RTC2 scalarization simulator2 SnippetTools TALCDataLayout traceAnalysis ZFPTool
OS_major_release_number = 20
OS_minor_release_number = 10
OS_release = 20.10
OS_vendor = Ubuntu
OTOOL = 
OTOOL64 = 
PACKAGE = rose
PACKAGE_BUGREPORT = 
PACKAGE_NAME = ROSE
PACKAGE_STRING = ROSE 0.11.13.0
PACKAGE_TARNAME = rose
PACKAGE_URL = 
PACKAGE_VERSION = 0.11.13.0
PACKAGE_VERSION_NUMERIC = 0.11.13.0
PATH_SEPARATOR = :
PERL = perl
PKG_CONFIG = /usr/bin/pkg-config
POET_INCL = 
POET_LIB = 
PPL_PATH = 
PURIFY_OPTIONS = -windows=no -recursion-depth-limit=40000 -chain-length=24 -first-only=yes -leaks-at-exit=no -inuse-at-exit=no -always-use-cache-dir=yes -cache-dir=/home/meltdown1995/tmp -best-effort 
PYTHON = 
PYTHON_CPPFLAGS = 
PYTHON_EXTRA_LDFLAGS = 
PYTHON_EXTRA_LIBS = 
PYTHON_LDFLAGS = 
PYTHON_ROOT = 
PYTHON_SITE_PKG = 
PYTHON_VERSION_MM = 
Pxx_INCLUDES = 
Pxx_LIBS = 
QROSE_PREFIX = 
QT_INCLUDES = -DQT3_SUPPORT -INONE/QtCore -INONE/QtGui -INONE/Qt3Support -INONE/QtXml -INONE
QT_LDFLAGS = -LNONE -lQtCore -lQtGui -lQt3Support -lQtXml -lQtUiTools
QT_VERSION = 
QT_VERSION_MAJOR = 
QT_VERSION_MINOR = 
RANLIB = ranlib
RCC = NONE/rcc
ROSEHPCT_DEP_INCLUDES = 
ROSEHPCT_DEP_LIBS = 
ROSE_BOOST_NORMAL_INCLUDE_PATH = -I/usr/include

# DQ (12/22/2008): Specification of Boost path for use with "-isystem" option (may be GNU
# specific).  We use this option only if the configuration of ROSE has detected a
# previously installed version of Boost (which we do not want to use).
# Note that only one of these will be non-empty makefile variables.
ROSE_BOOST_PREINCLUDE_PATH = 
ROSE_CAPSTONE_PREFIX = 
ROSE_EDG_MAJOR_VERSION_NUMBER = 5
ROSE_EDG_MINOR_VERSION_NUMBER = 0
ROSE_HOME = .
ROSE_LIBMAGIC_PREFIX = 
ROSE_LIBPQXX_PREFIX = 
ROSE_LSB_RELEASE = lsb_release
ROSE_OBJDUMP_PATH = objdump
ROSE_OFP_JAR_FILE = OpenFortranParser-20200819-JDK8.jar
ROSE_OFP_MAJOR_VERSION_NUMBER = 0
ROSE_OFP_MINOR_VERSION_NUMBER = 8
ROSE_OFP_PATCH_VERSION_NUMBER = 7
ROSE_OFP_VERSION_NUMBER = 20200819-JDK8
ROSE_PS2PDF_PATH = ps2pdf
ROSE_SUPPORT_GNU_EXTENSIONS = FALSE
ROSE_SUPPORT_MICROSOFT_EXTENSIONS = FALSE
ROSE_USE_CANDL = 
ROSE_USE_CLOOG = 
ROSE_USE_EDG_QUAD_FLOAT = 
ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT = 
ROSE_USE_PPL = 
ROSE_USE_SCOPLIB = 
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT = 
ROSE_WGET_PATH = wget
ROSE_WITH_MPI_CFLAGS = 
ROSE_WITH_MPI_CLDFLAGS = 
ROSE_WITH_MPI_CXXFLAGS = 
ROSE_WITH_MPI_CXXLDFLAGS = 
ROSE_WITH_MPI_F77FLAGS = 
ROSE_WITH_MPI_F77LDFLAGS = 
ROSE_WITH_MPI_FFLAGS = 
ROSE_WITH_MPI_FLDFLAGS = 
ROSE_YAML_PREFIX = 
ROSE_YICES = 
ROSE_YICES_PREFIX = 
ROSE_Z3_PREFIX = 
RT_LIBS = -ldl 
SCOPLIB_PATH = 
SED = sed
SET_MAKE = 
SHELL = /bin/bash
SPOT_INCLUDE_PATH = 
SPOT_INSTALL_PATH = 
SPOT_LIBRARY_PATH = 
SQLITE3_CFLAGS = 
SQLITE3_LDFLAGS = 
SQLITE3_VERSION = 
STRATEGO_BIN_PATH = 
STRATEGO_INSTALL_PATH = 
STRATEGO_LIBRARY_PATH = 
STRIP = strip
SWIG = echo "Error: SWIG is not installed. You should look at http://www.swig.org" ; false -c++
SWIG_LIB = 
SWIPLBIN = 
TCLSH = 
TEST_SMT_SOLVER = 
UIC = NONE/uic
UPC = 
UPCDEPMODE = 
UPCFLAGS = 
USING_WINDOWS = 0
VALGRIND_BINARY = /valgrind
VALGRIND_BIN_PATH = 
VALGRIND_INCLUDE_PATH = 
VALGRIND_INSTALL_PATH = 
VALGRIND_LIBRARY_PATH = 
VECTORIZATION = $(top_builddir)/projects/vectorization/src/vectorization
VERSION = 0.11.13.0
WT_PREFIX = no
X10_BIN_PATH = 
X10_INSTALL_PATH = 
X10_LIBRARY_PATH = 
X10_VERSION = 
XERCES_CPPFLAGS = 
XERCES_LDFLAGS = 
XERCES_LIBS = 
XERCES_VERSION = 
XMKMF = 
XML2_CONFIG = no
XML_CPPFLAGS = 
XML_LIBS = 
YACC = bison -y
YFLAGS = 
Z3BIN = 
Z3_INCLUDE_PATH = 
Z3_LIBRARY_PATH = 
Z3_PREFIX = 
abs_builddir = /home/meltdown1995/roseRoot/rose-compiler/build/tests/nonsmoke/functional/CompileTests/Cxx11_tests
abs_srcdir = /home/meltdown1995/roseRoot/rose-compiler//src/tests/nonsmoke/functional/CompileTests/Cxx11_tests
abs_top_builddir = /home/meltdown1995/roseRoot/rose-compiler/build
abs_top_srcdir = /home/meltdown1995/roseRoot/rose-compiler//src
absolute_path_srcdir = /home/meltdown1995/roseRoot/rose-compiler/src
ac_boost_path = /usr
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
ac_ct_F77 = f77
ac_ct_FC = gfortran
ac_ct_MPICXX = 
ac_ct_UPC = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = tar --format=posix -chf - "$$tardir"
am__untar = tar -xf -
bddbddb_path = 
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_triplet_without_redhat = x86_64-pc-linux-gnu
build_vendor = pc
builddir = .
configure_date = Wednesday December 23 22:42:41 2020
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
edg_union_struct_debugging_value = union
exec_prefix = ${prefix}
glut_path = 
gnat_home = 
gnat_path = 
gomp_omp_runtime_library_path = 
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
ida_path = 
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/install-sh
insure_BIN = 
insure_LIBS = 
insure_PREFIX = 
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
llvm_path = 
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
ltdl_LIBOBJS =  lt__strl.o
ltdl_LTLIBOBJS =  lt__strl.lo
mandir = ${datarootdir}/man
maple_path = 
mkdir_p = $(MKDIR_P)
mono_home = 
oldincludedir = /usr/include
omni_omp_runtime_support_path = 
optional_Visualization_subdirs = 
parallel_ast_traversal_omp_path = 
pdfdir = ${docdir}
php_path = 
poet_dir = 
prefix = /home/meltdown1995/roseRoot/rose-compiler//install
program_transform_name = s,x,x,
psdir = ${docdir}
purify_BIN = 
purify_INCLUDES = 
purify_LIBS = 
purify_PREFIX = 
res_top_src = /home/meltdown1995/roseRoot/rose-compiler/src
rosyln_home = 
rted_path = 
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = /home/meltdown1995/roseRoot/rose-compiler//src/tests/nonsmoke/functional/CompileTests/Cxx11_tests
subdirs =  src/3rdPartyLibraries/libharu-2.1.0 libltdl
sys_symbol_underscore = no
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../../../../
top_builddir = ../../../../..
top_pwd = /home/meltdown1995/roseRoot/rose-compiler/build
top_srcdir = /home/meltdown1995/roseRoot/rose-compiler//src
wine_path = 

# SQLite is a simpler database to use than MySQL
#ROSE_SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS)
#SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS) -I$(top_srcdir)/src/roseExtensions/sqlite3x
#SQLITE_DATABASE_LIBS = $(SQLITE3_LDFLAGS)
#   ROSE_SQLITE_DATABASE_OBJS     = $(top_builddir)/src/roseExtensions/sqlite3x/*o
#ROSE_SQLITE_DATABASE_LIB_NAME = RoseSQLite3xDatabase
#ROSE_SQLITE_DATABASE_LIB_FILE = lib$(ROSE_SQLITE_DATABASE_LIB_NAME).la
#ROSE_SQLITE_DATABASE_LIBS = -l$(ROSE_SQLITE_DATABASE_LIB_NAME)
#ROSE_SIDEEFFECT_INCLUDE = -I$(top_srcdir)/src/midend/programAnalysis/sideEffectAnalysis
#Z3_LIB_NAME = z3
#Z3_LIB_FILE = lib$(Z3_LIB_NAME).so
#Z3_LIBS = -l$(Z3_LIB_NAME)
#Z3_INCLUDES = -I$(Z3_PREFIX)/include
#Z3_LIB_INCLUDES = -L$(Z3_PREFIX)/lib
#ROSE_Z3_INCLUDES = -I/include
#ROSE_Z3_LIBS = -lz3
#ROSE_Z3_LIBS_WITH_PATH = -L/lib -lz3

# This is properly handled by automake even when specified in an include file
EDG_LIBS = @EDG_LIBS@

# Conditional support for Gabriel's QRose GUI Library
#  ROSE_GUI_INCLUDE =   -I${QROSE_PREFIX}/include
#ROSE_GUI_INCLUDE = -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/Common -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/TreeBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/SourceBox

# ROSE_GUI_LIBS = -lqrose
#  ROSE_GUI_LIBS_WITH_PATH = -L${QROSE_PREFIX}/lib -lqrose
#  ROSE_GUI_LIBS_WITH_PATH =  -L${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/  -lqrose
#ROSE_GUI_LIBS_WITH_PATH = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la

# ROSE_GUI_LIB_FILE = libqrose.a
#ROSE_QT_INCLUDE = $(QT_INCLUDES)
# ROSE_QT_LIBS = -lqt
#ROSE_QT_LIBS_WITH_PATH = ${QT_LDFLAGS}
# ROSE_QT_LIB_FILE = libqt.a

# ROSE-HPCToolkit module
#ROSE_ROSEHPCT_INCLUDES = -I$(top_srcdir)/src/roseExtensions/roseHPCToolkit/include
#ROSE_ROSEHPCT_LIBS = -lrosehpct
#ROSE_ROSEHPCT_LIBS_WITH_PATH = $(top_builddir)/src/roseExtensions/roseHPCToolkit/src/librosehpct.la
# ROSE_ROSEHPCT_LIB_FILE = librosehpct.so

# ROSE-YICES Package (destributed by SRI as a static library)
#ROSE_YICES_INCLUDES = -I/include
#ROSE_YICES_LIBS = -lyices
#ROSE_YICES_LIBS_WITH_PATH = /lib/libyices.a

# YAML-CPP package for parsing YAML/JSON files
#ROSE_YAML_INCLUDES = -I/include
#ROSE_YAML_LIBS = -lyaml-cpp
#ROSE_YAML_LIBS_WITH_PATH = -L/lib -lyaml-cpp

# GNU readline
#ROSE_READLINE_INCLUDES = -I
#ROSE_READLINE_LIBS = 
#ROSE_READLINE_LIBS_WITH_PATH = -L $(ROSE_READLINE_LIBS)

# libmagic for identifying file types based on magic numbers
#ROSE_LIBMAGIC_INCLUDES = -I/include
#ROSE_LIBMAGIC_LIBS = -lmagic
#ROSE_LIBMAGIC_LIBS_WITH_PATH = -L/lib -lmagic

# PostgreSQL C++ API
#ROSE_LIBPQXX_INCLUDES = -I/include
#ROSE_LIBPQXX_LIBS = -lpqxx -lpq
#ROSE_LIBPQXX_LIBS_WITH_PATH = -L/lib -lpqxx -lpq

# Capstone disassembler
#ROSE_CAPSTONE_INCLUDES = -I/include
#ROSE_CAPSTONE_LIBS = -lcapstone
#ROSE_CAPSTONE_LIBS_WITH_PATH = -L/lib -lcapstone

# Math algorithms from http://dlib.net. This is a headers-only library neede by some binary analyses.
#ROSE_DLIB_INCLUDES = -I
#ROSE_DLIB_LIBS = 
#ROSE_DLIB_LIBS_WITH_PATH = 

# DQ (11/4/2016): Adding support for use of Address Sanitizer (for where the ROSE Test Handler (RTH) is used.
# Note the quotes and escapes that are required:
ADDRESS_SANITIZER_OPTIONS = "ASAN_OPTIONS=halt_on_error=0:symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=\`which llvm-symbolizer\`"

# DQ(11/4/2016): Need a version when not using the ROSE Test Handler (RTH):
NON_RTH_ADDRESS_SANITIZER_OPTIONS = ASAN_OPTIONS=halt_on_error=1:symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=`which llvm-symbolizer`
#ROSE_ELF_INCLUDES = 
#ROSE_ELF_LIBS_WITH_PATH = 

# ROSE gcrypt support (for things like md5, sha1, etc)
#ROSE_GCRYPT_INCLUDES = 
#ROSE_GCRYPT_LIBS_WITH_PATH = 

# ROSE-DWARF libdwarf support
#ROSE_DWARF_INCLUDES = 
#ROSE_DWARF_LIBS_WITH_PATH = 

# DQ (3/13/2009):
# If Dwarf is used with Intel Pin then reference the same copy of libdwarf.a (in the same
# directory).  However, it does NOT work to link both references to libdwarf into more
# than one dynamic (shared) library, so we need to link libdwarf dynamically.
# To avoid additional LD_LIBRARY_PATH requirements, we do so using rpath.
# To support this the libdwarf.so should be placed into $(INTEL_PIN_PATH)/intel64/lib-ext
# and the static libdwarf.a moved out (renamed) so that it will not be used.
# Note that this will also cause librose.so to use the shared library for
# dwarf when used with Intel Pin.
##ROSE_DWARF_LIBS_WITH_PATH = -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
# DQ (3/14/2009): This factors the lib paths.
##INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)

# ROSE-WINE Package (Wine is a package to permit execution of Windows binaries under Linux)
#ROSE_WINE_INCLUDES = -I$(wine_path)/include
#ROSE_PHP_INCLUDES = -I$(php_path)/include/phc -I$(php_path)/include/php
#ROSE_PHP_LIBS = -lphp5 -lphc -lltdl
#ROSE_PHP_LIBS_WITH_PATH = $(php_path)/lib/libphc.so $(php_path)/lib/libphp5.so $(LIBLTDL)

# ASR (06/09/2010): adding llvm support variables
#ROSE_LLVM_INCLUDES = -I$(llvm_path)/include
#ROSE_LLVM_LIBS = -L$(llvm_path)/lib \
#	-lLLVMXCoreCodeGen -lLLVMXCoreAsmPrinter \
#	-lLLVMXCoreInfo -lLLVMSystemZCodeGen \
#	-lLLVMSystemZAsmPrinter -lLLVMSystemZInfo \
#	-lLLVMSparcCodeGen -lLLVMSparcAsmPrinter \
#	-lLLVMSparcInfo -lLLVMPowerPCCodeGen \
#	-lLLVMPowerPCAsmPrinter -lLLVMPowerPCInfo \
#	-lLLVMpic16passes -lLLVMPIC16AsmPrinter \
#	-lLLVMPIC16CodeGen -lLLVMPIC16Info \
#	-lLLVMMSP430CodeGen -lLLVMMSP430AsmPrinter \
#	-lLLVMMSP430Info -lLLVMMSIL -lLLVMMSILInfo \
#	-lLLVMMipsAsmPrinter -lLLVMMipsCodeGen \
#	-lLLVMMipsInfo -lLLVMMBlazeAsmPrinter \
#	-lLLVMMBlazeCodeGen -lLLVMMBlazeInfo \
#	-lLLVMLinker -lLLVMipo -lLLVMInterpreter \
#	-lLLVMInstrumentation -lLLVMJIT \
#	-lLLVMExecutionEngine -lLLVMCppBackend \
#	-lLLVMCppBackendInfo -lLLVMCellSPUCodeGen \
#	-lLLVMCellSPUAsmPrinter -lLLVMCellSPUInfo \
#	-lLLVMCBackend -lLLVMCBackendInfo \
#	-lLLVMBlackfinCodeGen \
#	-lLLVMBlackfinAsmPrinter \
#	-lLLVMBlackfinInfo -lLLVMBitWriter \
#	-lLLVMX86Disassembler -lLLVMX86AsmParser \
#	-lLLVMX86AsmPrinter -lLLVMX86CodeGen \
#	-lLLVMX86Info -lLLVMAsmParser \
#	-lLLVMARMAsmParser -lLLVMMCParser \
#	-lLLVMARMAsmPrinter -lLLVMARMCodeGen \
#	-lLLVMARMInfo -lLLVMArchive \
#	-lLLVMBitReader -lLLVMAlphaCodeGen \
#	-lLLVMSelectionDAG -lLLVMAlphaAsmPrinter \
#	-lLLVMAsmPrinter -lLLVMCodeGen \
#	-lLLVMScalarOpts -lLLVMInstCombine \
#	-lLLVMTransformUtils -lLLVMipa \
#	-lLLVMAnalysis -lLLVMTarget -lLLVMMC \
#	-lLLVMCore -lLLVMAlphaInfo -lLLVMSupport \
#	-lLLVMSystem

# adding all libraries for now

# Python API support
#ROSE_PYTHON_INCLUDES = 
#ROSE_PYTHON_LIBS_WITH_PATH = 

# SSL support permits use of MD5 checksums internally for binary library identification.
#ROSE_SSL_LIBS = -lssl -lcrypto

# support for precompiled headers
#ROSE_PCH_INCLUDE = -Winvalid-pch -fPIC -DPIC
#INTEL_PIN_PATH = 
#INTEL_PIN_INCLUDE_PATHS = -I$(INTEL_PIN_PATH)/source/include -I$(INTEL_PIN_PATH)/source/include/gen -I$(INTEL_PIN_PATH)/extras/xed2-intel64/include -I$(INTEL_PIN_PATH)/source/tools/InstLib

# DQ (3/8/2009): These cause rose/src/testSharedRoseLib to fail, I don't know why (fails in system call to map()).
# INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib -L$(INTEL_PIN_PATH)/intel64/lib-ext
#INTEL_PIN_LIB_PATHS = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib

# Do we want to handle this differently when Dwarf is used optionally with ROSE.
#INTEL_PIN_LIBS = -lpin -lxed -ldwarf -lelf -ldl
#if ROSE_HAVE_LIBDWARF
#  INTEL_PIN_LIBS          = -lpin -lxed -lelf -ldl
#else
#  INTEL_PIN_LIBS          = -lpin -lxed -ldwarf -lelf -ldl
#endif
#ROSE_ETHER_INCLUDE = -I$(ETHER_PREFIX)/include
#ROSE_ETHER_LIBS = -L$(ETHER_PREFIX)/lib -lxenctrl
#ROSE_ATERM_INCLUDE = -I$(ATERM_LIBRARY_PATH)/../include
#ROSE_ATERM_LIBS = -L$(ATERM_LIBRARY_PATH) -lATerm

# Added support for Fortran front-end development using the flang (F18) compiler [Rasmussen 8/12/2019]
#ROSE_FLANG_INCLUDES = -I$(FLANG_INSTALL_PATH)/include
#ROSE_FLANG_LIBS = -L$(FLANG_INSTALL_PATH)/lib -lLLVMDemangle -lLLVMSupport -lLLVMFrontendOpenMP -lFortranParser -lFortranSemantics -lFortranEvaluate -lFortranCommon -lFortranDecimal -lFortranLower -lncurses

# DQ (5/9/2017): Adding Ada library support.
# ROSE_ADA_INCLUDES = -I$(ada_path)/include_xxx
#ROSE_ADA_INCLUDES = -I$(ada_path)/include_xxx
#DOT_ASIS_LIB_DIR_ = $(abs_top_builddir)/src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/lib
#  ROSE_ADA_LIBS = -ldot_asis
#  ROSE_ADA_LIBS_WITH_PATH = $(DOT_ASIS_LIB_DIR_)/libdot_asis.so

# RASMUSSEN (10/24/2017): Adding the GnuCOBOL parse-tree library support.
#ROSE_COBOL_PT_LIBS_WITH_PATH = -L$(COBPT_LIBRARY_PATH) -lcob -lcobpt
ROSE_QUAD_FLOAT_MATH = -lquadmath

# DQ (1/9/2010): Added use of libimf with libm (the two go together when using Intel icc and icpc)
#  ROSE_INTEL_COMPILER_MATH_LIBS = -limf -lm
# DQ (11/16/2017): We need to link in these Intel specific required libraries to avoid: error hidden symbol `__intel_cpu_features_init_x'
# ROSE_INTEL_COMPILER_MATH_LIBS =
#    ROSE_INTEL_COMPILER_MATH_LIBS += -limf
#ROSE_INTEL_COMPILER_MATH_LIBS = -limf \
#	-lirng -lintlc -lsvml -lm
# ROSE_INCLUDES =
#     $(ROSE_BOOST_PREINCLUDE_PATH)
ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
     -I$(top_builddir)/src/roseSupport \
     -I$(top_builddir)/src/frontend/SageIII \
     -I$(top_srcdir)/src \
     -I$(top_srcdir)/src/frontend \
     -I$(top_srcdir)/src/frontend/SageIII \
     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/astMerge \
     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
     -I$(top_srcdir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
     -I$(top_srcdir)/src/frontend/SageIII/virtualCFG \
     -I$(top_srcdir)/src/frontend/SageIII/astTokenStream \
     -I$(top_srcdir)/src/frontend/SageIII/astHiddenTypeAndDeclarationLists \
     -I$(top_builddir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/astFromString \
     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
     -I"$(JAVA_HOME)/include" \
     -I$(top_srcdir)/src/frontend/PHPFrontend \
      $(ROSE_CLANG_FRONTEND_INCLUDE) \
     -I$(top_srcdir)/src/frontend/PythonFrontend \
     -I$(top_srcdir)/src/frontend/BinaryFormats \
     -I$(top_srcdir)/src/frontend/BinaryLoader \
     -I$(top_srcdir)/src/frontend/Disassemblers \
      $(ROSE_CLANG_INCLUDE) \
     -I$(top_srcdir)/src/backend/unparser \
     -I$(top_srcdir)/src/backend/unparser/formatSupport \
     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/AdaCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/JovialCodeGeneration \
     -I$(top_srcdir)/src/backend/asmUnparser \
     -I$(top_srcdir)/src/util \
     -I$(top_srcdir)/src/util/support \
     -I$(top_srcdir)/src/util/graphs  \
     -I$(top_srcdir)/src/util/stringSupport \
     -I$(top_srcdir)/src/util/commandlineProcessing \
     -I$(top_srcdir)/src/midend/abstractHandle \
     -I$(top_srcdir)/src/midend/abstractMemoryObject \
     -I$(top_srcdir)/src/midend/abstractLayer \
     -I$(top_srcdir)/src/midend/astDiagnostics \
     -I$(top_srcdir)/src/midend/programTransformation/astInlining \
     -I$(top_srcdir)/src/midend/programTransformation/astOutlining  \
     -I$(top_srcdir)/src/midend/programTransformation/transformationTracking \
     -I$(top_srcdir)/src/midend/astProcessing \
     -I$(top_srcdir)/src/midend/astMatching \
     -I$(top_srcdir)/src/midend/astQuery \
     -I$(top_srcdir)/src/midend/astRewriteMechanism \
     -I$(top_srcdir)/src/midend/astUtil/annotation \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/src/midend/astUtil/astSupport \
     -I$(top_srcdir)/src/midend/astUtil/symbolicVal \
     -I$(top_srcdir)/src/midend/BinaryAnalysis \
     -I$(top_srcdir)/src/midend/BinaryAnalysis/dataflowanalyses \
     -I$(top_srcdir)/src/midend/BinaryAnalysis/instructionSemantics \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/computation \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depGraph \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depInfo \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/driver \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/outsideInterface \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/prepostTransformation \
     -I$(top_srcdir)/src/midend/programTransformation/ompLowering \
     -I$(top_srcdir)/src/midend/programTransformation/extractFunctionArgumentsNormalization \
     -I$(top_srcdir)/src/midend/programTransformation/singleStatementToBlockNormalization \
     -I$(top_srcdir)/src/midend/programAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/arithmeticIntensity \
     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser \
     -I$(top_srcdir)/src/midend/programAnalysis/CFG \
     -I$(top_srcdir)/src/midend/programAnalysis/staticSingleAssignment \
     -I$(top_srcdir)/src/midend/programAnalysis/ssaUnfilteredCfg \
     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
     -I$(top_srcdir)/src/midend/programAnalysis/CallGraphAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/OAWrap \
     -I$(top_srcdir)/src/midend/programAnalysis/bitvectorDataflow \
     -I$(top_srcdir)/src/midend/programAnalysis/VirtualFunctionAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/defUseAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/distributedMemoryAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/dominanceAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/pointerAnal \
     -I$(top_srcdir)/src/midend/programAnalysis/staticInterproceduralSlicing \
     -I$(top_srcdir)/src/midend/programAnalysis/valuePropagation \
     -I$(top_srcdir)/src/midend/programAnalysis/variableRenaming \
      $(ROSE_SIDEEFFECTS_INCLUDE) \
      $(ROSE_DATABASE_INCLUDE) \
      $(ROSE_GUI_INCLUDE) \
      $(ROSE_QT_INCLUDE) \
      $(ROSE_SQLITE_DATABASE_INCLUDE) \
			$(ROSE_SIDEEFFECT_INCLUDE) \
      $(SQLITE_DATABASE_INCLUDE) \
     -I$(top_srcdir)/src/midend/programTransformation/partialRedundancyElimination \
     -I$(top_srcdir)/src/midend/programTransformation/finiteDifferencing \
     -I$(top_srcdir)/src/midend/programTransformation/functionCallNormalization \
     -I$(top_srcdir)/src/midend/programTransformation/constantFolding \
     -I$(top_srcdir)/src/midend/programTransformation/implicitCodeGeneration \
     -I$(top_srcdir)/src/roseSupport \
     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
     -I$(top_srcdir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets  \
     -I$(top_srcdir)/src/util/graphs \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/libltdl \
     -I$(top_srcdir)/src/roseExtensions/failSafe \
     $(ROSE_PHP_INCLUDES) \
     $(ROSE_PYTHON_INCLUDES) \
     $(ROSE_YICES_INCLUDES) \
     $(ROSE_Z3_INCLUDES) \
     $(ROSE_YAML_INCLUDES) \
     $(ROSE_LIBPQXX_INCLUDES) \
     $(ROSE_CAPSTONE_INCLUDES) \
     $(ROSE_READLINE_INCLUDES) \
     $(ROSE_LIBMAGIC_INCLUDES) \
     $(ROSE_DLIB_INCLUDES) \
     $(ROSE_GCRYPT_INCLUDES) \
     $(ROSE_ELF_INCLUDES) \
     $(ROSE_DWARF_INCLUDES) \
     $(ROSE_WINE_INCLUDES) \
     $(VALGRIND_CFLAGS) \
     $(SQLITE3_CFLAGS) \
     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) \
     $(ROSE_PCH_INCLUDE) \
     $(INTEL_PIN_INCLUDE_PATHS) \
     $(ROSE_ETHER_INCLUDE) \
     $(ROSE_ATERM_INCLUDE) \
     $(ROSE_FLANG_INCLUDES) \
     $(ROSE_CSHARP_INCLUDES) \
     $(ROSE_ADA_INCLUDES) \
     $(ROSE_JOVIAL_INCLUDES) \
     $(ROSE_COBOL_INCLUDES) \
     $(BOOST_CPPFLAGS)


# DQ (4/13/2016): Is there were we put the support to include -lstdc++.so on the link line directly?

# DQ (3/6/2013): We need to build a SWIG path that can't include the isystem option.
# Note use of "-isystem" option in ROSE_BOOST_PREINCLUDE_PATH to have the
# boost specified on the configure
# command-line be used instead of the OS version of boost that is sometimes
# installed with Linux (it is always a version too old to be used with ROSE).
# This is used only when the ROSE configuration detects a previously installed
# version of Boost (e.g /usr/include/boost) that we don't want to use.
# ROSE_INCLUDES =
#    $(ROSE_BOOST_PREINCLUDE_PATH)
#ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
#     -I$(top_builddir)/src/roseSupport \
#     -I$(top_builddir)/src/frontend/SageIII \
#     -I$(top_srcdir)/src \
#     -I$(top_srcdir)/src/frontend \
#     -I$(top_srcdir)/src/frontend/SageIII \
#     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
#     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
#     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
#     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
#     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
#     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
#     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
#     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
#     -I"$(JAVA_HOME)/include" \
#     -I$(top_srcdir)/src/frontend/BinaryFormats \
#     -I$(top_srcdir)/src/frontend/BinaryLoader \
#     -I$(top_srcdir)/src/frontend/Disassemblers \
#     -I$(top_srcdir)/src/backend/unparser \
#     -I$(top_srcdir)/src/backend/unparser/formatSupport \
#     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
#     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/AdaCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/JovialCodeGeneration \
#     -I$(top_srcdir)/src/backend/asmUnparser \
#     -I$(top_srcdir)/src/util \
#     -I$(top_srcdir)/src/util/support \
#     -I$(top_srcdir)/src/util/graphs  \
#     -I$(top_srcdir)/src/util/stringSupport \
#     -I$(top_srcdir)/src/util/commandlineProcessing \
#     -I$(top_srcdir)/src/midend/astDiagnostics \
#     -I$(top_srcdir)/src/midend/astProcessing \
#     -I$(top_srcdir)/src/midend/astMatching \
#     -I$(top_srcdir)/src/midend/astQuery \
#     -I$(top_srcdir)/src/midend/BinaryAnalysis \
#     -I$(top_srcdir)/src/midend/programAnalysis \
#     -I$(top_srcdir)/src/roseSupport \
#     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
#     -I$(top_srcdir)/src/util/graphs \
#     -I$(top_srcdir)/src/roseExtensions/failSafe \
#     $(ROSE_ATERM_INCLUDE) \
#     $(ROSE_FLANG_INCLUDES) \
#     $(ROSE_BOOST_NORMAL_INCLUDE_PATH)


# DQ (10/23/2015): These paths have been replaces with the following variables.
# These variable are empty for now (reflecting the default usage, and need to
# be set properly where ever Clang support is processed as a configure option.
#    -I$(top_srcdir)/src/frontend/CxxFrontend/ClangFrontend
#    -I$(top_srcdir)/src/frontend/CxxFrontend/Clang
#    $(ROSE_CLANG_FRONTEND_INCLUDE)
#    $(ROSE_CLANG_INCLUDE)
SWIG_ROSE_INCLUDES = $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH)
ROSE_INCLUDES = $(ROSE_BOOST_PREINCLUDE_PATH) $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH)

# DQ (8/15/2010): I have removed these directories from the include paths since it no longer exists.
# I expect that the directories were removed and the include list not properly cleaned up.
# -I$(top_srcdir)/src/midend/binaryAnalyses/graph
# -I$(top_srcdir)/src/midend/programTransformation/runtimeTransformation
# -I$(top_srcdir)/projects/dataBase

# DQ (12/22/2008): Move Boost directory to front and used "-isystem" option so
# that a system with a previous (older) installation of boost does not interfer
# with the use of ROSE (and the version of boost specified using "--with-boost").
# $(BOOST_CPPFLAGS)

# DQ (10/28/2008): I think these should be included, I don't know why they
# were removed (used with Microsoft Windows tests, and Yices tests).
# DQ: Not used currently
#     $(ROSE_WINE_INCLUDES)

# DQ (5/3/2007): Removed from ROSE
#     -I$(top_srcdir)/src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers
#     -I$(top_srcdir)/src/midend/programAnalysis/staticProgramSlicing

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly with make distcheck rule
#     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser

# New way using two libraries
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.a $(top_builddir)/src/libedg.a
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.so $(top_builddir)/src/libedg.so
# ROSE_LIBS_WITH_PATH = $(libdir)/librose.so $(libdir)/libedg.so
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la $(JAVA_JVM_LIB)
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_LIBS_WITH_PATH = $(ROSE_LIBS)

# ROSE_LIBS = $(top_builddir)/src/librose.la -lm $(LEXLIB) $(SQLITE_DATABASE_LIBS) $(LIB_QT) $(WAVE_LDFLAGS) $(WAVE_LIBRARIES) $(WAVE_LIBS) $(JAVA_JVM_LIB) $(RT_LIBS)

# MS 10/19/2015: added ROSE_BOOST_LIBS variable to share exact same
# boost libs list in ROSE an in the ROSTTA Makefiles.
ROSE_BOOST_LIBS = $(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) $(BOOST_CHRONO_LIB) \
  $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) $(BOOST_PROGRAM_OPTIONS_LIB) \
  $(BOOST_RANDOM_LIB) $(BOOST_REGEX_LIB)  $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB)  \
  $(BOOST_WAVE_LIB) $(BOOST_IOSTREAMS_LIB) $(BOOST_PYTHON_LIB)

ROSE_LIBS = $(abspath $(top_builddir)/src/librose.la) -lm \
	$(JAVA_JVM_LINK) $(SQLITE_DATABASE_LIBS) $(QT_LIBS) \
	$(ROSE_BOOST_LIBS) $(SQLITE3_LDFLAGS) $(RT_LIBS) \
	$(ROSE_YICES_LIBS_WITH_PATH) $(ROSE_Z3_LIBS_WITH_PATH) \
	$(ROSE_PHP_LIBS_WITH_PATH) $(ROSE_DWARF_LIBS_WITH_PATH) \
	$(ROSE_ELF_LIBS_WITH_PATH) $(ROSE_GUI_LIBS_WITH_PATH) \
	$(ROSE_QT_LIBS_WITH_PATH) $(ROSE_SSL_LIBS) $(ROSE_ETHER_LIBS) \
	$(ROSE_INTEL_COMPILER_MATH_LIBS) $(ROSE_ATERM_LIBS) \
	$(ROSE_FLANG_LIBS) $(ROSE_YAML_LIBS_WITH_PATH) \
	$(ROSE_LIBMAGIC_LIBS_WITH_PATH) \
	$(ROSE_READLINE_LIBS_WITH_PATH) $(ROSE_DLIB_LIBS_WITH_PATH) \
	$(ROSE_GCRYPT_LIBS_WITH_PATH) $(ROSE_LIBPQXX_LIBS_WITH_PATH) \
	$(ROSE_COBOL_PT_LIBS_WITH_PATH) $(ROSE_PYTHON_LIBS_WITH_PATH) \
	$(ROSE_QUAD_FLOAT_MATH) $(ROSE_CAPSTONE_LIBS_WITH_PATH) \
	$(am__append_1)

#if ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION
#ROSE_LIBS += $(libroseAdalibraries) 
#endif

#========================================================================================================================
# These are the "-R directory" switches that need to be passed to libtool running in link mode to make sure that ROSE
# executables have rpath properties that point to the directories containing the libraries we're using. Do not add
# system directories (or at least not at the front of this list) because that will cause the system-installed version of
# a library to be used rather than some user-specific version.
#
# Here's the motivation for using rpath instead of LD_LIBRARY_PATH: Consider what happens if some ROSE tool, call it
# myTranslator, is compiled and linked against a custom, user-installed version of libz.so (perhaps because myTranslator
# is using a custom version of some graphics library, like libgraphicsmagick.so, that needs a newer libz.so than what's
# installed on the system).  If I then set LD_LIBRARY_PATH to point to the directory with my libz.so I'll be able to run
# myTranslator, however I probably won't be able any system installed tool that uses libz.so. This includes not being
# able to run /usr/bin/as, which might be called indirectly when myTranslator invokes the backend compiler (because
# LD_LIBRARY_PATH overrides the rpath built into /usr/bin/as).  Run-time linking with the wrong dynamic library at best
# produces an error message from the linker, but more often just results in a fault of some sort.
#
# How does rpath fix this problem? It encodes into each executable the list of directories that should be searched when
# the executable is run, similar to LD_LIBRARY_PATH but on a per-executable basis.
#
# The filter-out is removing specific libraries (-lwhatever), the GCC's POSIX thread switch (-pthread), static libraries
# (whatever.a), and various system directories that might have the wrong library versions and which are searched
# automatically anyway. The outer patsubst is changing "-Ldirectory" to just "directory", and the addprefix is changing
# each directory to "-R directory" which is libtool's switch for adding an rpath to an executable.
#
# The inner-most patsubst needs more explanation: Although most low-level libraries like libz, libpng, etc. are normally
# installed in well-known system-wide locations (like /usr/lib), when testing ROSE in matrix testing using RMC, these
# libraries are often compiled and installed locally in such ways that they're not binary compatible with the
# system-installed versions. However, ROSE doesn't have configuration or cmake options for all these libraries because
# there could eventually be far too many. Therefore, we use the fact that RMC has already chosen the correct library
# directories and added their names to various environment variables. The lines of the form
#     $(subst :, ,# $(whatever_LIBDIRS))
# split the named environment variable into individual directory names.  If there's a ROSE configure option to specify
# the library location, then DO NOT list an environment variable here--use the directory from configure instead (which
# goes into ROSE_LIBS above).
ROSE_RPATHS = $(patsubst -L%,-R %, $(filter-out -L/lib% -L/usr/lib% \
	-L/usr/local/lib% -L/var/lib%, $(filter -L%, $(ROSE_LIBS) \
	$(subst :, , $(GNU_COMPILERS_LIBDIRS)) $(subst :, , \
	$(LIBBZ2_LIBDIRS)) $(subst :, , $(LIBGRAPHICSMAGICK_LIBDIRS)) \
	$(subst :, , $(LIBJPEG_LIBDIRS)) $(subst :, , \
	$(LIBLCMS_LIBDIRS)) $(subst :, , $(LIBLZMA_LIBDIRS)) $(subst \
	:, , $(LIBPNG_LIBDIRS)) $(subst :, , $(LIBTIFF_LIBDIRS)) \
	$(subst :, , $(PYTHON_LIBDIRS)) $(subst :, , $(SPOT_LIBDIRS)) \
	$(subst :, , $(ZLIB_LIBDIRS)) $(subst :, , \
	$(INTEL_COMPILER_RPATHS)) ) ) ) $(am__append_2)
ROSE_LINK_RPATHS = $(addprefix -Wl$(comma)-rpath , $(filter-out -R , $(ROSE_RPATHS)))

# Rasmussen (3/23/2018): Added ROSE_LINK_RPATHS to enable linking on Mac OSX with ROSE installation
#ROSE_LINK_RPATHS = $(addprefix -Xlinker -rpath -Xlinker , $(filter-out -R , $(ROSE_RPATHS)))
comma = ,
INTEL_COMPILER_RPATHS = $(shell $(top_srcdir)/scripts/intel-compiler-rpaths.sh)

# DQ (3/8/2009): This fails when I try to include it (fails in rose/src/testSharedRoseLib).
#  $(INTEL_PIN_LIB_PATHS) $(INTEL_PIN_LIBS)

# DQ (3/14/2009): It is cleaner to just required that Intel Pin support require setting
# the LD_LIBRARYPATH to include: $(INTEL_PIN_PATH)/intel64/lib-ext

# This ROSE_SEPARATE_LIBS is used for the linking of preprocessor.C used within
# development. The use of the seperate libraries make the linking faster where the
# main librose library is not built.  Libtool may have changed this so that we could
# just link to librose now just as easily, but one has to rebuild librose each time
# instead of just the individual shared library.
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_SEPARATE_LIBS = $(ROSE_LIBS)

# QY (11/2/04): removed -lastoutlining from ROSE_SEPARATE_LIBS

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly
# with make distcheck rule
# -lannotationLanguageParser(appears after -lvaluePropagation)

# Test harness variables. See "rth_run.pl --help" for more info.  The RTH_RUN_FLAGS is meant to be set on the
# "make" command-line, but the default depends on the value of the verbosity $(V) flag.
RTH_RUN_FLAGS_V_ = 
RTH_RUN_FLAGS_V_0 = 
RTH_RUN_FLAGS_V_1 = --immediate-output
RTH_RUN_FLAGS = $(RTH_RUN_FLAGS_V_$(V))

# Default timeout that you can override on the "make" commandline. Valid values
# are integers followed by "s" (seconds), "m" (minutes), "h" (hours), or the
# word "never".  See scripts/rth_run.pl for detailed documentation.
RTH_TIMEOUT = 15m
RTH_RUN = $(top_srcdir)/scripts/rth_run.pl $(RTH_RUN_FLAGS) \
	srcdir=$(abspath $(srcdir)) top_srcdir=$(abspath $(top_srcdir)) \
	blddir=$$(pwd) top_blddir=$(abspath $(top_builddir)) \
	VALGRIND=$(VALGRIND) TIMEOUT=$(RTH_TIMEOUT)

RTH_STATS = $(top_srcdir)/scripts/rth_stats.pl

# noinst_PROGRAMS = globalVariablesInLambdas

# globalVariablesInLambdas_SOURCES = globalVariablesInLambdas.C
AM_CPPFLAGS = $(ROSE_INCLUDES)
AM_LDFLAGS = $(ROSE_RPATHS)
LDADD = $(ROSE_LIBS)

# globalVariablesInLambdas_TESTS = test_1.C

# DQ (9/18/2020): After retesting these older files, they now pass (at least with Clang 10.0).
TESTCODES_REQUIRED_TO_PASS = test2012_01.C test2012_02.C test2012_03.C \
	test2012_04.C test2012_05.C test2012_06.C test2012_09.C \
	test2012_10.C test2012_11.C test2012_12.C test2012_13.C \
	test2012_15.C test2012_16.C test2012_17.C test2012_18.C \
	test2012_19.C test2012_20.C test2012_21.C test2012_22.C \
	test2012_27.C test2012_28.C test2012_29.C test2012_30.C \
	test2012_31.C test2012_32.C test2012_33.C test2012_34.C \
	test2014_02.C test2014_03.C test2014_04.C test2014_05.C \
	test2014_06.C test2014_07.C test2014_08.C test2014_09.C \
	test2014_10.C test2014_11.C test2014_12.C test2014_13.C \
	test2014_14.C test2014_15.C test2014_16.C test2014_17.C \
	test2014_18.C test2014_19.C test2014_20.C test2014_21.C \
	test2014_22.C test2014_23.C test2014_24.C test2014_25.C \
	test2014_26.C test2014_27.C test2014_28.C test2014_29.C \
	test2014_30.C test2014_31.C test2014_32.C test2014_33.C \
	test2014_34.C test2014_35.C test2014_36.C test2014_37.C \
	test2014_38.C test2014_39.C test2014_40.C test2014_41.C \
	test2014_42.C test2014_43.C test2014_44.C test2014_45.C \
	test2014_47.C test2014_48.C test2014_49.C test2014_50.C \
	test2014_51.C test2014_52.C test2014_53.C test2014_54.C \
	test2014_55.C test2014_56.C test2014_57.C test2014_58.C \
	test2014_70.C test2014_71.C test2014_72.C test2014_73.C \
	test2014_74.C test2014_75.C test2014_76.C test2014_77.C \
	test2014_78.C test2014_79.C test2014_80.C test2014_81.C \
	test2014_82.C test2014_83.C test2014_84.C test2014_85.C \
	test2014_86.C test2014_87.C test2014_89.C test2014_90.C \
	test2015_01.C test2015_02.C test2015_03.C test2015_04.C \
	test2015_05.C test2015_06.C test2015_07.C test2015_08.C \
	test2015_09.C test2015_10.C test2015_12.C test2015_13.C \
	test2015_14.C test2015_15.C test2015_16.C test2016_01.C \
	test2016_03.C test2016_04.C test2016_06.C test2016_07.C \
	test2016_10.C test2016_11.C test2016_12.C test2016_13.C \
	test2016_14.C test2016_15.C test2016_17.C test2016_18.C \
	test2016_19.C test2016_21.C test2016_22.C test2016_25.C \
	test2016_28.C test2016_29.C test2016_30.C test2016_37.C \
	test2016_39.C test2016_42.C test2016_91.C test2016_92.C \
	test2016_93.C test2017_03.C test2017_04.C test2017_07.C \
	test2017_08.C test2017_09.C test2017_11.C test2017_12.C \
	test2017_13.C test2017_14.C test2017_15.C test2017_16.C \
	test2017_18.C test2017_19.C test2017_20.C test2017_21.C \
	test2017_22.C test2017_23.C test2018_04.C test2018_05.C \
	test2018_06.C test2018_07.C test2018_08.C test2018_09.C \
	test2018_10.C test2018_11.C test2018_12.C test2018_13.C \
	test2018_14.C test2018_15.C test2018_16.C test2018_17.C \
	test2018_18.C test2018_19.C test2018_20.C test2018_21.C \
	test2018_23.C test2018_24.C test2018_26.C test2018_27.C \
	test2018_28.C test2018_29.C test2018_30.C test2018_31.C \
	test2018_34.C test2018_35.C test2018_36.C test2018_37.C \
	test2018_38.C test2018_39.C test2018_40.C test2018_41.C \
	test2018_42.C test2018_43.C test2018_44.C test2018_45.C \
	test2018_46.C test2018_47.C test2018_48.C test2018_51.C \
	test2018_52.C test2018_53.C test2018_55.C test2018_56.C \
	test2018_57.C test2018_58.C test2018_59.C test2018_61.C \
	test2018_62.C test2018_66.C test2018_67.C test2018_68.C \
	test2018_69.C test2018_70.C test2018_72.C test2018_73.C \
	test2018_74.C test2018_75.C test2018_76.C test2018_77.C \
	test2018_78.C test2018_79.C test2018_80.C test2018_81.C \
	test2018_82.C test2018_83.C test2018_84.C test2018_85.C \
	test2018_86.C test2018_88.C test2018_89.C test2018_90.C \
	test2018_91.C test2018_92.C test2018_94.C test2018_95.C \
	test2018_97.C test2018_98.C test2018_99.C test2018_107.C \
	test2018_108.C test2018_109.C test2018_110.C test2018_111.C \
	test2018_112.C test2018_113.C test2018_114.C test2018_115.C \
	test2018_116.C test2018_119.C test2018_120.C test2018_121.C \
	test2018_124.C test2018_130.C test2018_131.C test2018_132.C \
	test2018_133.C test2018_134.C test2018_135.C test2018_137.C \
	ctor-list-init.C rose-1379-a.C rose-1379-b.C rose-1437-0.C \
	test2017_10.C rose-1522-0.C rose-1763.C rose-1863.C \
	test2019_01.C test2019_02.C test2019_03.C test2019_05.C \
	test2019_06.C test2019_07.C test2019_08.C test2019_10.C \
	test2019_11.C test2019_12.C test2019_13.C test2019_14.C \
	test2019_17.C test2019_18.C test2019_19.C test2019_20.C \
	test2019_21.C test2019_22.C test2019_23.C test2019_24.C \
	test2019_25.C test2019_26.C test2019_27.C test2019_28.C \
	test2019_29.C test2019_30.C test2019_32.C test2019_35.C \
	test2019_36.C test2019_40.C test2019_45.C test2019_46.C \
	test2019_47.C test2019_48.C test2019_49.C test2019_50.C \
	test2019_51.C test2019_52.C test2019_53.C test2019_54.C \
	test2019_55.C test2019_56.C test2019_59.C test2019_60.C \
	test2019_61.C test2019_62.C test2019_63.C test2019_64.C \
	test2019_65.C test2019_66.C test2019_67.C test2019_68.C \
	test2019_69.C test2019_70.C test2019_71.C test2019_72.C \
	test2019_73.C test2019_74.C test2019_75.C test2019_76.C \
	test2019_77.C test2019_78.C test2019_79.C test2019_80.C \
	test2019_81.C test2019_82.C test2019_83.C test2019_86.C \
	test2019_87.C test2019_88.C test2019_89.C test2019_90.C \
	test2019_91.C test2019_92.C test2019_93.C test2019_96.C \
	test2019_97.C test2019_98.C test2019_99.C test2019_100.C \
	test2019_101.C test2019_102.C test2019_105.C test2019_106.C \
	test2019_107.C test2019_108.C test2019_113.C test2019_114.C \
	test2019_115.C test2019_116.C test2019_117.C test2019_118.C \
	test2019_119.C test2019_120.C test2019_123.C test2019_124.C \
	test2019_125.C test2019_129.C test2019_130.C test2019_131.C \
	test2019_133.C test2019_134.C test2019_135.C test2019_136.C \
	test2019_137.C test2019_138.C test2019_139.C test2019_140.C \
	test2019_141.C test2019_142.C test2019_143.C test2019_144.C \
	test2019_145.C test2019_146.C test2019_147.C test2019_150.C \
	test2019_151.C test2019_152.C test2019_153.C test2019_154.C \
	test2019_155.C test2019_156.C test2019_157.C test2019_160.C \
	test2019_163.C test2019_164.C test2019_165.C test2019_166.C \
	test2019_167.C test2019_168.C test2019_169.C test2019_170.C \
	test2019_171.C test2019_172.C test2019_173.C test2019_174.C \
	test2019_175.C test2019_176.C test2019_177.C test2019_178.C \
	test2019_179.C test2019_180.C test2019_181.C test2019_184.C \
	test2019_185.C test2019_186.C test2019_187.C test2019_188.C \
	test2019_189.C test2019_190.C test2019_191.C test2019_192.C \
	test2019_193.C test2019_194.C test2019_195.C test2019_196_a.C \
	test2019_196_b.C test2019_197.C test2019_198_a.C \
	test2019_198_b.C test2019_200_a.C test2019_200_b.C \
	test2019_202.C test2019_205.C test2019_206.C test2019_207.C \
	test2019_208.C test2019_209.C test2019_210.C test2019_211.C \
	test2019_212.C test2019_213.C test2019_214.C test2019_215.C \
	test2019_216.C test2019_217.C test2019_220.C test2019_221.C \
	test2019_222.C test2019_223.C test2019_224.C test2019_225.C \
	test2019_226.C test2019_227.C test2019_228.C test2019_229.C \
	test2019_232.C test2019_233.C test2012_23.C test2014_46.C \
	test2015_11.C test2016_40.C test2019_15.C test2019_43.C \
	test2019_44.C test2019_46.C test2019_109.C test2019_126.C \
	test2019_127.C test2019_128.C test2019_182.C test2019_183.C \
	test2019_234.C test2019_235.C test2019_314.C test2019_315.C \
	test2019_316.C test2019_317.C test2019_318.C test2019_319.C \
	test2019_320.C test2019_321.C test2019_322.C test2019_323.C \
	test2019_324.C test2019_325.C test2019_326.C test2019_327.C \
	test2019_328.C test2019_329.C test2019_330.C test2019_331.C \
	test2019_332.C test2019_333.C test2019_334.C test2019_335.C \
	test2019_336.C test2019_337.C test2019_338.C test2019_339.C \
	test2019_340.C test2019_341.C test2019_342.C test2019_343.C \
	test2019_347.C test2019_349.C test2019_350.C test2019_351.C \
	test2019_352.C test2019_353.C test2019_354.C test2019_356.C \
	test2019_357.C test2019_358.C test2019_359.C test2019_360.C \
	test2019_360.C test2019_361.C test2019_362.C test2019_363.C \
	test2019_364.C test2019_368.C test2019_369.C test2019_370.C \
	test2019_371.C test2019_372.C test2019_373.C test2019_374.C \
	test2019_375.C test2019_376.C test2019_377.C test2019_378.C \
	test2019_379.C test2019_380.C test2019_381.C test2019_383.C \
	test2019_384.C test2019_385.C test2019_386.C test2019_387.C \
	test2019_389.C test2019_390.C test2019_391.C test2019_392.C \
	test2019_393.C test2019_394.C test2019_395.C test2019_396.C \
	test2019_397.C test2019_398.C test2019_399.C test2019_400.C \
	test2019_401.C test2019_402.C test2019_403.C test2019_404.C \
	test2019_405.C test2019_406.C test2019_407.C test2019_408.C \
	test2019_409.C test2019_410.C test2019_412.C test2019_413.C \
	test2019_414.C test2019_415.C test2019_416.C test2019_417.C \
	test2019_418.C test2019_419.C test2019_420.C test2019_421.C \
	test2019_422.C test2019_423.C test2019_424.C test2019_425.C \
	test2019_426.C test2019_427.C test2019_428.C test2019_429.C \
	test2019_430.C test2019_431.C test2019_432.C test2019_433.C \
	test2019_434.C test2019_435.C test2019_436.C test2019_437.C \
	test2019_439.C test2019_440.C test2019_441.C test2019_442.C \
	test2019_443.C test2019_444.C test2019_445.C test2019_446.C \
	test2019_447.C test2019_448.C test2019_449.C test2019_450.C \
	test2019_451.C test2019_452.C test2019_454.C test2019_455.C \
	test2019_456.C test2019_457.C test2019_458.C test2019_459.C \
	test2019_460.C test2019_461.C test2019_462.C test2019_464.C \
	test2019_465.C test2019_466.C test2019_467.C test2019_468.C \
	test2019_469.C test2019_470.C test2019_471.C test2019_472.C \
	test2019_473.C test2019_475.C test2019_476.C test2019_477.C \
	test2019_478.C test2019_479.C test2019_480.C test2019_481.C \
	test2019_483.C test2019_484.C test2019_485.C test2019_486.C \
	test2019_487.C test2019_489.C test2019_490.C test2019_491.C \
	test2019_493.C test2019_494.C test2019_495.C test2019_496.C \
	test2019_497.C test2019_498.C test2019_499.C test2019_500.C \
	test2019_501.C test2019_502.C test2019_503.C test2019_512.C \
	test2019_513.C test2019_514.C test2019_515.C test2019_524.C \
	test2020_01.C test2020_02.C test2020_03.C test2020_04.C \
	test2020_05.C test2020_06.C test2020_07.C test2020_08.C \
	test2020_09.C test2020_10.C test2020_11.C test2020_12.C \
	test2020_13.C test2020_15.C test2020_16.C test2020_17.C \
	test2020_18.C test2020_22.C test2020_23.C test2020_24.C \
	test2020_25.C test2020_26.C test2020_27.C test2020_28.C \
	test2020_29.C test2020_30.C test2020_31.C test2020_32.C \
	test2020_33.C test2020_34.C test2020_35.C test2020_36.C \
	test2020_37.C test2020_38.C test2020_39.C test2020_41.C \
	test2020_42.C test2020_43.C test2020_44.C test2020_45.C \
	test2020_46.C test2020_47.C test2020_48.C test2020_49.C \
	test2020_50.C test2020_52.C test2020_53.C test2020_57.C \
	test2020_58.C test2020_59.C test2020_66.C test2020_67.C \
	test2020_68.C test2020_74.C test2020_75.C test2020_76.C \
	test2020_77.C test2020_78.C test2020_79.C test2020_81.C \
	test2020_83.C test2020_84.C test2020_85.C test2020_86.C \
	test2020_88.C test2020_89.C test2020_90.C test2020_92.C \
	test2020_93.C test2020_94.C test2020_96.C test2020_97.C \
	test2020_98.C test2020_99.C test2020_100.C test2020_101.C \
	test2020_102.C test2020_103.C test2020_104.C test2020_105.C \
	test2020_106.C test2020_107.C test2020_108.C test2020_109.C \
	test2020_110.C test2020_116.C test2019_122.C test2019_199.C \
	test2019_201.C test2019_204.C test2019_236.C test2019_237.C \
	test2019_238.C test2019_239.C test2019_240.C test2019_241.C \
	test2019_242.C test2019_246.C test2019_249.C test2019_250.C \
	test2019_251.C test2019_252.C test2019_253.C test2019_254.C \
	test2019_255.C test2019_256.C test2019_258.C test2019_267.C \
	test2019_268.C test2019_269.C test2019_270.C test2019_271.C \
	test2019_275.C test2019_281.C test2019_282.C test2019_283.C \
	test2019_284.C test2019_289.C test2019_290.C test2019_293.C \
	test2019_294.C test2019_295.C test2019_298.C test2019_300.C \
	test2019_302.C test2019_303.C test2019_304.C test2019_305.C \
	test2019_307.C test2019_308.C test2019_309.C test2019_310.C \
	test2019_312.C test2019_348.C test2019_411.C test2019_438.C \
	test2019_505.C test2019_516.C test2019_523.C test2020_51a.C \
	test2020_51b.C test2020_72.C test2016_24.C test2016_33.C \
	test2016_34.C test2016_90.C test2019_31.C test2019_33.C \
	test2019_94.C test2012_14.C test2012_26.C test2019_04.C \
	test2019_95.C test2019_121.C test2019_110.C test2019_111.C \
	test2019_112.C test2019_218.C test2019_219.C test2019_230.C \
	test2019_231.C test2019_355.C test2019_365.C test2019_367.C \
	test2019_482.C rose-1774.C $(am__append_4) test2012_08.C \
	test2018_60.C test2018_63.C test2018_64.C test2018_65.C \
	test2018_71.C test2019_57.C test2019_58.C test2019_158.C \
	test2019_159.C test2019_161.C $(am__append_7) $(am__append_8) \
	$(am__append_10) $(am__append_11) $(am__append_13) \
	$(am__append_14)

# DQ (9/22/2020): This file fails because the #include <ext/aligned_buffer.h> can not be 
# resolved by the Intel v17.0.4 compiler as it is installed on Jenkins. The issues seem 
# to be that the Jenkins installation of Intel v17 is using the GNU headers and the version
# of GNU headers is 4.8.5 (which is too old).  Installing GNU 6.1 and maybe a later version 
# of boost than 1.57 (I'm using Boost 1.60) should fix the problem.  Nathan is fixing this
# issue and so this file can be added back in later after Jenkins's use of GNU by Intel v17 
# is updated.
# test2018_100.C
TESTCODE_CURRENTLY_FAILING = test2012_24.C test2016_41.C test2017_17.C \
	test2019_16.C test2019_34.C test2019_37.C test2019_38.C \
	test2019_103.C test2019_104.C test2019_132.C test2019_148.C \
	test2019_149.C test2019_203.C test2019_243.C test2019_244.C \
	test2019_245.C test2019_257.C test2019_259.C test2019_260.C \
	test2019_261.C test2019_262.C test2019_263.C test2019_264.C \
	test2019_265.C test2019_266.C test2019_276.C test2019_277.C \
	test2019_278.C test2019_279.C test2019_280.C test2019_285.C \
	test2019_286.C test2019_287.C test2019_288.C test2019_296.C \
	test2019_297.C test2019_301.C test2019_306.C test2019_311.C \
	test2019_313.C test2019_345.C test2019_346.C test2019_366.C \
	test2019_382.C test2019_388.C test2019_453.C test2019_492.C \
	test2019_504.C test2019_506.C test2019_511.C test2020_40.C \
	test2020_71.C test2020_73.C test2020_80.C test2020_82.C \
	test2020_91.C test2020_95.C $(am__append_3) $(am__append_5) \
	$(am__append_6) $(am__append_9) $(am__append_12)

# DQ (9/21/2020) Notes:
# test2014_88.C  Passing for GNU 6.1 and Intel v17, but fails only in CLANG (v10) and appears to be missing a builtin function or the builtin function is not correctly declared.
# test2018_54.C  Passing for GNU 6.1 and Intel v17, but fails only in CLANG (v10)
# test2018_105.C Passing for GNU 6.1 and Clang 10, but fails only in Intel v17
# test2018_117.C Passing for GNU 6.1 and Clang 10, but fails only in Intel v17
# test2018_118.C Passing for GNU 6.1 and Clang 10, but fails only in Intel v17
# test2018_127.C Passing for GNU 6.1 and Intel v17, but fails only in CLANG (v10): error: reference to scoped enumeration must use 'enum' not 'enum class'
# test2018_136.C Passing for GNU 6.1, but fails for Clang 10 and Intel v17: missing builtin functions.
# test2018_93.C  Passing for GNU 6.1 and Intel v17, but fails only in CLANG (v10): error: reference to scoped enumeration must use 'enum' not 'enum class'
# test2018_96.C  Passing for GNU 6.1 and Intel v17, but fails only in CLANG (v10): error: reference to scoped enumeration must use 'enum' not 'enum class'
# test2019_344.C Passing for GNU 6.1 and Intel v17, but fails only in CLANG (v10): error: reference to scoped enumeration must use 'enum' not 'enum class'
# test2019_474.C Passing for GNU 6.1 and Intel v17, but fails only in CLANG (v10): error: reference to scoped enumeration must use 'enum' not 'enum class'
# test2019_488.C Passing for GNU 6.1 and Intel v17, but fails only in CLANG (v10): error: expected class name
# test2020_14.C  Passing for GNU 6.1 and Intel v17, but fails only in CLANG (v10): error: reference to scoped enumeration must use 'enum' not 'enum class'
# test2020_19.C  Passing for GNU 6.1 and Intel v17, but fails only in CLANG (v10): error: reference to scoped enumeration must use 'enum' not 'enum class'
# test2020_20.C  Passing for GNU 6.1 and Intel v17, but fails only in CLANG (v10): error: reference to scoped enumeration must use 'enum' not 'enum class'
# test2020_21.C  Passing for GNU 6.1 and Intel v17, but fails only in CLANG (v10): error: reference to scoped enumeration must use 'enum' not 'enum class'

# DQ (9/21/2020): This code passes for GNU v6.1, Intel v17, and Clang v10.0 (so we can eliminate this compexity).
# if USING_INTEL_COMPILER
#  TESTCODE_CURRENTLY_FAILING += \
#   test2018_100.C 
# else
# if ROSE_USING_GCC_VERSION_LATER_4_9
#  TESTCODES_REQUIRED_TO_PASS += 
# else
#   TESTCODE_CURRENTLY_FAILING += \
#   test2018_100.C 
# endif
# endif

#  TESTCODE_CURRENTLY_FAILING += \
#     test2016_12.C \
#     test2016_20.C \
#     test2016_23.C \
#     test2016_24.C \
#     test2016_33.C \
#     test2016_34.C \
#     test2016_35.C \
#     test2016_36.C \
#     test2016_90.C 
#  TESTCODES_REQUIRED_TO_PASS += \
#     test2016_23.C \
#     test2016_24.C \
#     test2016_33.C \
#     test2016_34.C \
#     test2016_35.C \
#     test2016_36.C 

# Automake's testing mechanism (which defines the "make check" rule) requires passing tests.
TESTCODES = \
   $(TESTCODES_REQUIRED_TO_PASS) 


# QMTest allows both passing and failing tests.
ALL_TESTCODES = \
   $(TESTCODES_REQUIRED_TO_PASS) \
   $(TESTCODE_CURRENTLY_FAILING)

TESTCODE_INCLUDES = 

# VALGRIND_OPTIONS = -v --num-callers=12 --leak-check=yes --error-limit=no --show-reachable=yes
VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes --trace-children=yes --suppressions=$(top_srcdir)/scripts/rose-suppressions-for-valgrind
VALGRIND = 
# VALGRIND = valgrind $(VALGRIND_OPTIONS)
# VALGRIND =

# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support 
# this, this implementation needs review).  It might be better to prepend the information to the 
# CC and CXX variables. I think that the purify support uses this approach.
#VALGRIND = $(NON_RTH_ADDRESS_SANITIZER_OPTIONS)

# DQ (12/13/2017): Need to add support for multiple versions of Raja.
# Use --with-research-raja=... and --with-ares-raja=... , and for other specific applications dependent on Raja.
RajaInclude = /home/quinlan1/ROSE/RAJA/install/include

#########
# Targets lists

# PASSING_TEST_Source_passed = ${TESTCODES:.C=.C.passed}
MULTIFILE_TESTS = \
   test2019_196_ab test2019_198_ab test2019_507_ab test2019_508_ab test2019_509_ab \
   test2019_510_ab test2019_517_ab test2019_518_ab test2019_519_ab test2019_521_ab \
   test2019_522_ab test2020_51ab

PASSING_TEST_Source_passed = ${TESTCODES:.C=.C.passed} $(MULTIFILE_TESTS)
TEST_Source_passed = ${ALL_TESTCODES:.C=.C.passed}
TEST_TRANSLATOR = ../../testTranslator

#########
# ROSE_FLAGS
LANG_FLAGS = -std=c++11
ROSE_FLAGS = $(am__append_15) -w -rose:verbose 0 \
	-rose:skip_unparse_asm_commands

#
############

# Make sure that all the test codes end up in the distribution
EXTRA_DIST = $(TESTCODES_REQUIRED_TO_PASS) $(TESTCODE_CURRENTLY_FAILING)
all: all-am

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign --ignore-deps tests/nonsmoke/functional/CompileTests/Cxx11_tests/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign --ignore-deps tests/nonsmoke/functional/CompileTests/Cxx11_tests/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;
$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
tags TAGS:

ctags CTAGS:

cscope cscopelist:


distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-local mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: all all-am check check-am check-local clean clean-generic \
	clean-libtool clean-local cscopelist-am ctags-am distclean \
	distclean-generic distclean-libtool distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags-am uninstall \
	uninstall-am

.PRECIOUS: Makefile


# JJW (2/25/2008): set a flag (only used when running ROSE applications) to
# have them run using the build tree rather than the install tree -- this is
# important for "make check" in an uninstalled copy of ROSE.
#export ROSE_IN_BUILD_TREE=$(top_builddir)

#  # The previous "Z3_*" variables should have been named "ROSE_Z3_*" following the pattern in the rest of this
#  # makefile. I don't want to break code that uses the wrong names, so I'll just add the correct ones. [Matzke 2017-10-17]

show-rpaths:
	@echo "ROSE_LIBS = $(ROSE_LIBS)"
	@echo "ROSE_RPATHS = $(ROSE_RPATHS)"
	@echo "ROSE_LINK_RPATHS = $(ROSE_LINK_RPATHS)"

clean-test-targets:
	rm -f $(TEST_TARGETS)
	rm -f $(TEST_TARGETS:.passed=.failed)
	rm -f $(TEST_TARGETS:.passed=.out)
	rm -f $(TEST_TARGETS:.passed=.err)

clean-local: clean-test-targets

.PHONY: clean-test-targets
 # DQ (9/19/2020): Added test2019_299.C since it fails with the Intel compiler used within Jenkins (but passes Intel v17 on my REL7 machine).

#    # DQ (9/19/2020) These are not handled by GNU (using both EDG 5.0 or EDG 6.0), but work with Clang.
#    # Basically, EDG handles the code, but the generated code is only handled by Clang and not GNU.

# GNU compiler
#      # skip these codes when using GNU 10.1 (testing)
      # DQ (7/23/2020): These are failing code for EDG 6.0 and GNU 10.1 (debugging this).
      # DQ (9/19/2020): test2020_69.C and test2020_70.C fail for GNU 10 only (pass for EDG 6 using GNU 6.1)

globalVariablesInLambdas_test: globalVariablesInLambdas
	./globalVariablesInLambdas -std=c++11 --edg:no_warnings -c $(srcdir)/globalVariablesInLambdas_test_01.C

rajaTest:../../testTranslator
	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(RajaInclude) -I$(srcdir) -c $(srcdir)/test2017_33.C

# DQ (2/25/2019): Combined compilation of two files has particular errors.
test2019_196_ab: ../../testTranslator
	$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/test2019_196_a.C $(srcdir)/test2019_196_b.C

# DQ (2/26/2019): Combined compilation of two files has particular errors.
test2019_198_ab: ../../testTranslator
	$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/test2019_198_a.C $(srcdir)/test2019_198_b.C

# DQ (2/27/2019): Combined compilation of two files has particular errors.
test2019_200_ab: ../../testTranslator
	$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/test2019_200_a.C $(srcdir)/test2019_200_b.C

test2019_507_ab: ../../testTranslator
	$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/test2019_507a.C $(srcdir)/test2019_507b.C

test2019_508_ab: ../../testTranslator
	$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/test2019_508a.C $(srcdir)/test2019_508b.C

test2019_509_ab: ../../testTranslator
	$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/test2019_509a.C $(srcdir)/test2019_509b.C

test2019_510_ab: ../../testTranslator
	$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/test2019_510a.C $(srcdir)/test2019_510b.C

test2019_517_ab: ../../testTranslator
	$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/test2019_517a.C $(srcdir)/test2019_517b.C

test2019_518_ab: ../../testTranslator
	$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/test2019_518a.C $(srcdir)/test2019_518b.C

test2019_519_ab: ../../testTranslator
	$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/test2019_519a.C $(srcdir)/test2019_519b.C

test2019_520_ab: ../../testTranslator
	$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/test2019_520a.C $(srcdir)/test2019_520b.C

test2019_521_ab: ../../testTranslator
	$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/test2019_521a.C $(srcdir)/test2019_521b.C

test2019_522_ab: ../../testTranslator
	$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/test2019_522a.C $(srcdir)/test2019_522b.C

test2020_51ab: ../../testTranslator
	$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/test2020_51a.C $(srcdir)/test2020_51b.C

test2020_113: ../../testTranslator
	$(VALGRIND) $(TEST_TRANSLATOR) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -DHEADER_FILE=\"test2020_113.h\" -c $(srcdir)/test2020_113.C 

#########
# Translator to be used: calling "make TEST_TRANSLATOR=../../testBackend" uses the backend compiler only

../../testTranslator:
	cd ../..; $(MAKE) testTranslator

../../testBackend:
	cd ../..; $(MAKE) testBackend

testCompiler:
	ln -s `which g++` testCompiler

#########
# RTH test targets

$(TEST_Source_passed): %.passed: $(srcdir)/% $(TEST_TRANSLATOR) $(top_srcdir)/scripts/test_exit_status
	@$(RTH_RUN) \
	   CMD="$(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -c $(srcdir)/$(@:.C.passed=.C)" \
	   TITLE="TEST: $(TEST_TRANSLATOR) $(@:.C.passed=.C)" \
	   $(top_srcdir)/scripts/test_exit_status $@
#	$(VALGRIND) $(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/$(@:.C.passed=.C)

check-local:
	@echo "C++11 tests require configuration with either EDG version 4.9 and GNU version 4.8 or backend compiler or EDG 4.12 and 4.8 or any later GNU compiler."
	@echo "C++11 tests using EDG 4.12 and any supported backend compiler are allowed."
	@$(MAKE) $(PASSING_TEST_Source_passed)
# Exclude this list of files in the case of CLANG compiler.
##	@echo "USING_CLANG_COMPILER == true"
##	@echo "C++11 tests not allowed with EDG 4.9: Clang backend compiler using EDG 4.12 or greater frontend."
# DQ (3/22/2020): Builtins are now mostly supported, allowing tests so that we can debug Mac support during COVID-19 work at home.
# DQ (2/21/2017): Too many failing files due to builtin functions that are missing.
#	@$(MAKE) $(PASSING_TEST_Objects)
##	@$(MAKE) $(PASSING_TEST_Source_passed)
#	@echo "USING_CLANG_COMPILER == false"
# Exclude this list of files in the case of Intel compiler.
##	@echo "USING_INTEL_COMPILER == true"
##	@echo "C++11 tests using EDG 4.12 Intel backend compiler are allowed."
##	@$(MAKE) $(PASSING_TEST_Source_passed)
# This is an unknown compiler.
#	@echo "USING_INTEL_COMPILER == false"
	@echo "*********************************************************************************************************************"
	@echo "****** ROSE/tests/nonsmoke/functional/CompileTests/Cxx11_tests: make check rule complete (terminated normally) ******"
	@echo "*********************************************************************************************************************"

clean-local:
	rm -f a.out *.o rose_*.[cC] roseTestProgram.C *.dot
	rm -rf QMTest
	rm -f *.int.c
	rm -f *.failed *.passed

status:
	@$(MAKE) $(TEST_Source_passed)

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
