# Makefile.in generated by automake 1.16.2 from Makefile.am.
# tests/nonsmoke/functional/CompileTests/Fortran_tests/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2020 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# These definitions are for the benefit of independent software contained			-*- makefile -*-
# in ROSE.  (Currently, this means SAGE and ROSETTA.)
# It defines ROSE_INCLUDES and ROSE_LIBS so they can use the ROSE codes.

# ROSE_INCLUDES contains the include flags for compiling with ROSE code.
# (ROSE software should set the include paths in their respective Makefile.am
# files, since they are expected to know the ROSE source tree structure.)
# To use ROSE_INCLUDES, the independent software packages contained in ROSE
# should define the variable ROSE_HOME to be the relative path to the root
# of the ROSE directory tree.

# This fixes some problem caused by automake or autoconf
# (detailed documentation is in the ChangeLog)
# MAKE=gmake

# DQ (8/10/2007): Valentin suggested this be commented out.
# DQ (4/23/2006): This is the default when build using automake version 1.6.3 but it
# causes errors so we would like to specify --run automake instead
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake-1.6
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake

# force ranlib to just call touch so that *.so (dynamic libraries) will not
# be run with ranlib (which is a error).  This allows us to use dynamic
# libraries as the default within ROSE.
# JJW 7/25/2008: Do we really need this?

# Makefile include to support QMTest.
VPATH = /home/meltdown1995/roseRoot/rose-compiler//src/tests/nonsmoke/functional/CompileTests/Fortran_tests
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/rose
pkgincludedir = $(includedir)/rose
pkglibdir = $(libdir)/rose
pkglibexecdir = $(libexecdir)/rose
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu

# DQ (10/23/2020): Pei-Hung and I think this may not be required (not available on my system).
# I get the error: 
#    /bin/ld: skipping incompatible /lib/libtinfo.so when searching for -ltinfo
#    clang-10: error: linker command failed with exit code 1 (use -v to see invocation)
# ROSE_LIBS += $(CLANG_LDFLAGS) -ltinfo
#am__append_1 = $(CLANG_LDFLAGS)
#am__append_2 = -R $(DOT_ASIS_LIB_DIR_) 
am__append_3 = gfortranTestSuite
##am__append_4 = gfortranTestSuite

# DQ (11/11/2014): These test fail due to changes to support C++11 work (need to look into this separately).
#    test2010_154.f90

# SKW 8/21/2011: these test fails with gfortran 4.1.2, but there is no 'ROSE_USING_GFORTRAN_VERSION_4_1_2'
# yet so I am just commenting them out for now. They pass with gfortran 4.4.1
#     test2007_108.f90
#     test2010_03.f90
#     test2010_81.f90

# DQ (4/10/2011): If it is not gfortran 4.5, then add this test code (these fail syntax checking with 4.5).
am__append_5 = \
     test2010_35.f90 \
     test2011_Rice_funcdecl-4.f90

am__append_6 = test2007_263.f90

# DQ (2/1/2011): These test codes will not pass the initial syntax checking with the GNU gfortran version 4.4.x compiler.
#if !ROSE_USING_GFORTRAN_VERSION_4_4
#  F90_TESTCODES_REQUIRED_TO_PASS += test2010_164.f90 test2011_37.f90 
#am__append_7 = \
#     test2010_164.f90 


# DQ (4/10/2011): And if it is not gfortran 4.5, then add this test code.
#if !ROSE_USING_GFORTRAN_VERSION_4_5
##am__append_8 = \
##     test2011_37.f90 


# DQ (11/11/2014): These test fail due to changes to support C++11 work (need to look into this seperately).
#    test2010_107.f90 

# DQ (3/4/13): Failing test for edg4x branch
# test2010_48.f90 

# DQ (2/21/13): Failing test for edg4x branch
# test2010_48.f90 
# test2010_66.f90 
# test2010_67.f90 
# test2010_146.f90 
# test2010_147.f90 
# test2010_149.f90 
# test2011_03.f90 
# test2011_53.f90 
# test2011_54.f90 
# test2011_55.f90 
# test2011_57.f90 
# test2011_62.f90 
# test2011_69.f90 
# phlin (as 08/22/2012):
# test case for ROSE-bugs #597
am__append_9 = \
     test2012_SavedCommonBlock.f90 

subdir = tests/nonsmoke/functional/CompileTests/Fortran_tests
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acmacros/canonicalize-symlink.m4 \
	$(top_srcdir)/acmacros/compiler-ar.m4 \
	$(top_srcdir)/acmacros/compiler-id.m4 \
	$(top_srcdir)/acmacros/configure-log.m4 \
	$(top_srcdir)/acmacros/pkg.m4 $(top_srcdir)/acmacros/upc.m4 \
	$(top_srcdir)/config/EDG.m4 $(top_srcdir)/config/ROSE.m4 \
	$(top_srcdir)/config/ac_pkg_swig.m4 \
	$(top_srcdir)/config/acinclude.m4 \
	$(top_srcdir)/config/ax_boost_base.m4 \
	$(top_srcdir)/config/ax_boost_chrono.m4 \
	$(top_srcdir)/config/ax_boost_date_time.m4 \
	$(top_srcdir)/config/ax_boost_filesystem.m4 \
	$(top_srcdir)/config/ax_boost_iostreams.m4 \
	$(top_srcdir)/config/ax_boost_program_options.m4 \
	$(top_srcdir)/config/ax_boost_random.m4 \
	$(top_srcdir)/config/ax_boost_regex.m4 \
	$(top_srcdir)/config/ax_boost_serialization.m4 \
	$(top_srcdir)/config/ax_boost_system.m4 \
	$(top_srcdir)/config/ax_boost_thread.m4 \
	$(top_srcdir)/config/ax_boost_wave.m4 \
	$(top_srcdir)/config/ax_compare_version.m4 \
	$(top_srcdir)/config/ax_compiler_vendor.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_11.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_14.m4 \
	$(top_srcdir)/config/ax_lib_mysql.m4 \
	$(top_srcdir)/config/ax_lib_sqlite3.m4 \
	$(top_srcdir)/config/ax_lib_xerces.m4 \
	$(top_srcdir)/config/ax_prog_bison_version.m4 \
	$(top_srcdir)/config/ax_python_devel.m4 \
	$(top_srcdir)/config/ax_with_prog.m4 \
	$(top_srcdir)/config/choose-backend-compiler.m4 \
	$(top_srcdir)/config/compiler-defs.m4 \
	$(top_srcdir)/config/determine-os.m4 \
	$(top_srcdir)/config/enable-rosehpct.m4 \
	$(top_srcdir)/config/generate-backend-compiler-specific-headers.m4 \
	$(top_srcdir)/config/libtool.m4 $(top_srcdir)/config/libxml.m4 \
	$(top_srcdir)/config/ltargz.m4 $(top_srcdir)/config/ltdl.m4 \
	$(top_srcdir)/config/ltoptions.m4 \
	$(top_srcdir)/config/ltsugar.m4 \
	$(top_srcdir)/config/ltversion.m4 \
	$(top_srcdir)/config/lt~obsolete.m4 \
	$(top_srcdir)/config/mdl_have_opengl_2014.m4 \
	$(top_srcdir)/config/qrose_indigo_1.m4 \
	$(top_srcdir)/config/qrose_indigo_1_windows.m4 \
	$(top_srcdir)/config/support-GraphViz.m4 \
	$(top_srcdir)/config/support-IntelPin.m4 \
	$(top_srcdir)/config/support-accelerator.m4 \
	$(top_srcdir)/config/support-aterm.m4 \
	$(top_srcdir)/config/support-backend-x10.m4 \
	$(top_srcdir)/config/support-bddbddb.m4 \
	$(top_srcdir)/config/support-binary.m4 \
	$(top_srcdir)/config/support-bison.m4 \
	$(top_srcdir)/config/support-blacklist.m4 \
	$(top_srcdir)/config/support-boost.m4 \
	$(top_srcdir)/config/support-capstone.m4 \
	$(top_srcdir)/config/support-clang.m4 \
	$(top_srcdir)/config/support-cobol.m4 \
	$(top_srcdir)/config/support-compass2.m4 \
	$(top_srcdir)/config/support-compiler-features.m4 \
	$(top_srcdir)/config/support-cuda.m4 \
	$(top_srcdir)/config/support-doxygen.m4 \
	$(top_srcdir)/config/support-dwarf.m4 \
	$(top_srcdir)/config/support-edg-debugging.m4 \
	$(top_srcdir)/config/support-edg.m4 \
	$(top_srcdir)/config/support-elf.m4 \
	$(top_srcdir)/config/support-fatal-rose-warnings.m4 \
	$(top_srcdir)/config/support-flang.m4 \
	$(top_srcdir)/config/support-gcc-omp.m4 \
	$(top_srcdir)/config/support-gcrypt.m4 \
	$(top_srcdir)/config/support-gmp.m4 \
	$(top_srcdir)/config/support-gnat.m4 \
	$(top_srcdir)/config/support-gomp-omp.m4 \
	$(top_srcdir)/config/support-haskell.m4 \
	$(top_srcdir)/config/support-i386.m4 \
	$(top_srcdir)/config/support-ida.m4 \
	$(top_srcdir)/config/support-insure.m4 \
	$(top_srcdir)/config/support-isl.m4 \
	$(top_srcdir)/config/support-java.m4 \
	$(top_srcdir)/config/support-languages.m4 \
	$(top_srcdir)/config/support-lcov.m4 \
	$(top_srcdir)/config/support-libffi.m4 \
	$(top_srcdir)/config/support-libharu.m4 \
	$(top_srcdir)/config/support-libpqxx.m4 \
	$(top_srcdir)/config/support-llvm.m4 \
	$(top_srcdir)/config/support-magic.m4 \
	$(top_srcdir)/config/support-maple.m4 \
	$(top_srcdir)/config/support-mint.m4 \
	$(top_srcdir)/config/support-mpi.m4 \
	$(top_srcdir)/config/support-octave.m4 \
	$(top_srcdir)/config/support-ofp.m4 \
	$(top_srcdir)/config/support-omp.m4 \
	$(top_srcdir)/config/support-php.m4 \
	$(top_srcdir)/config/support-pocc.m4 \
	$(top_srcdir)/config/support-projects.m4 \
	$(top_srcdir)/config/support-purify.m4 \
	$(top_srcdir)/config/support-python-api.m4 \
	$(top_srcdir)/config/support-python.m4 \
	$(top_srcdir)/config/support-readline.m4 \
	$(top_srcdir)/config/support-rose.m4 \
	$(top_srcdir)/config/support-rted.m4 \
	$(top_srcdir)/config/support-rtedupc.m4 \
	$(top_srcdir)/config/support-sanitizer.m4 \
	$(top_srcdir)/config/support-sat.m4 \
	$(top_srcdir)/config/support-spot.m4 \
	$(top_srcdir)/config/support-ssl.m4 \
	$(top_srcdir)/config/support-stratego.m4 \
	$(top_srcdir)/config/support-summary.m4 \
	$(top_srcdir)/config/support-swipl.m4 \
	$(top_srcdir)/config/support-valgrind.m4 \
	$(top_srcdir)/config/support-vectorization.m4 \
	$(top_srcdir)/config/support-visualization.m4 \
	$(top_srcdir)/config/support-windows.m4 \
	$(top_srcdir)/config/support-x10.m4 \
	$(top_srcdir)/config/support-yaml.m4 \
	$(top_srcdir)/config/support-yices.m4 \
	$(top_srcdir)/config/support-z3.m4 \
	$(top_srcdir)/config/support_POET.m4 \
	$(top_srcdir)/config/swig_enable_cxx.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/rose_config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
depcomp =
am__maybe_remake_depfiles =
SOURCES =
DIST_SOURCES =
RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \
	ctags-recursive dvi-recursive html-recursive info-recursive \
	install-data-recursive install-dvi-recursive \
	install-exec-recursive install-html-recursive \
	install-info-recursive install-pdf-recursive \
	install-ps-recursive install-recursive installcheck-recursive \
	installdirs-recursive pdf-recursive ps-recursive \
	tags-recursive uninstall-recursive
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
am__recursive_targets = \
  $(RECURSIVE_TARGETS) \
  $(RECURSIVE_CLEAN_TARGETS) \
  $(am__extra_recursive_targets)
AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \
	distdir distdir-am
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = . LANL_POP gfortranTestSuite
am__DIST_COMMON = $(srcdir)/Makefile.in \
	$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs \
	$(top_srcdir)/config/QMTest_makefile.inc \
	$(top_srcdir)/config/mkinstalldirs README
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
ABS_COMPASS2_XML_SRCDIR = /home/meltdown1995/roseRoot/rose-compiler/src/projects/compass2/share/xml
ACLOCAL = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing aclocal-1.16
AMTAR = 
AM_DEFAULT_VERBOSITY = 0
AR = ar
ARMA_PREFIX = 
ATERM_BIN_PATH = 
ATERM_INSTALL_PATH = 
ATERM_LIBRARY_PATH = 
AUTOCONF = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing autoconf
AUTOHEADER = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing autoheader
AUTOMAKE = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing automake-1.16
AUX_LINKER = 
AWK = mawk
Axx_INCLUDES = 
Axx_LIBS = 
BACKEND_ADA_COMPILER = gnat
BACKEND_COBOL_COMPILER = cobc
BACKEND_COMPILER_VERSION_MAJOR_NUMBER = 8
BACKEND_COMPILER_VERSION_MINOR_NUMBER = 4
BACKEND_COMPILER_VERSION_NAME = gnu
BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER = 0
BACKEND_CSHARP_COMPILER = mcs
BACKEND_CXX_COMPILER = g++
BACKEND_CXX_VENDOR_AND_VERSION2 = gnu-8.4
BACKEND_CXX_VENDOR_AND_VERSION3 = gnu-8.4.0
BACKEND_C_COMPILER = gcc
BACKEND_FORTRAN_COMPILER = gfortran
BACKEND_JAVA_COMPILER = javac
BACKEND_JOVIAL_COMPILER = default_jovial_compiler
BACKEND_MATLAB_COMPILER = octave
BACKEND_X10_COMPILER = 
BISON = /usr/bin/bison
BISON_VERSION = bison (GNU Bison) 3.7
BOOST_CHRONO_LIB = -lboost_chrono
BOOST_CPPFLAGS = -pthread -I/usr/include
BOOST_DATE_TIME_LIB = -lboost_date_time
BOOST_FILESYSTEM_LIB = -lboost_filesystem
BOOST_IOSTREAMS_LIB = -lboost_iostreams
BOOST_LDFLAGS = -pthread -L/usr/lib/x86_64-linux-gnu
BOOST_PROGRAM_OPTIONS_LIB = -lboost_program_options
BOOST_RANDOM_LIB = -lboost_random
BOOST_REGEX_LIB = -lboost_regex
BOOST_SERIALIZATION_LIB = -lboost_serialization
BOOST_SYSTEM_LIB = -lboost_system
BOOST_THREAD_LIB = -lboost_thread
BOOST_WAVE_LIB = -lboost_wave
CANDL_PATH = 
CC = gcc
CCDEPMODE = depmode=gcc3
CCLD = gcc
CFLAGS = -g -O2  -g -O2 -Wall -Wstrict-prototypes -Wmissing-prototypes
CFLAGS32 = no
CLANG_CXXFLAGS = 
CLANG_LDFLAGS = 
CLANG_LIBDIR = 
CLASSPATH = /home/meltdown1995/roseRoot/rose-compiler//src/src/3rdPartyLibraries/antlr-jars/antlr-3.5.2-complete.jar:/home/meltdown1995/roseRoot/rose-compiler//src/src/3rdPartyLibraries/fortran-parser/OpenFortranParser-20200819-JDK8.jar
CLOOG_PATH = 
COBPT_INSTALL_PATH = 
COBPT_LIBRARY_PATH = 
CPP = gcc -E

# DQ (9/27/2015): Added to support new use of AM_CPPFLAGS instead of INCLUDES
# (depreicated in automake and for which many warnings are generated).
CPPFLAGS = $(AM_CPPFLAGS)
CUDA_BIN_DIR = 
CUDA_INC_DIR = /home/meltdown1995/roseRoot/rose-compiler/build/include-staging/cuda_HEADERS/cuda-7.5/targets/x86_64-linux/include/
CUDA_LIB_DIR = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS =   -g -fno-var-tracking-assignments -Wno-misleading-indentation -O2 -Wall
CXXLD = g++
CXX_DEBUG = -g -fno-var-tracking-assignments -Wno-misleading-indentation
CXX_OPTIMIZE = -O2
CXX_SHARED_LIB_UPDATE = ${CXX} -shared -o
CXX_STATIC_LIB_UPDATE = ${AR} ruv
CXX_TEMPLATE_OBJECTS = 
CXX_TEMPLATE_REPOSITORY_PATH = $(top_builddir)/src
CXX_WARNINGS = -Wall
CYGPATH_W = echo
C_DEBUG = -g
C_OPTIMIZE = -O2
C_WARNINGS = -Wall -Wstrict-prototypes -Wmissing-prototypes
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLIB_PREFIX = 
DLLTOOL = false
DOXYGEN = 
DOXYGEN_ADDED_DIRECTORY_1 = @top_pwd@/src/frontend/SageIII
DOXYGEN_ADDED_DIRECTORY_2 = /home/meltdown1995/roseRoot/rose-compiler//src/src/frontend/SageIII
DOXYGEN_ENABLED_SECTIONS = documentUserVersionUsingDoxygen
DOXYGEN_EXTRACT_ALL = NO
DOXYGEN_EXTRACT_PRIVATE = NO
DOXYGEN_EXTRACT_STATIC = NO
DOXYGEN_HIDE_FRIEND_COMPOUNDS = YES
DOXYGEN_HIDE_UNDOC_CLASSES = NO
DOXYGEN_HIDE_UNDOC_MEMBERS = NO
DOXYGEN_INTERNAL_DOCS = NO
DOXYGEN_USE_TAG_FILE = 
DOXYINDEXER = 
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
ETHER_PREFIX = 
EXE = 
EXEEXT = 
F77 = f77
FC = gfortran
FCFLAGS = -g -O2
FFLAGS = 
FGREP = /usr/bin/grep -F
FLANG_INSTALL_PATH = 
FLANG_SOURCE_PATH = 
FLTK_include_path = 
FLTK_libs_path = 
FRONTEND_CXX_VENDOR_AND_VERSION2 = gnu-8
FRONTEND_CXX_VENDOR_AND_VERSION3 = gnu-8.4.0
GCC_MINOR_VERSION = 8
GCC_VERSION = 8
GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX = gnu-8.4
GEN_BE = sage_gen_be.o
GFORTRAN_PATH = /usr/bin/gfortran
GHCBIN = 
GLUT_CFLAGS = 
GLUT_LIBS = ${glut_path}
GLUT_include_path = 
GLUT_libs_path = 
GL_CFLAGS = 
GL_LIBS = 
GMP_INCLUDE_PATH = 
GMP_INSTALL_PATH = 
GMP_LIBRARY_PATH = 
GNAT_INCLUDES = 
GREP = /usr/bin/grep
GraphViz_include_path = 
GraphViz_libs_path = 
HAVE_CXX11 = 1
HAVE_CXX14 = 1
HS_CONFIG_OPTS = --prefix=/home/meltdown1995/roseRoot/rose-compiler//install --user
INCLTDL = 
INCLUDE_COMPASS_MAKEFILE_INC = include compass_makefile.inc
INDENT = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INSURE_OPTIONS = 
INTEL_FPP_PATH = 
ISL_INCLUDE_PATH = 
ISL_INSTALL_PATH = 
ISL_LIBRARY_PATH = 
IntelPin_path = 
JAR = 
JAVA = 
JAVAC = 
JAVA_JVM_INCLUDE = 
JAVA_JVM_LINK = 
JAVA_JVM_PATH = 
JAVA_PATH = 
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LEX = flex
LEXLIB = 
LEX_OUTPUT_ROOT = lex.yy
LIBADD_DL = -ldl 
LIBADD_DLD_LINK = 
LIBADD_DLOPEN = -ldl
LIBADD_SHL_LOAD = 
LIBDWARF_CPPFLAGS = 
LIBDWARF_LDFLAGS = 
LIBDWARF_PREFIX = 
LIBELF_CPPFLAGS = 
LIBELF_LDFLAGS = 
LIBELF_PREFIX = 
LIBFFI_CFLAGS = 
LIBFFI_LIBS = 
LIBGCRYPT_CPPFLAGS = 
LIBGCRYPT_LDFLAGS = 
LIBGCRYPT_PREFIX = 
LIBLTDL = -lltdl
LIBOBJS = 
LIBREADLINE_INCLUDE_PATH = 
LIBREADLINE_INSTALL_PATH = 
LIBREADLINE_LIBRARY_PATH = 
LIBREADLINE_LIBS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LLVM_CONFIG = /bin/llvm-config
LLVM_CPPFLAGS =  -DLLVMVERSION=
LLVM_LDFLAGS =  -R
LLVM_LIBS =  
LN_S = ln -s
LTDLDEPS = 
LTDLINCL = 
LTDLOPEN = libltdl
LTLIBOBJS = 
LT_ARGZ_H = 
LT_CONFIG_H = rose_config.h
LT_DLLOADERS =  dlopen.la
LT_DLPREOPEN = -dlpreopen dlopen.la 
LT_SYS_LIBRARY_PATH = 
MAKEINFO = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing makeinfo
MANIFEST_TOOL = :
MAPLE_INCLUDES = 
MAPLE_LIBDIR = 
MAPLE_LIBS = 
MD5 = md5sum
MINT = $(top_builddir)/projects/mint/src/mint
MKDIR_P = /usr/bin/mkdir -p
MOC = NONE/moc
MPICC = not-found
MPICXX = not-found
MPIF77 = not-found
MPIFC = not-found
MYSQL_CFLAGS = 
MYSQL_CONFIG = 
MYSQL_INCLUDE = 
MYSQL_LDFLAGS = 
MYSQL_VERSION = 
NM = /usr/bin/nm -B
NMEDIT = 
NVCCBIN = 
OBJ = .o
OBJDUMP = objdump
OBJEXT = o
OCTAVE_PARSER_INSTALL_TARFILE = 
OPENCL_INC_DIR = 
OPENCL_LIB_DIR = 
OPEN_FORTRAN_PARSER_PATH = /src/3rdPartyLibraries/fortran-parser
OPTIONAL_PROJECTS =  AMReX-Translation BinaryAnalysisTools CodeProperties CodeThorn MatlabTranslation MatrixTesting OpenK Rose-To-LLVM RTC2 scalarization simulator2 SnippetTools TALCDataLayout traceAnalysis ZFPTool
OS_major_release_number = 20
OS_minor_release_number = 10
OS_release = 20.10
OS_vendor = Ubuntu
OTOOL = 
OTOOL64 = 
PACKAGE = rose
PACKAGE_BUGREPORT = 
PACKAGE_NAME = ROSE
PACKAGE_STRING = ROSE 0.11.13.0
PACKAGE_TARNAME = rose
PACKAGE_URL = 
PACKAGE_VERSION = 0.11.13.0
PACKAGE_VERSION_NUMERIC = 0.11.13.0
PATH_SEPARATOR = :
PERL = perl
PKG_CONFIG = /usr/bin/pkg-config
POET_INCL = 
POET_LIB = 
PPL_PATH = 
PURIFY_OPTIONS = -windows=no -recursion-depth-limit=40000 -chain-length=24 -first-only=yes -leaks-at-exit=no -inuse-at-exit=no -always-use-cache-dir=yes -cache-dir=/home/meltdown1995/tmp -best-effort 
PYTHON = 
PYTHON_CPPFLAGS = 
PYTHON_EXTRA_LDFLAGS = 
PYTHON_EXTRA_LIBS = 
PYTHON_LDFLAGS = 
PYTHON_ROOT = 
PYTHON_SITE_PKG = 
PYTHON_VERSION_MM = 
Pxx_INCLUDES = 
Pxx_LIBS = 
QROSE_PREFIX = 
QT_INCLUDES = -DQT3_SUPPORT -INONE/QtCore -INONE/QtGui -INONE/Qt3Support -INONE/QtXml -INONE
QT_LDFLAGS = -LNONE -lQtCore -lQtGui -lQt3Support -lQtXml -lQtUiTools
QT_VERSION = 
QT_VERSION_MAJOR = 
QT_VERSION_MINOR = 
RANLIB = ranlib
RCC = NONE/rcc
ROSEHPCT_DEP_INCLUDES = 
ROSEHPCT_DEP_LIBS = 
ROSE_BOOST_NORMAL_INCLUDE_PATH = -I/usr/include

# DQ (12/22/2008): Specification of Boost path for use with "-isystem" option (may be GNU
# specific).  We use this option only if the configuration of ROSE has detected a
# previously installed version of Boost (which we do not want to use).
# Note that only one of these will be non-empty makefile variables.
ROSE_BOOST_PREINCLUDE_PATH = 
ROSE_CAPSTONE_PREFIX = 
ROSE_EDG_MAJOR_VERSION_NUMBER = 5
ROSE_EDG_MINOR_VERSION_NUMBER = 0
ROSE_HOME = .
ROSE_LIBMAGIC_PREFIX = 
ROSE_LIBPQXX_PREFIX = 
ROSE_LSB_RELEASE = lsb_release
ROSE_OBJDUMP_PATH = objdump
ROSE_OFP_JAR_FILE = OpenFortranParser-20200819-JDK8.jar
ROSE_OFP_MAJOR_VERSION_NUMBER = 0
ROSE_OFP_MINOR_VERSION_NUMBER = 8
ROSE_OFP_PATCH_VERSION_NUMBER = 7
ROSE_OFP_VERSION_NUMBER = 20200819-JDK8
ROSE_PS2PDF_PATH = ps2pdf
ROSE_SUPPORT_GNU_EXTENSIONS = FALSE
ROSE_SUPPORT_MICROSOFT_EXTENSIONS = FALSE
ROSE_USE_CANDL = 
ROSE_USE_CLOOG = 
ROSE_USE_EDG_QUAD_FLOAT = 
ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT = 
ROSE_USE_PPL = 
ROSE_USE_SCOPLIB = 
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT = 
ROSE_WGET_PATH = wget
ROSE_WITH_MPI_CFLAGS = 
ROSE_WITH_MPI_CLDFLAGS = 
ROSE_WITH_MPI_CXXFLAGS = 
ROSE_WITH_MPI_CXXLDFLAGS = 
ROSE_WITH_MPI_F77FLAGS = 
ROSE_WITH_MPI_F77LDFLAGS = 
ROSE_WITH_MPI_FFLAGS = 
ROSE_WITH_MPI_FLDFLAGS = 
ROSE_YAML_PREFIX = 
ROSE_YICES = 
ROSE_YICES_PREFIX = 
ROSE_Z3_PREFIX = 
RT_LIBS = -ldl 
SCOPLIB_PATH = 
SED = sed
SET_MAKE = 
SHELL := /bin/bash  # support diff <() <() 
SPOT_INCLUDE_PATH = 
SPOT_INSTALL_PATH = 
SPOT_LIBRARY_PATH = 
SQLITE3_CFLAGS = 
SQLITE3_LDFLAGS = 
SQLITE3_VERSION = 
STRATEGO_BIN_PATH = 
STRATEGO_INSTALL_PATH = 
STRATEGO_LIBRARY_PATH = 
STRIP = strip
SWIG = echo "Error: SWIG is not installed. You should look at http://www.swig.org" ; false -c++
SWIG_LIB = 
SWIPLBIN = 
TCLSH = 
TEST_SMT_SOLVER = 
UIC = NONE/uic
UPC = 
UPCDEPMODE = 
UPCFLAGS = 
USING_WINDOWS = 0
VALGRIND_BINARY = /valgrind
VALGRIND_BIN_PATH = 
VALGRIND_INCLUDE_PATH = 
VALGRIND_INSTALL_PATH = 
VALGRIND_LIBRARY_PATH = 
VECTORIZATION = $(top_builddir)/projects/vectorization/src/vectorization
VERSION = 0.11.13.0
WT_PREFIX = no
X10_BIN_PATH = 
X10_INSTALL_PATH = 
X10_LIBRARY_PATH = 
X10_VERSION = 
XERCES_CPPFLAGS = 
XERCES_LDFLAGS = 
XERCES_LIBS = 
XERCES_VERSION = 
XMKMF = 
XML2_CONFIG = no
XML_CPPFLAGS = 
XML_LIBS = 
YACC = bison -y
YFLAGS = 
Z3BIN = 
Z3_INCLUDE_PATH = 
Z3_LIBRARY_PATH = 
Z3_PREFIX = 
abs_builddir = /home/meltdown1995/roseRoot/rose-compiler/build/tests/nonsmoke/functional/CompileTests/Fortran_tests
abs_srcdir = /home/meltdown1995/roseRoot/rose-compiler//src/tests/nonsmoke/functional/CompileTests/Fortran_tests
abs_top_builddir = /home/meltdown1995/roseRoot/rose-compiler/build
abs_top_srcdir = /home/meltdown1995/roseRoot/rose-compiler//src
absolute_path_srcdir = /home/meltdown1995/roseRoot/rose-compiler/src
ac_boost_path = /usr
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
ac_ct_F77 = f77
ac_ct_FC = gfortran
ac_ct_MPICXX = 
ac_ct_UPC = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = tar --format=posix -chf - "$$tardir"
am__untar = tar -xf -
bddbddb_path = 
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_triplet_without_redhat = x86_64-pc-linux-gnu
build_vendor = pc
builddir = .
configure_date = Wednesday December 23 22:42:41 2020
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
edg_union_struct_debugging_value = union
exec_prefix = ${prefix}
glut_path = 
gnat_home = 
gnat_path = 
gomp_omp_runtime_library_path = 
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
ida_path = 
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/install-sh
insure_BIN = 
insure_LIBS = 
insure_PREFIX = 
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
llvm_path = 
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
ltdl_LIBOBJS =  lt__strl.o
ltdl_LTLIBOBJS =  lt__strl.lo
mandir = ${datarootdir}/man
maple_path = 
mkdir_p = $(MKDIR_P)
mono_home = 
oldincludedir = /usr/include
omni_omp_runtime_support_path = 
optional_Visualization_subdirs = 
parallel_ast_traversal_omp_path = 
pdfdir = ${docdir}
php_path = 
poet_dir = 
prefix = /home/meltdown1995/roseRoot/rose-compiler//install
program_transform_name = s,x,x,
psdir = ${docdir}
purify_BIN = 
purify_INCLUDES = 
purify_LIBS = 
purify_PREFIX = 
res_top_src = /home/meltdown1995/roseRoot/rose-compiler/src
rosyln_home = 
rted_path = 
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = /home/meltdown1995/roseRoot/rose-compiler//src/tests/nonsmoke/functional/CompileTests/Fortran_tests
subdirs =  src/3rdPartyLibraries/libharu-2.1.0 libltdl
sys_symbol_underscore = no
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../../../../
top_builddir = ../../../../..
top_pwd = /home/meltdown1995/roseRoot/rose-compiler/build
top_srcdir = /home/meltdown1995/roseRoot/rose-compiler//src
wine_path = 

# SQLite is a simpler database to use than MySQL
#ROSE_SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS)
#SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS) -I$(top_srcdir)/src/roseExtensions/sqlite3x
#SQLITE_DATABASE_LIBS = $(SQLITE3_LDFLAGS)
#   ROSE_SQLITE_DATABASE_OBJS     = $(top_builddir)/src/roseExtensions/sqlite3x/*o
#ROSE_SQLITE_DATABASE_LIB_NAME = RoseSQLite3xDatabase
#ROSE_SQLITE_DATABASE_LIB_FILE = lib$(ROSE_SQLITE_DATABASE_LIB_NAME).la
#ROSE_SQLITE_DATABASE_LIBS = -l$(ROSE_SQLITE_DATABASE_LIB_NAME)
#ROSE_SIDEEFFECT_INCLUDE = -I$(top_srcdir)/src/midend/programAnalysis/sideEffectAnalysis
#Z3_LIB_NAME = z3
#Z3_LIB_FILE = lib$(Z3_LIB_NAME).so
#Z3_LIBS = -l$(Z3_LIB_NAME)
#Z3_INCLUDES = -I$(Z3_PREFIX)/include
#Z3_LIB_INCLUDES = -L$(Z3_PREFIX)/lib
#ROSE_Z3_INCLUDES = -I/include
#ROSE_Z3_LIBS = -lz3
#ROSE_Z3_LIBS_WITH_PATH = -L/lib -lz3

# This is properly handled by automake even when specified in an include file
EDG_LIBS = @EDG_LIBS@

# Conditional support for Gabriel's QRose GUI Library
#  ROSE_GUI_INCLUDE =   -I${QROSE_PREFIX}/include
#ROSE_GUI_INCLUDE = -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/Common -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/TreeBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/SourceBox

# ROSE_GUI_LIBS = -lqrose
#  ROSE_GUI_LIBS_WITH_PATH = -L${QROSE_PREFIX}/lib -lqrose
#  ROSE_GUI_LIBS_WITH_PATH =  -L${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/  -lqrose
#ROSE_GUI_LIBS_WITH_PATH = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la

# ROSE_GUI_LIB_FILE = libqrose.a
#ROSE_QT_INCLUDE = $(QT_INCLUDES)
# ROSE_QT_LIBS = -lqt
#ROSE_QT_LIBS_WITH_PATH = ${QT_LDFLAGS}
# ROSE_QT_LIB_FILE = libqt.a

# ROSE-HPCToolkit module
#ROSE_ROSEHPCT_INCLUDES = -I$(top_srcdir)/src/roseExtensions/roseHPCToolkit/include
#ROSE_ROSEHPCT_LIBS = -lrosehpct
#ROSE_ROSEHPCT_LIBS_WITH_PATH = $(top_builddir)/src/roseExtensions/roseHPCToolkit/src/librosehpct.la
# ROSE_ROSEHPCT_LIB_FILE = librosehpct.so

# ROSE-YICES Package (destributed by SRI as a static library)
#ROSE_YICES_INCLUDES = -I/include
#ROSE_YICES_LIBS = -lyices
#ROSE_YICES_LIBS_WITH_PATH = /lib/libyices.a

# YAML-CPP package for parsing YAML/JSON files
#ROSE_YAML_INCLUDES = -I/include
#ROSE_YAML_LIBS = -lyaml-cpp
#ROSE_YAML_LIBS_WITH_PATH = -L/lib -lyaml-cpp

# GNU readline
#ROSE_READLINE_INCLUDES = -I
#ROSE_READLINE_LIBS = 
#ROSE_READLINE_LIBS_WITH_PATH = -L $(ROSE_READLINE_LIBS)

# libmagic for identifying file types based on magic numbers
#ROSE_LIBMAGIC_INCLUDES = -I/include
#ROSE_LIBMAGIC_LIBS = -lmagic
#ROSE_LIBMAGIC_LIBS_WITH_PATH = -L/lib -lmagic

# PostgreSQL C++ API
#ROSE_LIBPQXX_INCLUDES = -I/include
#ROSE_LIBPQXX_LIBS = -lpqxx -lpq
#ROSE_LIBPQXX_LIBS_WITH_PATH = -L/lib -lpqxx -lpq

# Capstone disassembler
#ROSE_CAPSTONE_INCLUDES = -I/include
#ROSE_CAPSTONE_LIBS = -lcapstone
#ROSE_CAPSTONE_LIBS_WITH_PATH = -L/lib -lcapstone

# Math algorithms from http://dlib.net. This is a headers-only library neede by some binary analyses.
#ROSE_DLIB_INCLUDES = -I
#ROSE_DLIB_LIBS = 
#ROSE_DLIB_LIBS_WITH_PATH = 

# DQ (11/4/2016): Adding support for use of Address Sanitizer (for where the ROSE Test Handler (RTH) is used.
# Note the quotes and escapes that are required:
ADDRESS_SANITIZER_OPTIONS = "ASAN_OPTIONS=halt_on_error=0:symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=\`which llvm-symbolizer\`"

# DQ(11/4/2016): Need a version when not using the ROSE Test Handler (RTH):
NON_RTH_ADDRESS_SANITIZER_OPTIONS = ASAN_OPTIONS=halt_on_error=1:symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=`which llvm-symbolizer`
#ROSE_ELF_INCLUDES = 
#ROSE_ELF_LIBS_WITH_PATH = 

# ROSE gcrypt support (for things like md5, sha1, etc)
#ROSE_GCRYPT_INCLUDES = 
#ROSE_GCRYPT_LIBS_WITH_PATH = 

# ROSE-DWARF libdwarf support
#ROSE_DWARF_INCLUDES = 
#ROSE_DWARF_LIBS_WITH_PATH = 

# DQ (3/13/2009):
# If Dwarf is used with Intel Pin then reference the same copy of libdwarf.a (in the same
# directory).  However, it does NOT work to link both references to libdwarf into more
# than one dynamic (shared) library, so we need to link libdwarf dynamically.
# To avoid additional LD_LIBRARY_PATH requirements, we do so using rpath.
# To support this the libdwarf.so should be placed into $(INTEL_PIN_PATH)/intel64/lib-ext
# and the static libdwarf.a moved out (renamed) so that it will not be used.
# Note that this will also cause librose.so to use the shared library for
# dwarf when used with Intel Pin.
##ROSE_DWARF_LIBS_WITH_PATH = -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
# DQ (3/14/2009): This factors the lib paths.
##INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)

# ROSE-WINE Package (Wine is a package to permit execution of Windows binaries under Linux)
#ROSE_WINE_INCLUDES = -I$(wine_path)/include
#ROSE_PHP_INCLUDES = -I$(php_path)/include/phc -I$(php_path)/include/php
#ROSE_PHP_LIBS = -lphp5 -lphc -lltdl
#ROSE_PHP_LIBS_WITH_PATH = $(php_path)/lib/libphc.so $(php_path)/lib/libphp5.so $(LIBLTDL)

# ASR (06/09/2010): adding llvm support variables
#ROSE_LLVM_INCLUDES = -I$(llvm_path)/include
#ROSE_LLVM_LIBS = -L$(llvm_path)/lib \
#	-lLLVMXCoreCodeGen -lLLVMXCoreAsmPrinter \
#	-lLLVMXCoreInfo -lLLVMSystemZCodeGen \
#	-lLLVMSystemZAsmPrinter -lLLVMSystemZInfo \
#	-lLLVMSparcCodeGen -lLLVMSparcAsmPrinter \
#	-lLLVMSparcInfo -lLLVMPowerPCCodeGen \
#	-lLLVMPowerPCAsmPrinter -lLLVMPowerPCInfo \
#	-lLLVMpic16passes -lLLVMPIC16AsmPrinter \
#	-lLLVMPIC16CodeGen -lLLVMPIC16Info \
#	-lLLVMMSP430CodeGen -lLLVMMSP430AsmPrinter \
#	-lLLVMMSP430Info -lLLVMMSIL -lLLVMMSILInfo \
#	-lLLVMMipsAsmPrinter -lLLVMMipsCodeGen \
#	-lLLVMMipsInfo -lLLVMMBlazeAsmPrinter \
#	-lLLVMMBlazeCodeGen -lLLVMMBlazeInfo \
#	-lLLVMLinker -lLLVMipo -lLLVMInterpreter \
#	-lLLVMInstrumentation -lLLVMJIT \
#	-lLLVMExecutionEngine -lLLVMCppBackend \
#	-lLLVMCppBackendInfo -lLLVMCellSPUCodeGen \
#	-lLLVMCellSPUAsmPrinter -lLLVMCellSPUInfo \
#	-lLLVMCBackend -lLLVMCBackendInfo \
#	-lLLVMBlackfinCodeGen \
#	-lLLVMBlackfinAsmPrinter \
#	-lLLVMBlackfinInfo -lLLVMBitWriter \
#	-lLLVMX86Disassembler -lLLVMX86AsmParser \
#	-lLLVMX86AsmPrinter -lLLVMX86CodeGen \
#	-lLLVMX86Info -lLLVMAsmParser \
#	-lLLVMARMAsmParser -lLLVMMCParser \
#	-lLLVMARMAsmPrinter -lLLVMARMCodeGen \
#	-lLLVMARMInfo -lLLVMArchive \
#	-lLLVMBitReader -lLLVMAlphaCodeGen \
#	-lLLVMSelectionDAG -lLLVMAlphaAsmPrinter \
#	-lLLVMAsmPrinter -lLLVMCodeGen \
#	-lLLVMScalarOpts -lLLVMInstCombine \
#	-lLLVMTransformUtils -lLLVMipa \
#	-lLLVMAnalysis -lLLVMTarget -lLLVMMC \
#	-lLLVMCore -lLLVMAlphaInfo -lLLVMSupport \
#	-lLLVMSystem

# adding all libraries for now

# Python API support
#ROSE_PYTHON_INCLUDES = 
#ROSE_PYTHON_LIBS_WITH_PATH = 

# SSL support permits use of MD5 checksums internally for binary library identification.
#ROSE_SSL_LIBS = -lssl -lcrypto

# support for precompiled headers
#ROSE_PCH_INCLUDE = -Winvalid-pch -fPIC -DPIC
#INTEL_PIN_PATH = 
#INTEL_PIN_INCLUDE_PATHS = -I$(INTEL_PIN_PATH)/source/include -I$(INTEL_PIN_PATH)/source/include/gen -I$(INTEL_PIN_PATH)/extras/xed2-intel64/include -I$(INTEL_PIN_PATH)/source/tools/InstLib

# DQ (3/8/2009): These cause rose/src/testSharedRoseLib to fail, I don't know why (fails in system call to map()).
# INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib -L$(INTEL_PIN_PATH)/intel64/lib-ext
#INTEL_PIN_LIB_PATHS = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib

# Do we want to handle this differently when Dwarf is used optionally with ROSE.
#INTEL_PIN_LIBS = -lpin -lxed -ldwarf -lelf -ldl
#if ROSE_HAVE_LIBDWARF
#  INTEL_PIN_LIBS          = -lpin -lxed -lelf -ldl
#else
#  INTEL_PIN_LIBS          = -lpin -lxed -ldwarf -lelf -ldl
#endif
#ROSE_ETHER_INCLUDE = -I$(ETHER_PREFIX)/include
#ROSE_ETHER_LIBS = -L$(ETHER_PREFIX)/lib -lxenctrl
#ROSE_ATERM_INCLUDE = -I$(ATERM_LIBRARY_PATH)/../include
#ROSE_ATERM_LIBS = -L$(ATERM_LIBRARY_PATH) -lATerm

# Added support for Fortran front-end development using the flang (F18) compiler [Rasmussen 8/12/2019]
#ROSE_FLANG_INCLUDES = -I$(FLANG_INSTALL_PATH)/include
#ROSE_FLANG_LIBS = -L$(FLANG_INSTALL_PATH)/lib -lLLVMDemangle -lLLVMSupport -lLLVMFrontendOpenMP -lFortranParser -lFortranSemantics -lFortranEvaluate -lFortranCommon -lFortranDecimal -lFortranLower -lncurses

# DQ (5/9/2017): Adding Ada library support.
# ROSE_ADA_INCLUDES = -I$(ada_path)/include_xxx
#ROSE_ADA_INCLUDES = -I$(ada_path)/include_xxx
#DOT_ASIS_LIB_DIR_ = $(abs_top_builddir)/src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/lib
#  ROSE_ADA_LIBS = -ldot_asis
#  ROSE_ADA_LIBS_WITH_PATH = $(DOT_ASIS_LIB_DIR_)/libdot_asis.so

# RASMUSSEN (10/24/2017): Adding the GnuCOBOL parse-tree library support.
#ROSE_COBOL_PT_LIBS_WITH_PATH = -L$(COBPT_LIBRARY_PATH) -lcob -lcobpt
ROSE_QUAD_FLOAT_MATH = -lquadmath

# DQ (1/9/2010): Added use of libimf with libm (the two go together when using Intel icc and icpc)
#  ROSE_INTEL_COMPILER_MATH_LIBS = -limf -lm
# DQ (11/16/2017): We need to link in these Intel specific required libraries to avoid: error hidden symbol `__intel_cpu_features_init_x'
# ROSE_INTEL_COMPILER_MATH_LIBS =
#    ROSE_INTEL_COMPILER_MATH_LIBS += -limf
#ROSE_INTEL_COMPILER_MATH_LIBS = -limf \
#	-lirng -lintlc -lsvml -lm
# ROSE_INCLUDES =
#     $(ROSE_BOOST_PREINCLUDE_PATH)
ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
     -I$(top_builddir)/src/roseSupport \
     -I$(top_builddir)/src/frontend/SageIII \
     -I$(top_srcdir)/src \
     -I$(top_srcdir)/src/frontend \
     -I$(top_srcdir)/src/frontend/SageIII \
     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/astMerge \
     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
     -I$(top_srcdir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
     -I$(top_srcdir)/src/frontend/SageIII/virtualCFG \
     -I$(top_srcdir)/src/frontend/SageIII/astTokenStream \
     -I$(top_srcdir)/src/frontend/SageIII/astHiddenTypeAndDeclarationLists \
     -I$(top_builddir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/astFromString \
     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
     -I"$(JAVA_HOME)/include" \
     -I$(top_srcdir)/src/frontend/PHPFrontend \
      $(ROSE_CLANG_FRONTEND_INCLUDE) \
     -I$(top_srcdir)/src/frontend/PythonFrontend \
     -I$(top_srcdir)/src/frontend/BinaryFormats \
     -I$(top_srcdir)/src/frontend/BinaryLoader \
     -I$(top_srcdir)/src/frontend/Disassemblers \
      $(ROSE_CLANG_INCLUDE) \
     -I$(top_srcdir)/src/backend/unparser \
     -I$(top_srcdir)/src/backend/unparser/formatSupport \
     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/AdaCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/JovialCodeGeneration \
     -I$(top_srcdir)/src/backend/asmUnparser \
     -I$(top_srcdir)/src/util \
     -I$(top_srcdir)/src/util/support \
     -I$(top_srcdir)/src/util/graphs  \
     -I$(top_srcdir)/src/util/stringSupport \
     -I$(top_srcdir)/src/util/commandlineProcessing \
     -I$(top_srcdir)/src/midend/abstractHandle \
     -I$(top_srcdir)/src/midend/abstractMemoryObject \
     -I$(top_srcdir)/src/midend/abstractLayer \
     -I$(top_srcdir)/src/midend/astDiagnostics \
     -I$(top_srcdir)/src/midend/programTransformation/astInlining \
     -I$(top_srcdir)/src/midend/programTransformation/astOutlining  \
     -I$(top_srcdir)/src/midend/programTransformation/transformationTracking \
     -I$(top_srcdir)/src/midend/astProcessing \
     -I$(top_srcdir)/src/midend/astMatching \
     -I$(top_srcdir)/src/midend/astQuery \
     -I$(top_srcdir)/src/midend/astRewriteMechanism \
     -I$(top_srcdir)/src/midend/astUtil/annotation \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/src/midend/astUtil/astSupport \
     -I$(top_srcdir)/src/midend/astUtil/symbolicVal \
     -I$(top_srcdir)/src/midend/BinaryAnalysis \
     -I$(top_srcdir)/src/midend/BinaryAnalysis/dataflowanalyses \
     -I$(top_srcdir)/src/midend/BinaryAnalysis/instructionSemantics \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/computation \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depGraph \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depInfo \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/driver \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/outsideInterface \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/prepostTransformation \
     -I$(top_srcdir)/src/midend/programTransformation/ompLowering \
     -I$(top_srcdir)/src/midend/programTransformation/extractFunctionArgumentsNormalization \
     -I$(top_srcdir)/src/midend/programTransformation/singleStatementToBlockNormalization \
     -I$(top_srcdir)/src/midend/programAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/arithmeticIntensity \
     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser \
     -I$(top_srcdir)/src/midend/programAnalysis/CFG \
     -I$(top_srcdir)/src/midend/programAnalysis/staticSingleAssignment \
     -I$(top_srcdir)/src/midend/programAnalysis/ssaUnfilteredCfg \
     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
     -I$(top_srcdir)/src/midend/programAnalysis/CallGraphAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/OAWrap \
     -I$(top_srcdir)/src/midend/programAnalysis/bitvectorDataflow \
     -I$(top_srcdir)/src/midend/programAnalysis/VirtualFunctionAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/defUseAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/distributedMemoryAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/dominanceAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/pointerAnal \
     -I$(top_srcdir)/src/midend/programAnalysis/staticInterproceduralSlicing \
     -I$(top_srcdir)/src/midend/programAnalysis/valuePropagation \
     -I$(top_srcdir)/src/midend/programAnalysis/variableRenaming \
      $(ROSE_SIDEEFFECTS_INCLUDE) \
      $(ROSE_DATABASE_INCLUDE) \
      $(ROSE_GUI_INCLUDE) \
      $(ROSE_QT_INCLUDE) \
      $(ROSE_SQLITE_DATABASE_INCLUDE) \
			$(ROSE_SIDEEFFECT_INCLUDE) \
      $(SQLITE_DATABASE_INCLUDE) \
     -I$(top_srcdir)/src/midend/programTransformation/partialRedundancyElimination \
     -I$(top_srcdir)/src/midend/programTransformation/finiteDifferencing \
     -I$(top_srcdir)/src/midend/programTransformation/functionCallNormalization \
     -I$(top_srcdir)/src/midend/programTransformation/constantFolding \
     -I$(top_srcdir)/src/midend/programTransformation/implicitCodeGeneration \
     -I$(top_srcdir)/src/roseSupport \
     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
     -I$(top_srcdir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets  \
     -I$(top_srcdir)/src/util/graphs \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/libltdl \
     -I$(top_srcdir)/src/roseExtensions/failSafe \
     $(ROSE_PHP_INCLUDES) \
     $(ROSE_PYTHON_INCLUDES) \
     $(ROSE_YICES_INCLUDES) \
     $(ROSE_Z3_INCLUDES) \
     $(ROSE_YAML_INCLUDES) \
     $(ROSE_LIBPQXX_INCLUDES) \
     $(ROSE_CAPSTONE_INCLUDES) \
     $(ROSE_READLINE_INCLUDES) \
     $(ROSE_LIBMAGIC_INCLUDES) \
     $(ROSE_DLIB_INCLUDES) \
     $(ROSE_GCRYPT_INCLUDES) \
     $(ROSE_ELF_INCLUDES) \
     $(ROSE_DWARF_INCLUDES) \
     $(ROSE_WINE_INCLUDES) \
     $(VALGRIND_CFLAGS) \
     $(SQLITE3_CFLAGS) \
     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) \
     $(ROSE_PCH_INCLUDE) \
     $(INTEL_PIN_INCLUDE_PATHS) \
     $(ROSE_ETHER_INCLUDE) \
     $(ROSE_ATERM_INCLUDE) \
     $(ROSE_FLANG_INCLUDES) \
     $(ROSE_CSHARP_INCLUDES) \
     $(ROSE_ADA_INCLUDES) \
     $(ROSE_JOVIAL_INCLUDES) \
     $(ROSE_COBOL_INCLUDES) \
     $(BOOST_CPPFLAGS)


# DQ (4/13/2016): Is there were we put the support to include -lstdc++.so on the link line directly?

# DQ (3/6/2013): We need to build a SWIG path that can't include the isystem option.
# Note use of "-isystem" option in ROSE_BOOST_PREINCLUDE_PATH to have the
# boost specified on the configure
# command-line be used instead of the OS version of boost that is sometimes
# installed with Linux (it is always a version too old to be used with ROSE).
# This is used only when the ROSE configuration detects a previously installed
# version of Boost (e.g /usr/include/boost) that we don't want to use.
# ROSE_INCLUDES =
#    $(ROSE_BOOST_PREINCLUDE_PATH)
#ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
#     -I$(top_builddir)/src/roseSupport \
#     -I$(top_builddir)/src/frontend/SageIII \
#     -I$(top_srcdir)/src \
#     -I$(top_srcdir)/src/frontend \
#     -I$(top_srcdir)/src/frontend/SageIII \
#     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
#     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
#     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
#     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
#     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
#     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
#     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
#     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
#     -I"$(JAVA_HOME)/include" \
#     -I$(top_srcdir)/src/frontend/BinaryFormats \
#     -I$(top_srcdir)/src/frontend/BinaryLoader \
#     -I$(top_srcdir)/src/frontend/Disassemblers \
#     -I$(top_srcdir)/src/backend/unparser \
#     -I$(top_srcdir)/src/backend/unparser/formatSupport \
#     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
#     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/AdaCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/JovialCodeGeneration \
#     -I$(top_srcdir)/src/backend/asmUnparser \
#     -I$(top_srcdir)/src/util \
#     -I$(top_srcdir)/src/util/support \
#     -I$(top_srcdir)/src/util/graphs  \
#     -I$(top_srcdir)/src/util/stringSupport \
#     -I$(top_srcdir)/src/util/commandlineProcessing \
#     -I$(top_srcdir)/src/midend/astDiagnostics \
#     -I$(top_srcdir)/src/midend/astProcessing \
#     -I$(top_srcdir)/src/midend/astMatching \
#     -I$(top_srcdir)/src/midend/astQuery \
#     -I$(top_srcdir)/src/midend/BinaryAnalysis \
#     -I$(top_srcdir)/src/midend/programAnalysis \
#     -I$(top_srcdir)/src/roseSupport \
#     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
#     -I$(top_srcdir)/src/util/graphs \
#     -I$(top_srcdir)/src/roseExtensions/failSafe \
#     $(ROSE_ATERM_INCLUDE) \
#     $(ROSE_FLANG_INCLUDES) \
#     $(ROSE_BOOST_NORMAL_INCLUDE_PATH)


# DQ (10/23/2015): These paths have been replaces with the following variables.
# These variable are empty for now (reflecting the default usage, and need to
# be set properly where ever Clang support is processed as a configure option.
#    -I$(top_srcdir)/src/frontend/CxxFrontend/ClangFrontend
#    -I$(top_srcdir)/src/frontend/CxxFrontend/Clang
#    $(ROSE_CLANG_FRONTEND_INCLUDE)
#    $(ROSE_CLANG_INCLUDE)
SWIG_ROSE_INCLUDES = $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH)
ROSE_INCLUDES = $(ROSE_BOOST_PREINCLUDE_PATH) $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH)

# DQ (8/15/2010): I have removed these directories from the include paths since it no longer exists.
# I expect that the directories were removed and the include list not properly cleaned up.
# -I$(top_srcdir)/src/midend/binaryAnalyses/graph
# -I$(top_srcdir)/src/midend/programTransformation/runtimeTransformation
# -I$(top_srcdir)/projects/dataBase

# DQ (12/22/2008): Move Boost directory to front and used "-isystem" option so
# that a system with a previous (older) installation of boost does not interfer
# with the use of ROSE (and the version of boost specified using "--with-boost").
# $(BOOST_CPPFLAGS)

# DQ (10/28/2008): I think these should be included, I don't know why they
# were removed (used with Microsoft Windows tests, and Yices tests).
# DQ: Not used currently
#     $(ROSE_WINE_INCLUDES)

# DQ (5/3/2007): Removed from ROSE
#     -I$(top_srcdir)/src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers
#     -I$(top_srcdir)/src/midend/programAnalysis/staticProgramSlicing

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly with make distcheck rule
#     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser

# New way using two libraries
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.a $(top_builddir)/src/libedg.a
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.so $(top_builddir)/src/libedg.so
# ROSE_LIBS_WITH_PATH = $(libdir)/librose.so $(libdir)/libedg.so
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la $(JAVA_JVM_LIB)
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_LIBS_WITH_PATH = $(ROSE_LIBS)

# ROSE_LIBS = $(top_builddir)/src/librose.la -lm $(LEXLIB) $(SQLITE_DATABASE_LIBS) $(LIB_QT) $(WAVE_LDFLAGS) $(WAVE_LIBRARIES) $(WAVE_LIBS) $(JAVA_JVM_LIB) $(RT_LIBS)

# MS 10/19/2015: added ROSE_BOOST_LIBS variable to share exact same
# boost libs list in ROSE an in the ROSTTA Makefiles.
ROSE_BOOST_LIBS = $(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) $(BOOST_CHRONO_LIB) \
  $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) $(BOOST_PROGRAM_OPTIONS_LIB) \
  $(BOOST_RANDOM_LIB) $(BOOST_REGEX_LIB)  $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB)  \
  $(BOOST_WAVE_LIB) $(BOOST_IOSTREAMS_LIB) $(BOOST_PYTHON_LIB)

ROSE_LIBS = $(abspath $(top_builddir)/src/librose.la) -lm \
	$(JAVA_JVM_LINK) $(SQLITE_DATABASE_LIBS) $(QT_LIBS) \
	$(ROSE_BOOST_LIBS) $(SQLITE3_LDFLAGS) $(RT_LIBS) \
	$(ROSE_YICES_LIBS_WITH_PATH) $(ROSE_Z3_LIBS_WITH_PATH) \
	$(ROSE_PHP_LIBS_WITH_PATH) $(ROSE_DWARF_LIBS_WITH_PATH) \
	$(ROSE_ELF_LIBS_WITH_PATH) $(ROSE_GUI_LIBS_WITH_PATH) \
	$(ROSE_QT_LIBS_WITH_PATH) $(ROSE_SSL_LIBS) $(ROSE_ETHER_LIBS) \
	$(ROSE_INTEL_COMPILER_MATH_LIBS) $(ROSE_ATERM_LIBS) \
	$(ROSE_FLANG_LIBS) $(ROSE_YAML_LIBS_WITH_PATH) \
	$(ROSE_LIBMAGIC_LIBS_WITH_PATH) \
	$(ROSE_READLINE_LIBS_WITH_PATH) $(ROSE_DLIB_LIBS_WITH_PATH) \
	$(ROSE_GCRYPT_LIBS_WITH_PATH) $(ROSE_LIBPQXX_LIBS_WITH_PATH) \
	$(ROSE_COBOL_PT_LIBS_WITH_PATH) $(ROSE_PYTHON_LIBS_WITH_PATH) \
	$(ROSE_QUAD_FLOAT_MATH) $(ROSE_CAPSTONE_LIBS_WITH_PATH) \
	$(am__append_1)

#if ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION
#ROSE_LIBS += $(libroseAdalibraries) 
#endif

#========================================================================================================================
# These are the "-R directory" switches that need to be passed to libtool running in link mode to make sure that ROSE
# executables have rpath properties that point to the directories containing the libraries we're using. Do not add
# system directories (or at least not at the front of this list) because that will cause the system-installed version of
# a library to be used rather than some user-specific version.
#
# Here's the motivation for using rpath instead of LD_LIBRARY_PATH: Consider what happens if some ROSE tool, call it
# myTranslator, is compiled and linked against a custom, user-installed version of libz.so (perhaps because myTranslator
# is using a custom version of some graphics library, like libgraphicsmagick.so, that needs a newer libz.so than what's
# installed on the system).  If I then set LD_LIBRARY_PATH to point to the directory with my libz.so I'll be able to run
# myTranslator, however I probably won't be able any system installed tool that uses libz.so. This includes not being
# able to run /usr/bin/as, which might be called indirectly when myTranslator invokes the backend compiler (because
# LD_LIBRARY_PATH overrides the rpath built into /usr/bin/as).  Run-time linking with the wrong dynamic library at best
# produces an error message from the linker, but more often just results in a fault of some sort.
#
# How does rpath fix this problem? It encodes into each executable the list of directories that should be searched when
# the executable is run, similar to LD_LIBRARY_PATH but on a per-executable basis.
#
# The filter-out is removing specific libraries (-lwhatever), the GCC's POSIX thread switch (-pthread), static libraries
# (whatever.a), and various system directories that might have the wrong library versions and which are searched
# automatically anyway. The outer patsubst is changing "-Ldirectory" to just "directory", and the addprefix is changing
# each directory to "-R directory" which is libtool's switch for adding an rpath to an executable.
#
# The inner-most patsubst needs more explanation: Although most low-level libraries like libz, libpng, etc. are normally
# installed in well-known system-wide locations (like /usr/lib), when testing ROSE in matrix testing using RMC, these
# libraries are often compiled and installed locally in such ways that they're not binary compatible with the
# system-installed versions. However, ROSE doesn't have configuration or cmake options for all these libraries because
# there could eventually be far too many. Therefore, we use the fact that RMC has already chosen the correct library
# directories and added their names to various environment variables. The lines of the form
#     $(subst :, ,# $(whatever_LIBDIRS))
# split the named environment variable into individual directory names.  If there's a ROSE configure option to specify
# the library location, then DO NOT list an environment variable here--use the directory from configure instead (which
# goes into ROSE_LIBS above).
ROSE_RPATHS = $(patsubst -L%,-R %, $(filter-out -L/lib% -L/usr/lib% \
	-L/usr/local/lib% -L/var/lib%, $(filter -L%, $(ROSE_LIBS) \
	$(subst :, , $(GNU_COMPILERS_LIBDIRS)) $(subst :, , \
	$(LIBBZ2_LIBDIRS)) $(subst :, , $(LIBGRAPHICSMAGICK_LIBDIRS)) \
	$(subst :, , $(LIBJPEG_LIBDIRS)) $(subst :, , \
	$(LIBLCMS_LIBDIRS)) $(subst :, , $(LIBLZMA_LIBDIRS)) $(subst \
	:, , $(LIBPNG_LIBDIRS)) $(subst :, , $(LIBTIFF_LIBDIRS)) \
	$(subst :, , $(PYTHON_LIBDIRS)) $(subst :, , $(SPOT_LIBDIRS)) \
	$(subst :, , $(ZLIB_LIBDIRS)) $(subst :, , \
	$(INTEL_COMPILER_RPATHS)) ) ) ) $(am__append_2)
ROSE_LINK_RPATHS = $(addprefix -Wl$(comma)-rpath , $(filter-out -R , $(ROSE_RPATHS)))

# Rasmussen (3/23/2018): Added ROSE_LINK_RPATHS to enable linking on Mac OSX with ROSE installation
#ROSE_LINK_RPATHS = $(addprefix -Xlinker -rpath -Xlinker , $(filter-out -R , $(ROSE_RPATHS)))
comma = ,
INTEL_COMPILER_RPATHS = $(shell $(top_srcdir)/scripts/intel-compiler-rpaths.sh)

# DQ (3/8/2009): This fails when I try to include it (fails in rose/src/testSharedRoseLib).
#  $(INTEL_PIN_LIB_PATHS) $(INTEL_PIN_LIBS)

# DQ (3/14/2009): It is cleaner to just required that Intel Pin support require setting
# the LD_LIBRARYPATH to include: $(INTEL_PIN_PATH)/intel64/lib-ext

# This ROSE_SEPARATE_LIBS is used for the linking of preprocessor.C used within
# development. The use of the seperate libraries make the linking faster where the
# main librose library is not built.  Libtool may have changed this so that we could
# just link to librose now just as easily, but one has to rebuild librose each time
# instead of just the individual shared library.
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_SEPARATE_LIBS = $(ROSE_LIBS)

# QY (11/2/04): removed -lastoutlining from ROSE_SEPARATE_LIBS

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly
# with make distcheck rule
# -lannotationLanguageParser(appears after -lvaluePropagation)

# Test harness variables. See "rth_run.pl --help" for more info.  The RTH_RUN_FLAGS is meant to be set on the
# "make" command-line, but the default depends on the value of the verbosity $(V) flag.
RTH_RUN_FLAGS_V_ = 
RTH_RUN_FLAGS_V_0 = 
RTH_RUN_FLAGS_V_1 = --immediate-output
RTH_RUN_FLAGS = $(RTH_RUN_FLAGS_V_$(V))

# Default timeout that you can override on the "make" commandline. Valid values
# are integers followed by "s" (seconds), "m" (minutes), "h" (hours), or the
# word "never".  See scripts/rth_run.pl for detailed documentation.
RTH_TIMEOUT = 15m
RTH_RUN = $(top_srcdir)/scripts/rth_run.pl $(RTH_RUN_FLAGS) \
	srcdir=$(abspath $(srcdir)) top_srcdir=$(abspath $(top_srcdir)) \
	blddir=$$(pwd) top_blddir=$(abspath $(top_builddir)) \
	VALGRIND=$(VALGRIND) TIMEOUT=$(RTH_TIMEOUT)

RTH_STATS = $(top_srcdir)/scripts/rth_stats.pl

# DQ (10/22/2016): Change order of tests (simple --> hardest).
# SUBDIRS = LANL_POP gfortranTestSuite
# SUBDIRS = . gfortranTestSuite LANL_POP
SUBDIRS = . LANL_POP $(am__append_3) $(am__append_4)
# DQ (2/21/2017): This directory has some failing test codes for ROSE when compiled using the Intel v16 compiler, for example:
#   gfortranTestSuite/gfortran.dg/continuation_6.f
#   gfortranTestSuite/gfortran.dg/continuation_4.f90
# SUBDIRS += gfortranTestSuite

# Rasmussen (3/7/2020): Removed testing of the experimental (ATerm based) Fortran. It is now obsolete because
# it is being replaced by experimental_flang_frontend
#
#   SUBDIRS += experimental_frontend_tests
#

###########################################################################
# These are Fortran testcodes targeting aspects F66, F77, F90, F95, F2003 #
###########################################################################

# #######################
#      PASSING TESTS
# #######################

# This now passes as part of the F03_TESTCODES_REQUIRED_TO_PASS tests
#   F03_TESTCODES_REQUIRED_TO_PASS += test2007_43.f03

# DXN (as of 08/10/2011):
F90_TESTCODES_REQUIRED_TO_PASS = jira-par-2_literal_max.f90 \
	jira-par-11_write_format.f90 jira-par-18_common_block.f90 \
	R832.f90 R837.f90 test2007_01.f90 test2007_02.f90 \
	test2007_03.f90 test2007_04.f90 test2007_05.f90 \
	test2007_06.f90 test2007_07.f90 test2007_08.f90 \
	test2007_09.f90 test2007_10.f90 test2007_11.f90 \
	test2007_12.f90 test2007_13.f90 test2007_14.f90 \
	test2007_15.f90 test2007_16.f90 test2007_17.f90 \
	test2007_19.f90 test2007_20.f90 test2007_21.f90 \
	test2007_22.f90 test2007_23.f90 test2007_24.f90 \
	test2007_25.f90 test2007_26.f90 test2007_27.f90 \
	test2007_28.f90 test2007_29.f90 test2007_32.f90 \
	test2007_33.f90 test2007_34.f90 test2007_36.f90 \
	test2007_38.f90 test2007_39.f90 test2007_40.f90 \
	test2007_48.f90 test2007_49.f90 test2007_50.f90 \
	test2007_51.f90 test2007_52.f90 test2007_53.f90 \
	test2007_54.f90 test2007_55.f90 test2007_56.f90 \
	test2007_57.f90 test2007_58.f90 test2007_59.f90 \
	test2007_60.f90 test2007_61.f90 test2007_62.f90 \
	test2007_63.f90 test2007_64.f90 test2007_65.f90 \
	test2007_66.f90 test2007_67.f90 test2007_68.f90 \
	test2007_69.f90 test2007_71.f90 test2007_72.f90 \
	test2007_73.f90 test2007_74.f90 test2007_75.f90 \
	test2007_76.f90 test2007_77.f90 test2007_78.f90 \
	test2007_79.f90 test2007_80.f90 test2007_89.f90 \
	test2007_90.f90 test2007_91.f90 test2007_92.f90 \
	test2007_93.f90 test2007_94.f90 test2007_95.f90 \
	test2007_96.f90 test2007_97.f90 test2007_99.f90 \
	test2007_100.f90 test2007_101.f90 test2007_102.f90 \
	test2007_103.f90 test2007_104.f90 test2007_105.f90 \
	test2007_106.f90 test2007_109.f90 test2007_110.f90 \
	test2007_111.f90 test2007_117.f90 test2007_118.f90 \
	test2007_119.f90 test2007_121.f90 test2007_122.f90 \
	test2007_126.f90 test2007_127.f90 test2007_135.f90 \
	test2007_136.f90 test2007_137.f90 test2007_138.f90 \
	test2007_139.f90 test2007_140.f90 test2007_141.f90 \
	test2007_143.f90 test2007_149.f90 test2007_158.f90 \
	test2007_159.f90 test2007_160.f90 test2007_161.f90 \
	test2007_168.f90 test2007_169.f90 test2007_178.f90 \
	test2007_179.f90 test2007_181.f90 test2007_182.f90 \
	test2007_190.f90 test2007_219.f90 test2007_236.f90 \
	test2007_238.f90 test2007_244.f90 test2007_248.f90 \
	test2007_249.f90 test2007_250.f90 test2007_262.f90 \
	test2010_01.f90 test2010_02.f90 test2010_15.f90 \
	test2010_16.f90 test2010_18.f90 test2010_20.f90 \
	test2010_23.f90 test2010_25.f90 test2010_28.f90 \
	test2010_32.f90 test2010_33.f90 test2010_34.f90 \
	test2010_37.f90 test2010_38.f90 test2010_40.f90 \
	test2010_41.f90 test2010_42.f90 test2010_44.f90 \
	test2010_45.f90 test2010_46.f90 test2010_47.f90 \
	test2010_49.f90 test2010_50.f90 test2010_59.f90 \
	test2010_60.f90 test2010_61.f90 test2010_62.f90 \
	test2010_63.f90 test2010_64.f90 test2010_111.f90 \
	test2010_112.f90 test2010_113.f90 test2010_114.f90 \
	test2010_115.f90 test2010_118.f90 test2010_120.f90 \
	test2010_121.f90 test2010_122.f90 test2010_123.f90 \
	test2010_124.f90 test2010_125.f90 test2010_127.f90 \
	test2010_128.f90 test2010_129.f90 test2010_132.f90 \
	test2010_133.f90 test2010_134.f90 test2010_135.f90 \
	test2010_136.f90 test2010_137.f90 test2010_138.f90 \
	test2010_139.f90 test2010_140.f90 test2010_141.f90 \
	test2010_142.f90 test2010_143.f90 test2010_144.f90 \
	test2010_150.f90 test2010_151.f90 test2010_152.f90 \
	test2010_153.f90 test2010_155.f90 test2010_154.f90 \
	test2010_156.f90 test2010_158.f90 test2010_159.f90 \
	test2010_160.f90 test2010_162.f90 test2010_163.f90 \
	test2010_165.f90 test2010_166.f90 test2010_167.f90 \
	test2010_168.f90 test2010_172.f90 test2010_173.f90 \
	test2010_174.f90 test2010_182.f90 test2010_183.f90 \
	test2010_184.f90 test2011_01.f90 test2011_02.f90 \
	test2011_04.f90 test2011_05.f90 test2011_06.f90 \
	test2011_07.f90 test2011_08.f90 test2011_09.f90 \
	test2011_10.f90 test2011_12.f90 test2011_13.f90 \
	test2011_14.f90 test2011_15.f90 test2011_16.f90 \
	test2011_17.f90 test2011_19.f90 test2011_20.f90 \
	test2011_36.f90 test2011_39.f90 test2011_40.f90 \
	test2011_Rice_allocate-derived-type-scope.f90 \
	test2011_Rice_asterisk-length.f90 \
	test2011_Rice_attrs-dimension.f90 \
	test2011_Rice_caseSensitive.f90 \
	test2011_Rice_char-array-decl-asterisk.f90 \
	test2011_Rice_char-kind-decl.f90 \
	test2011_Rice_constructor-initializer.f90 \
	test2011_Rice_data-implied-do.f90 \
	test2011_Rice_data-implied-do-object-list.f90 \
	test2011_Rice_derived-type-array.f90 \
	test2011_Rice_derived-type-2d-component.f90 \
	test2011_Rice_derived-type-3d-component.f90 \
	test2011_Rice_elseif.f90 \
	test2011_Rice_empty-string-constant.f90 test2011_Rice_eq.f90 \
	test2011_Rice_explicit-shape1.f90 \
	test2011_Rice_explicit-shape2.f90 \
	test2011_Rice_forward-decl-func-type.f90 \
	test2011_Rice_forward-ref-derived-type.f90 \
	test2011_Rice_func-char-len.f90 test2011_Rice_funcdecl-1.f90 \
	test2011_Rice_function-implicit-result-1.f90 \
	test2011_Rice_function-implicit-result-2.f90 \
	test2011_Rice_function-result-2.f90 \
	test2011_Rice_function-where-var-expected.f90 \
	test2011_Rice_ifConstruct.f90 test2011_Rice_ifStmt.f90 \
	test2011_Rice_interface.f90 test2011_Rice_if-stop.f90 \
	test2011_Rice_inquire-in-ifthen.f90 test2011_Rice_intent.f90 \
	test2011_Rice_io-implied-do-with-stride.f90 \
	test2011_Rice_keyword-arg-extra-paren.f90 \
	test2011_Rice_keyword-arg-extra-paren-2.f90 \
	test2011_Rice_lost-kindtype-1.f90 \
	test2011_Rice_lost-kindtype-2.f90 \
	test2011_Rice_multi-char-decl.f90 test2011_Rice_nullify.f90 \
	test2011_Rice_pause-no-stop-code.f90 test2011_Rice_pointer.f90 \
	test2011_Rice_pointer-after-dimension.f90 \
	test2011_Rice_pointer-init.f90 \
	test2011_Rice_pointer-to-forward-ref-derived-type.f90 \
	test2011_Rice_public.f90 test2011_Rice_return-with-expr.f90 \
	test2011_Rice_singleton-array-constructor.f90 \
	test2011_Rice_stop-no-stop-code.f90 \
	test2011_Rice_unary-plus-minus.f90 \
	test2011_Rice_use-only-rename.f90 test2011_Rice_use-rename.f90 \
	test2011_Rice_vector-constructor-1.f90 \
	test2011_Rice_vector-constructor-2.f90 \
	test2011_Rice_vector-constructor-3.f90 \
	test2011_Rice_vector-constructor-4.f90 \
	test2011_Rice_write-no-output-item-list.f90 \
	test2011_Rice_wrong-func-type-3.f90 \
	test2011_Rice_wrong-func-type.f90 \
	test2011_Rice_wrong-func-type-2.f90 test2019_derived_type.f90 \
	test2019_class_var_decl.f90 test2019_write_io_control_spec.f90 \
	test2019_recursive_function.f90 \
	test2019_derived_type_name_conflict.f90 \
	test2019_derived_type_name_conflict_2.f90 test2019_rewind.f90 \
	test2019_renameList.f90 test2019_designator.f90 \
	test2019_contiguous_attr.f90 test2019_doconstruct.f90 \
	test2019_OpenStmt_Unit.f90 test2019_common_block_name.f90 \
	test2019_multi_associate.f90 \
	test2019_accessibility_attribute.f90 \
	test2019_accessibility_attribute2.f90 \
	test2020_use_iso_c_binding.f90 \
	test2020_use_iso_c_binding_2.f90 test2020_select_case.f90 \
	test2020_commonblock_1.f90 test2020_contiguous_attr.f90 \
	rose-issue-par-39.f90 canonicalExample.f90 fCaller.f90 \
	rose-1612.f90 $(am__append_5) $(am__append_6) $(am__append_7) \
	$(am__append_8) test2007_107.f90 test2007_131.f90 \
	test2007_144.f90 test2007_165.f90 test2007_166.f90 \
	test2007_170.f90 test2007_240.f90 test2007_254.f90 \
	test2007_255.f90 test2007_257.f90 test2008_30.f90 \
	test2009_1.f90 test2010_04.f90 test2010_05.f90 test2010_17.f90 \
	test2010_21.f90 test2010_22.f90 test2010_24.f90 \
	test2010_31.f90 test2010_36.f90 test2010_43.f90 \
	test2010_48.f90 test2010_51.f90 test2010_65.f90 \
	test2010_66.f90 test2010_67.f90 test2010_72.f90 \
	test2010_73.f90 test2010_78.f90 test2010_79.f90 \
	test2010_82.f90 test2010_84.f90 test2010_85.f90 \
	test2010_86.f90 test2010_90.f90 test2010_100.f90 \
	test2010_107.f90 test2010_108.f90 test2010_109.f90 \
	test2010_116.f90 test2010_117.f90 test2010_130.f90 \
	test2010_131.f90 test2010_145.f90 test2010_146.f90 \
	test2010_147.f90 test2010_148.f90 test2010_149.f90 \
	test2010_169.f90 test2010_170.f90 test2011_03.f90 \
	test2011_18.f90 test2011_21.f90 test2011_22.f90 \
	test2011_41.f90 test2011_43.f90 test2011_44.f90 \
	test2011_45.f90 test2011_46.f90 test2011_50.f90 \
	test2011_51.f90 test2011_52.f90 test2011_53.f90 \
	test2011_54.f90 test2011_55.f90 test2011_57.f90 \
	test2011_60.f90 test2011_62.f90 test2011_63.f90 \
	test2011_64.f90 test2011_68.f90 test2011_69.f90 \
	test2011_71.f90 test2011_72.f90 test2011_75.f90 \
	test2011_76.f90 $(am__append_9)

# test2020_comment_0.f90 the full test     
#     test2020_comment_3.f90
# Liao: 6/18/2020. tests with comments
F90_COMMENTS_REQUIRED_TO_PASS = \
    test2020_comment_1.f90 \
    test2020_comment_2.f90 \
    test2020_comment_4.f90


# result is rose_input.f90
F90_COMMENTS_REQUIRED_TO_PASS_RESULTS = $(addprefix rose_, ${F90_COMMENTS_REQUIRED_TO_PASS})    

# result's diff is input.f90.diff
F90_COMMENTS_REQUIRED_TO_PASS_RESULTS_DIFF = $(addsuffix .diff, $(F90_COMMENTS_REQUIRED_TO_PASS))  

# DQ (4/9/2011): Insure++ has identified problems with these tests, great news but I am not prepared to fix 
# them yet. Currently these fail for Insure++, they also report errors which will be valuable in identifing 
# the root cause of the problems that we have seen with the altrnative-return support in Fortran.
# But as a basis for continuted testing, we first isolate these tests to NOT be run when Insure++
# is in use so that we can focus on this in a later iteration after we have initial testing into place.
# I want to make sure that these are the only problem that cause Insure++ to fail, then we can re-enable 
# these tests and track down the problem.
# DQ (4/3/2011): The test2011_Rice_alternate-return-argument.f90 failes too frequently (not frequently 
# enough to reproduce the failure in a controled way, but frequently enough to hold back other progress
# in ROSE (e.g for other language and analysis support). I have forced this test to run where it appears
# to be reliable, but have skipped testing in on 4.1.x systems where it appears to be unreliable. The
# fault is not in the test but somewhere in ROSE (we expect), but it can't be reproduced so far in a 
# controled way. We are standing up more agressive static analysis and dynamic analysis testing in ROSE 
# which we hope will help address this issue.
# DQ (3/29/2011): Added test2011_Rice_alternate-return-argument.f90 to short list of test codes that
# appear to have a problem on 4.1.x version compilers.  Both of these codes implement the alternate 
# return but have been a problem on 4.1.x and maybe 4.3.x compilers (though might have less to do 
# with the gfortran versions than something else either in ROSE or in the JVM on these machines.
# The goal is to restrict these tests and see if the seamingly statistical failures on the Hudson
# machines stop, then we can expand the testing with this information.  Organizing the tests this 
# way will at least make sure that the tests are run, if only for one version of the compiler.
# DQ (2/13/2011): GNU gfortran 4.2 is a gnu configuration where I want to have test2010_161.f90 be tested.
# It has previously demonstrated a statistical failure on 4.1.2 and 4.3.2 (running it on 4.2 machines
# is an incremental step to getting it into more uniform testing, since I can't get it to fail locally).
# It also passes valgrind just fine, so this is a bit of a mystery at present.
# (4/19/2011): Removed problem tests from being tested in ROSE for now.
#if ROSE_USING_GFORTRAN_VERSION_4_2
#   F90_TESTCODES_REQUIRED_TO_PASS += \
#     test2010_161.f90 \
#     test2011_Rice_alternate-return-argument.f90 \
#     test2011_Rice_alt-return-call.f90
#endif

# DQ (3/29/2011): This is now passing the LLVM tests, so I will leave it alone and thus leave it in to run on all platforms.
# test2011_Rice_alternate-return-argument.f90

# DQ (3/29/2011): Since Rice is using the gfortran 4.4.x compiler we want to also have these tests 
# run there. This should simplify their testing, while avoiding the 4.1.x and 4.3.x compilers where 
# this has been a problem.  However, it is still not clear that this problem anything to do with the 
# gfortran version (even though it appears to corrolate perfectly).
# DQ (4/2/2011): Removed this test from use on GNU 4.4.x machines since it appears to fail there.
# We are standing up more agressive static analysis and dynamic analysis testing in ROSE which 
# we hope will help address this issue.
#  F90_TESTCODES_REQUIRED_TO_PASS += \
# test2010_161.f90 
F90_TESTCODES_REQUIRING_PREPROCESSOR_REQUIRED_TO_PASS = 

# DQ (9/30/2011): There is a long history of this being a statistical failure on at least OSX systems. 
# test2010_161.f90 
# Liao 12/15/2011. This one also uses alternative return according to Dan
#     test2011_66.f90  

# DXN (as of 08/10/2011):
F77_FIXED_FORMAT_TESTCODES_REQUIRED_TO_PASS = test2007_124.f \
	test2007_125.f test2007_128.f test2007_129.f test2007_132.f \
	test2007_145.f test2007_148.f test2007_150.f test2007_151.f \
	test2007_153.f test2007_154.f test2007_155.f test2007_156.f \
	test2007_157.f test2007_162.f test2007_163.f test2007_164.f \
	test2007_175.f test2007_183.f test2007_184.f test2007_185.f \
	test2007_186.f test2007_187.f test2007_188.f test2007_189.f \
	test2007_191.f test2007_192.f test2007_193.f test2007_194.f \
	test2007_195.f test2007_196.f test2007_197.f test2007_198.f \
	test2007_200.f test2007_201.f test2007_202.f test2007_204.f \
	test2007_205.f test2007_206.f test2007_207.f test2007_208.f \
	test2007_209.f test2007_211.f test2007_212.f test2007_213.f \
	test2007_214.f test2007_215.f test2007_216.f test2007_217.f \
	test2007_218.f test2007_220.f test2007_221.f test2007_222.f \
	test2007_223.f test2007_224.f test2007_226.f test2007_227.f \
	test2007_228.f test2007_229.f test2007_230.f test2007_231.f \
	test2007_232.f test2007_234.f test2007_242.f test2007_243.f \
	test2007_245.f test2007_246.f test2007_247.f test2007_251.f \
	test2007_253.f test2007_256.f test2007_258.f test2007_259.f \
	test2007_260.f test2007_261.f test2010_29.f test2010_30.f \
	test2010_68.f test2010_69.f \
	test2011_Rice_char-star1-function.f \
	test2011_Rice_char-star2-function.f \
	test2011_Rice_computed-goto.f \
	test2011_Rice_continuation-spits-token.f \
	test2011_Rice_initial-tab.f test2011_Rice_intrinsic-mixup.f \
	test2011_Rice_lost-func-return-type.f \
	test2011_Rice_shared_continue.f \
	test2011_Rice_shared_label_stmt.f \
	$(OPENMP_TESTS_F77_TESTCODES_REQUIRED_TO_PASS) test2007_86.f \
	test2007_142.f test2007_147.f test2007_199.f test2007_203.f \
	test2007_225.f test2007_235.f test2007_241.f test2007_252.f \
	test2008_02.f test2008_03.f test2010_52.f test2010_53.f \
	test2010_54.f test2010_70.f test2010_105.f test2010_157.f \
	test2011_94.f

# DQ (1/18/2011): Failing tests.
#     test2007_150.f 
#     test2007_209.f 
#     test2007_227.f 
#     test2007_232.f 

# DQ (1/20/2011): Failing tests.
#     test2007_227.f 

# DXN (as of 08/10/2011):
F03_TESTCODES_REQUIRED_TO_PASS = test2007_30.f03 test2007_31.f03 \
	test2007_35.f03 test2007_37.f03 test2007_41.f03 \
	test2007_42.f03 test2007_43.f03 test2007_44.f03 \
	test2007_45.f03 test2007_47.f03 test2007_98.f03 \
	test2007_112.f03 test2007_113.f03 test2007_114.f03 \
	test2007_115.f03 test2007_116.f03 test2007_120.f03 \
	test2007_123.f03 test2007_130.f03 test2007_133.f03 \
	test2007_134.f03 test2007_174.f03 test2007_176.f03 \
	test2010_176.f03 test2010_177.f03 test2010_178.f03 \
	test2010_179.f03 test2010_180.f03 test2010_181.f03 \
	test2011_24.f03 test2011_25.f03 test2011_27.f03 \
	test2011_28.f03 test2011_29.f03 test2011_30.f03 \
	test2011_31.f03 test2011_32.f03 test2011_33.f03 \
	test2011_34.f03 test2011_35.f03 \
	test2011_Rice_attrs-value-intent.f03 \
	test2011_Rice_attrs-pointer-array.f03 \
	test2011_Rice_bindc-name-2.f03 \
	test2011_Rice_bindc-name-sub.f03 test2011_Rice_bindc-name.f03 \
	test2011_Rice_bindc.f03 test2007_172.f03 test2007_173.f03 \
	test2010_77.f03 test2010_106.f03 test2010_171.f03 \
	test2011_74.f03

# DQ (1/18/2011): Failing tests.
#     test2007_133.f03 

# DQ (4/3/2010): Added test code used in Fortran OpenMP tests.
OPENMP_TESTS_F77_TESTCODES_REQUIRED_TO_PASS = \
     jacobi.f \
     default.f \
     flush.f \
     exmpaleA221f.f \
     exampleA251f.f \
     schedule.f \
     testNewOFP.f


# DQ (11/11/2014): These test fail due to changes to support C++11 work (need to look into this seperately).
#     test2010_106.f03 

# #######################
#      FAILING TESTS
# #######################
F90_TESTCODES_CURRENTLY_FAILING = test2007_108.f90 test2007_46.f90 \
	test2007_81.f90 test2007_82.f90 test2007_83.f90 \
	test2007_84.f90 test2007_70.f90 test2007_87.f90 \
	test2007_88.f90 test2007_152.f90 test2007_177.f90 \
	test2007_237.f90 test2007_239.f90 test2007_LANL.f90 \
	test2007_example.f90 test2010_19.f90 test2010_26.f90 \
	test2010_71.f90 test2010_80.f90 test2010_83.f90 \
	test2010_87.f90 test2010_88.f90 test2010_89.f90 \
	test2010_91.f90 test2010_92.f90 test2010_93.f90 \
	test2010_94.f90 test2010_95.f90 test2010_96.f90 \
	test2010_97.f90 test2010_99.f90 test2010_101.f90 \
	test2010_102.f90 test2010_103.f90 test2010_110.f90 \
	test2010_175.f90 test2011_11.f90 test2011_23.f90 \
	test2011_38.f90 test2011_42.f90 test2011_47.f90 \
	test2011_48.f90 test2011_49.f90 test2011_56.f90 \
	test2011_58.f90 test2011_59.f90 test2011_61.f90 \
	test2011_65.f90 test2011_67.f90 test2011_73.f90 \
	test2011_Rice_A-cant-assert-keyword-nonnull.f90 \
	test2011_Rice_B-cant-assert-keyword-nonnull.f90 \
	test2011_Rice_C-cant-assert-keyword-nonnull.f90 \
	test2011_Rice_lost-func-return-type.f90 triangle.f90 \
	X-comment-in-wrong-place.f90 X-enddo-plus-label.f90 \
	X-multi-linebreaks.f90 X-print-no-output-item-list.f90

# "X-*" tests are Rice-reported bugs not yet fixed.
# DQ(1/30/2011): test2010_150.* - test2010_168.* are Rice tests

# JJW -- this can't be in the f90 file list because it does not have the .f90 extension
#    test2008_02.f
F90_TESTCODES_REQUIRING_PREPROCESSOR_CURRENTLY_FAILING = \
    test2008_01.F90

#if !OS_MACOSX
#  # Liao 2/11/2011. gfortran 4.2.0 on Mac cannot handle include '/long/absolute/path/file.h'
#  F90_TESTCODES_REQUIRING_PREPROCESSOR_CURRENTLY_FAILING += test2008_01.F90
#endif
F77_FIXED_FORMAT_TESTCODES_CURRENTLY_FAILING = \
     test2007_85.f \
     test2007_146.f \
     test2007_167.f \
     test2007_210.f \
     test2007_233.f \
     test2010_55.f \
     test2010_56.f \
     test2010_57.f 

F03_TESTCODES_CURRENTLY_FAILING = \
     test2007_18.f03 \
     test2007_171.f03 \
     test2007_180.f03 \
     test2010_27.f03 \
     test2010_74.f03 \
     test2010_75.f03 \
     test2010_76.f03 \
     test2010_104.f03 \
     test2010_126.f03 \
     test2011_26.f03 

F08_TESTCODES_CURRENTLY_FAILING = \
     test2010_98.f08

noinst_headers = 

# Automake's testing mechanism (which defines the "make check" rule) requires passing tests.
F90_TESTCODES = \
$(F90_TESTCODES_REQUIRED_TO_PASS)

F77_TESTCODES = \
$(F77_TESTCODES_REQUIRED_TO_PASS)

F77_FIXED_FORMAT_TESTCODES = \
$(F77_FIXED_FORMAT_TESTCODES_REQUIRED_TO_PASS) 

F03_TESTCODES = \
$(F03_TESTCODES_REQUIRED_TO_PASS)


# DQ (11/20/2010): Added test codes requiring preprocessing
F90_TESTCODES_REQUIRING_PREPROCESSOR = \
$(F90_TESTCODES_REQUIRING_PREPROCESSOR_CURRENTLY_FAILING)


# QMTest allows both passing and failing tests.
ALL_F90_TESTCODES = \
$(F90_TESTCODES_REQUIRED_TO_PASS) \
$(F90_TESTCODES_CURRENTLY_FAILING)

ALL_F77_TESTCODES = \
$(F77_TESTCODES_REQUIRED_TO_PASS) \
$(F77_TESTCODES_CURRENTLY_FAILING)

ALL_F77_FIXED_FORMAT_TESTCODES = \
$(F77_FIXED_FORMAT_TESTCODES_REQUIRED_TO_PASS) \
$(F77_FIXED_FORMAT_TESTCODES_CURRENTLY_FAILING)

ALL_F03_TESTCODES = \
$(F03_TESTCODES_REQUIRED_TO_PASS) \
$(F03_TESTCODES_CURRENTLY_FAILING)

ALL_F90_TESTCODES_REQUIRING_PREPROCESSOR = \
$(F90_TESTCODES_REQUIRING_PREPROCESSOR_REQUIRED_TO_PASS) \
$(F90_TESTCODES_REQUIRING_PREPROCESSOR_CURRENTLY_FAILING)


# File option to accumulate performance information about the compilation
PERFORMANCE_REPORT_OPTION = -rose:compilationPerformanceFile $(top_builddir)/FORTRAN_ROSE_PERFORMANCE_DATA.csv

# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict
# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict $(PERFORMANCE_REPORT_OPTION)
# ROSE_FLAGS = -rose:verbose 3 -rose:output_parser_actions -I$(srcdir)
# ROSE_FLAGS = -rose:verbose 0 -rose:unparse_tokens -rose:output_parser_actions -I$(srcdir)
# ROSE_FLAGS = -rose:verbose 0 -rose:unparse_tokens -I$(srcdir)
# ROSE_FLAGS = -rose:verbose 0 -I$(srcdir)

# DQ (9/26/2011): Added optional test for dangling pointers to IR nodes in the AST (level 2 causes assertion if dangling pointers is found).
ROSE_FLAGS = -rose:verbose 0 -rose:detect_dangling_pointers 2 -I$(srcdir)

# VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes
VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes --trace-children=yes
VALGRIND = 
# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)
# VALGRIND = valgrind $(VALGRIND_OPTIONS)
# VALGRIND =

# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support 
# this, this implementation needs review).  It might be better to prepend the information to the 
# CC and CXX variables. I think that the purify support uses this approach.
#VALGRIND = $(ADDRESS_SANITIZER_OPTIONS)
PASSING_TEST_F90_Objects = ${F90_TESTCODES:.f90=.o}
PASSING_TEST_F90_Sources = ${F90_TESTCODES:.f90=.f90.passed}
PASSING_TEST_REQUIRING_PREPROCESSOR_F90_Objects = ${F90_TESTCODES_REQUIRING_PREPROCESSOR:.F90=.o}
PASSING_TEST_REQUIRING_PREPROCESSOR_F90_Sources = ${F90_TESTCODES_REQUIRING_PREPROCESSOR:.F90=.F90.passed}
PASSING_TEST_F77_Objects = ${F77_TESTCODES:.f77=.o}
PASSING_TEST_F77_Sources = ${F77_TESTCODES:.f77=.f77.passed}

# DQ (3/11/2010): F77 tests were not being run, this fixes this.
# PASSING_TEST_F77_FIXED_FORMAT_Objects = ${F77_TESTCODES:.f=.o}
PASSING_TEST_F77_FIXED_FORMAT_Objects = ${F77_FIXED_FORMAT_TESTCODES_REQUIRED_TO_PASS:.f=.o}
PASSING_TEST_F77_FIXED_FORMAT_Sources = ${F77_FIXED_FORMAT_TESTCODES_REQUIRED_TO_PASS:.f=.f.passed}
PASSING_TEST_F03_Objects = ${F03_TESTCODES:.f03=.o}
PASSING_TEST_F03_Sources = ${F03_TESTCODES:.f03=.f03.passed}
TEST_F90_Objects = ${ALL_F90_TESTCODES:.f90=.o}
TEST_F90_Sources = ${ALL_F90_TESTCODES:.f90=.f90.passed}
TEST_REQUIRING_PREPROCESSOR_F90_Objects = ${ALL_F90_TESTCODES_REQUIRING_PREPROCESSOR:.F90=.o}
TEST_REQUIRING_PREPROCESSOR_F90_Sources = ${ALL_F90_TESTCODES_REQUIRING_PREPROCESSOR:.F90=.F90.passed}
TEST_F77_Objects = ${ALL_F77_TESTCODES:.f77=.o}
TEST_F77_Sources = ${ALL_F77_TESTCODES:.f77=.f77.passed}
TEST_F77_FIXED_FORMAT_Objects = ${ALL_F77_FIXED_FORMAT_TESTCODES:.f=.o}
TEST_F77_FIXED_FORMAT_Sources = ${ALL_F77_FIXED_FORMAT_TESTCODES:.f=.f.passed}
TEST_F03_Objects = ${ALL_F03_TESTCODES:.f03=.o}
TEST_F03_Sources = ${ALL_F03_TESTCODES:.f03=.f03.passed}

# PASSING_TEST_Objects = $(PASSING_TEST_F90_Objects) $(PASSING_TEST_F77_Objects) $(PASSING_TEST_F77_FIXED_FORMAT_Objects) $(PASSING_TEST_F03_Objects) 
PASSING_TEST_Objects = $(PASSING_TEST_REQUIRING_PREPROCESSOR_F90_Objects) $(PASSING_TEST_F90_Objects) $(PASSING_TEST_F77_Objects) $(PASSING_TEST_F77_FIXED_FORMAT_Objects) $(PASSING_TEST_F03_Objects) 
PASSING_TEST_Sources = $(PASSING_TEST_REQUIRING_PREPROCESSOR_F90_Sources) $(PASSING_TEST_F90_Sources) $(PASSING_TEST_F77_Sources) $(PASSING_TEST_F77_FIXED_FORMAT_Sources) $(PASSING_TEST_F03_Sources) 

# DQ (10/4/2010): Added tests to make sure that the AST graphs can be generated for all
# Fortran input test codes. This tests a problem that was reported previously by Rice.
# $(TEST_F90_Objects): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}
# # $(TEST_F90_Objects): ../../testTranslator
# # Example of how to call the OpenFortranParser
# #	java parser.java.FortranMain --class parser.java.FortranParserActionJNI $(srcdir)/$(@:.o=.f90)
# #	java parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f90)
# # How to call a ROSE translator with a Fortran source file.
# if !ROSE_USE_INSURE
# 	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)
# 	$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)
# 	$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)
# #	$(VALGRIND) ../../testParser $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)
# else
# #	DQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.
# #	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; exit 1; fi
# 	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; ../../testTranslator --help > /dev/null; echo "Fixed"; fi
# 	cp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)
# 	./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)
# 	echo "Removing the just built copy of lt-testTranslator to save space..."
# 	rm -f testTranslator_$(@:.o=)
# endif

# Rasmussen (12/20/2018): Path to the SDF Fortran parse table
#SDF_OFP = $(top_srcdir)/src/3rdPartyLibraries/experimental-fortran-parser/share/rose
#QMTEST_Objects = ${ALL_TESTCODES:.f90=.qmt}

# Make rule to build the QMTest database files
#CURRENT_DIRECTORY = `pwd`

# We will build a larger collection of module tests soon (supported by makefile dependence rules).
# PASSING_MODULE_TEST_Objects = module_B_file.o
#PASSING_MODULE_TEST_Objects = module_B_file.f90.passed test2019_module_2_file.f90.passed test2019_private_attribute.f90.passed test2020_use_iso_c_binding_4.f90.passed

# DQ (10/4/2010): Test calling OFP directly and ROSE for different filename extensions.
#CALL_OFP = java -Djava.class.path=$(top_srcdir)/src/3rdPartyLibraries/antlr-jars/antlr-3.5.2-complete.jar:$(top_builddir)/src/3rdPartyLibraries/fortran-parser/OpenFortranParser-0.8.5.jar fortran.ofp.FrontEnd

# Pei-Hung (2/25/2020) test if output still contains comment after preprocessor
#REFERENCE_PATH = $(top_srcdir)/tests/nonsmoke/functional/CompileTests/Fortran_tests/referenceResults

# Make sure that all the test codes end up in the distribution
# EXTRA_DIST = $(ALL_TESTCODES)
EXTRA_DIST = $(ALL_F77_FIXED_FORMAT_TESTCODES) $(ALL_F77_TESTCODES) $(ALL_F90_TESTCODES) $(ALL_F03_TESTCODES) \
   $(ALL_F90_TESTCODES_REQUIRING_PREPROCESSOR) \
   test2007_suffixTest_01.f test2007_suffixTest_02.f77 test2007_suffixTest_03.f90 test2007_suffixTest_04.f95 \
   test2007_suffixTest_05.f03 test2007_suffixTest_06.F test2007_suffixTest_07.F90 test2007_suffixTest_08.F95 \
   test2007_suffixTest_09.F03 test2007_suffixTest_10.F08 test2007_suffixTest_11.f08 \
   module_A_file.f90 module_B_file.f90 test2010_31_header.f90 test2010_50.h test2010_54.h test2010_55.h \
   original_mpif.h inputUsingDefinesOnCommandline.F90 fortran_foo_single_quote.h fortran_foo_double_quote.h \
   cpp_foo.h cpp_foobar.h ISO_C_BINDING.f03 mpi_f08_types.f03 mpi_f08_interfaces_test.f03 mpif.h mpiof.h

all: all-recursive

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(top_srcdir)/config/QMTest_makefile.inc $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign --ignore-deps tests/nonsmoke/functional/CompileTests/Fortran_tests/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign --ignore-deps tests/nonsmoke/functional/CompileTests/Fortran_tests/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;
$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(top_srcdir)/config/QMTest_makefile.inc $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

# This directory's subdirectories are mostly independent; you can cd
# into them and run 'make' without going through this Makefile.
# To change the values of 'make' variables: instead of editing Makefiles,
# (1) if the variable is set in 'config.status', edit 'config.status'
#     (which will cause the Makefiles to be regenerated when you run 'make');
# (2) otherwise, pass the desired values on the 'make' command line.
$(am__recursive_targets):
	@fail=; \
	if $(am__make_keepgoing); then \
	  failcom='fail=yes'; \
	else \
	  failcom='exit 1'; \
	fi; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-recursive
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-recursive

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-recursive

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    $(am__make_dryrun) \
	      || test -d "$(distdir)/$$subdir" \
	      || $(MKDIR_P) "$(distdir)/$$subdir" \
	      || exit 1; \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-recursive
all-am: Makefile
installdirs: installdirs-recursive
installdirs-am:
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-generic clean-libtool clean-local mostlyclean-am

distclean: distclean-recursive
	-rm -f Makefile
distclean-am: clean-am distclean-generic distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am:

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am:

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-generic mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am:

.MAKE: $(am__recursive_targets) check-am install-am install-strip

.PHONY: $(am__recursive_targets) CTAGS GTAGS TAGS all all-am check \
	check-am check-local clean clean-generic clean-libtool \
	clean-local cscopelist-am ctags ctags-am distclean \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs installdirs-am \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags tags-am uninstall uninstall-am

.PRECIOUS: Makefile


# JJW (2/25/2008): set a flag (only used when running ROSE applications) to
# have them run using the build tree rather than the install tree -- this is
# important for "make check" in an uninstalled copy of ROSE.
#export ROSE_IN_BUILD_TREE=$(top_builddir)

#  # The previous "Z3_*" variables should have been named "ROSE_Z3_*" following the pattern in the rest of this
#  # makefile. I don't want to break code that uses the wrong names, so I'll just add the correct ones. [Matzke 2017-10-17]

show-rpaths:
	@echo "ROSE_LIBS = $(ROSE_LIBS)"
	@echo "ROSE_RPATHS = $(ROSE_RPATHS)"
	@echo "ROSE_LINK_RPATHS = $(ROSE_LINK_RPATHS)"

clean-test-targets:
	rm -f $(TEST_TARGETS)
	rm -f $(TEST_TARGETS:.passed=.failed)
	rm -f $(TEST_TARGETS:.passed=.out)
	rm -f $(TEST_TARGETS:.passed=.err)

clean-local: clean-test-targets

.PHONY: clean-test-targets

# $(srcdir)/$(@:rose_%=%) :  source/ for each output target @, convert rose_input.f90 to input.f90 
$(F90_COMMENTS_REQUIRED_TO_PASS_RESULTS): $(srcdir)/$(@:rose_%=%) ../../testTranslator
	../../testTranslator -c $(srcdir)/$(@:rose_%=%)

# rule to generate the diff file: depending on rose_input.f90  
# grep comments from rose_input.f90
# grep comments from sourcetree/input.f90
# diff the output of two grep command lines
$(F90_COMMENTS_REQUIRED_TO_PASS_RESULTS_DIFF): %.diff:rose_%
	diff <(grep -n "\!"  $(@:%.diff=rose_%)) <(grep -n "\!" $(srcdir)/$(@:%.diff=%)) > $@

# These fail and have been moved to be tested unde 4.2.x only.
# test2011_Rice_alternate-return-argument.f90
# test2011_Rice_alt-return-call.f90

# SKW 4/17/2011: tests which may actually be incorrect Fortran 90 -- need to study the standard.
#     test2011_Rice_false-forward-decl-func-type.f90
#     test2011_Rice_forward-ref-with-sub.f90
#     test2011_Rice_lost-func-return-type.f90

# SKW 3/18/2011: tests which are correct and pass in ROSE, but sometimes fail
# when run in Hudson (nondeterministically, on amd64-linux with gcc 4.1.2)
#     test2011_Rice_A-cant-assert-keyword-nonnull.f90
#     test2011_Rice_B-cant-assert-keyword-nonnull.f90
#     test2011_Rice_C-cant-assert-keyword-nonnull.f90

#Liao 2/11/2010, 'include' issue on gfortran 4.2.0 of Mac OS X
# 4.2.1 can handle them properly
#if !OS_MACOSX
#  F90_TESTCODES_REQUIRED_TO_PASS += \
#       test2007_29.f90 \
#       test2010_01.f90 \
#       test2010_50.f90
#endif

# DQ (2/12/2011): This test codes appears to randomly fail (failed on GNU 4.1.2)
# I will look into this separately. 
# Within Hudson is has failed for:
#       test#2044 on hudson-rose-04 using GNU 4.3.2
#       test#2056 on tux284 using GNU 4.1.2
# It passes without error using Valgrind and I can't get it to fail locally 
# on tux321 (using GNU 4.2.4).  One intermediate step would be to have it be 
# tested by Hudson on only 4.2.4 machines.
#    test2010_161.f90

# DQ (1/31/2011): Some F90 testcodes need to be be F03 testcodes.  These are
# fixed as only F03 codes (note that test2011_26.f03 is already a F03 code).
#     test2011_24.f90
#     test2011_25.f90
#     test2011_27.f90
#     test2011_28.f90
#     test2011_29.f90
#     test2011_30.f90
#     test2011_31.f90
#     test2011_32.f90
#     test2011_33.f90
#     test2011_34.f90
#     test2011_35.f90

# DQ (1/18/2011): Failing tests.
#     test2007_100.f90
#     test2007_135.f90 
#     test2007_219.f90 
#     test2010_35.f90
#     test2010_49.f90
#     test2010_59.f90 
#     test2010_136.f90 
#     test2010_151.f90 
#     test2010_154.f90 
#     test2010_174.f90 
#     test2011_05.f90 

# DQ (1/20/2011): Failing tests.
#     test2007_248.f90 
#     test2010_49.f90 
#     test2010_136.f90 
#     test2010_151.f90 

# This used to work, but fails how that test2010_172.f90 and test2010_184.f90 pass
# It seems that these are mutually exclusive!!!
#    test2007_103.f90
#    test2007_139.f90
#    test2007_189.f
#    test2007_227.f
#    test2010_29.f
#    test2010_30.f 
#    test2010_120.f90

# DQ (12/5/2010): This generates an internal gfortran compiler error.
# retest on Hudson later after we get the current work checked in.
# test2010_119.f90:29: internal compiler error: in emit_move_insn, at expr.c:3162
#     test2010_119.f90

# DQ (3/1/2017): If using Clang or Intel compilers then these variable might not be set. So avoid
# using GNU 5.4 compiler on Ubuntu system by mistake (see ROSE Matrix Testing for 2/28/2017).

 # These are tests that fail using the gfrotran version 4.0 compiler (but pass with all other versions of gfortran).

# Go back and build the translator we are using to test Fortran (in case make check 
# is run directly in this directory before make has been run from the root of the 
# ROSE directory structure).  This does not appear to work!
#../../testTranslator:
#	cd ../..; $(MAKE) testTranslator
##	@echo "Force the lt-testTranslator to be built in ../../.libs so that we can rename it for Insure++ runs."
##	../../testTranslator --help > /dev/null

#testTranslator: ../../testTranslator

#../../testGraphGeneration:
#	cd ../..; $(MAKE) testGraphGeneration

#testGraphGeneration: ../../testGraphGeneration

#../../testTokenGeneration:
#	cd ../..; $(MAKE) testTokenGeneration

#testTokenGeneration: ../../testTokenGeneration

#$(TEST_F90_Sources): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)
#	@$(RTH_RUN) CMD="../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.f90.passed=.f90)" $(top_srcdir)/scripts/test_exit_status $@
#	$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)
#	@$(RTH_RUN) CMD="../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.f90.passed=.f90)" $(top_srcdir)/scripts/test_exit_status $(@:.f90.passed=.f90.testGraphGeneration.passed)
#	$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)
#	@$(RTH_RUN) CMD="../../testTokenGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.f90.passed=.f90)" $(top_srcdir)/scripts/test_exit_status $(@:.f90.passed=.f90.testTokenGeneration.passed)
#	$(VALGRIND) ../../testParser $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)
#	sglri -i $(srcdir)/$(@:.f90.passed=.f90) -p $(top_srcdir)/src/3rdPartyLibraries/experimental-fortran-parser/share/rose/Fortran.tbl | pp-aterm -o $(@:.f90.passed=.f90).aterm
#	@$(RTH_RUN) CMD="sglri -i $(srcdir)/$(@:.f90.passed=.f90) -p $(SDF_OFP)/Fortran.tbl | pp-aterm -o $(@:.f90.passed=.f90).aterm" $(top_srcdir)/scripts/test_exit_status $(@:.f90.passed=.f90.testAtermGeneration.passed) || true
# Rasmussen (12/20/2018): Turned off running experimental frontend on normal Fortran tests.  Not ready for these tests yet!
#	@$(RTH_RUN) CMD="../../testTranslator -rose:experimental_fortran_frontend $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.f90.passed=.f90)" $(top_srcdir)/scripts/test_exit_status $(@:.f90.passed=.f90.testTokenGeneration.passed)
# Rasmussen (12/20/2018): Turned off running experimental frontend on normal Fortran tests.  Not ready for these tests yet!
#	@$(RTH_RUN) CMD="../../testAtermGraphGeneration $(@:.f90.passed=.f90.aterm)" $(top_srcdir)/scripts/test_exit_status $(@:.f90.passed=.f90.testAtermGraphGeneration.passed) || true
#	DQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.
#	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; exit 1; fi
##	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; ../../testTranslator --help > /dev/null; echo "Fixed"; fi
##	cp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)
##	./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)
##	echo "Removing the just built copy of lt-testTranslator to save space..."
##	rm -f testTranslator_$(@:.o=)

# $(TEST_REQUIRING_PREPROCESSOR_F90_Objects): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}
# if !ROSE_USE_INSURE
# 	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)
# 	$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)
# 	$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)
# else
# #	DQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.
# 	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; ../../testTranslator --help > /dev/null; echo "Fixed"; fi
# 	cp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)
# 	./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)
# 	echo "Removing the just built copy of lt-testTranslator to save space..."
# 	rm -f testTranslator_$(@:.o=)
# endif

#$(TEST_REQUIRING_PREPROCESSOR_F90_Sources): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)
#	@$(RTH_RUN) CMD="../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.F90.passed=.F90)" $(top_srcdir)/scripts/test_exit_status $@
#	$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)
#	@$(RTH_RUN) CMD="../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.F90.passed=.F90)" $(top_srcdir)/scripts/test_exit_status $(@:.F90.passed=.F90.testGraphGeneration.passed)
#	$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)
#	@$(RTH_RUN) CMD="../../testTokenGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.F90.passed=.F90)" $(top_srcdir)/scripts/test_exit_status $(@:.F90.passed=.F90.testTokenGeneration.passed)
#	@$(RTH_RUN) CMD="sglri -i $(srcdir)/$(@:.F90.passed=.F90) -p $(SDF_OFP)/Fortran.tbl | pp-aterm -o $(@:.F90.passed=.F90).aterm" $(top_srcdir)/scripts/test_exit_status $(@:.F90.passed=.F90.testAtermGeneration.passed) || true
# Rasmussen (12/20/2018): Turned off running experimental frontend on normal Fortran tests.  Not ready for these tests yet!
#	@$(RTH_RUN) CMD="../../testTranslator -rose:experimental_fortran_frontend $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.F90.passed=.F90)" $(top_srcdir)/scripts/test_exit_status $(@:.F90.passed=.F90.testTokenGeneration.passed)
#	DQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.
##	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; ../../testTranslator --help > /dev/null; echo "Fixed"; fi
##	cp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)
##	./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)
##	echo "Removing the just built copy of lt-testTranslator to save space..."
##	rm -f testTranslator_$(@:.o=)

# $(TEST_F77_Objects): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}
# #	java parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f77)
# if !ROSE_USE_INSURE
# 	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)
# 	$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)
# 	$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)
# else
# #	DQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.
# #	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; exit 1; fi
# 	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; ../../testTranslator --help > /dev/null; echo "Fixed"; fi
# 	cp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)
# 	./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)
# 	echo "Removing the just built copy of lt-testTranslator to save space..."
# 	rm -f testTranslator_$(@:.o=)
# endif

#$(TEST_F77_Sources): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}
#	java parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f77)
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)
#	@$(RTH_RUN) CMD="../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.f77.passed=.f77)" $(top_srcdir)/scripts/test_exit_status $@
#	$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)
#	@$(RTH_RUN) CMD="../../testGraphGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.f77.passed=.f77)" $(top_srcdir)/scripts/test_exit_status $(@:.f77.passed=.f77.testGraphGeneration.passed)
#	$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)
#	@$(RTH_RUN) CMD="../../testTokenGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.f77.passed=.f77)" $(top_srcdir)/scripts/test_exit_status $(@:.f77.passed=.f77.testTokenGeneration.passed)
#	@$(RTH_RUN) CMD="sglri -i $(srcdir)/$(@:.f77.passed=.f77) -p $(SDF_OFP)/Fortran.tbl | pp-aterm -o $(@:.f77.passed=.f77).aterm" $(top_srcdir)/scripts/test_exit_status $(@:.f77.passed=.f77.testAtermGeneration.passed) || true
# Rasmussen (12/20/2018): Turned off running experimental frontend on normal Fortran tests.  Not ready for these tests yet!
#	@$(RTH_RUN) CMD="../../testTranslator -rose:experimental_fortran_frontend $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.f77.passed=.f77)" $(top_srcdir)/scripts/test_exit_status $(@:.f77.passed=.f77.experimental.passed)
#	DQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.
#	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; exit 1; fi
##	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; ../../testTranslator --help > /dev/null; echo "Fixed"; fi
##	cp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)
##	./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)
##	echo "Removing the just built copy of lt-testTranslator to save space..."
##	rm -f testTranslator_$(@:.o=)

# $(TEST_F77_FIXED_FORMAT_Objects): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}
# #	java parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f)
# if !ROSE_USE_INSURE
# 	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)
# 	$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)
# 	$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)
# else
# #	DQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.
# #	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; exit 1; fi
# 	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; ../../testTranslator --help > /dev/null; echo "Fixed"; fi
# 	cp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)
# 	./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)
# 	echo "Removing the just built copy of lt-testTranslator to save space..."
# 	rm -f testTranslator_$(@:.o=)
# endif

#$(TEST_F77_FIXED_FORMAT_Sources): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}
#	java parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f)
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)
#	@$(RTH_RUN) CMD="../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.f.passed=.f)" $(top_srcdir)/scripts/test_exit_status $@
#	$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)
#	@$(RTH_RUN) CMD="../../testGraphGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.f.passed=.f)" $(top_srcdir)/scripts/test_exit_status $(@:.f.passed=.f.testGraphGeneration.passed)
#	$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)
#	@$(RTH_RUN) CMD="../../testTokenGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.f.passed=.f)" $(top_srcdir)/scripts/test_exit_status $(@:.f.passed=.f.testTokenGeneration.passed)
#	@$(RTH_RUN) CMD="sglri -i $(srcdir)/$(@:.f.passed=.f) -p $(SDF_OFP)/Fortran.tbl | implode-asfix | pp-aterm -o $(@:.f.passed=.f).aterm" $(top_srcdir)/scripts/test_exit_status $(@:.f.passed=.f.testAtermGeneration.passed) || true
# Rasmussen (12/20/2018): Turned off running experimental frontend on normal Fortran tests.  Not ready for these tests yet!
#	@$(RTH_RUN) CMD="../../testTranslator -rose:experimental_fortran_frontend$(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.f.passed=.f)" $(top_srcdir)/scripts/test_exit_status $(@:.f.passed=.f.testTokenGeneration.passed)
#	DQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.
#	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; exit 1; fi
##	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; ../../testTranslator --help > /dev/null; echo "Fixed"; fi
##	cp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)
##	./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)
##	echo "Removing the just built copy of lt-testTranslator to save space..."
##	rm -f testTranslator_$(@:.o=)

# Note: If using gfortran version greater then 4.1, we can't call it with Fortran 2003 code since it is so buggy.
#       So we use -rose:skip_syntax_check to avoid the frontend syntax checking and -rose:skipfinalCompileStep
#       to avoid processing the generated code (which would have the same problem).  It is easier to just use
#       the version 4.1 gfortran which has better Fortran 2003 syntax checking support. This problem is confirmed 
#       on versions of gfortran 4.2 and 4.3.
# $(TEST_F03_Objects): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration 
# if !ROSE_USE_INSURE
# #	java parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f03)
# #	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f2003 -c $(srcdir)/$(@:.o=.f03)
# #	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)
# 	$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)
# #	$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)
# #	Since gfortran does not support F03, and thus we skip the compileation using the backend gfortran compiler, we have to force the generation of an object file. 
# #	Build a object file since gfortran fails to do so (avoids remaking the makefile target)
# 	@echo "   ...force generation of $@, because gfortran compiler does not handle fortran 2003 standard (and the makefile needs $@ to avoid recompilation)."
# 	@touch $@
# else
# #	DQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.
# #	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; exit 1; fi
# 	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; ../../testTranslator --help > /dev/null; echo "Fixed"; fi
# 	cp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)
# 	./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)
# 	echo "Removing the just built copy of lt-testTranslator to save space..."
# 	rm -f testTranslator_$(@:.o=)
# endif

#$(TEST_F03_Sources): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration 
#	$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)
#	@$(RTH_RUN) CMD="../../testGraphGeneration $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.f03.passed=.f03)" $(top_srcdir)/scripts/test_exit_status $@
#	$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)
#	Since gfortran does not support F03, and we skip the compilation using the backend gfortran compiler, we have to force the generation of an object file. 
#	Build a object file since gfortran fails to do so (avoids remaking the makefile target)
#	@echo "   ...force generation of $@, because gfortran compiler does not handle fortran 2003 standard (and the makefile needs $@ to avoid recompilation)."
#	@touch $@
##	@$(RTH_RUN) CMD="sglri -i $(srcdir)/$(@:.f03.passed=.f03) -p $(SDF_OFP)/Fortran.tbl | pp-aterm -o $(@:.f03.passed=.f03).aterm" $(top_srcdir)/scripts/test_exit_status $(@:.f03.passed=.f03.testAtermGeneration.passed) || true
#	DQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.
#	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; exit 1; fi
##	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; ../../testTranslator --help > /dev/null; echo "Fixed"; fi
##	cp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)
##	./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)
##	echo "Removing the just built copy of lt-testTranslator to save space..."
##	rm -f testTranslator_$(@:.o=)

# DQ (4/6/2010): Added test for parsing only (tested here for C++ code)
#testParser: ../../testParser
#	$(VALGRIND) ../../testParser $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir) -c $(srcdir)/test2007_01.f90
#$(QMTEST_Objects): ../../testTranslator $(srcdir)/$(@:.qmt=.c)
#	@echo "Calling QMTEST_Objects rule: "
#	qm.sh f rose.RoseTest $(CURRENT_DIRECTORY)/../../testTranslator NULL $(ROSE_FLAGS) -c $(srcdir)/$(@:.qmt=.f90)

# This is a rule to add the current files into a QMTest database
#build_qmtest_database: $(QMTEST_Objects)
#	@echo "Building QMTest database using file "
#	rm -rf QMTest_database;
#	mkdir QMTest;
#	rm -rf QMTest/*.qmt
#	mv *.qmt QMTest
#	cd QMTest; qmtest -D`pwd` create-tdb

#run_qm_tests:
#	cd QMTest; qmtest run -o TestResults.qmr -j4

#run_qm_gui:
#	cd QMTest; qmtest gui

# Include makefile rules specific to QMTest

# DQ (11/5/2016): Fixed this to use the RTH script so that address sanitizer could be used consistantly for all tests.
# DQ (11/11/2008): Module test copied from developersScratchSpace/Dan/Fortran_tests
# This file declares a module used by module_B_file.f90
# module_A_file.o: testTranslator
# TEST_F90_Sources = ${ALL_F90_TESTCODES:.f90=.f90.passed}
#module_A_file.f90.passed: testTranslator
# module_A_file.o: testTranslator
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.o=.f90)
#	@$(RTH_RUN) CMD="../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.F90.passed=.F90)" $(top_srcdir)/scripts/test_exit_status $@
#	@$(RTH_RUN) CMD="../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.f90.passed=.f90)" $(top_srcdir)/scripts/test_exit_status $(srcdir)/$(@:.o=.f90)
#	@$(RTH_RUN) CMD="../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.f90.passed=.f90)" $(top_srcdir)/scripts/test_exit_status $@
#	../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.o=.f90)

# Force representation of module dependency so that mod files are properly generated before use.
# module_B_file.o: testTranslator module_A_file.o
#module_B_file.f90.passed: testTranslator module_A_file.f90.passed
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.o=.f90)
#	../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.o=.f90)
#	@$(RTH_RUN) CMD="../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.f90.passed=.f90)" $(top_srcdir)/scripts/test_exit_status $@

#test2019_module_1_file.f90.passed: testTranslator
#	@$(RTH_RUN) CMD="../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.f90.passed=.f90)" $(top_srcdir)/scripts/test_exit_status $@

# Force representation of module dependency so that mod files are properly generated before use.
#test2019_module_2_file.f90.passed: testTranslator test2019_module_1_file.f90.passed
#	@$(RTH_RUN) CMD="../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.f90.passed=.f90)" $(top_srcdir)/scripts/test_exit_status $@

#test2019_private_attribute2.f90.passed: testTranslator
#	@$(RTH_RUN) CMD="../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.f90.passed=.f90)" $(top_srcdir)/scripts/test_exit_status $@

# Force representation of module dependency so that mod files are properly generated before use.
#test2019_private_attribute.f90.passed: testTranslator test2019_private_attribute2.f90.passed
#	@$(RTH_RUN) CMD="../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.f90.passed=.f90)" $(top_srcdir)/scripts/test_exit_status $@

#test2020_use_iso_c_binding_3.f90.passed: testTranslator
#	@$(RTH_RUN) CMD="../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.f90.passed=.f90)" $(top_srcdir)/scripts/test_exit_status $@

# Force representation of module dependency so that mod files are properly generated before use.
#test2020_use_iso_c_binding_4.f90.passed: testTranslator test2020_use_iso_c_binding_3.f90.passed
#	@$(RTH_RUN) CMD="../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.f90.passed=.f90)" $(top_srcdir)/scripts/test_exit_status $@

#test2010_01.o:
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -rose:relax_syntax_check -c $(srcdir)/$(@:.o=.f90)

#test2010_02.o:
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -rose:relax_syntax_check -c $(srcdir)/$(@:.o=.f90)

#test2010_05.o:
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -rose:relax_syntax_check -c $(srcdir)/$(@:.o=.f90)

# Output spew test from John.
#outputSpew.o:
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:caf -rose:skip_syntax_check -c $(srcdir)/$(@:.o=.caf)

# Makefile rule to reproduce a current OFP bug that causes OFP to fail silently (not returning a proper exit code).
#current_OFP_error:
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:exit_after_parser -c $(srcdir)/test2010_31.f90

# DQ (3/29/2011): Added special test to support this problem that appears correlated to gfortran 4.1.2
# though might be unrelated to the gfortran version number.
#problemTests:
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2010_161.f90
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2011_Rice_alternate-return-argument.f90
#testSuffixRules:
#	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_01.f
#	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_01.f
#	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_02.f77
#	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_02.f77
#	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_03.f90
#	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_03.f90
#	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_04.f95
#	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_04.f95
#	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_05.f03
#	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_05.f03
#	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_06.F
#	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_06.F
#	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_07.F90
#	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_07.F90
#	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_08.F95
#	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_08.F95
#	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_09.F03
#	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_09.F03
#	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_10.F08
#	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_10.F08
#	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_11.f08
#	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_11.f08

#testOFP:
#	 $(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_01.f

# DQ (10/18/2010): Test suggested from bug reported by Carlo Bertolli at Imperial.
#testCPP_Defines:
#	Test source code with macro defined from the command line: e.g. "integer*PS  pe"
#	../../testTranslator $(ROSE_FLAGS) -DPS=8 $(srcdir)/inputUsingDefinesOnCommandline.F90

#testMPI:
#	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/mpi.f90
#	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/mpi_test_01.f90

#testMPItypes:
#	../../testTranslator $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep $(srcdir)/ISO_C_BINDING.f03
#	../../testTranslator $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep $(srcdir)/mpi_f08_types.f03
#	../../testTranslator $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep $(srcdir)/mpi_f08_interfaces_test.f03

#testMultipleFortranFiles: $(srcdir)/test2010_78.f90 $(srcdir)/test2010_79.f90
#	../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/test2010_78.f90 $(srcdir)/test2010_79.f90 || cat $(srcdir)/test2010_79.f90 rose_test2010_79.f90
#testPreprocessedOutput: $(srcdir)/test2007_suffixTest_07.F90
#	../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/test2007_suffixTest_07.F90 
#	bash -c "diff <(tail -n 6 rose_test2007_suffixTest_07.F90) <(tail -n 6 $(REFERENCE_PATH)/rose_test2007_suffixTest_07.F90.output)" 

# DQ (11/5/2010): This bug causes the unparsed second file to include a Fortran "include" statement (magically).
# Note that the compilation will generate an error not caught by make since the use of "cat" will succeed.
#riceBug1: $(srcdir)/test2010_78.f90 $(srcdir)/test2010_79.f90
#	../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/test2010_78.f90 $(srcdir)/test2010_79.f90 || cat $(srcdir)/test2010_79.f90 rose_test2010_79.f90

# DQ (11/5/2010): When unparsed, this file is missing the statement "i1 = 1" in the generated code.
# DQ (11/30/2010): Rice has a fix for this in their merge that should be checked in shortly.
#riceBug2:$(srcdir)/test2010_78.f90 $(srcdir)/test2010_80.f90
#	../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/test2010_78.f90
#	../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/test2010_80.f90
#	../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/test2010_78.f90
#	../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/test2010_80.f90
#	@echo "Source code to test2010_80.f90"
#	@cat $(srcdir)/test2010_80.f90
#	@echo "Generated code for rose_test2010_80.f90 (missing \"i1 = 1\""
#	@cat rose_test2010_80.f90

#bug3:
#	../../testTranslator $(ROSE_FLAGS) -rose:f90 -rose:output_parser_actions -I$(srcdir) -c $(srcdir)/test2010_81.f90

#bug4:
#	../../testTranslator $(ROSE_FLAGS) -rose:output_parser_actions -I$(srcdir) -c $(srcdir)/verify.f

# DQ (9/19/2011): Added Cray pointer test using test code from Imperial College London.
#crayPointerTest: testTranslator test2011_imperial_crayPointers.f90
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -rose:cray_pointer_support -rose:skip_syntax_check -rose:skipfinalCompileStep -c $(srcdir)/test2011_imperial_crayPointers.f90
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -rose:skip_syntax_check -rose:skipfinalCompileStep -c $(srcdir)/test2011_imperial_crayPointers.f90

# DQ (4/9/2011): Let's at least run these in parallel (more important for the Insure++ tests).
#extra_tests: $(PASSING_MODULE_TEST_Objects) testCPP_Defines testMPItypes testMultipleFortranFiles testPreprocessedOutput

# DQ (2/2/2011): We are now enforcing the module names are unique so that we can always run the 
# test code in parallel and avoid name conflicts with *.mod (gfortran) and *.rmod (rose) files.
#enforce_module_name_policy:
#	$(top_srcdir)/scripts/policies/UniqueFortranModules.pl $(srcdir)

#tests:
#	@$(MAKE) enforce_module_name_policy
#	@$(MAKE) $(PASSING_TEST_Objects)
#	@$(MAKE) $(PASSING_TEST_Sources)
#	@$(MAKE) $(PASSING_MODULE_TEST_Objects)
#	@$(MAKE) testCPP_Defines
#	@$(MAKE) testMPItypes
#	@$(MAKE) testMultipleFortranFiles
#	@$(MAKE) extra_tests
#	@echo "***************************************************************************************************"
#	@echo "****** ROSE/tests/nonsmoke/functional/CompileTests/Fortran_tests: make tests rule complete (terminated normally) ******"
#	@echo "***************************************************************************************************"

#conditional-check-local:
#	@echo "Tests for Fortran."
#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest
#	These Fortran programs must be called externally to the test codes in the "TESTCODES" make variable
#	DQ (2/2/2011): This test presently fails (test codes are being fixed).
#	@$(MAKE) enforce_module_name_policy
#	@$(MAKE) $(PASSING_TEST_Objects)
#	@$(MAKE) $(PASSING_TEST_Sources)
#	@$(MAKE) $(F90_COMMENTS_REQUIRED_TO_PASS_RESULTS_DIFF)
#	@$(MAKE) $(PASSING_MODULE_TEST_Objects)
#	@$(MAKE) testCPP_Defines
#	@$(MAKE) testMPItypes
#	@$(MAKE) testMultipleFortranFiles
#	@$(MAKE) extra_tests
#	DQ (4/6/2010): This fails on Hudson, but I don't know why.
#	@$(MAKE) testParser
##	@echo "Skipping Fortran code tests when using the gfortran version 4.0.x compiler (fails to support common command line options of later versions)."
#	@echo "***************************************************************************************************"
#	@echo "****** ROSE/tests/nonsmoke/functional/CompileTests/Fortran_tests: make check rule complete (terminated normally) ******"
#	@echo "***************************************************************************************************"

# Fortran support not available in ROSE unless specified on the configure command line.
conditional-check-local:
	@echo "***********************************************************************************"
	@echo "****** ROSE/tests/nonsmoke/functional/CompileTests/Fortran_tests: FORTRAN NOT CONFIGURED IN ROSE ******"
	@echo "***********************************************************************************"

# This will output the example testcodes that are failing
listProblemFiles: $(F77_TESTCODES_CURRENTLY_FAILING) $(F90_TESTCODES_CURRENTLY_FAILING) $(F03_TESTCODES_CURRENTLY_FAILING) $(F77_FIXED_FORMAT_TESTCODES_CURRENTLY_FAILING)
	egrep -n "*"  $(srcdir)/$(?)

# DQ (3/12/2010): Fortran 2008 tests from OFP
# f08-tests

check-local: conditional-check-local

clean-local:
	rm -f *.o rose_*.f* *.rmod
	rm -f *.s *.mod rose_*.f rose_*.f77 rose_*.f90 rose_*.f95 rose_*.f03 rose_*.f08 *.dot *.pdf *~ *.ps *.out *.log rose_performance_report_lockfile.lock
	rm -f rose_*.F rose_*.F77 rose_*.F90 rose_*.F95 rose_*.F03 rose_*.F08 test2007_suffixTest_0?_postprocessed.*
	rm -f *_postprocessed.* 
	rm -rf QMTest
	rm -f *.passed *.failed *.err
	rm -f *.aterm $(F90_COMMENTS_REQUIRED_TO_PASS_RESULTS_DIFF)
#	Remove the links built to get the filename being compiled into the name of the executable.
#	rm -f testTranslator_*
#	rm -f *.rpt

# SKW's trivial change to force new Hudson run

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
