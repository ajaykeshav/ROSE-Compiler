# Makefile.in generated by automake 1.16.2 from Makefile.am.
# tests/nonsmoke/functional/BinaryAnalysis/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2020 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# These definitions are for the benefit of independent software contained			-*- makefile -*-
# in ROSE.  (Currently, this means SAGE and ROSETTA.)
# It defines ROSE_INCLUDES and ROSE_LIBS so they can use the ROSE codes.

# ROSE_INCLUDES contains the include flags for compiling with ROSE code.
# (ROSE software should set the include paths in their respective Makefile.am
# files, since they are expected to know the ROSE source tree structure.)
# To use ROSE_INCLUDES, the independent software packages contained in ROSE
# should define the variable ROSE_HOME to be the relative path to the root
# of the ROSE directory tree.

# This fixes some problem caused by automake or autoconf
# (detailed documentation is in the ChangeLog)
# MAKE=gmake

# DQ (8/10/2007): Valentin suggested this be commented out.
# DQ (4/23/2006): This is the default when build using automake version 1.6.3 but it
# causes errors so we would like to specify --run automake instead
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake-1.6
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake

# force ranlib to just call touch so that *.so (dynamic libraries) will not
# be run with ranlib (which is a error).  This allows us to use dynamic
# libraries as the default within ROSE.
# JJW 7/25/2008: Do we really need this?

# Collections of binary specimens                    -*- makefile -*-
# This file is automatically generated by running
#   $ make build-SpecimenSets.inc
# in the $ROSE_BLD/tests/nonsmoke/specimens/binary directory

# -*- makefile -*-

# All variables in this makefile begin with "nonsmoke_specimens_binary_" (since that's where this file is located in the
# directory hierarchy.

VPATH = /home/meltdown1995/roseRoot/rose-compiler//src/tests/nonsmoke/functional/BinaryAnalysis
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/rose
pkgincludedir = $(includedir)/rose
pkglibdir = $(libdir)/rose
pkglibexecdir = $(libexecdir)/rose
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu

# DQ (10/23/2020): Pei-Hung and I think this may not be required (not available on my system).
# I get the error: 
#    /bin/ld: skipping incompatible /lib/libtinfo.so when searching for -ltinfo
#    clang-10: error: linker command failed with exit code 1 (use -v to see invocation)
# ROSE_LIBS += $(CLANG_LDFLAGS) -ltinfo
#am__append_1 = $(CLANG_LDFLAGS)
#am__append_2 = -R $(DOT_ASIS_LIB_DIR_) 
noinst_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \
	$(am__EXEEXT_4) $(am__EXEEXT_5)

# Some tests are disabled for certain combinations of compiler vendor, compiler version, and compiler language. We do that
# by calling this program, which returns a non-empty string describing why something is disabled, or an empty string if
# not disabled. Furthermore, if a test cannot even be compiled for a certain combination, we use conditionalDisable.h in
# the test program itself to cause it to compile an alternative main which prints a message and aborts.

# Some tests are disabled because the ARM AArch64 A64 support is not enabled in ROSE.

###############################################################################################################################
# Check parsing of symbolic expressions via Rose::BinaryAnalysis::SymbolicExprParser
###############################################################################################################################

###############################################################################################################################
# Parses an executable to produce a dump file (*.dump), an assembly file (rose_*.s), and a new executable created by unparsing
# the AST (*.new). The *.new file is typically identical to the original executable. This is essentially the same as
# tutorial/identityTranslator and is used by some of the other binary tests in this directory.
###############################################################################################################################

###############################################################################################################################
# Tests for BinaryAnalysis::ControlFlow class.
###############################################################################################################################

###############################################################################################################################
# Test the binary CFG that points to instructions rather than basic blocks. No test is necessary since this
# is tested by testControlFlow already.  The cfg2.C file serves mostly as a clear example of how to generate an
# instruction-based CFG and write it to a GraphViz file along with some extra info on each vertex.
###############################################################################################################################
# FIXME ROSE-475 [Robb P. Matzke 2016-08-31]: This is an example, not a test. Move it to the documentation instead.

###############################################################################################################################
# Tests for the BinaryAnalysis::FunctionCall class.
###############################################################################################################################

###############################################################################################################################
# Tests ELF string table reallocation functions by changing some strings.  At first glance this would appear to be something
# quite easy to do, but it turns out to involve lots of details.
###############################################################################################################################

###############################################################################################################################
# Reads in an ELF executable and changes the byte order from little-endian to big-endian or vice versa and writes out a new
# file. Note that the byte order change affects the ELF file format but not the executable described by that format.
###############################################################################################################################

###############################################################################################################################
# Reads in an ELF executable and changes the word size from eight to four bytes or vice versa and writes out a new file. Note
# that the word size change affects the ELF file format but not the executable described by that format.
###############################################################################################################################

###############################################################################################################################
# Demonstrates how to change names of dynamically-linked functions. This example reads an ELF executable dynamically linked to
# the MPI library and changes all calls to PMPI_* functions with calls to XMPI_* functions. See the top of the source file
# for more details.
###############################################################################################################################

###############################################################################################################################
# Demonstrates how to build an ELF executable from scratch. Lots of comments in the source code. The resulting file is executable
# on an x86 Linux using syscall 1 to exit with a particular value.
###############################################################################################################################

###############################################################################################################################
# Demonstrates how to build a PE executable from scratch. This demo is not as complete at the ELF version, but does show how to
# create a file that contains multiple format headers (a DOS header and a PE header).
###############################################################################################################################

###############################################################################################################################
# Changes the size and/or location of a section in an executable file.
###############################################################################################################################

###############################################################################################################################
# Test ROSE + XEN Ether interface
###############################################################################################################################

###############################################################################################################################
# Program to show function boundary information for a binary executable
###############################################################################################################################

###############################################################################################################################
# Program to add read-only data to ELF core dumps.
###############################################################################################################################

###############################################################################################################################
# Program that encodes/decodes data similar to ROT-13 but acceping binary data
###############################################################################################################################

###############################################################################################################################
# Program to test the assembler
###############################################################################################################################

###############################################################################################################################
# Program to test that we can write and then read an AST for a binary executable
###############################################################################################################################

###############################################################################################################################
# Program to test that SgAsmGenericFile::neuter works across AST-IO.
###############################################################################################################################

###############################################################################################################################
# Program to test the RegisterDescriptor and RegisterDictionary classes.
###############################################################################################################################

###############################################################################################################################
# Tests reading past the end-of-file
###############################################################################################################################
#am__append_3 =  \
#	conditionalDisable \
#	isA64Disabled \
#	testSymbolicExprParser \
#	execFormatsTest \
#	testControlFlow cfg2 \
#	testFunctionCall \
#	testElfStrtab \
#	testElfByteOrder \
#	testElfWordSize \
#	testElfSchulz \
#	testElfConstruct \
#	testPeConstruct \
#	shiftResizeSection \
#	testEtherInsns \
#	functionBoundaries \
#	expandCoreDump rot13 \
#	testAssembler \
#	testAstIO \
#	testAstNeuter \
#	testRegisters \
#	testReadPastEOF
#am__append_4 = testSymbolicExprParser.passed \
#	$(testControlFlow_targets) \
#	testFunctionCall-A.passed \
#	testFunctionCall-B.passed \
#	testElfStrtab.passed \
#	testElfByteOrder.passed \
#	testElfWordSize.passed \
#	testElfSchulz-1.passed \
#	testElfSchulz-2.passed \
#	testElfConstruct.passed \
#	testPeConstruct.passed \
#	shiftResizeSection.passed \
#	testEtherInsns.passed \
#	functionBoundaries_1.passed \
#	functionBoundaries_2.passed \
#	functionBoundaries_3.passed \
#	expandCoreDump.passed \
#	rot13.passed \
#	testAssembler.passed \
#	testAstIO.passed \
#	testAstNeuter.passed \
#	testRegisters.passed \
#	testReadPastEOF.passed
#am__append_5 = $(testControlFlow_answers) \
#	testFunctionCall-A.ans \
#	testFunctionCall-B.ans \
#	testElfByteOrder.conf \
#	testElfWordSize.conf \
#	testElfSchulz.conf \
#	shiftResizeSection.ans \
#	functionBoundaries_1.ans \
#	functionBoundaries_2.ans \
#	functionBoundaries_3.ans \
#	rot13.conf \
#	testAssembler.ans \
#	testAstNeuter.conf \
#	testReadPastEOF.conf \
#	testReadPastEOF.ans \
#	testPeImports.ans \
#	cory008.ans \
#	testSymReadWrite.conf \
#	testSymReadWrite.ans \
#	testPointerDetection.ans \
#	testCallDetection.ans \
#	usedef.ans \
#	usedef.conf \
#	testSymbolicSimplification.ans \
#	testSymbolicFlags.ans \
#	$(testPartitioner2_answers) \
#	$(testP2map_answers) \
#	$(testDominance_answers) \
#	semantics.conf \
#	nullSemantics2-x86.ans \
#	semantics.conf \
#	partialSymbolicSemantics2-x86.ans \
#	semantics.conf \
#	intervalSemantics2-x86.ans \
#	semantics.conf \
#	symbolicSemantics2-x86.ans \
#	semantics.conf \
#	traceSymbolicSemantics2-x86.ans \
#	semantics.conf \
#	yicesSemanticsExe2-x86.ans \
#	semantics.conf \
#	yicesSemanticsLib2-x86.ans \
#	semantics.conf \
#	z3SemanticsExe2-x86.ans \
#	semantics.conf \
#	z3SemanticsLib2-x86.ans \
#	llvmTranscoder.conf \
#	$(addprefix \
#	$(llvmAnalysis_SpecimenDir), \
#	$(llvmAnalysis_Specimens)) \
#	llvmAnalysis.conf \
#	$(taintedFlow_TestAnswers) \
#	taintedFlow.conf \
#	$(testNoop_TestAnswers)

# Do not run these tests automatically by "make check" because LLVM is not always installed.  Therefore, we
# also need to mention the outputs in MOSTLYCLEANFILES.
#TEST_TARGETS += $(llvmAnalysis_TestTargets)
#am__append_6 =  \
#	testAstNeuter.ast \
#	$(llvmAnalysis_TestTargets) \
#	$(llvmAnalysis_TestTargets:.passed=.failed)

###############################################################################################################################
# Not sure what this does.
###############################################################################################################################
##am__append_7 = testLibraryDb
##am__append_8 = testLibraryDb.passed

###############################################################################################################################
# Tests reading import sections from PE files
###############################################################################################################################

###############################################################################################################################
# Binary CFG test from Cory Cohen that doesn't compile.  This is only a linking test--do not run it.
###############################################################################################################################

###############################################################################################################################
# Test certain RegisterStateGeneric stuff
###############################################################################################################################

###############################################################################################################################
# Test register clearing in subclass constructor
###############################################################################################################################

###############################################################################################################################
# Test disassembling between functions
###############################################################################################################################

###############################################################################################################################
# Test and demonstrate binary attributes
###############################################################################################################################

###############################################################################################################################
# Test base objects in SgAsmIntegerValueExpression
###############################################################################################################################

###############################################################################################################################
# Test symbolic structural comparison of integer constants
###############################################################################################################################

###############################################################################################################################
# Test symbolic semantics memory read-after-write
###############################################################################################################################

###############################################################################################################################
# Test the WorkList class
###############################################################################################################################
#am__append_9 = testPeImports \
#	cory002 cory003 \
#	cory004 cory006 \
#	cory007 cory008 \
#	cory009 \
#	testSymReadWrite \
#	testWorkList
#am__append_10 =  \
#	testPeImports.passed \
#	cory003.passed \
#	cory004.passed \
#	cory006.passed \
#	cory007.passed \
#	cory008.passed \
#	cory009.passed \
#	testSymReadWrite.passed \
#	testWorkList.passed

###############################################################################################################################
# Test ROSE's Map<T> class
###############################################################################################################################

# DQ (11/17/2017): The testMap.C code causes an internal compiler error for the Intel v16 compiler.
#am__append_11 = testMap
#am__append_12 = testMap.passed

###############################################################################################################################
# Test pointer detection
###############################################################################################################################

###############################################################################################################################
# Test function call detection
###############################################################################################################################

###############################################################################################################################
# Test analysis to see whether a function returns a value
###############################################################################################################################

###############################################################################################################################
# Test BitPattern<> class template
###############################################################################################################################

###############################################################################################################################
# Random number generator tests
###############################################################################################################################

###############################################################################################################################
# Symbolic expression simplifications
###############################################################################################################################

###############################################################################################################################
# Symbolic expression user-defined flags
###############################################################################################################################

###############################################################################################################################
# Instruction semantics verification.
###############################################################################################################################

###############################################################################################################################
# CFG dominance tests
###############################################################################################################################

# TOO1 (3/24/2015): Failing jenkins-release GCC 4.2.4; removing temporarily until fixed
#multiSemantics2.passed

# Null semantics

# Partial symbolic semantics

# Interval semantics

# Symbolic semantics, no SMT solver

# Tracing symbolic semantics, no SMT solver

# Symbolic semantics, Yices executable

# Symbolic semantics, Yices library

# Symbolic semantics, Z3 executable

# Symbolic semantics, Z3 library

# Multi-domain semantics, new API
# TOO1 (3/24/2015): Failing jenkins-release GCC 4.2.4; removing temporarily until fixed
#noinst_PROGRAMS += multiSemantics2
#multiSemantics2_SOURCES = semantics.C
#multiSemantics2_CPPFLAGS = -DSEMANTIC_DOMAIN=MULTI_DOMAIN
#multiSemantics2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#TEST_TARGETS += multiSemantics2.passed
#EXTRA_DIST += semantics.conf multiSemantics2.ans
#multiSemantics2.passed: semantics.conf multiSemantics2
#	@$(RTH_RUN) CMD=multiSemantics2 INPUT=i686-test1.O3.bin SPECIMEN_DIR="$(SPECIMEN_DIR)" $< $@

# Demo how to subclass something from SymbolicSemantics

###############################################################################################################################
# Instruction semantics speed tests.  These aren't actually run automatically, we just compile them to make sure they
# compile.  To run them, just run the executable with one argument: the name of a binary file.  The test just starts
# executing instructions at the entry address until it reaches a branch whose condition is not known, at which time the
# test repeats.  It does this for one minute and then prints out the execution rate.
###############################################################################################################################

# Tests speed of null instruction semantics with and without using templates

# Tests speed of partial symbolic instruction semantics with and without using templates

# Tests speed of symbolic semantics with and without using templates

# Tests speed of interval semantics with and without using templates

# Tests speed of multi-domain semantics with and without using templates

###############################################################################################################################
# LLVM tests
###############################################################################################################################

###############################################################################################################################
# Binary tainted flow analysis
###############################################################################################################################

###############################################################################################################################
# No-op analysis tests
###############################################################################################################################

###############################################################################################################################
# Static semantics tests
###############################################################################################################################

###############################################################################################################################
# Data-flow tests
###############################################################################################################################

#############################################################################################
# Test disassembling random input data for various architectures.
#############################################################################################

###############################################################################################################################
# Symbolic substitution in huge expressions with many common subexpressions
###############################################################################################################################

###############################################################################################################################
# Z3 solver with wide constants
################################################################################################################################

########################################################################################################################
# Test RegisterStateGeneric's peekRegister method
########################################################################################################################

########################################################################################################################
# Test P2 data blocks
########################################################################################################################

########################################################################################################################
# Test S-Records
########################################################################################################################

########################################################################################################################
# Test disassembler
########################################################################################################################
#am__append_13 =  \
#	testPointerDetection \
#	testCallDetection \
#	testReturnsValue \
#	testBitPattern \
#	testRNG \
#	testSymbolicSimplification \
#	testSymbolicFlags \
#	verifySemantics \
#	testDominance \
#	nullSemantics2 \
#	partialSymbolicSemantics2 \
#	intervalSemantics2 \
#	symbolicSemantics2 \
#	traceSymbolicSemantics2 \
#	yicesSemanticsExe2 \
#	yicesSemanticsLib2 \
#	z3SemanticsExe2 \
#	z3SemanticsLib2 \
#	semanticsSubclassing \
#	nullSemanticsSpeed2 \
#	partialSymbolicSemanticsSpeed2 \
#	symbolicSemanticsSpeed2 \
#	intervalSemanticsSpeed2 \
#	multiSemanticsSpeed2 \
#	llvmTranscoder \
#	taintedFlow testNoop \
#	testStaticSemantics \
#	testLazyInitialStates \
#	testRandomInput \
#	testSymbolicSubstitution \
#	testSmtWideConstant \
#	testPeekRegister \
#	testDataBlockOwnership \
#	testSRecords \
#	testDisassembler

###############################################################################################################################
# Unit tests for use-def (executed created below)
###############################################################################################################################
# Uses "symbolicSemantics2" executable compiled in another test.
#am__append_14 = testPointerDetection.passed \
#	testCallDetection.passed \
#	testReturnsValue.passed \
#	usedef.passed \
#	testBitPattern.passed \
#	testRNG.passed \
#	testSymbolicSimplification.passed \
#	testSymbolicFlags.passed \
#	verifySemantics.passed \
#	$(testPartitioner2_test_targets) \
#	testPartitioner2_buffer2.bin.passed \
#	$(testP2map_test_targets) \
#	$(testDominance_test_targets) \
#	nullSemantics2-x86.passed \
#	partialSymbolicSemantics2-x86.passed \
#	intervalSemantics2-x86.passed \
#	symbolicSemantics2-x86.passed \
#	traceSymbolicSemantics2-x86.passed

###############################################################################################################################
# Instruction semantics tests.
#
# Binary instruction semantics are a plug-n-play architecture, so we try to test a number of different combinations, usually
# all compiled from a single source file.  Files with "1" in their name use the older, template-based API while files with
# "2" in their name use the newer run-time plug-n-play API.
###############################################################################################################################

# Convenience target to run all these semantics tests. This target is not run automatically by "make check" (which instead
# depends on each of the targets individually rather than just this one).

#-------------- all LLVM-specific tests

#--------------------------------------------------------------------------------
#am__append_15 = check-testPartitioner2 \
#	check-testDominance \
#	check-semantics \
#	check-llvm-xcode \
#	check-llvm-analysis \
#	check-llvm \
#	check-taint \
#	check-noop \
#	check-testStaticSemantics \
#	check_astio \
#	check_specimens \
#	check-random-input
##am__append_16 = yicesSemanticsExe2-x86.passed
##am__append_17 = yicesSemanticsLib2-x86.passed
##am__append_18 = z3SemanticsExe2-x86.passed
##am__append_19 = z3SemanticsLib2-x86.passed
#am__append_20 = semanticsSubclassing.passed \
#	$(llvmTranscoder_TestTargets) \
#	$(taintedFlow_TestTargets) \
#	$(testNoop_TestTargets) \
#	$(testStaticSemantics_test_targets) \
#	testLazyInitialStates.passed \
#	$(astio_Targets) \
#	$(testRandomInput_Targets) \
#	tri_a64.passed \
#	test_small_pdf_generation.passed \
#	test_large_pdf_generation.passed \
#	testSymbolicSubstitution.passed
##am__append_21 = testSmtWideConstant-z3exe.passed
##am__append_22 = testSmtWideConstant-z3lib.passed
#am__append_23 = testPeekRegister.passed \
#	testDataBlockOwnership.passed \
#	testSRecords.passed \
#	testDisassembler-ppc32.passed \
#	testDisassembler-ppc64a.passed \
#	testDisassembler-ppc64b.passed \
#	testDisassembler-a64.passed
subdir = tests/nonsmoke/functional/BinaryAnalysis
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acmacros/canonicalize-symlink.m4 \
	$(top_srcdir)/acmacros/compiler-ar.m4 \
	$(top_srcdir)/acmacros/compiler-id.m4 \
	$(top_srcdir)/acmacros/configure-log.m4 \
	$(top_srcdir)/acmacros/pkg.m4 $(top_srcdir)/acmacros/upc.m4 \
	$(top_srcdir)/config/EDG.m4 $(top_srcdir)/config/ROSE.m4 \
	$(top_srcdir)/config/ac_pkg_swig.m4 \
	$(top_srcdir)/config/acinclude.m4 \
	$(top_srcdir)/config/ax_boost_base.m4 \
	$(top_srcdir)/config/ax_boost_chrono.m4 \
	$(top_srcdir)/config/ax_boost_date_time.m4 \
	$(top_srcdir)/config/ax_boost_filesystem.m4 \
	$(top_srcdir)/config/ax_boost_iostreams.m4 \
	$(top_srcdir)/config/ax_boost_program_options.m4 \
	$(top_srcdir)/config/ax_boost_random.m4 \
	$(top_srcdir)/config/ax_boost_regex.m4 \
	$(top_srcdir)/config/ax_boost_serialization.m4 \
	$(top_srcdir)/config/ax_boost_system.m4 \
	$(top_srcdir)/config/ax_boost_thread.m4 \
	$(top_srcdir)/config/ax_boost_wave.m4 \
	$(top_srcdir)/config/ax_compare_version.m4 \
	$(top_srcdir)/config/ax_compiler_vendor.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_11.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_14.m4 \
	$(top_srcdir)/config/ax_lib_mysql.m4 \
	$(top_srcdir)/config/ax_lib_sqlite3.m4 \
	$(top_srcdir)/config/ax_lib_xerces.m4 \
	$(top_srcdir)/config/ax_prog_bison_version.m4 \
	$(top_srcdir)/config/ax_python_devel.m4 \
	$(top_srcdir)/config/ax_with_prog.m4 \
	$(top_srcdir)/config/choose-backend-compiler.m4 \
	$(top_srcdir)/config/compiler-defs.m4 \
	$(top_srcdir)/config/determine-os.m4 \
	$(top_srcdir)/config/enable-rosehpct.m4 \
	$(top_srcdir)/config/generate-backend-compiler-specific-headers.m4 \
	$(top_srcdir)/config/libtool.m4 $(top_srcdir)/config/libxml.m4 \
	$(top_srcdir)/config/ltargz.m4 $(top_srcdir)/config/ltdl.m4 \
	$(top_srcdir)/config/ltoptions.m4 \
	$(top_srcdir)/config/ltsugar.m4 \
	$(top_srcdir)/config/ltversion.m4 \
	$(top_srcdir)/config/lt~obsolete.m4 \
	$(top_srcdir)/config/mdl_have_opengl_2014.m4 \
	$(top_srcdir)/config/qrose_indigo_1.m4 \
	$(top_srcdir)/config/qrose_indigo_1_windows.m4 \
	$(top_srcdir)/config/support-GraphViz.m4 \
	$(top_srcdir)/config/support-IntelPin.m4 \
	$(top_srcdir)/config/support-accelerator.m4 \
	$(top_srcdir)/config/support-aterm.m4 \
	$(top_srcdir)/config/support-backend-x10.m4 \
	$(top_srcdir)/config/support-bddbddb.m4 \
	$(top_srcdir)/config/support-binary.m4 \
	$(top_srcdir)/config/support-bison.m4 \
	$(top_srcdir)/config/support-blacklist.m4 \
	$(top_srcdir)/config/support-boost.m4 \
	$(top_srcdir)/config/support-capstone.m4 \
	$(top_srcdir)/config/support-clang.m4 \
	$(top_srcdir)/config/support-cobol.m4 \
	$(top_srcdir)/config/support-compass2.m4 \
	$(top_srcdir)/config/support-compiler-features.m4 \
	$(top_srcdir)/config/support-cuda.m4 \
	$(top_srcdir)/config/support-doxygen.m4 \
	$(top_srcdir)/config/support-dwarf.m4 \
	$(top_srcdir)/config/support-edg-debugging.m4 \
	$(top_srcdir)/config/support-edg.m4 \
	$(top_srcdir)/config/support-elf.m4 \
	$(top_srcdir)/config/support-fatal-rose-warnings.m4 \
	$(top_srcdir)/config/support-flang.m4 \
	$(top_srcdir)/config/support-gcc-omp.m4 \
	$(top_srcdir)/config/support-gcrypt.m4 \
	$(top_srcdir)/config/support-gmp.m4 \
	$(top_srcdir)/config/support-gnat.m4 \
	$(top_srcdir)/config/support-gomp-omp.m4 \
	$(top_srcdir)/config/support-haskell.m4 \
	$(top_srcdir)/config/support-i386.m4 \
	$(top_srcdir)/config/support-ida.m4 \
	$(top_srcdir)/config/support-insure.m4 \
	$(top_srcdir)/config/support-isl.m4 \
	$(top_srcdir)/config/support-java.m4 \
	$(top_srcdir)/config/support-languages.m4 \
	$(top_srcdir)/config/support-lcov.m4 \
	$(top_srcdir)/config/support-libffi.m4 \
	$(top_srcdir)/config/support-libharu.m4 \
	$(top_srcdir)/config/support-libpqxx.m4 \
	$(top_srcdir)/config/support-llvm.m4 \
	$(top_srcdir)/config/support-magic.m4 \
	$(top_srcdir)/config/support-maple.m4 \
	$(top_srcdir)/config/support-mint.m4 \
	$(top_srcdir)/config/support-mpi.m4 \
	$(top_srcdir)/config/support-octave.m4 \
	$(top_srcdir)/config/support-ofp.m4 \
	$(top_srcdir)/config/support-omp.m4 \
	$(top_srcdir)/config/support-php.m4 \
	$(top_srcdir)/config/support-pocc.m4 \
	$(top_srcdir)/config/support-projects.m4 \
	$(top_srcdir)/config/support-purify.m4 \
	$(top_srcdir)/config/support-python-api.m4 \
	$(top_srcdir)/config/support-python.m4 \
	$(top_srcdir)/config/support-readline.m4 \
	$(top_srcdir)/config/support-rose.m4 \
	$(top_srcdir)/config/support-rted.m4 \
	$(top_srcdir)/config/support-rtedupc.m4 \
	$(top_srcdir)/config/support-sanitizer.m4 \
	$(top_srcdir)/config/support-sat.m4 \
	$(top_srcdir)/config/support-spot.m4 \
	$(top_srcdir)/config/support-ssl.m4 \
	$(top_srcdir)/config/support-stratego.m4 \
	$(top_srcdir)/config/support-summary.m4 \
	$(top_srcdir)/config/support-swipl.m4 \
	$(top_srcdir)/config/support-valgrind.m4 \
	$(top_srcdir)/config/support-vectorization.m4 \
	$(top_srcdir)/config/support-visualization.m4 \
	$(top_srcdir)/config/support-windows.m4 \
	$(top_srcdir)/config/support-x10.m4 \
	$(top_srcdir)/config/support-yaml.m4 \
	$(top_srcdir)/config/support-yices.m4 \
	$(top_srcdir)/config/support-z3.m4 \
	$(top_srcdir)/config/support_POET.m4 \
	$(top_srcdir)/config/swig_enable_cxx.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/rose_config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
#am__EXEEXT_1 = conditionalDisable$(EXEEXT) \
#	isA64Disabled$(EXEEXT) \
#	testSymbolicExprParser$(EXEEXT) \
#	execFormatsTest$(EXEEXT) \
#	testControlFlow$(EXEEXT) \
#	cfg2$(EXEEXT) \
#	testFunctionCall$(EXEEXT) \
#	testElfStrtab$(EXEEXT) \
#	testElfByteOrder$(EXEEXT) \
#	testElfWordSize$(EXEEXT) \
#	testElfSchulz$(EXEEXT) \
#	testElfConstruct$(EXEEXT) \
#	testPeConstruct$(EXEEXT) \
#	shiftResizeSection$(EXEEXT) \
#	testEtherInsns$(EXEEXT) \
#	functionBoundaries$(EXEEXT) \
#	expandCoreDump$(EXEEXT) \
#	rot13$(EXEEXT) \
#	testAssembler$(EXEEXT) \
#	testAstIO$(EXEEXT) \
#	testAstNeuter$(EXEEXT) \
#	testRegisters$(EXEEXT) \
#	testReadPastEOF$(EXEEXT)
##am__EXEEXT_2 = testLibraryDb$(EXEEXT)
#am__EXEEXT_3 = testPeImports$(EXEEXT) \
#	cory002$(EXEEXT) \
#	cory003$(EXEEXT) \
#	cory004$(EXEEXT) \
#	cory006$(EXEEXT) \
#	cory007$(EXEEXT) \
#	cory008$(EXEEXT) \
#	cory009$(EXEEXT) \
#	testSymReadWrite$(EXEEXT) \
#	testWorkList$(EXEEXT)
#am__EXEEXT_4 = testMap$(EXEEXT)
#am__EXEEXT_5 = testPointerDetection$(EXEEXT) \
#	testCallDetection$(EXEEXT) \
#	testReturnsValue$(EXEEXT) \
#	testBitPattern$(EXEEXT) \
#	testRNG$(EXEEXT) \
#	testSymbolicSimplification$(EXEEXT) \
#	testSymbolicFlags$(EXEEXT) \
#	verifySemantics$(EXEEXT) \
#	testDominance$(EXEEXT) \
#	nullSemantics2$(EXEEXT) \
#	partialSymbolicSemantics2$(EXEEXT) \
#	intervalSemantics2$(EXEEXT) \
#	symbolicSemantics2$(EXEEXT) \
#	traceSymbolicSemantics2$(EXEEXT) \
#	yicesSemanticsExe2$(EXEEXT) \
#	yicesSemanticsLib2$(EXEEXT) \
#	z3SemanticsExe2$(EXEEXT) \
#	z3SemanticsLib2$(EXEEXT) \
#	semanticsSubclassing$(EXEEXT) \
#	nullSemanticsSpeed2$(EXEEXT) \
#	partialSymbolicSemanticsSpeed2$(EXEEXT) \
#	symbolicSemanticsSpeed2$(EXEEXT) \
#	intervalSemanticsSpeed2$(EXEEXT) \
#	multiSemanticsSpeed2$(EXEEXT) \
#	llvmTranscoder$(EXEEXT) \
#	taintedFlow$(EXEEXT) \
#	testNoop$(EXEEXT) \
#	testStaticSemantics$(EXEEXT) \
#	testLazyInitialStates$(EXEEXT) \
#	testRandomInput$(EXEEXT) \
#	testSymbolicSubstitution$(EXEEXT) \
#	testSmtWideConstant$(EXEEXT) \
#	testPeekRegister$(EXEEXT) \
#	testDataBlockOwnership$(EXEEXT) \
#	testSRecords$(EXEEXT) \
#	testDisassembler$(EXEEXT)
PROGRAMS = $(noinst_PROGRAMS)
am__cfg2_SOURCES_DIST = cfg2.C
#am_cfg2_OBJECTS =  \
#	cfg2.$(OBJEXT)
cfg2_OBJECTS = $(am_cfg2_OBJECTS)
am__DEPENDENCIES_1 =
#am__DEPENDENCIES_2 =  \
#	$(am__DEPENDENCIES_1)
am__DEPENDENCIES_3 = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
#am__DEPENDENCIES_4 = $(php_path)/lib/libphc.so \
#	$(php_path)/lib/libphp5.so \
#	$(am__DEPENDENCIES_1)
#am__DEPENDENCIES_5 = $(am__DEPENDENCIES_1)
#am__DEPENDENCIES_6 =  \
#	$(am__DEPENDENCIES_1)
#am__DEPENDENCIES_7 =  \
#	$(am__DEPENDENCIES_1)
am__DEPENDENCIES_8 = $(abspath $(top_builddir)/src/librose.la) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_2) \
	$(am__DEPENDENCIES_3) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(ROSE_YICES_LIBS_WITH_PATH) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_4) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(ROSE_GUI_LIBS_WITH_PATH) $(am__DEPENDENCIES_5) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_6) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_7)
am__DEPENDENCIES_9 = $(am__DEPENDENCIES_8)
#cfg2_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
am__conditionalDisable_SOURCES_DIST = conditionalDisable.C
#am_conditionalDisable_OBJECTS = conditionalDisable.$(OBJEXT)
conditionalDisable_OBJECTS = $(am_conditionalDisable_OBJECTS)
#conditionalDisable_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9)
am__cory002_SOURCES_DIST = cory002.C
#am_cory002_OBJECTS =  \
#	cory002.$(OBJEXT)
cory002_OBJECTS = $(am_cory002_OBJECTS)
#cory002_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__cory003_SOURCES_DIST = cory003.C
#am_cory003_OBJECTS =  \
#	cory003.$(OBJEXT)
cory003_OBJECTS = $(am_cory003_OBJECTS)
#cory003_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__cory004_SOURCES_DIST = cory004.C
#am_cory004_OBJECTS =  \
#	cory004.$(OBJEXT)
cory004_OBJECTS = $(am_cory004_OBJECTS)
#cory004_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__cory006_SOURCES_DIST = cory006.C
#am_cory006_OBJECTS =  \
#	cory006.$(OBJEXT)
cory006_OBJECTS = $(am_cory006_OBJECTS)
#cory006_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__cory007_SOURCES_DIST = cory007.C
#am_cory007_OBJECTS =  \
#	cory007.$(OBJEXT)
cory007_OBJECTS = $(am_cory007_OBJECTS)
#cory007_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__cory008_SOURCES_DIST = cory008.C
#am_cory008_OBJECTS =  \
#	cory008.$(OBJEXT)
cory008_OBJECTS = $(am_cory008_OBJECTS)
#cory008_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__cory009_SOURCES_DIST = cory009.C
#am_cory009_OBJECTS =  \
#	cory009.$(OBJEXT)
cory009_OBJECTS = $(am_cory009_OBJECTS)
#cory009_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__execFormatsTest_SOURCES_DIST = execFormatsTest.C
#am_execFormatsTest_OBJECTS = execFormatsTest.$(OBJEXT)
execFormatsTest_OBJECTS = $(am_execFormatsTest_OBJECTS)
#execFormatsTest_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__expandCoreDump_SOURCES_DIST = expandCoreDump.C
#am_expandCoreDump_OBJECTS = expandCoreDump.$(OBJEXT)
expandCoreDump_OBJECTS = $(am_expandCoreDump_OBJECTS)
#expandCoreDump_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__functionBoundaries_SOURCES_DIST = functionBoundaries.C
#am_functionBoundaries_OBJECTS = functionBoundaries.$(OBJEXT)
functionBoundaries_OBJECTS = $(am_functionBoundaries_OBJECTS)
#functionBoundaries_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__intervalSemantics2_SOURCES_DIST = semantics.C
#am_intervalSemantics2_OBJECTS = intervalSemantics2-semantics.$(OBJEXT)
intervalSemantics2_OBJECTS = $(am_intervalSemantics2_OBJECTS)
#intervalSemantics2_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__intervalSemanticsSpeed2_SOURCES_DIST = semanticsSpeed.C
#am_intervalSemanticsSpeed2_OBJECTS = intervalSemanticsSpeed2-semanticsSpeed.$(OBJEXT)
intervalSemanticsSpeed2_OBJECTS =  \
	$(am_intervalSemanticsSpeed2_OBJECTS)
#intervalSemanticsSpeed2_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__isA64Disabled_SOURCES_DIST = isA64Disabled.C
#am_isA64Disabled_OBJECTS = isA64Disabled.$(OBJEXT)
isA64Disabled_OBJECTS = $(am_isA64Disabled_OBJECTS)
#isA64Disabled_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9)
am__llvmTranscoder_SOURCES_DIST = llvmTranscoder.C
#am_llvmTranscoder_OBJECTS = llvmTranscoder.$(OBJEXT)
llvmTranscoder_OBJECTS = $(am_llvmTranscoder_OBJECTS)
#llvmTranscoder_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__multiSemanticsSpeed2_SOURCES_DIST = semanticsSpeed.C
#am_multiSemanticsSpeed2_OBJECTS = multiSemanticsSpeed2-semanticsSpeed.$(OBJEXT)
multiSemanticsSpeed2_OBJECTS = $(am_multiSemanticsSpeed2_OBJECTS)
#multiSemanticsSpeed2_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__nullSemantics2_SOURCES_DIST = semantics.C
#am_nullSemantics2_OBJECTS = nullSemantics2-semantics.$(OBJEXT)
nullSemantics2_OBJECTS = $(am_nullSemantics2_OBJECTS)
#nullSemantics2_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__nullSemanticsSpeed2_SOURCES_DIST = semanticsSpeed.C
#am_nullSemanticsSpeed2_OBJECTS = nullSemanticsSpeed2-semanticsSpeed.$(OBJEXT)
nullSemanticsSpeed2_OBJECTS = $(am_nullSemanticsSpeed2_OBJECTS)
#nullSemanticsSpeed2_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__partialSymbolicSemantics2_SOURCES_DIST = semantics.C
#am_partialSymbolicSemantics2_OBJECTS = partialSymbolicSemantics2-semantics.$(OBJEXT)
partialSymbolicSemantics2_OBJECTS =  \
	$(am_partialSymbolicSemantics2_OBJECTS)
#partialSymbolicSemantics2_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__partialSymbolicSemanticsSpeed2_SOURCES_DIST = semanticsSpeed.C
#am_partialSymbolicSemanticsSpeed2_OBJECTS = partialSymbolicSemanticsSpeed2-semanticsSpeed.$(OBJEXT)
partialSymbolicSemanticsSpeed2_OBJECTS =  \
	$(am_partialSymbolicSemanticsSpeed2_OBJECTS)
#partialSymbolicSemanticsSpeed2_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__rot13_SOURCES_DIST = rot13.C
#am_rot13_OBJECTS =  \
#	rot13.$(OBJEXT)
rot13_OBJECTS = $(am_rot13_OBJECTS)
rot13_LDADD = $(LDADD)
am__semanticsSubclassing_SOURCES_DIST = semanticsSubclassing.C
#am_semanticsSubclassing_OBJECTS = semanticsSubclassing.$(OBJEXT)
semanticsSubclassing_OBJECTS = $(am_semanticsSubclassing_OBJECTS)
#semanticsSubclassing_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__shiftResizeSection_SOURCES_DIST = shiftResizeSection.C
#am_shiftResizeSection_OBJECTS = shiftResizeSection.$(OBJEXT)
shiftResizeSection_OBJECTS = $(am_shiftResizeSection_OBJECTS)
#shiftResizeSection_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__symbolicSemantics2_SOURCES_DIST = semantics.C
#am_symbolicSemantics2_OBJECTS = symbolicSemantics2-semantics.$(OBJEXT)
symbolicSemantics2_OBJECTS = $(am_symbolicSemantics2_OBJECTS)
#symbolicSemantics2_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__symbolicSemanticsSpeed2_SOURCES_DIST = semanticsSpeed.C
#am_symbolicSemanticsSpeed2_OBJECTS = symbolicSemanticsSpeed2-semanticsSpeed.$(OBJEXT)
symbolicSemanticsSpeed2_OBJECTS =  \
	$(am_symbolicSemanticsSpeed2_OBJECTS)
#symbolicSemanticsSpeed2_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__taintedFlow_SOURCES_DIST = taintedFlow.C
#am_taintedFlow_OBJECTS = taintedFlow.$(OBJEXT)
taintedFlow_OBJECTS = $(am_taintedFlow_OBJECTS)
#taintedFlow_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testAssembler_SOURCES_DIST = testAssembler.C
#am_testAssembler_OBJECTS = testAssembler.$(OBJEXT)
testAssembler_OBJECTS = $(am_testAssembler_OBJECTS)
#testAssembler_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testAstIO_SOURCES_DIST = testAstIO.C
#am_testAstIO_OBJECTS =  \
#	testAstIO.$(OBJEXT)
testAstIO_OBJECTS = $(am_testAstIO_OBJECTS)
#testAstIO_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testAstNeuter_SOURCES_DIST = testAstNeuter.C
#am_testAstNeuter_OBJECTS = testAstNeuter.$(OBJEXT)
testAstNeuter_OBJECTS = $(am_testAstNeuter_OBJECTS)
#testAstNeuter_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testBitPattern_SOURCES_DIST = testBitPattern.C
#am_testBitPattern_OBJECTS = testBitPattern.$(OBJEXT)
testBitPattern_OBJECTS = $(am_testBitPattern_OBJECTS)
#testBitPattern_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testCallDetection_SOURCES_DIST = testCallDetection.C
#am_testCallDetection_OBJECTS = testCallDetection.$(OBJEXT)
testCallDetection_OBJECTS = $(am_testCallDetection_OBJECTS)
#testCallDetection_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testControlFlow_SOURCES_DIST = testControlFlow.C
#am_testControlFlow_OBJECTS = testControlFlow.$(OBJEXT)
testControlFlow_OBJECTS = $(am_testControlFlow_OBJECTS)
#testControlFlow_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testDataBlockOwnership_SOURCES_DIST = testDataBlockOwnership.C
#am_testDataBlockOwnership_OBJECTS = testDataBlockOwnership.$(OBJEXT)
testDataBlockOwnership_OBJECTS = $(am_testDataBlockOwnership_OBJECTS)
#testDataBlockOwnership_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testDisassembler_SOURCES_DIST = testDisassembler.C
#am_testDisassembler_OBJECTS = testDisassembler.$(OBJEXT)
testDisassembler_OBJECTS = $(am_testDisassembler_OBJECTS)
#testDisassembler_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testDominance_SOURCES_DIST = testDominance.C
#am_testDominance_OBJECTS = testDominance-testDominance.$(OBJEXT)
testDominance_OBJECTS = $(am_testDominance_OBJECTS)
#testDominance_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testElfByteOrder_SOURCES_DIST = testElfByteOrder.C
#am_testElfByteOrder_OBJECTS = testElfByteOrder.$(OBJEXT)
testElfByteOrder_OBJECTS = $(am_testElfByteOrder_OBJECTS)
#testElfByteOrder_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testElfConstruct_SOURCES_DIST = testElfConstruct.C
#am_testElfConstruct_OBJECTS = testElfConstruct.$(OBJEXT)
testElfConstruct_OBJECTS = $(am_testElfConstruct_OBJECTS)
#testElfConstruct_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testElfSchulz_SOURCES_DIST = testElfSchulz.C
#am_testElfSchulz_OBJECTS = testElfSchulz.$(OBJEXT)
testElfSchulz_OBJECTS = $(am_testElfSchulz_OBJECTS)
#testElfSchulz_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testElfStrtab_SOURCES_DIST = testElfStrtab.C
#am_testElfStrtab_OBJECTS = testElfStrtab.$(OBJEXT)
testElfStrtab_OBJECTS = $(am_testElfStrtab_OBJECTS)
#testElfStrtab_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testElfWordSize_SOURCES_DIST = testElfWordSize.C
#am_testElfWordSize_OBJECTS = testElfWordSize.$(OBJEXT)
testElfWordSize_OBJECTS = $(am_testElfWordSize_OBJECTS)
#testElfWordSize_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testEtherInsns_SOURCES_DIST = testEtherInsns.C
#am_testEtherInsns_OBJECTS = testEtherInsns.$(OBJEXT)
testEtherInsns_OBJECTS = $(am_testEtherInsns_OBJECTS)
#testEtherInsns_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testFunctionCall_SOURCES_DIST = testFunctionCall.C
#am_testFunctionCall_OBJECTS = testFunctionCall.$(OBJEXT)
testFunctionCall_OBJECTS = $(am_testFunctionCall_OBJECTS)
#testFunctionCall_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testLazyInitialStates_SOURCES_DIST = testLazyInitialStates.C
#am_testLazyInitialStates_OBJECTS = testLazyInitialStates.$(OBJEXT)
testLazyInitialStates_OBJECTS = $(am_testLazyInitialStates_OBJECTS)
#testLazyInitialStates_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testLibraryDb_SOURCES_DIST = testLibraryDb.C
##am_testLibraryDb_OBJECTS = testLibraryDb.$(OBJEXT)
testLibraryDb_OBJECTS = $(am_testLibraryDb_OBJECTS)
##testLibraryDb_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testMap_SOURCES_DIST = testMap.C
#am_testMap_OBJECTS = testMap.$(OBJEXT)
testMap_OBJECTS = $(am_testMap_OBJECTS)
#testMap_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testNoop_SOURCES_DIST = testNoop.C
#am_testNoop_OBJECTS =  \
#	testNoop.$(OBJEXT)
testNoop_OBJECTS = $(am_testNoop_OBJECTS)
#testNoop_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9)
am__testPeConstruct_SOURCES_DIST = testPeConstruct.C
#am_testPeConstruct_OBJECTS = testPeConstruct.$(OBJEXT)
testPeConstruct_OBJECTS = $(am_testPeConstruct_OBJECTS)
#testPeConstruct_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testPeImports_SOURCES_DIST = testPeImports.C
#am_testPeImports_OBJECTS = testPeImports.$(OBJEXT)
testPeImports_OBJECTS = $(am_testPeImports_OBJECTS)
#testPeImports_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testPeekRegister_SOURCES_DIST = testPeekRegister.C
#am_testPeekRegister_OBJECTS = testPeekRegister.$(OBJEXT)
testPeekRegister_OBJECTS = $(am_testPeekRegister_OBJECTS)
#testPeekRegister_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testPointerDetection_SOURCES_DIST = testPointerDetection.C
#am_testPointerDetection_OBJECTS = testPointerDetection.$(OBJEXT)
testPointerDetection_OBJECTS = $(am_testPointerDetection_OBJECTS)
#testPointerDetection_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testRNG_SOURCES_DIST = testRNG.C
#am_testRNG_OBJECTS =  \
#	testRNG.$(OBJEXT)
testRNG_OBJECTS = $(am_testRNG_OBJECTS)
#testRNG_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testRandomInput_SOURCES_DIST = testRandomInput.C
#am_testRandomInput_OBJECTS = testRandomInput.$(OBJEXT)
testRandomInput_OBJECTS = $(am_testRandomInput_OBJECTS)
#testRandomInput_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testReadPastEOF_SOURCES_DIST = testReadPastEOF.C
#am_testReadPastEOF_OBJECTS = testReadPastEOF.$(OBJEXT)
testReadPastEOF_OBJECTS = $(am_testReadPastEOF_OBJECTS)
#testReadPastEOF_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testRegisters_SOURCES_DIST = testRegisters.C
#am_testRegisters_OBJECTS = testRegisters.$(OBJEXT)
testRegisters_OBJECTS = $(am_testRegisters_OBJECTS)
#testRegisters_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__testReturnsValue_SOURCES_DIST = testReturnsValue.C
#am_testReturnsValue_OBJECTS = testReturnsValue-testReturnsValue.$(OBJEXT)
testReturnsValue_OBJECTS = $(am_testReturnsValue_OBJECTS)
#testReturnsValue_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testSRecords_SOURCES_DIST = testSRecords.C
#am_testSRecords_OBJECTS = testSRecords.$(OBJEXT)
testSRecords_OBJECTS = $(am_testSRecords_OBJECTS)
#testSRecords_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testSmtWideConstant_SOURCES_DIST = testSmtWideConstant.C
#am_testSmtWideConstant_OBJECTS = testSmtWideConstant.$(OBJEXT)
testSmtWideConstant_OBJECTS = $(am_testSmtWideConstant_OBJECTS)
#testSmtWideConstant_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testStaticSemantics_SOURCES_DIST = testStaticSemantics.C
#am_testStaticSemantics_OBJECTS = testStaticSemantics.$(OBJEXT)
testStaticSemantics_OBJECTS = $(am_testStaticSemantics_OBJECTS)
#testStaticSemantics_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testSymReadWrite_SOURCES_DIST = testSymReadWrite.C
#am_testSymReadWrite_OBJECTS = testSymReadWrite.$(OBJEXT)
testSymReadWrite_OBJECTS = $(am_testSymReadWrite_OBJECTS)
#testSymReadWrite_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testSymbolicExprParser_SOURCES_DIST = testSymbolicExprParser.C
#am_testSymbolicExprParser_OBJECTS = testSymbolicExprParser.$(OBJEXT)
testSymbolicExprParser_OBJECTS = $(am_testSymbolicExprParser_OBJECTS)
#testSymbolicExprParser_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9)
am__testSymbolicFlags_SOURCES_DIST = testSymbolicFlags.C
#am_testSymbolicFlags_OBJECTS = testSymbolicFlags.$(OBJEXT)
testSymbolicFlags_OBJECTS = $(am_testSymbolicFlags_OBJECTS)
#testSymbolicFlags_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testSymbolicSimplification_SOURCES_DIST =  \
	testSymbolicSimplification.C
#am_testSymbolicSimplification_OBJECTS = testSymbolicSimplification.$(OBJEXT)
testSymbolicSimplification_OBJECTS =  \
	$(am_testSymbolicSimplification_OBJECTS)
#testSymbolicSimplification_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testSymbolicSubstitution_SOURCES_DIST =  \
	testSymbolicSubstitution.C
#am_testSymbolicSubstitution_OBJECTS = testSymbolicSubstitution.$(OBJEXT)
testSymbolicSubstitution_OBJECTS =  \
	$(am_testSymbolicSubstitution_OBJECTS)
#testSymbolicSubstitution_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__testWorkList_SOURCES_DIST = testWorkList.C
#am_testWorkList_OBJECTS = testWorkList.$(OBJEXT)
testWorkList_OBJECTS = $(am_testWorkList_OBJECTS)
#testWorkList_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__traceSymbolicSemantics2_SOURCES_DIST = semantics.C
#am_traceSymbolicSemantics2_OBJECTS = traceSymbolicSemantics2-semantics.$(OBJEXT)
traceSymbolicSemantics2_OBJECTS =  \
	$(am_traceSymbolicSemantics2_OBJECTS)
#traceSymbolicSemantics2_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__verifySemantics_SOURCES_DIST = verifySemantics.C
#am_verifySemantics_OBJECTS = verifySemantics.$(OBJEXT)
verifySemantics_OBJECTS = $(am_verifySemantics_OBJECTS)
#verifySemantics_DEPENDENCIES = $(am__DEPENDENCIES_9)
am__yicesSemanticsExe2_SOURCES_DIST = semantics.C
#am_yicesSemanticsExe2_OBJECTS = yicesSemanticsExe2-semantics.$(OBJEXT)
yicesSemanticsExe2_OBJECTS = $(am_yicesSemanticsExe2_OBJECTS)
#yicesSemanticsExe2_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__yicesSemanticsLib2_SOURCES_DIST = semantics.C
#am_yicesSemanticsLib2_OBJECTS = yicesSemanticsLib2-semantics.$(OBJEXT)
yicesSemanticsLib2_OBJECTS = $(am_yicesSemanticsLib2_OBJECTS)
#yicesSemanticsLib2_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__z3SemanticsExe2_SOURCES_DIST = semantics.C
#am_z3SemanticsExe2_OBJECTS = z3SemanticsExe2-semantics.$(OBJEXT)
z3SemanticsExe2_OBJECTS = $(am_z3SemanticsExe2_OBJECTS)
#z3SemanticsExe2_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
am__z3SemanticsLib2_SOURCES_DIST = semantics.C
#am_z3SemanticsLib2_OBJECTS = z3SemanticsLib2-semantics.$(OBJEXT)
z3SemanticsLib2_OBJECTS = $(am_z3SemanticsLib2_OBJECTS)
#z3SemanticsLib2_DEPENDENCIES = $(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_9) \
#	$(am__DEPENDENCIES_1)
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp =
am__maybe_remake_depfiles =
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(cfg2_SOURCES) $(conditionalDisable_SOURCES) \
	$(cory002_SOURCES) $(cory003_SOURCES) $(cory004_SOURCES) \
	$(cory006_SOURCES) $(cory007_SOURCES) $(cory008_SOURCES) \
	$(cory009_SOURCES) $(execFormatsTest_SOURCES) \
	$(expandCoreDump_SOURCES) $(functionBoundaries_SOURCES) \
	$(intervalSemantics2_SOURCES) \
	$(intervalSemanticsSpeed2_SOURCES) $(isA64Disabled_SOURCES) \
	$(llvmTranscoder_SOURCES) $(multiSemanticsSpeed2_SOURCES) \
	$(nullSemantics2_SOURCES) $(nullSemanticsSpeed2_SOURCES) \
	$(partialSymbolicSemantics2_SOURCES) \
	$(partialSymbolicSemanticsSpeed2_SOURCES) $(rot13_SOURCES) \
	$(semanticsSubclassing_SOURCES) $(shiftResizeSection_SOURCES) \
	$(symbolicSemantics2_SOURCES) \
	$(symbolicSemanticsSpeed2_SOURCES) $(taintedFlow_SOURCES) \
	$(testAssembler_SOURCES) $(testAstIO_SOURCES) \
	$(testAstNeuter_SOURCES) $(testBitPattern_SOURCES) \
	$(testCallDetection_SOURCES) $(testControlFlow_SOURCES) \
	$(testDataBlockOwnership_SOURCES) $(testDisassembler_SOURCES) \
	$(testDominance_SOURCES) $(testElfByteOrder_SOURCES) \
	$(testElfConstruct_SOURCES) $(testElfSchulz_SOURCES) \
	$(testElfStrtab_SOURCES) $(testElfWordSize_SOURCES) \
	$(testEtherInsns_SOURCES) $(testFunctionCall_SOURCES) \
	$(testLazyInitialStates_SOURCES) $(testLibraryDb_SOURCES) \
	$(testMap_SOURCES) $(testNoop_SOURCES) \
	$(testPeConstruct_SOURCES) $(testPeImports_SOURCES) \
	$(testPeekRegister_SOURCES) $(testPointerDetection_SOURCES) \
	$(testRNG_SOURCES) $(testRandomInput_SOURCES) \
	$(testReadPastEOF_SOURCES) $(testRegisters_SOURCES) \
	$(testReturnsValue_SOURCES) $(testSRecords_SOURCES) \
	$(testSmtWideConstant_SOURCES) $(testStaticSemantics_SOURCES) \
	$(testSymReadWrite_SOURCES) $(testSymbolicExprParser_SOURCES) \
	$(testSymbolicFlags_SOURCES) \
	$(testSymbolicSimplification_SOURCES) \
	$(testSymbolicSubstitution_SOURCES) $(testWorkList_SOURCES) \
	$(traceSymbolicSemantics2_SOURCES) $(verifySemantics_SOURCES) \
	$(yicesSemanticsExe2_SOURCES) $(yicesSemanticsLib2_SOURCES) \
	$(z3SemanticsExe2_SOURCES) $(z3SemanticsLib2_SOURCES)
DIST_SOURCES = $(am__cfg2_SOURCES_DIST) \
	$(am__conditionalDisable_SOURCES_DIST) \
	$(am__cory002_SOURCES_DIST) $(am__cory003_SOURCES_DIST) \
	$(am__cory004_SOURCES_DIST) $(am__cory006_SOURCES_DIST) \
	$(am__cory007_SOURCES_DIST) $(am__cory008_SOURCES_DIST) \
	$(am__cory009_SOURCES_DIST) \
	$(am__execFormatsTest_SOURCES_DIST) \
	$(am__expandCoreDump_SOURCES_DIST) \
	$(am__functionBoundaries_SOURCES_DIST) \
	$(am__intervalSemantics2_SOURCES_DIST) \
	$(am__intervalSemanticsSpeed2_SOURCES_DIST) \
	$(am__isA64Disabled_SOURCES_DIST) \
	$(am__llvmTranscoder_SOURCES_DIST) \
	$(am__multiSemanticsSpeed2_SOURCES_DIST) \
	$(am__nullSemantics2_SOURCES_DIST) \
	$(am__nullSemanticsSpeed2_SOURCES_DIST) \
	$(am__partialSymbolicSemantics2_SOURCES_DIST) \
	$(am__partialSymbolicSemanticsSpeed2_SOURCES_DIST) \
	$(am__rot13_SOURCES_DIST) \
	$(am__semanticsSubclassing_SOURCES_DIST) \
	$(am__shiftResizeSection_SOURCES_DIST) \
	$(am__symbolicSemantics2_SOURCES_DIST) \
	$(am__symbolicSemanticsSpeed2_SOURCES_DIST) \
	$(am__taintedFlow_SOURCES_DIST) \
	$(am__testAssembler_SOURCES_DIST) \
	$(am__testAstIO_SOURCES_DIST) \
	$(am__testAstNeuter_SOURCES_DIST) \
	$(am__testBitPattern_SOURCES_DIST) \
	$(am__testCallDetection_SOURCES_DIST) \
	$(am__testControlFlow_SOURCES_DIST) \
	$(am__testDataBlockOwnership_SOURCES_DIST) \
	$(am__testDisassembler_SOURCES_DIST) \
	$(am__testDominance_SOURCES_DIST) \
	$(am__testElfByteOrder_SOURCES_DIST) \
	$(am__testElfConstruct_SOURCES_DIST) \
	$(am__testElfSchulz_SOURCES_DIST) \
	$(am__testElfStrtab_SOURCES_DIST) \
	$(am__testElfWordSize_SOURCES_DIST) \
	$(am__testEtherInsns_SOURCES_DIST) \
	$(am__testFunctionCall_SOURCES_DIST) \
	$(am__testLazyInitialStates_SOURCES_DIST) \
	$(am__testLibraryDb_SOURCES_DIST) $(am__testMap_SOURCES_DIST) \
	$(am__testNoop_SOURCES_DIST) \
	$(am__testPeConstruct_SOURCES_DIST) \
	$(am__testPeImports_SOURCES_DIST) \
	$(am__testPeekRegister_SOURCES_DIST) \
	$(am__testPointerDetection_SOURCES_DIST) \
	$(am__testRNG_SOURCES_DIST) \
	$(am__testRandomInput_SOURCES_DIST) \
	$(am__testReadPastEOF_SOURCES_DIST) \
	$(am__testRegisters_SOURCES_DIST) \
	$(am__testReturnsValue_SOURCES_DIST) \
	$(am__testSRecords_SOURCES_DIST) \
	$(am__testSmtWideConstant_SOURCES_DIST) \
	$(am__testStaticSemantics_SOURCES_DIST) \
	$(am__testSymReadWrite_SOURCES_DIST) \
	$(am__testSymbolicExprParser_SOURCES_DIST) \
	$(am__testSymbolicFlags_SOURCES_DIST) \
	$(am__testSymbolicSimplification_SOURCES_DIST) \
	$(am__testSymbolicSubstitution_SOURCES_DIST) \
	$(am__testWorkList_SOURCES_DIST) \
	$(am__traceSymbolicSemantics2_SOURCES_DIST) \
	$(am__verifySemantics_SOURCES_DIST) \
	$(am__yicesSemanticsExe2_SOURCES_DIST) \
	$(am__yicesSemanticsLib2_SOURCES_DIST) \
	$(am__z3SemanticsExe2_SOURCES_DIST) \
	$(am__z3SemanticsLib2_SOURCES_DIST)
RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \
	ctags-recursive dvi-recursive html-recursive info-recursive \
	install-data-recursive install-dvi-recursive \
	install-exec-recursive install-html-recursive \
	install-info-recursive install-pdf-recursive \
	install-ps-recursive install-recursive installcheck-recursive \
	installdirs-recursive pdf-recursive ps-recursive \
	tags-recursive uninstall-recursive
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
am__recursive_targets = \
  $(RECURSIVE_TARGETS) \
  $(RECURSIVE_CLEAN_TARGETS) \
  $(am__extra_recursive_targets)
AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \
	distdir distdir-am
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
am__DIST_COMMON = $(srcdir)/Makefile.in \
	$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs \
	$(top_srcdir)/config/mkinstalldirs \
	$(top_srcdir)/tests/nonsmoke/specimens/binary/SpecimenSets.inc \
	$(top_srcdir)/tests/nonsmoke/specimens/binary/Specimens.inc
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
ABS_COMPASS2_XML_SRCDIR = /home/meltdown1995/roseRoot/rose-compiler/src/projects/compass2/share/xml
ACLOCAL = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing aclocal-1.16
AMTAR = 
AM_DEFAULT_VERBOSITY = 0
AR = ar
ARMA_PREFIX = 
ATERM_BIN_PATH = 
ATERM_INSTALL_PATH = 
ATERM_LIBRARY_PATH = 
AUTOCONF = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing autoconf
AUTOHEADER = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing autoheader
AUTOMAKE = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing automake-1.16
AUX_LINKER = 
AWK = mawk
Axx_INCLUDES = 
Axx_LIBS = 
BACKEND_ADA_COMPILER = gnat
BACKEND_COBOL_COMPILER = cobc
BACKEND_COMPILER_VERSION_MAJOR_NUMBER = 8
BACKEND_COMPILER_VERSION_MINOR_NUMBER = 4
BACKEND_COMPILER_VERSION_NAME = gnu
BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER = 0
BACKEND_CSHARP_COMPILER = mcs
BACKEND_CXX_COMPILER = g++
BACKEND_CXX_VENDOR_AND_VERSION2 = gnu-8.4
BACKEND_CXX_VENDOR_AND_VERSION3 = gnu-8.4.0
BACKEND_C_COMPILER = gcc
BACKEND_FORTRAN_COMPILER = gfortran
BACKEND_JAVA_COMPILER = javac
BACKEND_JOVIAL_COMPILER = default_jovial_compiler
BACKEND_MATLAB_COMPILER = octave
BACKEND_X10_COMPILER = 
BISON = /usr/bin/bison
BISON_VERSION = bison (GNU Bison) 3.7
BOOST_CHRONO_LIB = -lboost_chrono
BOOST_CPPFLAGS = -pthread -I/usr/include
BOOST_DATE_TIME_LIB = -lboost_date_time
BOOST_FILESYSTEM_LIB = -lboost_filesystem
BOOST_IOSTREAMS_LIB = -lboost_iostreams
BOOST_LDFLAGS = -pthread -L/usr/lib/x86_64-linux-gnu
BOOST_PROGRAM_OPTIONS_LIB = -lboost_program_options
BOOST_RANDOM_LIB = -lboost_random
BOOST_REGEX_LIB = -lboost_regex
BOOST_SERIALIZATION_LIB = -lboost_serialization
BOOST_SYSTEM_LIB = -lboost_system
BOOST_THREAD_LIB = -lboost_thread
BOOST_WAVE_LIB = -lboost_wave
CANDL_PATH = 
CC = gcc
CCDEPMODE = depmode=gcc3
CCLD = gcc
CFLAGS = -g -O2  -g -O2 -Wall -Wstrict-prototypes -Wmissing-prototypes
CFLAGS32 = no
CLANG_CXXFLAGS = 
CLANG_LDFLAGS = 
CLANG_LIBDIR = 
CLASSPATH = /home/meltdown1995/roseRoot/rose-compiler//src/src/3rdPartyLibraries/antlr-jars/antlr-3.5.2-complete.jar:/home/meltdown1995/roseRoot/rose-compiler//src/src/3rdPartyLibraries/fortran-parser/OpenFortranParser-20200819-JDK8.jar
CLOOG_PATH = 
COBPT_INSTALL_PATH = 
COBPT_LIBRARY_PATH = 
CPP = gcc -E

# DQ (9/27/2015): Added to support new use of AM_CPPFLAGS instead of INCLUDES
# (depreicated in automake and for which many warnings are generated).
CPPFLAGS = $(AM_CPPFLAGS)
CUDA_BIN_DIR = 
CUDA_INC_DIR = /home/meltdown1995/roseRoot/rose-compiler/build/include-staging/cuda_HEADERS/cuda-7.5/targets/x86_64-linux/include/
CUDA_LIB_DIR = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS =   -g -fno-var-tracking-assignments -Wno-misleading-indentation -O2 -Wall
CXXLD = g++
CXX_DEBUG = -g -fno-var-tracking-assignments -Wno-misleading-indentation
CXX_OPTIMIZE = -O2
CXX_SHARED_LIB_UPDATE = ${CXX} -shared -o
CXX_STATIC_LIB_UPDATE = ${AR} ruv
CXX_TEMPLATE_OBJECTS = 
CXX_TEMPLATE_REPOSITORY_PATH = $(top_builddir)/src
CXX_WARNINGS = -Wall
CYGPATH_W = echo
C_DEBUG = -g
C_OPTIMIZE = -O2
C_WARNINGS = -Wall -Wstrict-prototypes -Wmissing-prototypes
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLIB_PREFIX = 
DLLTOOL = false
DOXYGEN = 
DOXYGEN_ADDED_DIRECTORY_1 = @top_pwd@/src/frontend/SageIII
DOXYGEN_ADDED_DIRECTORY_2 = /home/meltdown1995/roseRoot/rose-compiler//src/src/frontend/SageIII
DOXYGEN_ENABLED_SECTIONS = documentUserVersionUsingDoxygen
DOXYGEN_EXTRACT_ALL = NO
DOXYGEN_EXTRACT_PRIVATE = NO
DOXYGEN_EXTRACT_STATIC = NO
DOXYGEN_HIDE_FRIEND_COMPOUNDS = YES
DOXYGEN_HIDE_UNDOC_CLASSES = NO
DOXYGEN_HIDE_UNDOC_MEMBERS = NO
DOXYGEN_INTERNAL_DOCS = NO
DOXYGEN_USE_TAG_FILE = 
DOXYINDEXER = 
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
ETHER_PREFIX = 
EXE = 
EXEEXT = 
F77 = f77
FC = gfortran
FCFLAGS = -g -O2
FFLAGS = 
FGREP = /usr/bin/grep -F
FLANG_INSTALL_PATH = 
FLANG_SOURCE_PATH = 
FLTK_include_path = 
FLTK_libs_path = 
FRONTEND_CXX_VENDOR_AND_VERSION2 = gnu-8
FRONTEND_CXX_VENDOR_AND_VERSION3 = gnu-8.4.0
GCC_MINOR_VERSION = 8
GCC_VERSION = 8
GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX = gnu-8.4
GEN_BE = sage_gen_be.o
GFORTRAN_PATH = /usr/bin/gfortran
GHCBIN = 
GLUT_CFLAGS = 
GLUT_LIBS = ${glut_path}
GLUT_include_path = 
GLUT_libs_path = 
GL_CFLAGS = 
GL_LIBS = 
GMP_INCLUDE_PATH = 
GMP_INSTALL_PATH = 
GMP_LIBRARY_PATH = 
GNAT_INCLUDES = 
GREP = /usr/bin/grep
GraphViz_include_path = 
GraphViz_libs_path = 
HAVE_CXX11 = 1
HAVE_CXX14 = 1
HS_CONFIG_OPTS = --prefix=/home/meltdown1995/roseRoot/rose-compiler//install --user
INCLTDL = 
INCLUDE_COMPASS_MAKEFILE_INC = include compass_makefile.inc
INDENT = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INSURE_OPTIONS = 
INTEL_FPP_PATH = 
ISL_INCLUDE_PATH = 
ISL_INSTALL_PATH = 
ISL_LIBRARY_PATH = 
IntelPin_path = 
JAR = 
JAVA = 
JAVAC = 
JAVA_JVM_INCLUDE = 
JAVA_JVM_LINK = 
JAVA_JVM_PATH = 
JAVA_PATH = 
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LEX = flex
LEXLIB = 
LEX_OUTPUT_ROOT = lex.yy
LIBADD_DL = -ldl 
LIBADD_DLD_LINK = 
LIBADD_DLOPEN = -ldl
LIBADD_SHL_LOAD = 
LIBDWARF_CPPFLAGS = 
LIBDWARF_LDFLAGS = 
LIBDWARF_PREFIX = 
LIBELF_CPPFLAGS = 
LIBELF_LDFLAGS = 
LIBELF_PREFIX = 
LIBFFI_CFLAGS = 
LIBFFI_LIBS = 
LIBGCRYPT_CPPFLAGS = 
LIBGCRYPT_LDFLAGS = 
LIBGCRYPT_PREFIX = 
LIBLTDL = -lltdl
LIBOBJS = 
LIBREADLINE_INCLUDE_PATH = 
LIBREADLINE_INSTALL_PATH = 
LIBREADLINE_LIBRARY_PATH = 
LIBREADLINE_LIBS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LLVM_CONFIG = /bin/llvm-config
LLVM_CPPFLAGS =  -DLLVMVERSION=
LLVM_LDFLAGS =  -R
LLVM_LIBS =  
LN_S = ln -s
LTDLDEPS = 
LTDLINCL = 
LTDLOPEN = libltdl
LTLIBOBJS = 
LT_ARGZ_H = 
LT_CONFIG_H = rose_config.h
LT_DLLOADERS =  dlopen.la
LT_DLPREOPEN = -dlpreopen dlopen.la 
LT_SYS_LIBRARY_PATH = 
MAKEINFO = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing makeinfo
MANIFEST_TOOL = :
MAPLE_INCLUDES = 
MAPLE_LIBDIR = 
MAPLE_LIBS = 
MD5 = md5sum
MINT = $(top_builddir)/projects/mint/src/mint
MKDIR_P = /usr/bin/mkdir -p
MOC = NONE/moc
MPICC = not-found
MPICXX = not-found
MPIF77 = not-found
MPIFC = not-found
MYSQL_CFLAGS = 
MYSQL_CONFIG = 
MYSQL_INCLUDE = 
MYSQL_LDFLAGS = 
MYSQL_VERSION = 
NM = /usr/bin/nm -B
NMEDIT = 
NVCCBIN = 
OBJ = .o
OBJDUMP = objdump
OBJEXT = o
OCTAVE_PARSER_INSTALL_TARFILE = 
OPENCL_INC_DIR = 
OPENCL_LIB_DIR = 
OPEN_FORTRAN_PARSER_PATH = /src/3rdPartyLibraries/fortran-parser
OPTIONAL_PROJECTS =  AMReX-Translation BinaryAnalysisTools CodeProperties CodeThorn MatlabTranslation MatrixTesting OpenK Rose-To-LLVM RTC2 scalarization simulator2 SnippetTools TALCDataLayout traceAnalysis ZFPTool
OS_major_release_number = 20
OS_minor_release_number = 10
OS_release = 20.10
OS_vendor = Ubuntu
OTOOL = 
OTOOL64 = 
PACKAGE = rose
PACKAGE_BUGREPORT = 
PACKAGE_NAME = ROSE
PACKAGE_STRING = ROSE 0.11.13.0
PACKAGE_TARNAME = rose
PACKAGE_URL = 
PACKAGE_VERSION = 0.11.13.0
PACKAGE_VERSION_NUMERIC = 0.11.13.0
PATH_SEPARATOR = :
PERL = perl
PKG_CONFIG = /usr/bin/pkg-config
POET_INCL = 
POET_LIB = 
PPL_PATH = 
PURIFY_OPTIONS = -windows=no -recursion-depth-limit=40000 -chain-length=24 -first-only=yes -leaks-at-exit=no -inuse-at-exit=no -always-use-cache-dir=yes -cache-dir=/home/meltdown1995/tmp -best-effort 
PYTHON = 
PYTHON_CPPFLAGS = 
PYTHON_EXTRA_LDFLAGS = 
PYTHON_EXTRA_LIBS = 
PYTHON_LDFLAGS = 
PYTHON_ROOT = 
PYTHON_SITE_PKG = 
PYTHON_VERSION_MM = 
Pxx_INCLUDES = 
Pxx_LIBS = 
QROSE_PREFIX = 
QT_INCLUDES = -DQT3_SUPPORT -INONE/QtCore -INONE/QtGui -INONE/Qt3Support -INONE/QtXml -INONE
QT_LDFLAGS = -LNONE -lQtCore -lQtGui -lQt3Support -lQtXml -lQtUiTools
QT_VERSION = 
QT_VERSION_MAJOR = 
QT_VERSION_MINOR = 
RANLIB = ranlib
RCC = NONE/rcc
ROSEHPCT_DEP_INCLUDES = 
ROSEHPCT_DEP_LIBS = 
ROSE_BOOST_NORMAL_INCLUDE_PATH = -I/usr/include

# DQ (12/22/2008): Specification of Boost path for use with "-isystem" option (may be GNU
# specific).  We use this option only if the configuration of ROSE has detected a
# previously installed version of Boost (which we do not want to use).
# Note that only one of these will be non-empty makefile variables.
ROSE_BOOST_PREINCLUDE_PATH = 
ROSE_CAPSTONE_PREFIX = 
ROSE_EDG_MAJOR_VERSION_NUMBER = 5
ROSE_EDG_MINOR_VERSION_NUMBER = 0
ROSE_HOME = .
ROSE_LIBMAGIC_PREFIX = 
ROSE_LIBPQXX_PREFIX = 
ROSE_LSB_RELEASE = lsb_release
ROSE_OBJDUMP_PATH = objdump
ROSE_OFP_JAR_FILE = OpenFortranParser-20200819-JDK8.jar
ROSE_OFP_MAJOR_VERSION_NUMBER = 0
ROSE_OFP_MINOR_VERSION_NUMBER = 8
ROSE_OFP_PATCH_VERSION_NUMBER = 7
ROSE_OFP_VERSION_NUMBER = 20200819-JDK8
ROSE_PS2PDF_PATH = ps2pdf
ROSE_SUPPORT_GNU_EXTENSIONS = FALSE
ROSE_SUPPORT_MICROSOFT_EXTENSIONS = FALSE
ROSE_USE_CANDL = 
ROSE_USE_CLOOG = 
ROSE_USE_EDG_QUAD_FLOAT = 
ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT = 
ROSE_USE_PPL = 
ROSE_USE_SCOPLIB = 
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT = 
ROSE_WGET_PATH = wget
ROSE_WITH_MPI_CFLAGS = 
ROSE_WITH_MPI_CLDFLAGS = 
ROSE_WITH_MPI_CXXFLAGS = 
ROSE_WITH_MPI_CXXLDFLAGS = 
ROSE_WITH_MPI_F77FLAGS = 
ROSE_WITH_MPI_F77LDFLAGS = 
ROSE_WITH_MPI_FFLAGS = 
ROSE_WITH_MPI_FLDFLAGS = 
ROSE_YAML_PREFIX = 
ROSE_YICES = 
ROSE_YICES_PREFIX = 
ROSE_Z3_PREFIX = 
RT_LIBS = -ldl 
SCOPLIB_PATH = 
SED = sed
SET_MAKE = 
SHELL = /bin/bash
SPOT_INCLUDE_PATH = 
SPOT_INSTALL_PATH = 
SPOT_LIBRARY_PATH = 
SQLITE3_CFLAGS = 
SQLITE3_LDFLAGS = 
SQLITE3_VERSION = 
STRATEGO_BIN_PATH = 
STRATEGO_INSTALL_PATH = 
STRATEGO_LIBRARY_PATH = 
STRIP = strip
SWIG = echo "Error: SWIG is not installed. You should look at http://www.swig.org" ; false -c++
SWIG_LIB = 
SWIPLBIN = 
TCLSH = 
TEST_SMT_SOLVER = 
UIC = NONE/uic
UPC = 
UPCDEPMODE = 
UPCFLAGS = 
USING_WINDOWS = 0
VALGRIND_BINARY = /valgrind
VALGRIND_BIN_PATH = 
VALGRIND_INCLUDE_PATH = 
VALGRIND_INSTALL_PATH = 
VALGRIND_LIBRARY_PATH = 
VECTORIZATION = $(top_builddir)/projects/vectorization/src/vectorization
VERSION = 0.11.13.0
WT_PREFIX = no
X10_BIN_PATH = 
X10_INSTALL_PATH = 
X10_LIBRARY_PATH = 
X10_VERSION = 
XERCES_CPPFLAGS = 
XERCES_LDFLAGS = 
XERCES_LIBS = 
XERCES_VERSION = 
XMKMF = 
XML2_CONFIG = no
XML_CPPFLAGS = 
XML_LIBS = 
YACC = bison -y
YFLAGS = 
Z3BIN = 
Z3_INCLUDE_PATH = 
Z3_LIBRARY_PATH = 
Z3_PREFIX = 
abs_builddir = /home/meltdown1995/roseRoot/rose-compiler/build/tests/nonsmoke/functional/BinaryAnalysis
abs_srcdir = /home/meltdown1995/roseRoot/rose-compiler//src/tests/nonsmoke/functional/BinaryAnalysis
abs_top_builddir = /home/meltdown1995/roseRoot/rose-compiler/build
abs_top_srcdir = /home/meltdown1995/roseRoot/rose-compiler//src
absolute_path_srcdir = /home/meltdown1995/roseRoot/rose-compiler/src
ac_boost_path = /usr
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
ac_ct_F77 = f77
ac_ct_FC = gfortran
ac_ct_MPICXX = 
ac_ct_UPC = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = tar --format=posix -chf - "$$tardir"
am__untar = tar -xf -
bddbddb_path = 
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_triplet_without_redhat = x86_64-pc-linux-gnu
build_vendor = pc
builddir = .
configure_date = Wednesday December 23 22:42:41 2020
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
edg_union_struct_debugging_value = union
exec_prefix = ${prefix}
glut_path = 
gnat_home = 
gnat_path = 
gomp_omp_runtime_library_path = 
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
ida_path = 
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/install-sh
insure_BIN = 
insure_LIBS = 
insure_PREFIX = 
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
llvm_path = 
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
ltdl_LIBOBJS =  lt__strl.o
ltdl_LTLIBOBJS =  lt__strl.lo
mandir = ${datarootdir}/man
maple_path = 
mkdir_p = $(MKDIR_P)
mono_home = 
oldincludedir = /usr/include
omni_omp_runtime_support_path = 
optional_Visualization_subdirs = 
parallel_ast_traversal_omp_path = 
pdfdir = ${docdir}
php_path = 
poet_dir = 
prefix = /home/meltdown1995/roseRoot/rose-compiler//install
program_transform_name = s,x,x,
psdir = ${docdir}
purify_BIN = 
purify_INCLUDES = 
purify_LIBS = 
purify_PREFIX = 
res_top_src = /home/meltdown1995/roseRoot/rose-compiler/src
rosyln_home = 
rted_path = 
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = /home/meltdown1995/roseRoot/rose-compiler//src/tests/nonsmoke/functional/BinaryAnalysis
subdirs =  src/3rdPartyLibraries/libharu-2.1.0 libltdl
sys_symbol_underscore = no
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../../../
top_builddir = ../../../..
top_pwd = /home/meltdown1995/roseRoot/rose-compiler/build
top_srcdir = /home/meltdown1995/roseRoot/rose-compiler//src
wine_path = 

# SQLite is a simpler database to use than MySQL
#ROSE_SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS)
#SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS) -I$(top_srcdir)/src/roseExtensions/sqlite3x
#SQLITE_DATABASE_LIBS = $(SQLITE3_LDFLAGS)
#   ROSE_SQLITE_DATABASE_OBJS     = $(top_builddir)/src/roseExtensions/sqlite3x/*o
#ROSE_SQLITE_DATABASE_LIB_NAME = RoseSQLite3xDatabase
#ROSE_SQLITE_DATABASE_LIB_FILE = lib$(ROSE_SQLITE_DATABASE_LIB_NAME).la
#ROSE_SQLITE_DATABASE_LIBS = -l$(ROSE_SQLITE_DATABASE_LIB_NAME)
#ROSE_SIDEEFFECT_INCLUDE = -I$(top_srcdir)/src/midend/programAnalysis/sideEffectAnalysis
#Z3_LIB_NAME = z3
#Z3_LIB_FILE = lib$(Z3_LIB_NAME).so
#Z3_LIBS = -l$(Z3_LIB_NAME)
#Z3_INCLUDES = -I$(Z3_PREFIX)/include
#Z3_LIB_INCLUDES = -L$(Z3_PREFIX)/lib
#ROSE_Z3_INCLUDES = -I/include
#ROSE_Z3_LIBS = -lz3
#ROSE_Z3_LIBS_WITH_PATH = -L/lib -lz3

# This is properly handled by automake even when specified in an include file
EDG_LIBS = @EDG_LIBS@

# Conditional support for Gabriel's QRose GUI Library
#  ROSE_GUI_INCLUDE =   -I${QROSE_PREFIX}/include
#ROSE_GUI_INCLUDE = -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/Common -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/TreeBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/SourceBox

# ROSE_GUI_LIBS = -lqrose
#  ROSE_GUI_LIBS_WITH_PATH = -L${QROSE_PREFIX}/lib -lqrose
#  ROSE_GUI_LIBS_WITH_PATH =  -L${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/  -lqrose
#ROSE_GUI_LIBS_WITH_PATH = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la

# ROSE_GUI_LIB_FILE = libqrose.a
#ROSE_QT_INCLUDE = $(QT_INCLUDES)
# ROSE_QT_LIBS = -lqt
#ROSE_QT_LIBS_WITH_PATH = ${QT_LDFLAGS}
# ROSE_QT_LIB_FILE = libqt.a

# ROSE-HPCToolkit module
#ROSE_ROSEHPCT_INCLUDES = -I$(top_srcdir)/src/roseExtensions/roseHPCToolkit/include
#ROSE_ROSEHPCT_LIBS = -lrosehpct
#ROSE_ROSEHPCT_LIBS_WITH_PATH = $(top_builddir)/src/roseExtensions/roseHPCToolkit/src/librosehpct.la
# ROSE_ROSEHPCT_LIB_FILE = librosehpct.so

# ROSE-YICES Package (destributed by SRI as a static library)
#ROSE_YICES_INCLUDES = -I/include
#ROSE_YICES_LIBS = -lyices
#ROSE_YICES_LIBS_WITH_PATH = /lib/libyices.a

# YAML-CPP package for parsing YAML/JSON files
#ROSE_YAML_INCLUDES = -I/include
#ROSE_YAML_LIBS = -lyaml-cpp
#ROSE_YAML_LIBS_WITH_PATH = -L/lib -lyaml-cpp

# GNU readline
#ROSE_READLINE_INCLUDES = -I
#ROSE_READLINE_LIBS = 
#ROSE_READLINE_LIBS_WITH_PATH = -L $(ROSE_READLINE_LIBS)

# libmagic for identifying file types based on magic numbers
#ROSE_LIBMAGIC_INCLUDES = -I/include
#ROSE_LIBMAGIC_LIBS = -lmagic
#ROSE_LIBMAGIC_LIBS_WITH_PATH = -L/lib -lmagic

# PostgreSQL C++ API
#ROSE_LIBPQXX_INCLUDES = -I/include
#ROSE_LIBPQXX_LIBS = -lpqxx -lpq
#ROSE_LIBPQXX_LIBS_WITH_PATH = -L/lib -lpqxx -lpq

# Capstone disassembler
#ROSE_CAPSTONE_INCLUDES = -I/include
#ROSE_CAPSTONE_LIBS = -lcapstone
#ROSE_CAPSTONE_LIBS_WITH_PATH = -L/lib -lcapstone

# Math algorithms from http://dlib.net. This is a headers-only library neede by some binary analyses.
#ROSE_DLIB_INCLUDES = -I
#ROSE_DLIB_LIBS = 
#ROSE_DLIB_LIBS_WITH_PATH = 

# DQ (11/4/2016): Adding support for use of Address Sanitizer (for where the ROSE Test Handler (RTH) is used.
# Note the quotes and escapes that are required:
ADDRESS_SANITIZER_OPTIONS = "ASAN_OPTIONS=halt_on_error=0:symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=\`which llvm-symbolizer\`"

# DQ(11/4/2016): Need a version when not using the ROSE Test Handler (RTH):
NON_RTH_ADDRESS_SANITIZER_OPTIONS = ASAN_OPTIONS=halt_on_error=1:symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=`which llvm-symbolizer`
#ROSE_ELF_INCLUDES = 
#ROSE_ELF_LIBS_WITH_PATH = 

# ROSE gcrypt support (for things like md5, sha1, etc)
#ROSE_GCRYPT_INCLUDES = 
#ROSE_GCRYPT_LIBS_WITH_PATH = 

# ROSE-DWARF libdwarf support
#ROSE_DWARF_INCLUDES = 
#ROSE_DWARF_LIBS_WITH_PATH = 

# DQ (3/13/2009):
# If Dwarf is used with Intel Pin then reference the same copy of libdwarf.a (in the same
# directory).  However, it does NOT work to link both references to libdwarf into more
# than one dynamic (shared) library, so we need to link libdwarf dynamically.
# To avoid additional LD_LIBRARY_PATH requirements, we do so using rpath.
# To support this the libdwarf.so should be placed into $(INTEL_PIN_PATH)/intel64/lib-ext
# and the static libdwarf.a moved out (renamed) so that it will not be used.
# Note that this will also cause librose.so to use the shared library for
# dwarf when used with Intel Pin.
##ROSE_DWARF_LIBS_WITH_PATH = -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
# DQ (3/14/2009): This factors the lib paths.
##INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)

# ROSE-WINE Package (Wine is a package to permit execution of Windows binaries under Linux)
#ROSE_WINE_INCLUDES = -I$(wine_path)/include
#ROSE_PHP_INCLUDES = -I$(php_path)/include/phc -I$(php_path)/include/php
#ROSE_PHP_LIBS = -lphp5 -lphc -lltdl
#ROSE_PHP_LIBS_WITH_PATH = $(php_path)/lib/libphc.so $(php_path)/lib/libphp5.so $(LIBLTDL)

# ASR (06/09/2010): adding llvm support variables
#ROSE_LLVM_INCLUDES = -I$(llvm_path)/include
#ROSE_LLVM_LIBS = -L$(llvm_path)/lib \
#	-lLLVMXCoreCodeGen -lLLVMXCoreAsmPrinter \
#	-lLLVMXCoreInfo -lLLVMSystemZCodeGen \
#	-lLLVMSystemZAsmPrinter -lLLVMSystemZInfo \
#	-lLLVMSparcCodeGen -lLLVMSparcAsmPrinter \
#	-lLLVMSparcInfo -lLLVMPowerPCCodeGen \
#	-lLLVMPowerPCAsmPrinter -lLLVMPowerPCInfo \
#	-lLLVMpic16passes -lLLVMPIC16AsmPrinter \
#	-lLLVMPIC16CodeGen -lLLVMPIC16Info \
#	-lLLVMMSP430CodeGen -lLLVMMSP430AsmPrinter \
#	-lLLVMMSP430Info -lLLVMMSIL -lLLVMMSILInfo \
#	-lLLVMMipsAsmPrinter -lLLVMMipsCodeGen \
#	-lLLVMMipsInfo -lLLVMMBlazeAsmPrinter \
#	-lLLVMMBlazeCodeGen -lLLVMMBlazeInfo \
#	-lLLVMLinker -lLLVMipo -lLLVMInterpreter \
#	-lLLVMInstrumentation -lLLVMJIT \
#	-lLLVMExecutionEngine -lLLVMCppBackend \
#	-lLLVMCppBackendInfo -lLLVMCellSPUCodeGen \
#	-lLLVMCellSPUAsmPrinter -lLLVMCellSPUInfo \
#	-lLLVMCBackend -lLLVMCBackendInfo \
#	-lLLVMBlackfinCodeGen \
#	-lLLVMBlackfinAsmPrinter \
#	-lLLVMBlackfinInfo -lLLVMBitWriter \
#	-lLLVMX86Disassembler -lLLVMX86AsmParser \
#	-lLLVMX86AsmPrinter -lLLVMX86CodeGen \
#	-lLLVMX86Info -lLLVMAsmParser \
#	-lLLVMARMAsmParser -lLLVMMCParser \
#	-lLLVMARMAsmPrinter -lLLVMARMCodeGen \
#	-lLLVMARMInfo -lLLVMArchive \
#	-lLLVMBitReader -lLLVMAlphaCodeGen \
#	-lLLVMSelectionDAG -lLLVMAlphaAsmPrinter \
#	-lLLVMAsmPrinter -lLLVMCodeGen \
#	-lLLVMScalarOpts -lLLVMInstCombine \
#	-lLLVMTransformUtils -lLLVMipa \
#	-lLLVMAnalysis -lLLVMTarget -lLLVMMC \
#	-lLLVMCore -lLLVMAlphaInfo -lLLVMSupport \
#	-lLLVMSystem

# adding all libraries for now

# Python API support
#ROSE_PYTHON_INCLUDES = 
#ROSE_PYTHON_LIBS_WITH_PATH = 

# SSL support permits use of MD5 checksums internally for binary library identification.
#ROSE_SSL_LIBS = -lssl -lcrypto

# support for precompiled headers
#ROSE_PCH_INCLUDE = -Winvalid-pch -fPIC -DPIC
#INTEL_PIN_PATH = 
#INTEL_PIN_INCLUDE_PATHS = -I$(INTEL_PIN_PATH)/source/include -I$(INTEL_PIN_PATH)/source/include/gen -I$(INTEL_PIN_PATH)/extras/xed2-intel64/include -I$(INTEL_PIN_PATH)/source/tools/InstLib

# DQ (3/8/2009): These cause rose/src/testSharedRoseLib to fail, I don't know why (fails in system call to map()).
# INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib -L$(INTEL_PIN_PATH)/intel64/lib-ext
#INTEL_PIN_LIB_PATHS = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib

# Do we want to handle this differently when Dwarf is used optionally with ROSE.
#INTEL_PIN_LIBS = -lpin -lxed -ldwarf -lelf -ldl
#if ROSE_HAVE_LIBDWARF
#  INTEL_PIN_LIBS          = -lpin -lxed -lelf -ldl
#else
#  INTEL_PIN_LIBS          = -lpin -lxed -ldwarf -lelf -ldl
#endif
#ROSE_ETHER_INCLUDE = -I$(ETHER_PREFIX)/include
#ROSE_ETHER_LIBS = -L$(ETHER_PREFIX)/lib -lxenctrl
#ROSE_ATERM_INCLUDE = -I$(ATERM_LIBRARY_PATH)/../include
#ROSE_ATERM_LIBS = -L$(ATERM_LIBRARY_PATH) -lATerm

# Added support for Fortran front-end development using the flang (F18) compiler [Rasmussen 8/12/2019]
#ROSE_FLANG_INCLUDES = -I$(FLANG_INSTALL_PATH)/include
#ROSE_FLANG_LIBS = -L$(FLANG_INSTALL_PATH)/lib -lLLVMDemangle -lLLVMSupport -lLLVMFrontendOpenMP -lFortranParser -lFortranSemantics -lFortranEvaluate -lFortranCommon -lFortranDecimal -lFortranLower -lncurses

# DQ (5/9/2017): Adding Ada library support.
# ROSE_ADA_INCLUDES = -I$(ada_path)/include_xxx
#ROSE_ADA_INCLUDES = -I$(ada_path)/include_xxx
#DOT_ASIS_LIB_DIR_ = $(abs_top_builddir)/src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/lib
#  ROSE_ADA_LIBS = -ldot_asis
#  ROSE_ADA_LIBS_WITH_PATH = $(DOT_ASIS_LIB_DIR_)/libdot_asis.so

# RASMUSSEN (10/24/2017): Adding the GnuCOBOL parse-tree library support.
#ROSE_COBOL_PT_LIBS_WITH_PATH = -L$(COBPT_LIBRARY_PATH) -lcob -lcobpt
ROSE_QUAD_FLOAT_MATH = -lquadmath

# DQ (1/9/2010): Added use of libimf with libm (the two go together when using Intel icc and icpc)
#  ROSE_INTEL_COMPILER_MATH_LIBS = -limf -lm
# DQ (11/16/2017): We need to link in these Intel specific required libraries to avoid: error hidden symbol `__intel_cpu_features_init_x'
# ROSE_INTEL_COMPILER_MATH_LIBS =
#    ROSE_INTEL_COMPILER_MATH_LIBS += -limf
#ROSE_INTEL_COMPILER_MATH_LIBS = -limf \
#	-lirng -lintlc -lsvml -lm
# ROSE_INCLUDES =
#     $(ROSE_BOOST_PREINCLUDE_PATH)
ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
     -I$(top_builddir)/src/roseSupport \
     -I$(top_builddir)/src/frontend/SageIII \
     -I$(top_srcdir)/src \
     -I$(top_srcdir)/src/frontend \
     -I$(top_srcdir)/src/frontend/SageIII \
     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/astMerge \
     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
     -I$(top_srcdir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
     -I$(top_srcdir)/src/frontend/SageIII/virtualCFG \
     -I$(top_srcdir)/src/frontend/SageIII/astTokenStream \
     -I$(top_srcdir)/src/frontend/SageIII/astHiddenTypeAndDeclarationLists \
     -I$(top_builddir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/astFromString \
     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
     -I"$(JAVA_HOME)/include" \
     -I$(top_srcdir)/src/frontend/PHPFrontend \
      $(ROSE_CLANG_FRONTEND_INCLUDE) \
     -I$(top_srcdir)/src/frontend/PythonFrontend \
     -I$(top_srcdir)/src/frontend/BinaryFormats \
     -I$(top_srcdir)/src/frontend/BinaryLoader \
     -I$(top_srcdir)/src/frontend/Disassemblers \
      $(ROSE_CLANG_INCLUDE) \
     -I$(top_srcdir)/src/backend/unparser \
     -I$(top_srcdir)/src/backend/unparser/formatSupport \
     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/AdaCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/JovialCodeGeneration \
     -I$(top_srcdir)/src/backend/asmUnparser \
     -I$(top_srcdir)/src/util \
     -I$(top_srcdir)/src/util/support \
     -I$(top_srcdir)/src/util/graphs  \
     -I$(top_srcdir)/src/util/stringSupport \
     -I$(top_srcdir)/src/util/commandlineProcessing \
     -I$(top_srcdir)/src/midend/abstractHandle \
     -I$(top_srcdir)/src/midend/abstractMemoryObject \
     -I$(top_srcdir)/src/midend/abstractLayer \
     -I$(top_srcdir)/src/midend/astDiagnostics \
     -I$(top_srcdir)/src/midend/programTransformation/astInlining \
     -I$(top_srcdir)/src/midend/programTransformation/astOutlining  \
     -I$(top_srcdir)/src/midend/programTransformation/transformationTracking \
     -I$(top_srcdir)/src/midend/astProcessing \
     -I$(top_srcdir)/src/midend/astMatching \
     -I$(top_srcdir)/src/midend/astQuery \
     -I$(top_srcdir)/src/midend/astRewriteMechanism \
     -I$(top_srcdir)/src/midend/astUtil/annotation \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/src/midend/astUtil/astSupport \
     -I$(top_srcdir)/src/midend/astUtil/symbolicVal \
     -I$(top_srcdir)/src/midend/BinaryAnalysis \
     -I$(top_srcdir)/src/midend/BinaryAnalysis/dataflowanalyses \
     -I$(top_srcdir)/src/midend/BinaryAnalysis/instructionSemantics \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/computation \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depGraph \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depInfo \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/driver \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/outsideInterface \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/prepostTransformation \
     -I$(top_srcdir)/src/midend/programTransformation/ompLowering \
     -I$(top_srcdir)/src/midend/programTransformation/extractFunctionArgumentsNormalization \
     -I$(top_srcdir)/src/midend/programTransformation/singleStatementToBlockNormalization \
     -I$(top_srcdir)/src/midend/programAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/arithmeticIntensity \
     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser \
     -I$(top_srcdir)/src/midend/programAnalysis/CFG \
     -I$(top_srcdir)/src/midend/programAnalysis/staticSingleAssignment \
     -I$(top_srcdir)/src/midend/programAnalysis/ssaUnfilteredCfg \
     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
     -I$(top_srcdir)/src/midend/programAnalysis/CallGraphAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/OAWrap \
     -I$(top_srcdir)/src/midend/programAnalysis/bitvectorDataflow \
     -I$(top_srcdir)/src/midend/programAnalysis/VirtualFunctionAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/defUseAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/distributedMemoryAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/dominanceAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/pointerAnal \
     -I$(top_srcdir)/src/midend/programAnalysis/staticInterproceduralSlicing \
     -I$(top_srcdir)/src/midend/programAnalysis/valuePropagation \
     -I$(top_srcdir)/src/midend/programAnalysis/variableRenaming \
      $(ROSE_SIDEEFFECTS_INCLUDE) \
      $(ROSE_DATABASE_INCLUDE) \
      $(ROSE_GUI_INCLUDE) \
      $(ROSE_QT_INCLUDE) \
      $(ROSE_SQLITE_DATABASE_INCLUDE) \
			$(ROSE_SIDEEFFECT_INCLUDE) \
      $(SQLITE_DATABASE_INCLUDE) \
     -I$(top_srcdir)/src/midend/programTransformation/partialRedundancyElimination \
     -I$(top_srcdir)/src/midend/programTransformation/finiteDifferencing \
     -I$(top_srcdir)/src/midend/programTransformation/functionCallNormalization \
     -I$(top_srcdir)/src/midend/programTransformation/constantFolding \
     -I$(top_srcdir)/src/midend/programTransformation/implicitCodeGeneration \
     -I$(top_srcdir)/src/roseSupport \
     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
     -I$(top_srcdir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets  \
     -I$(top_srcdir)/src/util/graphs \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/libltdl \
     -I$(top_srcdir)/src/roseExtensions/failSafe \
     $(ROSE_PHP_INCLUDES) \
     $(ROSE_PYTHON_INCLUDES) \
     $(ROSE_YICES_INCLUDES) \
     $(ROSE_Z3_INCLUDES) \
     $(ROSE_YAML_INCLUDES) \
     $(ROSE_LIBPQXX_INCLUDES) \
     $(ROSE_CAPSTONE_INCLUDES) \
     $(ROSE_READLINE_INCLUDES) \
     $(ROSE_LIBMAGIC_INCLUDES) \
     $(ROSE_DLIB_INCLUDES) \
     $(ROSE_GCRYPT_INCLUDES) \
     $(ROSE_ELF_INCLUDES) \
     $(ROSE_DWARF_INCLUDES) \
     $(ROSE_WINE_INCLUDES) \
     $(VALGRIND_CFLAGS) \
     $(SQLITE3_CFLAGS) \
     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) \
     $(ROSE_PCH_INCLUDE) \
     $(INTEL_PIN_INCLUDE_PATHS) \
     $(ROSE_ETHER_INCLUDE) \
     $(ROSE_ATERM_INCLUDE) \
     $(ROSE_FLANG_INCLUDES) \
     $(ROSE_CSHARP_INCLUDES) \
     $(ROSE_ADA_INCLUDES) \
     $(ROSE_JOVIAL_INCLUDES) \
     $(ROSE_COBOL_INCLUDES) \
     $(BOOST_CPPFLAGS)


# DQ (4/13/2016): Is there were we put the support to include -lstdc++.so on the link line directly?

# DQ (3/6/2013): We need to build a SWIG path that can't include the isystem option.
# Note use of "-isystem" option in ROSE_BOOST_PREINCLUDE_PATH to have the
# boost specified on the configure
# command-line be used instead of the OS version of boost that is sometimes
# installed with Linux (it is always a version too old to be used with ROSE).
# This is used only when the ROSE configuration detects a previously installed
# version of Boost (e.g /usr/include/boost) that we don't want to use.
# ROSE_INCLUDES =
#    $(ROSE_BOOST_PREINCLUDE_PATH)
#ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
#     -I$(top_builddir)/src/roseSupport \
#     -I$(top_builddir)/src/frontend/SageIII \
#     -I$(top_srcdir)/src \
#     -I$(top_srcdir)/src/frontend \
#     -I$(top_srcdir)/src/frontend/SageIII \
#     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
#     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
#     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
#     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
#     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
#     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
#     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
#     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
#     -I"$(JAVA_HOME)/include" \
#     -I$(top_srcdir)/src/frontend/BinaryFormats \
#     -I$(top_srcdir)/src/frontend/BinaryLoader \
#     -I$(top_srcdir)/src/frontend/Disassemblers \
#     -I$(top_srcdir)/src/backend/unparser \
#     -I$(top_srcdir)/src/backend/unparser/formatSupport \
#     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
#     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/AdaCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/JovialCodeGeneration \
#     -I$(top_srcdir)/src/backend/asmUnparser \
#     -I$(top_srcdir)/src/util \
#     -I$(top_srcdir)/src/util/support \
#     -I$(top_srcdir)/src/util/graphs  \
#     -I$(top_srcdir)/src/util/stringSupport \
#     -I$(top_srcdir)/src/util/commandlineProcessing \
#     -I$(top_srcdir)/src/midend/astDiagnostics \
#     -I$(top_srcdir)/src/midend/astProcessing \
#     -I$(top_srcdir)/src/midend/astMatching \
#     -I$(top_srcdir)/src/midend/astQuery \
#     -I$(top_srcdir)/src/midend/BinaryAnalysis \
#     -I$(top_srcdir)/src/midend/programAnalysis \
#     -I$(top_srcdir)/src/roseSupport \
#     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
#     -I$(top_srcdir)/src/util/graphs \
#     -I$(top_srcdir)/src/roseExtensions/failSafe \
#     $(ROSE_ATERM_INCLUDE) \
#     $(ROSE_FLANG_INCLUDES) \
#     $(ROSE_BOOST_NORMAL_INCLUDE_PATH)


# DQ (10/23/2015): These paths have been replaces with the following variables.
# These variable are empty for now (reflecting the default usage, and need to
# be set properly where ever Clang support is processed as a configure option.
#    -I$(top_srcdir)/src/frontend/CxxFrontend/ClangFrontend
#    -I$(top_srcdir)/src/frontend/CxxFrontend/Clang
#    $(ROSE_CLANG_FRONTEND_INCLUDE)
#    $(ROSE_CLANG_INCLUDE)
SWIG_ROSE_INCLUDES = $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH)
ROSE_INCLUDES = $(ROSE_BOOST_PREINCLUDE_PATH) $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH)

# DQ (8/15/2010): I have removed these directories from the include paths since it no longer exists.
# I expect that the directories were removed and the include list not properly cleaned up.
# -I$(top_srcdir)/src/midend/binaryAnalyses/graph
# -I$(top_srcdir)/src/midend/programTransformation/runtimeTransformation
# -I$(top_srcdir)/projects/dataBase

# DQ (12/22/2008): Move Boost directory to front and used "-isystem" option so
# that a system with a previous (older) installation of boost does not interfer
# with the use of ROSE (and the version of boost specified using "--with-boost").
# $(BOOST_CPPFLAGS)

# DQ (10/28/2008): I think these should be included, I don't know why they
# were removed (used with Microsoft Windows tests, and Yices tests).
# DQ: Not used currently
#     $(ROSE_WINE_INCLUDES)

# DQ (5/3/2007): Removed from ROSE
#     -I$(top_srcdir)/src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers
#     -I$(top_srcdir)/src/midend/programAnalysis/staticProgramSlicing

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly with make distcheck rule
#     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser

# New way using two libraries
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.a $(top_builddir)/src/libedg.a
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.so $(top_builddir)/src/libedg.so
# ROSE_LIBS_WITH_PATH = $(libdir)/librose.so $(libdir)/libedg.so
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la $(JAVA_JVM_LIB)
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_LIBS_WITH_PATH = $(ROSE_LIBS)

# ROSE_LIBS = $(top_builddir)/src/librose.la -lm $(LEXLIB) $(SQLITE_DATABASE_LIBS) $(LIB_QT) $(WAVE_LDFLAGS) $(WAVE_LIBRARIES) $(WAVE_LIBS) $(JAVA_JVM_LIB) $(RT_LIBS)

# MS 10/19/2015: added ROSE_BOOST_LIBS variable to share exact same
# boost libs list in ROSE an in the ROSTTA Makefiles.
ROSE_BOOST_LIBS = $(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) $(BOOST_CHRONO_LIB) \
  $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) $(BOOST_PROGRAM_OPTIONS_LIB) \
  $(BOOST_RANDOM_LIB) $(BOOST_REGEX_LIB)  $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB)  \
  $(BOOST_WAVE_LIB) $(BOOST_IOSTREAMS_LIB) $(BOOST_PYTHON_LIB)

ROSE_LIBS = $(abspath $(top_builddir)/src/librose.la) -lm \
	$(JAVA_JVM_LINK) $(SQLITE_DATABASE_LIBS) $(QT_LIBS) \
	$(ROSE_BOOST_LIBS) $(SQLITE3_LDFLAGS) $(RT_LIBS) \
	$(ROSE_YICES_LIBS_WITH_PATH) $(ROSE_Z3_LIBS_WITH_PATH) \
	$(ROSE_PHP_LIBS_WITH_PATH) $(ROSE_DWARF_LIBS_WITH_PATH) \
	$(ROSE_ELF_LIBS_WITH_PATH) $(ROSE_GUI_LIBS_WITH_PATH) \
	$(ROSE_QT_LIBS_WITH_PATH) $(ROSE_SSL_LIBS) $(ROSE_ETHER_LIBS) \
	$(ROSE_INTEL_COMPILER_MATH_LIBS) $(ROSE_ATERM_LIBS) \
	$(ROSE_FLANG_LIBS) $(ROSE_YAML_LIBS_WITH_PATH) \
	$(ROSE_LIBMAGIC_LIBS_WITH_PATH) \
	$(ROSE_READLINE_LIBS_WITH_PATH) $(ROSE_DLIB_LIBS_WITH_PATH) \
	$(ROSE_GCRYPT_LIBS_WITH_PATH) $(ROSE_LIBPQXX_LIBS_WITH_PATH) \
	$(ROSE_COBOL_PT_LIBS_WITH_PATH) $(ROSE_PYTHON_LIBS_WITH_PATH) \
	$(ROSE_QUAD_FLOAT_MATH) $(ROSE_CAPSTONE_LIBS_WITH_PATH) \
	$(am__append_1)

#if ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION
#ROSE_LIBS += $(libroseAdalibraries) 
#endif

#========================================================================================================================
# These are the "-R directory" switches that need to be passed to libtool running in link mode to make sure that ROSE
# executables have rpath properties that point to the directories containing the libraries we're using. Do not add
# system directories (or at least not at the front of this list) because that will cause the system-installed version of
# a library to be used rather than some user-specific version.
#
# Here's the motivation for using rpath instead of LD_LIBRARY_PATH: Consider what happens if some ROSE tool, call it
# myTranslator, is compiled and linked against a custom, user-installed version of libz.so (perhaps because myTranslator
# is using a custom version of some graphics library, like libgraphicsmagick.so, that needs a newer libz.so than what's
# installed on the system).  If I then set LD_LIBRARY_PATH to point to the directory with my libz.so I'll be able to run
# myTranslator, however I probably won't be able any system installed tool that uses libz.so. This includes not being
# able to run /usr/bin/as, which might be called indirectly when myTranslator invokes the backend compiler (because
# LD_LIBRARY_PATH overrides the rpath built into /usr/bin/as).  Run-time linking with the wrong dynamic library at best
# produces an error message from the linker, but more often just results in a fault of some sort.
#
# How does rpath fix this problem? It encodes into each executable the list of directories that should be searched when
# the executable is run, similar to LD_LIBRARY_PATH but on a per-executable basis.
#
# The filter-out is removing specific libraries (-lwhatever), the GCC's POSIX thread switch (-pthread), static libraries
# (whatever.a), and various system directories that might have the wrong library versions and which are searched
# automatically anyway. The outer patsubst is changing "-Ldirectory" to just "directory", and the addprefix is changing
# each directory to "-R directory" which is libtool's switch for adding an rpath to an executable.
#
# The inner-most patsubst needs more explanation: Although most low-level libraries like libz, libpng, etc. are normally
# installed in well-known system-wide locations (like /usr/lib), when testing ROSE in matrix testing using RMC, these
# libraries are often compiled and installed locally in such ways that they're not binary compatible with the
# system-installed versions. However, ROSE doesn't have configuration or cmake options for all these libraries because
# there could eventually be far too many. Therefore, we use the fact that RMC has already chosen the correct library
# directories and added their names to various environment variables. The lines of the form
#     $(subst :, ,# $(whatever_LIBDIRS))
# split the named environment variable into individual directory names.  If there's a ROSE configure option to specify
# the library location, then DO NOT list an environment variable here--use the directory from configure instead (which
# goes into ROSE_LIBS above).
ROSE_RPATHS = $(patsubst -L%,-R %, $(filter-out -L/lib% -L/usr/lib% \
	-L/usr/local/lib% -L/var/lib%, $(filter -L%, $(ROSE_LIBS) \
	$(subst :, , $(GNU_COMPILERS_LIBDIRS)) $(subst :, , \
	$(LIBBZ2_LIBDIRS)) $(subst :, , $(LIBGRAPHICSMAGICK_LIBDIRS)) \
	$(subst :, , $(LIBJPEG_LIBDIRS)) $(subst :, , \
	$(LIBLCMS_LIBDIRS)) $(subst :, , $(LIBLZMA_LIBDIRS)) $(subst \
	:, , $(LIBPNG_LIBDIRS)) $(subst :, , $(LIBTIFF_LIBDIRS)) \
	$(subst :, , $(PYTHON_LIBDIRS)) $(subst :, , $(SPOT_LIBDIRS)) \
	$(subst :, , $(ZLIB_LIBDIRS)) $(subst :, , \
	$(INTEL_COMPILER_RPATHS)) ) ) ) $(am__append_2)
ROSE_LINK_RPATHS = $(addprefix -Wl$(comma)-rpath , $(filter-out -R , $(ROSE_RPATHS)))

# Rasmussen (3/23/2018): Added ROSE_LINK_RPATHS to enable linking on Mac OSX with ROSE installation
#ROSE_LINK_RPATHS = $(addprefix -Xlinker -rpath -Xlinker , $(filter-out -R , $(ROSE_RPATHS)))
comma = ,
INTEL_COMPILER_RPATHS = $(shell $(top_srcdir)/scripts/intel-compiler-rpaths.sh)

# DQ (3/8/2009): This fails when I try to include it (fails in rose/src/testSharedRoseLib).
#  $(INTEL_PIN_LIB_PATHS) $(INTEL_PIN_LIBS)

# DQ (3/14/2009): It is cleaner to just required that Intel Pin support require setting
# the LD_LIBRARYPATH to include: $(INTEL_PIN_PATH)/intel64/lib-ext

# This ROSE_SEPARATE_LIBS is used for the linking of preprocessor.C used within
# development. The use of the seperate libraries make the linking faster where the
# main librose library is not built.  Libtool may have changed this so that we could
# just link to librose now just as easily, but one has to rebuild librose each time
# instead of just the individual shared library.
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_SEPARATE_LIBS = $(ROSE_LIBS)

# QY (11/2/04): removed -lastoutlining from ROSE_SEPARATE_LIBS

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly
# with make distcheck rule
# -lannotationLanguageParser(appears after -lvaluePropagation)

# Test harness variables. See "rth_run.pl --help" for more info.  The RTH_RUN_FLAGS is meant to be set on the
# "make" command-line, but the default depends on the value of the verbosity $(V) flag.
RTH_RUN_FLAGS_V_ = 
RTH_RUN_FLAGS_V_0 = 
RTH_RUN_FLAGS_V_1 = --immediate-output
RTH_RUN_FLAGS = $(RTH_RUN_FLAGS_V_$(V))

# Default timeout that you can override on the "make" commandline. Valid values
# are integers followed by "s" (seconds), "m" (minutes), "h" (hours), or the
# word "never".  See scripts/rth_run.pl for detailed documentation.
RTH_TIMEOUT = 15m
RTH_RUN = $(top_srcdir)/scripts/rth_run.pl $(RTH_RUN_FLAGS) \
	srcdir=$(abspath $(srcdir)) top_srcdir=$(abspath $(top_srcdir)) \
	blddir=$$(pwd) top_blddir=$(abspath $(top_builddir)) \
	VALGRIND=$(VALGRIND) TIMEOUT=$(RTH_TIMEOUT)

RTH_STATS = $(top_srcdir)/scripts/rth_stats.pl
nonsmoke_specimens_binary_directory = $(top_srcdir)/tests/nonsmoke/specimens/binary

################################################################################################################################
# The finest granularity.  Names follow this format:
#
#   nonsmoke_specimens_binary_<Container>_<FileType>_<Architecture>
#
# Where:
#   <Container> is one of
#	dos	-- DOS (Microsoft)
#	elf	-- Executable and Linkable Format (Linux, etc)
#	pe	-- Portable Executable (Microsoft)
#	raw	-- raw data, no container
nonsmoke_specimens_binary_containers = dos elf pe raw

#
#  <FileType> is one of
#	exe	-- executable programs (but not necessarily having execute permission)
#	obj	-- object file (names usually ending with ".o" or ".obj")
#	archive	-- archive (static library)
#	so	-- shared object (names usually ending with ".so" or ".dll")
#	core	-- core dump (only used for ELF)
#	insns	-- raw data instructions
#	rot13	-- raw data rot13 encoded
nonsmoke_specimens_binary_filetypes = exe obj archive so core insns rot13

#
#  <Architecture> is one of
#       amd64	-- Intel 64-bit
#	arm	-- ARM
#	mips	-- MIPS
#	m68k	-- Motorola m68k
#	ppc	-- PowerPC
#	x86	-- Intel 32-bit
#
nonsmoke_specimens_binary_architectures = amd64 arm mips m68k ppc x86

#------------------------------------------------------------------------------------------------------------------------
# dos_*_x86_specimens
nonsmoke_specimens_binary_dos_exe_x86 = \
    exefmt.exe


#------------------------------------------------------------------------------------------------------------------------
# elf_*_amd64_specimens
nonsmoke_specimens_binary_elf_exe_amd64 = \
    x86-64-adaptiveRegs				\
    x86-64-ctrlaltdel				\
    x86-64-nologin				\
    x86-64-pivot_root				\
    x86-64-poweroff

nonsmoke_specimens_binary_elf_obj_amd64 = \
    gcc-4.0.x-test1.o

nonsmoke_specimens_binary_elf_so_amd64 = \
    schulz-sample1-p.so				\
    schulz-sample1.so				\
    schulz-sample2-p.so				\
    schulz-sample2.so

nonsmoke_specimens_binary_elf_core_amd64 = 
nonsmoke_specimens_binary_elf_archive_amd64 = \
    libTest-amd64.a


#------------------------------------------------------------------------------------------------------------------------
# elf_*_arm_specimens
nonsmoke_specimens_binary_elf_exe_arm = \
    arm-ctrlaltdel				\
    arm-nologin					\
    arm-pivot_root				\
    arm-poweroff

nonsmoke_specimens_binary_elf_obj_arm = 
nonsmoke_specimens_binary_elf_so_arm = 
nonsmoke_specimens_binary_elf_core_arm = 
nonsmoke_specimens_binary_elf_archive_arm = 

#------------------------------------------------------------------------------------------------------------------------
# elf_*_m68k_specimens
nonsmoke_specimens_binary_elf_exe_m68k = 
nonsmoke_specimens_binary_elf_obj_m68k = 
nonsmoke_specimens_binary_elf_so_m68k = 
nonsmoke_specimens_binary_elf_core_m68k = 
nonsmoke_specimens_binary_elf_archive_m68k = 

#------------------------------------------------------------------------------------------------------------------------
# elf_*_mips_specimens
nonsmoke_specimens_binary_elf_exe_mips = \
    hello.mips

nonsmoke_specimens_binary_elf_obj_mips = 
nonsmoke_specimens_binary_elf_so_mips = 
nonsmoke_specimens_binary_elf_core_mips = 
nonsmoke_specimens_binary_elf_archive_mips = 

#------------------------------------------------------------------------------------------------------------------------
# elf_*_ppc_specimens
nonsmoke_specimens_binary_elf_exe_ppc = \
    bgl-helloworld-mpicc			\
    bgl-helloworld-mpixlc			\
    fnord.ppc

nonsmoke_specimens_binary_elf_obj_ppc = 
nonsmoke_specimens_binary_elf_so_ppc = 
nonsmoke_specimens_binary_elf_core_ppc = 
nonsmoke_specimens_binary_elf_archive_ppc = 

#------------------------------------------------------------------------------------------------------------------------
# elf_*_x86_specimens
nonsmoke_specimens_binary_elf_exe_x86 = \
    buffer2.bin					\
    fnord.i386					\
    i386-ctrlaltdel				\
    i386-fcalls					\
    i386-fsck.cramfs				\
    i386-fld					\
    i386-fnstsw					\
    i386-fst					\
    i386-int3					\
    i386-lea					\
    i386-mixed					\
    i386-mov					\
    i386-mul					\
    i386-nologin				\
    i386-noop					\
    i386-overlap				\
    i386-pop					\
    i386-pivot_root				\
    i386-pointers				\
    i386-poweroff				\
    i386-pushfd					\
    i386-pxor					\
    i386-stmxcsr				\
    i386-wait					\
    i386-taintflow1				\
    i386-thunks-7				\
    i686-test1.O0.bin				\
    i686-test1.O3-stripped.bin			\
    i686-test1.O3.bin				\
    memreadwrite				\
    pentium-movd				\
    pentium-xmm					\
    usedef

nonsmoke_specimens_binary_elf_obj_x86 = 
nonsmoke_specimens_binary_elf_so_x86 = \
    libm-2.3.6.so

nonsmoke_specimens_binary_elf_core_x86 = 
nonsmoke_specimens_binary_elf_archive_x86 = 

#------------------------------------------------------------------------------------------------------------------------
# pe_*_arm_specimens
nonsmoke_specimens_binary_pe_exe_arm = \
    pocketputty.exe				\
    pocketputty2.exe

nonsmoke_specimens_binary_pe_obj_arm = 
nonsmoke_specimens_binary_pe_so_arm = 

#------------------------------------------------------------------------------------------------------------------------
# pe_*_ppc_specimens
nonsmoke_specimens_binary_pe_exe_ppc = \
    PFE32.EXE

nonsmoke_specimens_binary_pe_obj_ppc = 
nonsmoke_specimens_binary_pe_so_ppc = 

#------------------------------------------------------------------------------------------------------------------------
# pe_*_x86_specimens
nonsmoke_specimens_binary_pe_exe_x86 = \
    asm_code_samples_gcc.exe			\
    proxycfg.exe				\
    puttytel.exe

nonsmoke_specimens_binary_pe_obj_x86 = 
nonsmoke_specimens_binary_pe_so_x86 = 

#------------------------------------------------------------------------------------------------------------------------
# raw_*_*_specimens
nonsmoke_specimens_binary_raw_insns_x86 = \
    buffer2.raw					\
    i386-initialState				\
    vm-final.raw

nonsmoke_specimens_binary_raw_rot13_x86 = \
    buffer2.rot13


#------------------------------------------------------------------------------------------------------------------------
# Big specimens not intended to be unit tests and which might take too long on slow hardware. Anything over about 500k.
nonsmoke_specimens_binary_large = \
    PFE32.EXE					\
    bgl-helloworld-mpicc			\
    bgl-helloworld-mpixlc			\
    hello.mip					\
    libTest-amd64.a				\
    pocketputty.exe				\
    pocketputty2.exe				\
    puttytel.exe				\
    vm-final.raw


###############################################################################################################################
# Other distributed files, not necessarily binary specimens
nonsmoke_specimens_binary_other_distributed = \
    ARPPRODUCTICON.exe				\
    i386-fld.s					\
    i386-fnstsw.s				\
    i386-fst.s					\
    i386-initialState.s				\
    i386-int3.s					\
    i386-lea.s					\
    i386-mixed.s				\
    i386-mov.s					\
    i386-mul.s					\
    i386-noop.s					\
    i386-overlap.s				\
    i386-pop.s					\
    i386-pushfd.s				\
    i386-pxor.s					\
    i386-stmxcsr.s				\
    i386-taintedflow1.c				\
    i386-thunks-7.s				\
    i386-wait.s					\
    memreadwrite.s				\
    pentium-movd.s				\
    pentium-xmm.s				\
    vm-final.README				\
    vm-final.ipd				\
    x86-64-adaptiveRegs.s


# The name "nonsmoke_specimens_binary_any_any_any" is a bit strange, so lets have an alias
nonsmoke_specimens_binary_all = $(nonsmoke_specimens_binary_any_any_any)

# Container agnostic
nonsmoke_specimens_binary_any_exe_amd64 = $(nonsmoke_specimens_binary_dos_exe_amd64) $(nonsmoke_specimens_binary_elf_exe_amd64) $(nonsmoke_specimens_binary_pe_exe_amd64) $(nonsmoke_specimens_binary_raw_exe_amd64)
nonsmoke_specimens_binary_any_exe_arm = $(nonsmoke_specimens_binary_dos_exe_arm) $(nonsmoke_specimens_binary_elf_exe_arm) $(nonsmoke_specimens_binary_pe_exe_arm) $(nonsmoke_specimens_binary_raw_exe_arm)
nonsmoke_specimens_binary_any_exe_mips = $(nonsmoke_specimens_binary_dos_exe_mips) $(nonsmoke_specimens_binary_elf_exe_mips) $(nonsmoke_specimens_binary_pe_exe_mips) $(nonsmoke_specimens_binary_raw_exe_mips)
nonsmoke_specimens_binary_any_exe_m68k = $(nonsmoke_specimens_binary_dos_exe_m68k) $(nonsmoke_specimens_binary_elf_exe_m68k) $(nonsmoke_specimens_binary_pe_exe_m68k) $(nonsmoke_specimens_binary_raw_exe_m68k)
nonsmoke_specimens_binary_any_exe_ppc = $(nonsmoke_specimens_binary_dos_exe_ppc) $(nonsmoke_specimens_binary_elf_exe_ppc) $(nonsmoke_specimens_binary_pe_exe_ppc) $(nonsmoke_specimens_binary_raw_exe_ppc)
nonsmoke_specimens_binary_any_exe_x86 = $(nonsmoke_specimens_binary_dos_exe_x86) $(nonsmoke_specimens_binary_elf_exe_x86) $(nonsmoke_specimens_binary_pe_exe_x86) $(nonsmoke_specimens_binary_raw_exe_x86)
nonsmoke_specimens_binary_any_obj_amd64 = $(nonsmoke_specimens_binary_dos_obj_amd64) $(nonsmoke_specimens_binary_elf_obj_amd64) $(nonsmoke_specimens_binary_pe_obj_amd64) $(nonsmoke_specimens_binary_raw_obj_amd64)
nonsmoke_specimens_binary_any_obj_arm = $(nonsmoke_specimens_binary_dos_obj_arm) $(nonsmoke_specimens_binary_elf_obj_arm) $(nonsmoke_specimens_binary_pe_obj_arm) $(nonsmoke_specimens_binary_raw_obj_arm)
nonsmoke_specimens_binary_any_obj_mips = $(nonsmoke_specimens_binary_dos_obj_mips) $(nonsmoke_specimens_binary_elf_obj_mips) $(nonsmoke_specimens_binary_pe_obj_mips) $(nonsmoke_specimens_binary_raw_obj_mips)
nonsmoke_specimens_binary_any_obj_m68k = $(nonsmoke_specimens_binary_dos_obj_m68k) $(nonsmoke_specimens_binary_elf_obj_m68k) $(nonsmoke_specimens_binary_pe_obj_m68k) $(nonsmoke_specimens_binary_raw_obj_m68k)
nonsmoke_specimens_binary_any_obj_ppc = $(nonsmoke_specimens_binary_dos_obj_ppc) $(nonsmoke_specimens_binary_elf_obj_ppc) $(nonsmoke_specimens_binary_pe_obj_ppc) $(nonsmoke_specimens_binary_raw_obj_ppc)
nonsmoke_specimens_binary_any_obj_x86 = $(nonsmoke_specimens_binary_dos_obj_x86) $(nonsmoke_specimens_binary_elf_obj_x86) $(nonsmoke_specimens_binary_pe_obj_x86) $(nonsmoke_specimens_binary_raw_obj_x86)
nonsmoke_specimens_binary_any_archive_amd64 = $(nonsmoke_specimens_binary_dos_archive_amd64) $(nonsmoke_specimens_binary_elf_archive_amd64) $(nonsmoke_specimens_binary_pe_archive_amd64) $(nonsmoke_specimens_binary_raw_archive_amd64)
nonsmoke_specimens_binary_any_archive_arm = $(nonsmoke_specimens_binary_dos_archive_arm) $(nonsmoke_specimens_binary_elf_archive_arm) $(nonsmoke_specimens_binary_pe_archive_arm) $(nonsmoke_specimens_binary_raw_archive_arm)
nonsmoke_specimens_binary_any_archive_mips = $(nonsmoke_specimens_binary_dos_archive_mips) $(nonsmoke_specimens_binary_elf_archive_mips) $(nonsmoke_specimens_binary_pe_archive_mips) $(nonsmoke_specimens_binary_raw_archive_mips)
nonsmoke_specimens_binary_any_archive_m68k = $(nonsmoke_specimens_binary_dos_archive_m68k) $(nonsmoke_specimens_binary_elf_archive_m68k) $(nonsmoke_specimens_binary_pe_archive_m68k) $(nonsmoke_specimens_binary_raw_archive_m68k)
nonsmoke_specimens_binary_any_archive_ppc = $(nonsmoke_specimens_binary_dos_archive_ppc) $(nonsmoke_specimens_binary_elf_archive_ppc) $(nonsmoke_specimens_binary_pe_archive_ppc) $(nonsmoke_specimens_binary_raw_archive_ppc)
nonsmoke_specimens_binary_any_archive_x86 = $(nonsmoke_specimens_binary_dos_archive_x86) $(nonsmoke_specimens_binary_elf_archive_x86) $(nonsmoke_specimens_binary_pe_archive_x86) $(nonsmoke_specimens_binary_raw_archive_x86)
nonsmoke_specimens_binary_any_so_amd64 = $(nonsmoke_specimens_binary_dos_so_amd64) $(nonsmoke_specimens_binary_elf_so_amd64) $(nonsmoke_specimens_binary_pe_so_amd64) $(nonsmoke_specimens_binary_raw_so_amd64)
nonsmoke_specimens_binary_any_so_arm = $(nonsmoke_specimens_binary_dos_so_arm) $(nonsmoke_specimens_binary_elf_so_arm) $(nonsmoke_specimens_binary_pe_so_arm) $(nonsmoke_specimens_binary_raw_so_arm)
nonsmoke_specimens_binary_any_so_mips = $(nonsmoke_specimens_binary_dos_so_mips) $(nonsmoke_specimens_binary_elf_so_mips) $(nonsmoke_specimens_binary_pe_so_mips) $(nonsmoke_specimens_binary_raw_so_mips)
nonsmoke_specimens_binary_any_so_m68k = $(nonsmoke_specimens_binary_dos_so_m68k) $(nonsmoke_specimens_binary_elf_so_m68k) $(nonsmoke_specimens_binary_pe_so_m68k) $(nonsmoke_specimens_binary_raw_so_m68k)
nonsmoke_specimens_binary_any_so_ppc = $(nonsmoke_specimens_binary_dos_so_ppc) $(nonsmoke_specimens_binary_elf_so_ppc) $(nonsmoke_specimens_binary_pe_so_ppc) $(nonsmoke_specimens_binary_raw_so_ppc)
nonsmoke_specimens_binary_any_so_x86 = $(nonsmoke_specimens_binary_dos_so_x86) $(nonsmoke_specimens_binary_elf_so_x86) $(nonsmoke_specimens_binary_pe_so_x86) $(nonsmoke_specimens_binary_raw_so_x86)
nonsmoke_specimens_binary_any_core_amd64 = $(nonsmoke_specimens_binary_dos_core_amd64) $(nonsmoke_specimens_binary_elf_core_amd64) $(nonsmoke_specimens_binary_pe_core_amd64) $(nonsmoke_specimens_binary_raw_core_amd64)
nonsmoke_specimens_binary_any_core_arm = $(nonsmoke_specimens_binary_dos_core_arm) $(nonsmoke_specimens_binary_elf_core_arm) $(nonsmoke_specimens_binary_pe_core_arm) $(nonsmoke_specimens_binary_raw_core_arm)
nonsmoke_specimens_binary_any_core_mips = $(nonsmoke_specimens_binary_dos_core_mips) $(nonsmoke_specimens_binary_elf_core_mips) $(nonsmoke_specimens_binary_pe_core_mips) $(nonsmoke_specimens_binary_raw_core_mips)
nonsmoke_specimens_binary_any_core_m68k = $(nonsmoke_specimens_binary_dos_core_m68k) $(nonsmoke_specimens_binary_elf_core_m68k) $(nonsmoke_specimens_binary_pe_core_m68k) $(nonsmoke_specimens_binary_raw_core_m68k)
nonsmoke_specimens_binary_any_core_ppc = $(nonsmoke_specimens_binary_dos_core_ppc) $(nonsmoke_specimens_binary_elf_core_ppc) $(nonsmoke_specimens_binary_pe_core_ppc) $(nonsmoke_specimens_binary_raw_core_ppc)
nonsmoke_specimens_binary_any_core_x86 = $(nonsmoke_specimens_binary_dos_core_x86) $(nonsmoke_specimens_binary_elf_core_x86) $(nonsmoke_specimens_binary_pe_core_x86) $(nonsmoke_specimens_binary_raw_core_x86)
nonsmoke_specimens_binary_any_insns_amd64 = $(nonsmoke_specimens_binary_dos_insns_amd64) $(nonsmoke_specimens_binary_elf_insns_amd64) $(nonsmoke_specimens_binary_pe_insns_amd64) $(nonsmoke_specimens_binary_raw_insns_amd64)
nonsmoke_specimens_binary_any_insns_arm = $(nonsmoke_specimens_binary_dos_insns_arm) $(nonsmoke_specimens_binary_elf_insns_arm) $(nonsmoke_specimens_binary_pe_insns_arm) $(nonsmoke_specimens_binary_raw_insns_arm)
nonsmoke_specimens_binary_any_insns_mips = $(nonsmoke_specimens_binary_dos_insns_mips) $(nonsmoke_specimens_binary_elf_insns_mips) $(nonsmoke_specimens_binary_pe_insns_mips) $(nonsmoke_specimens_binary_raw_insns_mips)
nonsmoke_specimens_binary_any_insns_m68k = $(nonsmoke_specimens_binary_dos_insns_m68k) $(nonsmoke_specimens_binary_elf_insns_m68k) $(nonsmoke_specimens_binary_pe_insns_m68k) $(nonsmoke_specimens_binary_raw_insns_m68k)
nonsmoke_specimens_binary_any_insns_ppc = $(nonsmoke_specimens_binary_dos_insns_ppc) $(nonsmoke_specimens_binary_elf_insns_ppc) $(nonsmoke_specimens_binary_pe_insns_ppc) $(nonsmoke_specimens_binary_raw_insns_ppc)
nonsmoke_specimens_binary_any_insns_x86 = $(nonsmoke_specimens_binary_dos_insns_x86) $(nonsmoke_specimens_binary_elf_insns_x86) $(nonsmoke_specimens_binary_pe_insns_x86) $(nonsmoke_specimens_binary_raw_insns_x86)
nonsmoke_specimens_binary_any_rot13_amd64 = $(nonsmoke_specimens_binary_dos_rot13_amd64) $(nonsmoke_specimens_binary_elf_rot13_amd64) $(nonsmoke_specimens_binary_pe_rot13_amd64) $(nonsmoke_specimens_binary_raw_rot13_amd64)
nonsmoke_specimens_binary_any_rot13_arm = $(nonsmoke_specimens_binary_dos_rot13_arm) $(nonsmoke_specimens_binary_elf_rot13_arm) $(nonsmoke_specimens_binary_pe_rot13_arm) $(nonsmoke_specimens_binary_raw_rot13_arm)
nonsmoke_specimens_binary_any_rot13_mips = $(nonsmoke_specimens_binary_dos_rot13_mips) $(nonsmoke_specimens_binary_elf_rot13_mips) $(nonsmoke_specimens_binary_pe_rot13_mips) $(nonsmoke_specimens_binary_raw_rot13_mips)
nonsmoke_specimens_binary_any_rot13_m68k = $(nonsmoke_specimens_binary_dos_rot13_m68k) $(nonsmoke_specimens_binary_elf_rot13_m68k) $(nonsmoke_specimens_binary_pe_rot13_m68k) $(nonsmoke_specimens_binary_raw_rot13_m68k)
nonsmoke_specimens_binary_any_rot13_ppc = $(nonsmoke_specimens_binary_dos_rot13_ppc) $(nonsmoke_specimens_binary_elf_rot13_ppc) $(nonsmoke_specimens_binary_pe_rot13_ppc) $(nonsmoke_specimens_binary_raw_rot13_ppc)
nonsmoke_specimens_binary_any_rot13_x86 = $(nonsmoke_specimens_binary_dos_rot13_x86) $(nonsmoke_specimens_binary_elf_rot13_x86) $(nonsmoke_specimens_binary_pe_rot13_x86) $(nonsmoke_specimens_binary_raw_rot13_x86)

# Filetype agnostic
nonsmoke_specimens_binary_dos_any_amd64 = $(nonsmoke_specimens_binary_dos_exe_amd64) $(nonsmoke_specimens_binary_dos_obj_amd64) $(nonsmoke_specimens_binary_dos_archive_amd64) $(nonsmoke_specimens_binary_dos_so_amd64) $(nonsmoke_specimens_binary_dos_core_amd64) $(nonsmoke_specimens_binary_dos_insns_amd64) $(nonsmoke_specimens_binary_dos_rot13_amd64)
nonsmoke_specimens_binary_dos_any_arm = $(nonsmoke_specimens_binary_dos_exe_arm) $(nonsmoke_specimens_binary_dos_obj_arm) $(nonsmoke_specimens_binary_dos_archive_arm) $(nonsmoke_specimens_binary_dos_so_arm) $(nonsmoke_specimens_binary_dos_core_arm) $(nonsmoke_specimens_binary_dos_insns_arm) $(nonsmoke_specimens_binary_dos_rot13_arm)
nonsmoke_specimens_binary_dos_any_mips = $(nonsmoke_specimens_binary_dos_exe_mips) $(nonsmoke_specimens_binary_dos_obj_mips) $(nonsmoke_specimens_binary_dos_archive_mips) $(nonsmoke_specimens_binary_dos_so_mips) $(nonsmoke_specimens_binary_dos_core_mips) $(nonsmoke_specimens_binary_dos_insns_mips) $(nonsmoke_specimens_binary_dos_rot13_mips)
nonsmoke_specimens_binary_dos_any_m68k = $(nonsmoke_specimens_binary_dos_exe_m68k) $(nonsmoke_specimens_binary_dos_obj_m68k) $(nonsmoke_specimens_binary_dos_archive_m68k) $(nonsmoke_specimens_binary_dos_so_m68k) $(nonsmoke_specimens_binary_dos_core_m68k) $(nonsmoke_specimens_binary_dos_insns_m68k) $(nonsmoke_specimens_binary_dos_rot13_m68k)
nonsmoke_specimens_binary_dos_any_ppc = $(nonsmoke_specimens_binary_dos_exe_ppc) $(nonsmoke_specimens_binary_dos_obj_ppc) $(nonsmoke_specimens_binary_dos_archive_ppc) $(nonsmoke_specimens_binary_dos_so_ppc) $(nonsmoke_specimens_binary_dos_core_ppc) $(nonsmoke_specimens_binary_dos_insns_ppc) $(nonsmoke_specimens_binary_dos_rot13_ppc)
nonsmoke_specimens_binary_dos_any_x86 = $(nonsmoke_specimens_binary_dos_exe_x86) $(nonsmoke_specimens_binary_dos_obj_x86) $(nonsmoke_specimens_binary_dos_archive_x86) $(nonsmoke_specimens_binary_dos_so_x86) $(nonsmoke_specimens_binary_dos_core_x86) $(nonsmoke_specimens_binary_dos_insns_x86) $(nonsmoke_specimens_binary_dos_rot13_x86)
nonsmoke_specimens_binary_elf_any_amd64 = $(nonsmoke_specimens_binary_elf_exe_amd64) $(nonsmoke_specimens_binary_elf_obj_amd64) $(nonsmoke_specimens_binary_elf_archive_amd64) $(nonsmoke_specimens_binary_elf_so_amd64) $(nonsmoke_specimens_binary_elf_core_amd64) $(nonsmoke_specimens_binary_elf_insns_amd64) $(nonsmoke_specimens_binary_elf_rot13_amd64)
nonsmoke_specimens_binary_elf_any_arm = $(nonsmoke_specimens_binary_elf_exe_arm) $(nonsmoke_specimens_binary_elf_obj_arm) $(nonsmoke_specimens_binary_elf_archive_arm) $(nonsmoke_specimens_binary_elf_so_arm) $(nonsmoke_specimens_binary_elf_core_arm) $(nonsmoke_specimens_binary_elf_insns_arm) $(nonsmoke_specimens_binary_elf_rot13_arm)
nonsmoke_specimens_binary_elf_any_mips = $(nonsmoke_specimens_binary_elf_exe_mips) $(nonsmoke_specimens_binary_elf_obj_mips) $(nonsmoke_specimens_binary_elf_archive_mips) $(nonsmoke_specimens_binary_elf_so_mips) $(nonsmoke_specimens_binary_elf_core_mips) $(nonsmoke_specimens_binary_elf_insns_mips) $(nonsmoke_specimens_binary_elf_rot13_mips)
nonsmoke_specimens_binary_elf_any_m68k = $(nonsmoke_specimens_binary_elf_exe_m68k) $(nonsmoke_specimens_binary_elf_obj_m68k) $(nonsmoke_specimens_binary_elf_archive_m68k) $(nonsmoke_specimens_binary_elf_so_m68k) $(nonsmoke_specimens_binary_elf_core_m68k) $(nonsmoke_specimens_binary_elf_insns_m68k) $(nonsmoke_specimens_binary_elf_rot13_m68k)
nonsmoke_specimens_binary_elf_any_ppc = $(nonsmoke_specimens_binary_elf_exe_ppc) $(nonsmoke_specimens_binary_elf_obj_ppc) $(nonsmoke_specimens_binary_elf_archive_ppc) $(nonsmoke_specimens_binary_elf_so_ppc) $(nonsmoke_specimens_binary_elf_core_ppc) $(nonsmoke_specimens_binary_elf_insns_ppc) $(nonsmoke_specimens_binary_elf_rot13_ppc)
nonsmoke_specimens_binary_elf_any_x86 = $(nonsmoke_specimens_binary_elf_exe_x86) $(nonsmoke_specimens_binary_elf_obj_x86) $(nonsmoke_specimens_binary_elf_archive_x86) $(nonsmoke_specimens_binary_elf_so_x86) $(nonsmoke_specimens_binary_elf_core_x86) $(nonsmoke_specimens_binary_elf_insns_x86) $(nonsmoke_specimens_binary_elf_rot13_x86)
nonsmoke_specimens_binary_pe_any_amd64 = $(nonsmoke_specimens_binary_pe_exe_amd64) $(nonsmoke_specimens_binary_pe_obj_amd64) $(nonsmoke_specimens_binary_pe_archive_amd64) $(nonsmoke_specimens_binary_pe_so_amd64) $(nonsmoke_specimens_binary_pe_core_amd64) $(nonsmoke_specimens_binary_pe_insns_amd64) $(nonsmoke_specimens_binary_pe_rot13_amd64)
nonsmoke_specimens_binary_pe_any_arm = $(nonsmoke_specimens_binary_pe_exe_arm) $(nonsmoke_specimens_binary_pe_obj_arm) $(nonsmoke_specimens_binary_pe_archive_arm) $(nonsmoke_specimens_binary_pe_so_arm) $(nonsmoke_specimens_binary_pe_core_arm) $(nonsmoke_specimens_binary_pe_insns_arm) $(nonsmoke_specimens_binary_pe_rot13_arm)
nonsmoke_specimens_binary_pe_any_mips = $(nonsmoke_specimens_binary_pe_exe_mips) $(nonsmoke_specimens_binary_pe_obj_mips) $(nonsmoke_specimens_binary_pe_archive_mips) $(nonsmoke_specimens_binary_pe_so_mips) $(nonsmoke_specimens_binary_pe_core_mips) $(nonsmoke_specimens_binary_pe_insns_mips) $(nonsmoke_specimens_binary_pe_rot13_mips)
nonsmoke_specimens_binary_pe_any_m68k = $(nonsmoke_specimens_binary_pe_exe_m68k) $(nonsmoke_specimens_binary_pe_obj_m68k) $(nonsmoke_specimens_binary_pe_archive_m68k) $(nonsmoke_specimens_binary_pe_so_m68k) $(nonsmoke_specimens_binary_pe_core_m68k) $(nonsmoke_specimens_binary_pe_insns_m68k) $(nonsmoke_specimens_binary_pe_rot13_m68k)
nonsmoke_specimens_binary_pe_any_ppc = $(nonsmoke_specimens_binary_pe_exe_ppc) $(nonsmoke_specimens_binary_pe_obj_ppc) $(nonsmoke_specimens_binary_pe_archive_ppc) $(nonsmoke_specimens_binary_pe_so_ppc) $(nonsmoke_specimens_binary_pe_core_ppc) $(nonsmoke_specimens_binary_pe_insns_ppc) $(nonsmoke_specimens_binary_pe_rot13_ppc)
nonsmoke_specimens_binary_pe_any_x86 = $(nonsmoke_specimens_binary_pe_exe_x86) $(nonsmoke_specimens_binary_pe_obj_x86) $(nonsmoke_specimens_binary_pe_archive_x86) $(nonsmoke_specimens_binary_pe_so_x86) $(nonsmoke_specimens_binary_pe_core_x86) $(nonsmoke_specimens_binary_pe_insns_x86) $(nonsmoke_specimens_binary_pe_rot13_x86)
nonsmoke_specimens_binary_raw_any_amd64 = $(nonsmoke_specimens_binary_raw_exe_amd64) $(nonsmoke_specimens_binary_raw_obj_amd64) $(nonsmoke_specimens_binary_raw_archive_amd64) $(nonsmoke_specimens_binary_raw_so_amd64) $(nonsmoke_specimens_binary_raw_core_amd64) $(nonsmoke_specimens_binary_raw_insns_amd64) $(nonsmoke_specimens_binary_raw_rot13_amd64)
nonsmoke_specimens_binary_raw_any_arm = $(nonsmoke_specimens_binary_raw_exe_arm) $(nonsmoke_specimens_binary_raw_obj_arm) $(nonsmoke_specimens_binary_raw_archive_arm) $(nonsmoke_specimens_binary_raw_so_arm) $(nonsmoke_specimens_binary_raw_core_arm) $(nonsmoke_specimens_binary_raw_insns_arm) $(nonsmoke_specimens_binary_raw_rot13_arm)
nonsmoke_specimens_binary_raw_any_mips = $(nonsmoke_specimens_binary_raw_exe_mips) $(nonsmoke_specimens_binary_raw_obj_mips) $(nonsmoke_specimens_binary_raw_archive_mips) $(nonsmoke_specimens_binary_raw_so_mips) $(nonsmoke_specimens_binary_raw_core_mips) $(nonsmoke_specimens_binary_raw_insns_mips) $(nonsmoke_specimens_binary_raw_rot13_mips)
nonsmoke_specimens_binary_raw_any_m68k = $(nonsmoke_specimens_binary_raw_exe_m68k) $(nonsmoke_specimens_binary_raw_obj_m68k) $(nonsmoke_specimens_binary_raw_archive_m68k) $(nonsmoke_specimens_binary_raw_so_m68k) $(nonsmoke_specimens_binary_raw_core_m68k) $(nonsmoke_specimens_binary_raw_insns_m68k) $(nonsmoke_specimens_binary_raw_rot13_m68k)
nonsmoke_specimens_binary_raw_any_ppc = $(nonsmoke_specimens_binary_raw_exe_ppc) $(nonsmoke_specimens_binary_raw_obj_ppc) $(nonsmoke_specimens_binary_raw_archive_ppc) $(nonsmoke_specimens_binary_raw_so_ppc) $(nonsmoke_specimens_binary_raw_core_ppc) $(nonsmoke_specimens_binary_raw_insns_ppc) $(nonsmoke_specimens_binary_raw_rot13_ppc)
nonsmoke_specimens_binary_raw_any_x86 = $(nonsmoke_specimens_binary_raw_exe_x86) $(nonsmoke_specimens_binary_raw_obj_x86) $(nonsmoke_specimens_binary_raw_archive_x86) $(nonsmoke_specimens_binary_raw_so_x86) $(nonsmoke_specimens_binary_raw_core_x86) $(nonsmoke_specimens_binary_raw_insns_x86) $(nonsmoke_specimens_binary_raw_rot13_x86)

# Architecture agnostic
nonsmoke_specimens_binary_dos_exe_any = $(nonsmoke_specimens_binary_dos_exe_amd64) $(nonsmoke_specimens_binary_dos_exe_arm) $(nonsmoke_specimens_binary_dos_exe_mips) $(nonsmoke_specimens_binary_dos_exe_m68k) $(nonsmoke_specimens_binary_dos_exe_ppc) $(nonsmoke_specimens_binary_dos_exe_x86)
nonsmoke_specimens_binary_dos_obj_any = $(nonsmoke_specimens_binary_dos_obj_amd64) $(nonsmoke_specimens_binary_dos_obj_arm) $(nonsmoke_specimens_binary_dos_obj_mips) $(nonsmoke_specimens_binary_dos_obj_m68k) $(nonsmoke_specimens_binary_dos_obj_ppc) $(nonsmoke_specimens_binary_dos_obj_x86)
nonsmoke_specimens_binary_dos_archive_any = $(nonsmoke_specimens_binary_dos_archive_amd64) $(nonsmoke_specimens_binary_dos_archive_arm) $(nonsmoke_specimens_binary_dos_archive_mips) $(nonsmoke_specimens_binary_dos_archive_m68k) $(nonsmoke_specimens_binary_dos_archive_ppc) $(nonsmoke_specimens_binary_dos_archive_x86)
nonsmoke_specimens_binary_dos_so_any = $(nonsmoke_specimens_binary_dos_so_amd64) $(nonsmoke_specimens_binary_dos_so_arm) $(nonsmoke_specimens_binary_dos_so_mips) $(nonsmoke_specimens_binary_dos_so_m68k) $(nonsmoke_specimens_binary_dos_so_ppc) $(nonsmoke_specimens_binary_dos_so_x86)
nonsmoke_specimens_binary_dos_core_any = $(nonsmoke_specimens_binary_dos_core_amd64) $(nonsmoke_specimens_binary_dos_core_arm) $(nonsmoke_specimens_binary_dos_core_mips) $(nonsmoke_specimens_binary_dos_core_m68k) $(nonsmoke_specimens_binary_dos_core_ppc) $(nonsmoke_specimens_binary_dos_core_x86)
nonsmoke_specimens_binary_dos_insns_any = $(nonsmoke_specimens_binary_dos_insns_amd64) $(nonsmoke_specimens_binary_dos_insns_arm) $(nonsmoke_specimens_binary_dos_insns_mips) $(nonsmoke_specimens_binary_dos_insns_m68k) $(nonsmoke_specimens_binary_dos_insns_ppc) $(nonsmoke_specimens_binary_dos_insns_x86)
nonsmoke_specimens_binary_dos_rot13_any = $(nonsmoke_specimens_binary_dos_rot13_amd64) $(nonsmoke_specimens_binary_dos_rot13_arm) $(nonsmoke_specimens_binary_dos_rot13_mips) $(nonsmoke_specimens_binary_dos_rot13_m68k) $(nonsmoke_specimens_binary_dos_rot13_ppc) $(nonsmoke_specimens_binary_dos_rot13_x86)
nonsmoke_specimens_binary_elf_exe_any = $(nonsmoke_specimens_binary_elf_exe_amd64) $(nonsmoke_specimens_binary_elf_exe_arm) $(nonsmoke_specimens_binary_elf_exe_mips) $(nonsmoke_specimens_binary_elf_exe_m68k) $(nonsmoke_specimens_binary_elf_exe_ppc) $(nonsmoke_specimens_binary_elf_exe_x86)
nonsmoke_specimens_binary_elf_obj_any = $(nonsmoke_specimens_binary_elf_obj_amd64) $(nonsmoke_specimens_binary_elf_obj_arm) $(nonsmoke_specimens_binary_elf_obj_mips) $(nonsmoke_specimens_binary_elf_obj_m68k) $(nonsmoke_specimens_binary_elf_obj_ppc) $(nonsmoke_specimens_binary_elf_obj_x86)
nonsmoke_specimens_binary_elf_archive_any = $(nonsmoke_specimens_binary_elf_archive_amd64) $(nonsmoke_specimens_binary_elf_archive_arm) $(nonsmoke_specimens_binary_elf_archive_mips) $(nonsmoke_specimens_binary_elf_archive_m68k) $(nonsmoke_specimens_binary_elf_archive_ppc) $(nonsmoke_specimens_binary_elf_archive_x86)
nonsmoke_specimens_binary_elf_so_any = $(nonsmoke_specimens_binary_elf_so_amd64) $(nonsmoke_specimens_binary_elf_so_arm) $(nonsmoke_specimens_binary_elf_so_mips) $(nonsmoke_specimens_binary_elf_so_m68k) $(nonsmoke_specimens_binary_elf_so_ppc) $(nonsmoke_specimens_binary_elf_so_x86)
nonsmoke_specimens_binary_elf_core_any = $(nonsmoke_specimens_binary_elf_core_amd64) $(nonsmoke_specimens_binary_elf_core_arm) $(nonsmoke_specimens_binary_elf_core_mips) $(nonsmoke_specimens_binary_elf_core_m68k) $(nonsmoke_specimens_binary_elf_core_ppc) $(nonsmoke_specimens_binary_elf_core_x86)
nonsmoke_specimens_binary_elf_insns_any = $(nonsmoke_specimens_binary_elf_insns_amd64) $(nonsmoke_specimens_binary_elf_insns_arm) $(nonsmoke_specimens_binary_elf_insns_mips) $(nonsmoke_specimens_binary_elf_insns_m68k) $(nonsmoke_specimens_binary_elf_insns_ppc) $(nonsmoke_specimens_binary_elf_insns_x86)
nonsmoke_specimens_binary_elf_rot13_any = $(nonsmoke_specimens_binary_elf_rot13_amd64) $(nonsmoke_specimens_binary_elf_rot13_arm) $(nonsmoke_specimens_binary_elf_rot13_mips) $(nonsmoke_specimens_binary_elf_rot13_m68k) $(nonsmoke_specimens_binary_elf_rot13_ppc) $(nonsmoke_specimens_binary_elf_rot13_x86)
nonsmoke_specimens_binary_pe_exe_any = $(nonsmoke_specimens_binary_pe_exe_amd64) $(nonsmoke_specimens_binary_pe_exe_arm) $(nonsmoke_specimens_binary_pe_exe_mips) $(nonsmoke_specimens_binary_pe_exe_m68k) $(nonsmoke_specimens_binary_pe_exe_ppc) $(nonsmoke_specimens_binary_pe_exe_x86)
nonsmoke_specimens_binary_pe_obj_any = $(nonsmoke_specimens_binary_pe_obj_amd64) $(nonsmoke_specimens_binary_pe_obj_arm) $(nonsmoke_specimens_binary_pe_obj_mips) $(nonsmoke_specimens_binary_pe_obj_m68k) $(nonsmoke_specimens_binary_pe_obj_ppc) $(nonsmoke_specimens_binary_pe_obj_x86)
nonsmoke_specimens_binary_pe_archive_any = $(nonsmoke_specimens_binary_pe_archive_amd64) $(nonsmoke_specimens_binary_pe_archive_arm) $(nonsmoke_specimens_binary_pe_archive_mips) $(nonsmoke_specimens_binary_pe_archive_m68k) $(nonsmoke_specimens_binary_pe_archive_ppc) $(nonsmoke_specimens_binary_pe_archive_x86)
nonsmoke_specimens_binary_pe_so_any = $(nonsmoke_specimens_binary_pe_so_amd64) $(nonsmoke_specimens_binary_pe_so_arm) $(nonsmoke_specimens_binary_pe_so_mips) $(nonsmoke_specimens_binary_pe_so_m68k) $(nonsmoke_specimens_binary_pe_so_ppc) $(nonsmoke_specimens_binary_pe_so_x86)
nonsmoke_specimens_binary_pe_core_any = $(nonsmoke_specimens_binary_pe_core_amd64) $(nonsmoke_specimens_binary_pe_core_arm) $(nonsmoke_specimens_binary_pe_core_mips) $(nonsmoke_specimens_binary_pe_core_m68k) $(nonsmoke_specimens_binary_pe_core_ppc) $(nonsmoke_specimens_binary_pe_core_x86)
nonsmoke_specimens_binary_pe_insns_any = $(nonsmoke_specimens_binary_pe_insns_amd64) $(nonsmoke_specimens_binary_pe_insns_arm) $(nonsmoke_specimens_binary_pe_insns_mips) $(nonsmoke_specimens_binary_pe_insns_m68k) $(nonsmoke_specimens_binary_pe_insns_ppc) $(nonsmoke_specimens_binary_pe_insns_x86)
nonsmoke_specimens_binary_pe_rot13_any = $(nonsmoke_specimens_binary_pe_rot13_amd64) $(nonsmoke_specimens_binary_pe_rot13_arm) $(nonsmoke_specimens_binary_pe_rot13_mips) $(nonsmoke_specimens_binary_pe_rot13_m68k) $(nonsmoke_specimens_binary_pe_rot13_ppc) $(nonsmoke_specimens_binary_pe_rot13_x86)
nonsmoke_specimens_binary_raw_exe_any = $(nonsmoke_specimens_binary_raw_exe_amd64) $(nonsmoke_specimens_binary_raw_exe_arm) $(nonsmoke_specimens_binary_raw_exe_mips) $(nonsmoke_specimens_binary_raw_exe_m68k) $(nonsmoke_specimens_binary_raw_exe_ppc) $(nonsmoke_specimens_binary_raw_exe_x86)
nonsmoke_specimens_binary_raw_obj_any = $(nonsmoke_specimens_binary_raw_obj_amd64) $(nonsmoke_specimens_binary_raw_obj_arm) $(nonsmoke_specimens_binary_raw_obj_mips) $(nonsmoke_specimens_binary_raw_obj_m68k) $(nonsmoke_specimens_binary_raw_obj_ppc) $(nonsmoke_specimens_binary_raw_obj_x86)
nonsmoke_specimens_binary_raw_archive_any = $(nonsmoke_specimens_binary_raw_archive_amd64) $(nonsmoke_specimens_binary_raw_archive_arm) $(nonsmoke_specimens_binary_raw_archive_mips) $(nonsmoke_specimens_binary_raw_archive_m68k) $(nonsmoke_specimens_binary_raw_archive_ppc) $(nonsmoke_specimens_binary_raw_archive_x86)
nonsmoke_specimens_binary_raw_so_any = $(nonsmoke_specimens_binary_raw_so_amd64) $(nonsmoke_specimens_binary_raw_so_arm) $(nonsmoke_specimens_binary_raw_so_mips) $(nonsmoke_specimens_binary_raw_so_m68k) $(nonsmoke_specimens_binary_raw_so_ppc) $(nonsmoke_specimens_binary_raw_so_x86)
nonsmoke_specimens_binary_raw_core_any = $(nonsmoke_specimens_binary_raw_core_amd64) $(nonsmoke_specimens_binary_raw_core_arm) $(nonsmoke_specimens_binary_raw_core_mips) $(nonsmoke_specimens_binary_raw_core_m68k) $(nonsmoke_specimens_binary_raw_core_ppc) $(nonsmoke_specimens_binary_raw_core_x86)
nonsmoke_specimens_binary_raw_insns_any = $(nonsmoke_specimens_binary_raw_insns_amd64) $(nonsmoke_specimens_binary_raw_insns_arm) $(nonsmoke_specimens_binary_raw_insns_mips) $(nonsmoke_specimens_binary_raw_insns_m68k) $(nonsmoke_specimens_binary_raw_insns_ppc) $(nonsmoke_specimens_binary_raw_insns_x86)
nonsmoke_specimens_binary_raw_rot13_any = $(nonsmoke_specimens_binary_raw_rot13_amd64) $(nonsmoke_specimens_binary_raw_rot13_arm) $(nonsmoke_specimens_binary_raw_rot13_mips) $(nonsmoke_specimens_binary_raw_rot13_m68k) $(nonsmoke_specimens_binary_raw_rot13_ppc) $(nonsmoke_specimens_binary_raw_rot13_x86)

# Filetype and architecture agnostic
nonsmoke_specimens_binary_dos_any_any =  \
	$(nonsmoke_specimens_binary_dos_exe_amd64) \
	$(nonsmoke_specimens_binary_dos_exe_arm) \
	$(nonsmoke_specimens_binary_dos_exe_mips) \
	$(nonsmoke_specimens_binary_dos_exe_m68k) \
	$(nonsmoke_specimens_binary_dos_exe_ppc) \
	$(nonsmoke_specimens_binary_dos_exe_x86) \
	$(nonsmoke_specimens_binary_dos_obj_amd64) \
	$(nonsmoke_specimens_binary_dos_obj_arm) \
	$(nonsmoke_specimens_binary_dos_obj_mips) \
	$(nonsmoke_specimens_binary_dos_obj_m68k) \
	$(nonsmoke_specimens_binary_dos_obj_ppc) \
	$(nonsmoke_specimens_binary_dos_obj_x86) \
	$(nonsmoke_specimens_binary_dos_archive_amd64) \
	$(nonsmoke_specimens_binary_dos_archive_arm) \
	$(nonsmoke_specimens_binary_dos_archive_mips) \
	$(nonsmoke_specimens_binary_dos_archive_m68k) \
	$(nonsmoke_specimens_binary_dos_archive_ppc) \
	$(nonsmoke_specimens_binary_dos_archive_x86) \
	$(nonsmoke_specimens_binary_dos_so_amd64) \
	$(nonsmoke_specimens_binary_dos_so_arm) \
	$(nonsmoke_specimens_binary_dos_so_mips) \
	$(nonsmoke_specimens_binary_dos_so_m68k) \
	$(nonsmoke_specimens_binary_dos_so_ppc) \
	$(nonsmoke_specimens_binary_dos_so_x86) \
	$(nonsmoke_specimens_binary_dos_core_amd64) \
	$(nonsmoke_specimens_binary_dos_core_arm) \
	$(nonsmoke_specimens_binary_dos_core_mips) \
	$(nonsmoke_specimens_binary_dos_core_m68k) \
	$(nonsmoke_specimens_binary_dos_core_ppc) \
	$(nonsmoke_specimens_binary_dos_core_x86) \
	$(nonsmoke_specimens_binary_dos_insns_amd64) \
	$(nonsmoke_specimens_binary_dos_insns_arm) \
	$(nonsmoke_specimens_binary_dos_insns_mips) \
	$(nonsmoke_specimens_binary_dos_insns_m68k) \
	$(nonsmoke_specimens_binary_dos_insns_ppc) \
	$(nonsmoke_specimens_binary_dos_insns_x86) \
	$(nonsmoke_specimens_binary_dos_rot13_amd64) \
	$(nonsmoke_specimens_binary_dos_rot13_arm) \
	$(nonsmoke_specimens_binary_dos_rot13_mips) \
	$(nonsmoke_specimens_binary_dos_rot13_m68k) \
	$(nonsmoke_specimens_binary_dos_rot13_ppc) \
	$(nonsmoke_specimens_binary_dos_rot13_x86)
nonsmoke_specimens_binary_elf_any_any =  \
	$(nonsmoke_specimens_binary_elf_exe_amd64) \
	$(nonsmoke_specimens_binary_elf_exe_arm) \
	$(nonsmoke_specimens_binary_elf_exe_mips) \
	$(nonsmoke_specimens_binary_elf_exe_m68k) \
	$(nonsmoke_specimens_binary_elf_exe_ppc) \
	$(nonsmoke_specimens_binary_elf_exe_x86) \
	$(nonsmoke_specimens_binary_elf_obj_amd64) \
	$(nonsmoke_specimens_binary_elf_obj_arm) \
	$(nonsmoke_specimens_binary_elf_obj_mips) \
	$(nonsmoke_specimens_binary_elf_obj_m68k) \
	$(nonsmoke_specimens_binary_elf_obj_ppc) \
	$(nonsmoke_specimens_binary_elf_obj_x86) \
	$(nonsmoke_specimens_binary_elf_archive_amd64) \
	$(nonsmoke_specimens_binary_elf_archive_arm) \
	$(nonsmoke_specimens_binary_elf_archive_mips) \
	$(nonsmoke_specimens_binary_elf_archive_m68k) \
	$(nonsmoke_specimens_binary_elf_archive_ppc) \
	$(nonsmoke_specimens_binary_elf_archive_x86) \
	$(nonsmoke_specimens_binary_elf_so_amd64) \
	$(nonsmoke_specimens_binary_elf_so_arm) \
	$(nonsmoke_specimens_binary_elf_so_mips) \
	$(nonsmoke_specimens_binary_elf_so_m68k) \
	$(nonsmoke_specimens_binary_elf_so_ppc) \
	$(nonsmoke_specimens_binary_elf_so_x86) \
	$(nonsmoke_specimens_binary_elf_core_amd64) \
	$(nonsmoke_specimens_binary_elf_core_arm) \
	$(nonsmoke_specimens_binary_elf_core_mips) \
	$(nonsmoke_specimens_binary_elf_core_m68k) \
	$(nonsmoke_specimens_binary_elf_core_ppc) \
	$(nonsmoke_specimens_binary_elf_core_x86) \
	$(nonsmoke_specimens_binary_elf_insns_amd64) \
	$(nonsmoke_specimens_binary_elf_insns_arm) \
	$(nonsmoke_specimens_binary_elf_insns_mips) \
	$(nonsmoke_specimens_binary_elf_insns_m68k) \
	$(nonsmoke_specimens_binary_elf_insns_ppc) \
	$(nonsmoke_specimens_binary_elf_insns_x86) \
	$(nonsmoke_specimens_binary_elf_rot13_amd64) \
	$(nonsmoke_specimens_binary_elf_rot13_arm) \
	$(nonsmoke_specimens_binary_elf_rot13_mips) \
	$(nonsmoke_specimens_binary_elf_rot13_m68k) \
	$(nonsmoke_specimens_binary_elf_rot13_ppc) \
	$(nonsmoke_specimens_binary_elf_rot13_x86)
nonsmoke_specimens_binary_pe_any_any =  \
	$(nonsmoke_specimens_binary_pe_exe_amd64) \
	$(nonsmoke_specimens_binary_pe_exe_arm) \
	$(nonsmoke_specimens_binary_pe_exe_mips) \
	$(nonsmoke_specimens_binary_pe_exe_m68k) \
	$(nonsmoke_specimens_binary_pe_exe_ppc) \
	$(nonsmoke_specimens_binary_pe_exe_x86) \
	$(nonsmoke_specimens_binary_pe_obj_amd64) \
	$(nonsmoke_specimens_binary_pe_obj_arm) \
	$(nonsmoke_specimens_binary_pe_obj_mips) \
	$(nonsmoke_specimens_binary_pe_obj_m68k) \
	$(nonsmoke_specimens_binary_pe_obj_ppc) \
	$(nonsmoke_specimens_binary_pe_obj_x86) \
	$(nonsmoke_specimens_binary_pe_archive_amd64) \
	$(nonsmoke_specimens_binary_pe_archive_arm) \
	$(nonsmoke_specimens_binary_pe_archive_mips) \
	$(nonsmoke_specimens_binary_pe_archive_m68k) \
	$(nonsmoke_specimens_binary_pe_archive_ppc) \
	$(nonsmoke_specimens_binary_pe_archive_x86) \
	$(nonsmoke_specimens_binary_pe_so_amd64) \
	$(nonsmoke_specimens_binary_pe_so_arm) \
	$(nonsmoke_specimens_binary_pe_so_mips) \
	$(nonsmoke_specimens_binary_pe_so_m68k) \
	$(nonsmoke_specimens_binary_pe_so_ppc) \
	$(nonsmoke_specimens_binary_pe_so_x86) \
	$(nonsmoke_specimens_binary_pe_core_amd64) \
	$(nonsmoke_specimens_binary_pe_core_arm) \
	$(nonsmoke_specimens_binary_pe_core_mips) \
	$(nonsmoke_specimens_binary_pe_core_m68k) \
	$(nonsmoke_specimens_binary_pe_core_ppc) \
	$(nonsmoke_specimens_binary_pe_core_x86) \
	$(nonsmoke_specimens_binary_pe_insns_amd64) \
	$(nonsmoke_specimens_binary_pe_insns_arm) \
	$(nonsmoke_specimens_binary_pe_insns_mips) \
	$(nonsmoke_specimens_binary_pe_insns_m68k) \
	$(nonsmoke_specimens_binary_pe_insns_ppc) \
	$(nonsmoke_specimens_binary_pe_insns_x86) \
	$(nonsmoke_specimens_binary_pe_rot13_amd64) \
	$(nonsmoke_specimens_binary_pe_rot13_arm) \
	$(nonsmoke_specimens_binary_pe_rot13_mips) \
	$(nonsmoke_specimens_binary_pe_rot13_m68k) \
	$(nonsmoke_specimens_binary_pe_rot13_ppc) \
	$(nonsmoke_specimens_binary_pe_rot13_x86)
nonsmoke_specimens_binary_raw_any_any =  \
	$(nonsmoke_specimens_binary_raw_exe_amd64) \
	$(nonsmoke_specimens_binary_raw_exe_arm) \
	$(nonsmoke_specimens_binary_raw_exe_mips) \
	$(nonsmoke_specimens_binary_raw_exe_m68k) \
	$(nonsmoke_specimens_binary_raw_exe_ppc) \
	$(nonsmoke_specimens_binary_raw_exe_x86) \
	$(nonsmoke_specimens_binary_raw_obj_amd64) \
	$(nonsmoke_specimens_binary_raw_obj_arm) \
	$(nonsmoke_specimens_binary_raw_obj_mips) \
	$(nonsmoke_specimens_binary_raw_obj_m68k) \
	$(nonsmoke_specimens_binary_raw_obj_ppc) \
	$(nonsmoke_specimens_binary_raw_obj_x86) \
	$(nonsmoke_specimens_binary_raw_archive_amd64) \
	$(nonsmoke_specimens_binary_raw_archive_arm) \
	$(nonsmoke_specimens_binary_raw_archive_mips) \
	$(nonsmoke_specimens_binary_raw_archive_m68k) \
	$(nonsmoke_specimens_binary_raw_archive_ppc) \
	$(nonsmoke_specimens_binary_raw_archive_x86) \
	$(nonsmoke_specimens_binary_raw_so_amd64) \
	$(nonsmoke_specimens_binary_raw_so_arm) \
	$(nonsmoke_specimens_binary_raw_so_mips) \
	$(nonsmoke_specimens_binary_raw_so_m68k) \
	$(nonsmoke_specimens_binary_raw_so_ppc) \
	$(nonsmoke_specimens_binary_raw_so_x86) \
	$(nonsmoke_specimens_binary_raw_core_amd64) \
	$(nonsmoke_specimens_binary_raw_core_arm) \
	$(nonsmoke_specimens_binary_raw_core_mips) \
	$(nonsmoke_specimens_binary_raw_core_m68k) \
	$(nonsmoke_specimens_binary_raw_core_ppc) \
	$(nonsmoke_specimens_binary_raw_core_x86) \
	$(nonsmoke_specimens_binary_raw_insns_amd64) \
	$(nonsmoke_specimens_binary_raw_insns_arm) \
	$(nonsmoke_specimens_binary_raw_insns_mips) \
	$(nonsmoke_specimens_binary_raw_insns_m68k) \
	$(nonsmoke_specimens_binary_raw_insns_ppc) \
	$(nonsmoke_specimens_binary_raw_insns_x86) \
	$(nonsmoke_specimens_binary_raw_rot13_amd64) \
	$(nonsmoke_specimens_binary_raw_rot13_arm) \
	$(nonsmoke_specimens_binary_raw_rot13_mips) \
	$(nonsmoke_specimens_binary_raw_rot13_m68k) \
	$(nonsmoke_specimens_binary_raw_rot13_ppc) \
	$(nonsmoke_specimens_binary_raw_rot13_x86)

# Container and architecture agnostic
nonsmoke_specimens_binary_any_exe_any = $(nonsmoke_specimens_binary_dos_exe_amd64) $(nonsmoke_specimens_binary_dos_exe_arm) $(nonsmoke_specimens_binary_dos_exe_mips) $(nonsmoke_specimens_binary_dos_exe_m68k) $(nonsmoke_specimens_binary_dos_exe_ppc) $(nonsmoke_specimens_binary_dos_exe_x86) $(nonsmoke_specimens_binary_elf_exe_amd64) $(nonsmoke_specimens_binary_elf_exe_arm) $(nonsmoke_specimens_binary_elf_exe_mips) $(nonsmoke_specimens_binary_elf_exe_m68k) $(nonsmoke_specimens_binary_elf_exe_ppc) $(nonsmoke_specimens_binary_elf_exe_x86) $(nonsmoke_specimens_binary_pe_exe_amd64) $(nonsmoke_specimens_binary_pe_exe_arm) $(nonsmoke_specimens_binary_pe_exe_mips) $(nonsmoke_specimens_binary_pe_exe_m68k) $(nonsmoke_specimens_binary_pe_exe_ppc) $(nonsmoke_specimens_binary_pe_exe_x86) $(nonsmoke_specimens_binary_raw_exe_amd64) $(nonsmoke_specimens_binary_raw_exe_arm) $(nonsmoke_specimens_binary_raw_exe_mips) $(nonsmoke_specimens_binary_raw_exe_m68k) $(nonsmoke_specimens_binary_raw_exe_ppc) $(nonsmoke_specimens_binary_raw_exe_x86)
nonsmoke_specimens_binary_any_obj_any = $(nonsmoke_specimens_binary_dos_obj_amd64) $(nonsmoke_specimens_binary_dos_obj_arm) $(nonsmoke_specimens_binary_dos_obj_mips) $(nonsmoke_specimens_binary_dos_obj_m68k) $(nonsmoke_specimens_binary_dos_obj_ppc) $(nonsmoke_specimens_binary_dos_obj_x86) $(nonsmoke_specimens_binary_elf_obj_amd64) $(nonsmoke_specimens_binary_elf_obj_arm) $(nonsmoke_specimens_binary_elf_obj_mips) $(nonsmoke_specimens_binary_elf_obj_m68k) $(nonsmoke_specimens_binary_elf_obj_ppc) $(nonsmoke_specimens_binary_elf_obj_x86) $(nonsmoke_specimens_binary_pe_obj_amd64) $(nonsmoke_specimens_binary_pe_obj_arm) $(nonsmoke_specimens_binary_pe_obj_mips) $(nonsmoke_specimens_binary_pe_obj_m68k) $(nonsmoke_specimens_binary_pe_obj_ppc) $(nonsmoke_specimens_binary_pe_obj_x86) $(nonsmoke_specimens_binary_raw_obj_amd64) $(nonsmoke_specimens_binary_raw_obj_arm) $(nonsmoke_specimens_binary_raw_obj_mips) $(nonsmoke_specimens_binary_raw_obj_m68k) $(nonsmoke_specimens_binary_raw_obj_ppc) $(nonsmoke_specimens_binary_raw_obj_x86)
nonsmoke_specimens_binary_any_archive_any =  \
	$(nonsmoke_specimens_binary_dos_archive_amd64) \
	$(nonsmoke_specimens_binary_dos_archive_arm) \
	$(nonsmoke_specimens_binary_dos_archive_mips) \
	$(nonsmoke_specimens_binary_dos_archive_m68k) \
	$(nonsmoke_specimens_binary_dos_archive_ppc) \
	$(nonsmoke_specimens_binary_dos_archive_x86) \
	$(nonsmoke_specimens_binary_elf_archive_amd64) \
	$(nonsmoke_specimens_binary_elf_archive_arm) \
	$(nonsmoke_specimens_binary_elf_archive_mips) \
	$(nonsmoke_specimens_binary_elf_archive_m68k) \
	$(nonsmoke_specimens_binary_elf_archive_ppc) \
	$(nonsmoke_specimens_binary_elf_archive_x86) \
	$(nonsmoke_specimens_binary_pe_archive_amd64) \
	$(nonsmoke_specimens_binary_pe_archive_arm) \
	$(nonsmoke_specimens_binary_pe_archive_mips) \
	$(nonsmoke_specimens_binary_pe_archive_m68k) \
	$(nonsmoke_specimens_binary_pe_archive_ppc) \
	$(nonsmoke_specimens_binary_pe_archive_x86) \
	$(nonsmoke_specimens_binary_raw_archive_amd64) \
	$(nonsmoke_specimens_binary_raw_archive_arm) \
	$(nonsmoke_specimens_binary_raw_archive_mips) \
	$(nonsmoke_specimens_binary_raw_archive_m68k) \
	$(nonsmoke_specimens_binary_raw_archive_ppc) \
	$(nonsmoke_specimens_binary_raw_archive_x86)
nonsmoke_specimens_binary_any_so_any = $(nonsmoke_specimens_binary_dos_so_amd64) $(nonsmoke_specimens_binary_dos_so_arm) $(nonsmoke_specimens_binary_dos_so_mips) $(nonsmoke_specimens_binary_dos_so_m68k) $(nonsmoke_specimens_binary_dos_so_ppc) $(nonsmoke_specimens_binary_dos_so_x86) $(nonsmoke_specimens_binary_elf_so_amd64) $(nonsmoke_specimens_binary_elf_so_arm) $(nonsmoke_specimens_binary_elf_so_mips) $(nonsmoke_specimens_binary_elf_so_m68k) $(nonsmoke_specimens_binary_elf_so_ppc) $(nonsmoke_specimens_binary_elf_so_x86) $(nonsmoke_specimens_binary_pe_so_amd64) $(nonsmoke_specimens_binary_pe_so_arm) $(nonsmoke_specimens_binary_pe_so_mips) $(nonsmoke_specimens_binary_pe_so_m68k) $(nonsmoke_specimens_binary_pe_so_ppc) $(nonsmoke_specimens_binary_pe_so_x86) $(nonsmoke_specimens_binary_raw_so_amd64) $(nonsmoke_specimens_binary_raw_so_arm) $(nonsmoke_specimens_binary_raw_so_mips) $(nonsmoke_specimens_binary_raw_so_m68k) $(nonsmoke_specimens_binary_raw_so_ppc) $(nonsmoke_specimens_binary_raw_so_x86)
nonsmoke_specimens_binary_any_core_any =  \
	$(nonsmoke_specimens_binary_dos_core_amd64) \
	$(nonsmoke_specimens_binary_dos_core_arm) \
	$(nonsmoke_specimens_binary_dos_core_mips) \
	$(nonsmoke_specimens_binary_dos_core_m68k) \
	$(nonsmoke_specimens_binary_dos_core_ppc) \
	$(nonsmoke_specimens_binary_dos_core_x86) \
	$(nonsmoke_specimens_binary_elf_core_amd64) \
	$(nonsmoke_specimens_binary_elf_core_arm) \
	$(nonsmoke_specimens_binary_elf_core_mips) \
	$(nonsmoke_specimens_binary_elf_core_m68k) \
	$(nonsmoke_specimens_binary_elf_core_ppc) \
	$(nonsmoke_specimens_binary_elf_core_x86) \
	$(nonsmoke_specimens_binary_pe_core_amd64) \
	$(nonsmoke_specimens_binary_pe_core_arm) \
	$(nonsmoke_specimens_binary_pe_core_mips) \
	$(nonsmoke_specimens_binary_pe_core_m68k) \
	$(nonsmoke_specimens_binary_pe_core_ppc) \
	$(nonsmoke_specimens_binary_pe_core_x86) \
	$(nonsmoke_specimens_binary_raw_core_amd64) \
	$(nonsmoke_specimens_binary_raw_core_arm) \
	$(nonsmoke_specimens_binary_raw_core_mips) \
	$(nonsmoke_specimens_binary_raw_core_m68k) \
	$(nonsmoke_specimens_binary_raw_core_ppc) \
	$(nonsmoke_specimens_binary_raw_core_x86)
nonsmoke_specimens_binary_any_insns_any =  \
	$(nonsmoke_specimens_binary_dos_insns_amd64) \
	$(nonsmoke_specimens_binary_dos_insns_arm) \
	$(nonsmoke_specimens_binary_dos_insns_mips) \
	$(nonsmoke_specimens_binary_dos_insns_m68k) \
	$(nonsmoke_specimens_binary_dos_insns_ppc) \
	$(nonsmoke_specimens_binary_dos_insns_x86) \
	$(nonsmoke_specimens_binary_elf_insns_amd64) \
	$(nonsmoke_specimens_binary_elf_insns_arm) \
	$(nonsmoke_specimens_binary_elf_insns_mips) \
	$(nonsmoke_specimens_binary_elf_insns_m68k) \
	$(nonsmoke_specimens_binary_elf_insns_ppc) \
	$(nonsmoke_specimens_binary_elf_insns_x86) \
	$(nonsmoke_specimens_binary_pe_insns_amd64) \
	$(nonsmoke_specimens_binary_pe_insns_arm) \
	$(nonsmoke_specimens_binary_pe_insns_mips) \
	$(nonsmoke_specimens_binary_pe_insns_m68k) \
	$(nonsmoke_specimens_binary_pe_insns_ppc) \
	$(nonsmoke_specimens_binary_pe_insns_x86) \
	$(nonsmoke_specimens_binary_raw_insns_amd64) \
	$(nonsmoke_specimens_binary_raw_insns_arm) \
	$(nonsmoke_specimens_binary_raw_insns_mips) \
	$(nonsmoke_specimens_binary_raw_insns_m68k) \
	$(nonsmoke_specimens_binary_raw_insns_ppc) \
	$(nonsmoke_specimens_binary_raw_insns_x86)
nonsmoke_specimens_binary_any_rot13_any =  \
	$(nonsmoke_specimens_binary_dos_rot13_amd64) \
	$(nonsmoke_specimens_binary_dos_rot13_arm) \
	$(nonsmoke_specimens_binary_dos_rot13_mips) \
	$(nonsmoke_specimens_binary_dos_rot13_m68k) \
	$(nonsmoke_specimens_binary_dos_rot13_ppc) \
	$(nonsmoke_specimens_binary_dos_rot13_x86) \
	$(nonsmoke_specimens_binary_elf_rot13_amd64) \
	$(nonsmoke_specimens_binary_elf_rot13_arm) \
	$(nonsmoke_specimens_binary_elf_rot13_mips) \
	$(nonsmoke_specimens_binary_elf_rot13_m68k) \
	$(nonsmoke_specimens_binary_elf_rot13_ppc) \
	$(nonsmoke_specimens_binary_elf_rot13_x86) \
	$(nonsmoke_specimens_binary_pe_rot13_amd64) \
	$(nonsmoke_specimens_binary_pe_rot13_arm) \
	$(nonsmoke_specimens_binary_pe_rot13_mips) \
	$(nonsmoke_specimens_binary_pe_rot13_m68k) \
	$(nonsmoke_specimens_binary_pe_rot13_ppc) \
	$(nonsmoke_specimens_binary_pe_rot13_x86) \
	$(nonsmoke_specimens_binary_raw_rot13_amd64) \
	$(nonsmoke_specimens_binary_raw_rot13_arm) \
	$(nonsmoke_specimens_binary_raw_rot13_mips) \
	$(nonsmoke_specimens_binary_raw_rot13_m68k) \
	$(nonsmoke_specimens_binary_raw_rot13_ppc) \
	$(nonsmoke_specimens_binary_raw_rot13_x86)

# Container and filetype agnostic
nonsmoke_specimens_binary_any_any_amd64 =  \
	$(nonsmoke_specimens_binary_dos_exe_amd64) \
	$(nonsmoke_specimens_binary_dos_obj_amd64) \
	$(nonsmoke_specimens_binary_dos_archive_amd64) \
	$(nonsmoke_specimens_binary_dos_so_amd64) \
	$(nonsmoke_specimens_binary_dos_core_amd64) \
	$(nonsmoke_specimens_binary_dos_insns_amd64) \
	$(nonsmoke_specimens_binary_dos_rot13_amd64) \
	$(nonsmoke_specimens_binary_elf_exe_amd64) \
	$(nonsmoke_specimens_binary_elf_obj_amd64) \
	$(nonsmoke_specimens_binary_elf_archive_amd64) \
	$(nonsmoke_specimens_binary_elf_so_amd64) \
	$(nonsmoke_specimens_binary_elf_core_amd64) \
	$(nonsmoke_specimens_binary_elf_insns_amd64) \
	$(nonsmoke_specimens_binary_elf_rot13_amd64) \
	$(nonsmoke_specimens_binary_pe_exe_amd64) \
	$(nonsmoke_specimens_binary_pe_obj_amd64) \
	$(nonsmoke_specimens_binary_pe_archive_amd64) \
	$(nonsmoke_specimens_binary_pe_so_amd64) \
	$(nonsmoke_specimens_binary_pe_core_amd64) \
	$(nonsmoke_specimens_binary_pe_insns_amd64) \
	$(nonsmoke_specimens_binary_pe_rot13_amd64) \
	$(nonsmoke_specimens_binary_raw_exe_amd64) \
	$(nonsmoke_specimens_binary_raw_obj_amd64) \
	$(nonsmoke_specimens_binary_raw_archive_amd64) \
	$(nonsmoke_specimens_binary_raw_so_amd64) \
	$(nonsmoke_specimens_binary_raw_core_amd64) \
	$(nonsmoke_specimens_binary_raw_insns_amd64) \
	$(nonsmoke_specimens_binary_raw_rot13_amd64)
nonsmoke_specimens_binary_any_any_arm =  \
	$(nonsmoke_specimens_binary_dos_exe_arm) \
	$(nonsmoke_specimens_binary_dos_obj_arm) \
	$(nonsmoke_specimens_binary_dos_archive_arm) \
	$(nonsmoke_specimens_binary_dos_so_arm) \
	$(nonsmoke_specimens_binary_dos_core_arm) \
	$(nonsmoke_specimens_binary_dos_insns_arm) \
	$(nonsmoke_specimens_binary_dos_rot13_arm) \
	$(nonsmoke_specimens_binary_elf_exe_arm) \
	$(nonsmoke_specimens_binary_elf_obj_arm) \
	$(nonsmoke_specimens_binary_elf_archive_arm) \
	$(nonsmoke_specimens_binary_elf_so_arm) \
	$(nonsmoke_specimens_binary_elf_core_arm) \
	$(nonsmoke_specimens_binary_elf_insns_arm) \
	$(nonsmoke_specimens_binary_elf_rot13_arm) \
	$(nonsmoke_specimens_binary_pe_exe_arm) \
	$(nonsmoke_specimens_binary_pe_obj_arm) \
	$(nonsmoke_specimens_binary_pe_archive_arm) \
	$(nonsmoke_specimens_binary_pe_so_arm) \
	$(nonsmoke_specimens_binary_pe_core_arm) \
	$(nonsmoke_specimens_binary_pe_insns_arm) \
	$(nonsmoke_specimens_binary_pe_rot13_arm) \
	$(nonsmoke_specimens_binary_raw_exe_arm) \
	$(nonsmoke_specimens_binary_raw_obj_arm) \
	$(nonsmoke_specimens_binary_raw_archive_arm) \
	$(nonsmoke_specimens_binary_raw_so_arm) \
	$(nonsmoke_specimens_binary_raw_core_arm) \
	$(nonsmoke_specimens_binary_raw_insns_arm) \
	$(nonsmoke_specimens_binary_raw_rot13_arm)
nonsmoke_specimens_binary_any_any_mips =  \
	$(nonsmoke_specimens_binary_dos_exe_mips) \
	$(nonsmoke_specimens_binary_dos_obj_mips) \
	$(nonsmoke_specimens_binary_dos_archive_mips) \
	$(nonsmoke_specimens_binary_dos_so_mips) \
	$(nonsmoke_specimens_binary_dos_core_mips) \
	$(nonsmoke_specimens_binary_dos_insns_mips) \
	$(nonsmoke_specimens_binary_dos_rot13_mips) \
	$(nonsmoke_specimens_binary_elf_exe_mips) \
	$(nonsmoke_specimens_binary_elf_obj_mips) \
	$(nonsmoke_specimens_binary_elf_archive_mips) \
	$(nonsmoke_specimens_binary_elf_so_mips) \
	$(nonsmoke_specimens_binary_elf_core_mips) \
	$(nonsmoke_specimens_binary_elf_insns_mips) \
	$(nonsmoke_specimens_binary_elf_rot13_mips) \
	$(nonsmoke_specimens_binary_pe_exe_mips) \
	$(nonsmoke_specimens_binary_pe_obj_mips) \
	$(nonsmoke_specimens_binary_pe_archive_mips) \
	$(nonsmoke_specimens_binary_pe_so_mips) \
	$(nonsmoke_specimens_binary_pe_core_mips) \
	$(nonsmoke_specimens_binary_pe_insns_mips) \
	$(nonsmoke_specimens_binary_pe_rot13_mips) \
	$(nonsmoke_specimens_binary_raw_exe_mips) \
	$(nonsmoke_specimens_binary_raw_obj_mips) \
	$(nonsmoke_specimens_binary_raw_archive_mips) \
	$(nonsmoke_specimens_binary_raw_so_mips) \
	$(nonsmoke_specimens_binary_raw_core_mips) \
	$(nonsmoke_specimens_binary_raw_insns_mips) \
	$(nonsmoke_specimens_binary_raw_rot13_mips)
nonsmoke_specimens_binary_any_any_m68k =  \
	$(nonsmoke_specimens_binary_dos_exe_m68k) \
	$(nonsmoke_specimens_binary_dos_obj_m68k) \
	$(nonsmoke_specimens_binary_dos_archive_m68k) \
	$(nonsmoke_specimens_binary_dos_so_m68k) \
	$(nonsmoke_specimens_binary_dos_core_m68k) \
	$(nonsmoke_specimens_binary_dos_insns_m68k) \
	$(nonsmoke_specimens_binary_dos_rot13_m68k) \
	$(nonsmoke_specimens_binary_elf_exe_m68k) \
	$(nonsmoke_specimens_binary_elf_obj_m68k) \
	$(nonsmoke_specimens_binary_elf_archive_m68k) \
	$(nonsmoke_specimens_binary_elf_so_m68k) \
	$(nonsmoke_specimens_binary_elf_core_m68k) \
	$(nonsmoke_specimens_binary_elf_insns_m68k) \
	$(nonsmoke_specimens_binary_elf_rot13_m68k) \
	$(nonsmoke_specimens_binary_pe_exe_m68k) \
	$(nonsmoke_specimens_binary_pe_obj_m68k) \
	$(nonsmoke_specimens_binary_pe_archive_m68k) \
	$(nonsmoke_specimens_binary_pe_so_m68k) \
	$(nonsmoke_specimens_binary_pe_core_m68k) \
	$(nonsmoke_specimens_binary_pe_insns_m68k) \
	$(nonsmoke_specimens_binary_pe_rot13_m68k) \
	$(nonsmoke_specimens_binary_raw_exe_m68k) \
	$(nonsmoke_specimens_binary_raw_obj_m68k) \
	$(nonsmoke_specimens_binary_raw_archive_m68k) \
	$(nonsmoke_specimens_binary_raw_so_m68k) \
	$(nonsmoke_specimens_binary_raw_core_m68k) \
	$(nonsmoke_specimens_binary_raw_insns_m68k) \
	$(nonsmoke_specimens_binary_raw_rot13_m68k)
nonsmoke_specimens_binary_any_any_ppc =  \
	$(nonsmoke_specimens_binary_dos_exe_ppc) \
	$(nonsmoke_specimens_binary_dos_obj_ppc) \
	$(nonsmoke_specimens_binary_dos_archive_ppc) \
	$(nonsmoke_specimens_binary_dos_so_ppc) \
	$(nonsmoke_specimens_binary_dos_core_ppc) \
	$(nonsmoke_specimens_binary_dos_insns_ppc) \
	$(nonsmoke_specimens_binary_dos_rot13_ppc) \
	$(nonsmoke_specimens_binary_elf_exe_ppc) \
	$(nonsmoke_specimens_binary_elf_obj_ppc) \
	$(nonsmoke_specimens_binary_elf_archive_ppc) \
	$(nonsmoke_specimens_binary_elf_so_ppc) \
	$(nonsmoke_specimens_binary_elf_core_ppc) \
	$(nonsmoke_specimens_binary_elf_insns_ppc) \
	$(nonsmoke_specimens_binary_elf_rot13_ppc) \
	$(nonsmoke_specimens_binary_pe_exe_ppc) \
	$(nonsmoke_specimens_binary_pe_obj_ppc) \
	$(nonsmoke_specimens_binary_pe_archive_ppc) \
	$(nonsmoke_specimens_binary_pe_so_ppc) \
	$(nonsmoke_specimens_binary_pe_core_ppc) \
	$(nonsmoke_specimens_binary_pe_insns_ppc) \
	$(nonsmoke_specimens_binary_pe_rot13_ppc) \
	$(nonsmoke_specimens_binary_raw_exe_ppc) \
	$(nonsmoke_specimens_binary_raw_obj_ppc) \
	$(nonsmoke_specimens_binary_raw_archive_ppc) \
	$(nonsmoke_specimens_binary_raw_so_ppc) \
	$(nonsmoke_specimens_binary_raw_core_ppc) \
	$(nonsmoke_specimens_binary_raw_insns_ppc) \
	$(nonsmoke_specimens_binary_raw_rot13_ppc)
nonsmoke_specimens_binary_any_any_x86 =  \
	$(nonsmoke_specimens_binary_dos_exe_x86) \
	$(nonsmoke_specimens_binary_dos_obj_x86) \
	$(nonsmoke_specimens_binary_dos_archive_x86) \
	$(nonsmoke_specimens_binary_dos_so_x86) \
	$(nonsmoke_specimens_binary_dos_core_x86) \
	$(nonsmoke_specimens_binary_dos_insns_x86) \
	$(nonsmoke_specimens_binary_dos_rot13_x86) \
	$(nonsmoke_specimens_binary_elf_exe_x86) \
	$(nonsmoke_specimens_binary_elf_obj_x86) \
	$(nonsmoke_specimens_binary_elf_archive_x86) \
	$(nonsmoke_specimens_binary_elf_so_x86) \
	$(nonsmoke_specimens_binary_elf_core_x86) \
	$(nonsmoke_specimens_binary_elf_insns_x86) \
	$(nonsmoke_specimens_binary_elf_rot13_x86) \
	$(nonsmoke_specimens_binary_pe_exe_x86) \
	$(nonsmoke_specimens_binary_pe_obj_x86) \
	$(nonsmoke_specimens_binary_pe_archive_x86) \
	$(nonsmoke_specimens_binary_pe_so_x86) \
	$(nonsmoke_specimens_binary_pe_core_x86) \
	$(nonsmoke_specimens_binary_pe_insns_x86) \
	$(nonsmoke_specimens_binary_pe_rot13_x86) \
	$(nonsmoke_specimens_binary_raw_exe_x86) \
	$(nonsmoke_specimens_binary_raw_obj_x86) \
	$(nonsmoke_specimens_binary_raw_archive_x86) \
	$(nonsmoke_specimens_binary_raw_so_x86) \
	$(nonsmoke_specimens_binary_raw_core_x86) \
	$(nonsmoke_specimens_binary_raw_insns_x86) \
	$(nonsmoke_specimens_binary_raw_rot13_x86)

# All binary specimens
nonsmoke_specimens_binary_any_any_any =  \
	$(nonsmoke_specimens_binary_dos_exe_amd64) \
	$(nonsmoke_specimens_binary_dos_exe_arm) \
	$(nonsmoke_specimens_binary_dos_exe_mips) \
	$(nonsmoke_specimens_binary_dos_exe_m68k) \
	$(nonsmoke_specimens_binary_dos_exe_ppc) \
	$(nonsmoke_specimens_binary_dos_exe_x86) \
	$(nonsmoke_specimens_binary_dos_obj_amd64) \
	$(nonsmoke_specimens_binary_dos_obj_arm) \
	$(nonsmoke_specimens_binary_dos_obj_mips) \
	$(nonsmoke_specimens_binary_dos_obj_m68k) \
	$(nonsmoke_specimens_binary_dos_obj_ppc) \
	$(nonsmoke_specimens_binary_dos_obj_x86) \
	$(nonsmoke_specimens_binary_dos_archive_amd64) \
	$(nonsmoke_specimens_binary_dos_archive_arm) \
	$(nonsmoke_specimens_binary_dos_archive_mips) \
	$(nonsmoke_specimens_binary_dos_archive_m68k) \
	$(nonsmoke_specimens_binary_dos_archive_ppc) \
	$(nonsmoke_specimens_binary_dos_archive_x86) \
	$(nonsmoke_specimens_binary_dos_so_amd64) \
	$(nonsmoke_specimens_binary_dos_so_arm) \
	$(nonsmoke_specimens_binary_dos_so_mips) \
	$(nonsmoke_specimens_binary_dos_so_m68k) \
	$(nonsmoke_specimens_binary_dos_so_ppc) \
	$(nonsmoke_specimens_binary_dos_so_x86) \
	$(nonsmoke_specimens_binary_dos_core_amd64) \
	$(nonsmoke_specimens_binary_dos_core_arm) \
	$(nonsmoke_specimens_binary_dos_core_mips) \
	$(nonsmoke_specimens_binary_dos_core_m68k) \
	$(nonsmoke_specimens_binary_dos_core_ppc) \
	$(nonsmoke_specimens_binary_dos_core_x86) \
	$(nonsmoke_specimens_binary_dos_insns_amd64) \
	$(nonsmoke_specimens_binary_dos_insns_arm) \
	$(nonsmoke_specimens_binary_dos_insns_mips) \
	$(nonsmoke_specimens_binary_dos_insns_m68k) \
	$(nonsmoke_specimens_binary_dos_insns_ppc) \
	$(nonsmoke_specimens_binary_dos_insns_x86) \
	$(nonsmoke_specimens_binary_dos_rot13_amd64) \
	$(nonsmoke_specimens_binary_dos_rot13_arm) \
	$(nonsmoke_specimens_binary_dos_rot13_mips) \
	$(nonsmoke_specimens_binary_dos_rot13_m68k) \
	$(nonsmoke_specimens_binary_dos_rot13_ppc) \
	$(nonsmoke_specimens_binary_dos_rot13_x86) \
	$(nonsmoke_specimens_binary_elf_exe_amd64) \
	$(nonsmoke_specimens_binary_elf_exe_arm) \
	$(nonsmoke_specimens_binary_elf_exe_mips) \
	$(nonsmoke_specimens_binary_elf_exe_m68k) \
	$(nonsmoke_specimens_binary_elf_exe_ppc) \
	$(nonsmoke_specimens_binary_elf_exe_x86) \
	$(nonsmoke_specimens_binary_elf_obj_amd64) \
	$(nonsmoke_specimens_binary_elf_obj_arm) \
	$(nonsmoke_specimens_binary_elf_obj_mips) \
	$(nonsmoke_specimens_binary_elf_obj_m68k) \
	$(nonsmoke_specimens_binary_elf_obj_ppc) \
	$(nonsmoke_specimens_binary_elf_obj_x86) \
	$(nonsmoke_specimens_binary_elf_archive_amd64) \
	$(nonsmoke_specimens_binary_elf_archive_arm) \
	$(nonsmoke_specimens_binary_elf_archive_mips) \
	$(nonsmoke_specimens_binary_elf_archive_m68k) \
	$(nonsmoke_specimens_binary_elf_archive_ppc) \
	$(nonsmoke_specimens_binary_elf_archive_x86) \
	$(nonsmoke_specimens_binary_elf_so_amd64) \
	$(nonsmoke_specimens_binary_elf_so_arm) \
	$(nonsmoke_specimens_binary_elf_so_mips) \
	$(nonsmoke_specimens_binary_elf_so_m68k) \
	$(nonsmoke_specimens_binary_elf_so_ppc) \
	$(nonsmoke_specimens_binary_elf_so_x86) \
	$(nonsmoke_specimens_binary_elf_core_amd64) \
	$(nonsmoke_specimens_binary_elf_core_arm) \
	$(nonsmoke_specimens_binary_elf_core_mips) \
	$(nonsmoke_specimens_binary_elf_core_m68k) \
	$(nonsmoke_specimens_binary_elf_core_ppc) \
	$(nonsmoke_specimens_binary_elf_core_x86) \
	$(nonsmoke_specimens_binary_elf_insns_amd64) \
	$(nonsmoke_specimens_binary_elf_insns_arm) \
	$(nonsmoke_specimens_binary_elf_insns_mips) \
	$(nonsmoke_specimens_binary_elf_insns_m68k) \
	$(nonsmoke_specimens_binary_elf_insns_ppc) \
	$(nonsmoke_specimens_binary_elf_insns_x86) \
	$(nonsmoke_specimens_binary_elf_rot13_amd64) \
	$(nonsmoke_specimens_binary_elf_rot13_arm) \
	$(nonsmoke_specimens_binary_elf_rot13_mips) \
	$(nonsmoke_specimens_binary_elf_rot13_m68k) \
	$(nonsmoke_specimens_binary_elf_rot13_ppc) \
	$(nonsmoke_specimens_binary_elf_rot13_x86) \
	$(nonsmoke_specimens_binary_pe_exe_amd64) \
	$(nonsmoke_specimens_binary_pe_exe_arm) \
	$(nonsmoke_specimens_binary_pe_exe_mips) \
	$(nonsmoke_specimens_binary_pe_exe_m68k) \
	$(nonsmoke_specimens_binary_pe_exe_ppc) \
	$(nonsmoke_specimens_binary_pe_exe_x86) \
	$(nonsmoke_specimens_binary_pe_obj_amd64) \
	$(nonsmoke_specimens_binary_pe_obj_arm) \
	$(nonsmoke_specimens_binary_pe_obj_mips) \
	$(nonsmoke_specimens_binary_pe_obj_m68k) \
	$(nonsmoke_specimens_binary_pe_obj_ppc) \
	$(nonsmoke_specimens_binary_pe_obj_x86) \
	$(nonsmoke_specimens_binary_pe_archive_amd64) \
	$(nonsmoke_specimens_binary_pe_archive_arm) \
	$(nonsmoke_specimens_binary_pe_archive_mips) \
	$(nonsmoke_specimens_binary_pe_archive_m68k) \
	$(nonsmoke_specimens_binary_pe_archive_ppc) \
	$(nonsmoke_specimens_binary_pe_archive_x86) \
	$(nonsmoke_specimens_binary_pe_so_amd64) \
	$(nonsmoke_specimens_binary_pe_so_arm) \
	$(nonsmoke_specimens_binary_pe_so_mips) \
	$(nonsmoke_specimens_binary_pe_so_m68k) \
	$(nonsmoke_specimens_binary_pe_so_ppc) \
	$(nonsmoke_specimens_binary_pe_so_x86) \
	$(nonsmoke_specimens_binary_pe_core_amd64) \
	$(nonsmoke_specimens_binary_pe_core_arm) \
	$(nonsmoke_specimens_binary_pe_core_mips) \
	$(nonsmoke_specimens_binary_pe_core_m68k) \
	$(nonsmoke_specimens_binary_pe_core_ppc) \
	$(nonsmoke_specimens_binary_pe_core_x86) \
	$(nonsmoke_specimens_binary_pe_insns_amd64) \
	$(nonsmoke_specimens_binary_pe_insns_arm) \
	$(nonsmoke_specimens_binary_pe_insns_mips) \
	$(nonsmoke_specimens_binary_pe_insns_m68k) \
	$(nonsmoke_specimens_binary_pe_insns_ppc) \
	$(nonsmoke_specimens_binary_pe_insns_x86) \
	$(nonsmoke_specimens_binary_pe_rot13_amd64) \
	$(nonsmoke_specimens_binary_pe_rot13_arm) \
	$(nonsmoke_specimens_binary_pe_rot13_mips) \
	$(nonsmoke_specimens_binary_pe_rot13_m68k) \
	$(nonsmoke_specimens_binary_pe_rot13_ppc) \
	$(nonsmoke_specimens_binary_pe_rot13_x86) \
	$(nonsmoke_specimens_binary_raw_exe_amd64) \
	$(nonsmoke_specimens_binary_raw_exe_arm) \
	$(nonsmoke_specimens_binary_raw_exe_mips) \
	$(nonsmoke_specimens_binary_raw_exe_m68k) \
	$(nonsmoke_specimens_binary_raw_exe_ppc) \
	$(nonsmoke_specimens_binary_raw_exe_x86) \
	$(nonsmoke_specimens_binary_raw_obj_amd64) \
	$(nonsmoke_specimens_binary_raw_obj_arm) \
	$(nonsmoke_specimens_binary_raw_obj_mips) \
	$(nonsmoke_specimens_binary_raw_obj_m68k) \
	$(nonsmoke_specimens_binary_raw_obj_ppc) \
	$(nonsmoke_specimens_binary_raw_obj_x86) \
	$(nonsmoke_specimens_binary_raw_archive_amd64) \
	$(nonsmoke_specimens_binary_raw_archive_arm) \
	$(nonsmoke_specimens_binary_raw_archive_mips) \
	$(nonsmoke_specimens_binary_raw_archive_m68k) \
	$(nonsmoke_specimens_binary_raw_archive_ppc) \
	$(nonsmoke_specimens_binary_raw_archive_x86) \
	$(nonsmoke_specimens_binary_raw_so_amd64) \
	$(nonsmoke_specimens_binary_raw_so_arm) \
	$(nonsmoke_specimens_binary_raw_so_mips) \
	$(nonsmoke_specimens_binary_raw_so_m68k) \
	$(nonsmoke_specimens_binary_raw_so_ppc) \
	$(nonsmoke_specimens_binary_raw_so_x86) \
	$(nonsmoke_specimens_binary_raw_core_amd64) \
	$(nonsmoke_specimens_binary_raw_core_arm) \
	$(nonsmoke_specimens_binary_raw_core_mips) \
	$(nonsmoke_specimens_binary_raw_core_m68k) \
	$(nonsmoke_specimens_binary_raw_core_ppc) \
	$(nonsmoke_specimens_binary_raw_core_x86) \
	$(nonsmoke_specimens_binary_raw_insns_amd64) \
	$(nonsmoke_specimens_binary_raw_insns_arm) \
	$(nonsmoke_specimens_binary_raw_insns_mips) \
	$(nonsmoke_specimens_binary_raw_insns_m68k) \
	$(nonsmoke_specimens_binary_raw_insns_ppc) \
	$(nonsmoke_specimens_binary_raw_insns_x86) \
	$(nonsmoke_specimens_binary_raw_rot13_amd64) \
	$(nonsmoke_specimens_binary_raw_rot13_arm) \
	$(nonsmoke_specimens_binary_raw_rot13_mips) \
	$(nonsmoke_specimens_binary_raw_rot13_m68k) \
	$(nonsmoke_specimens_binary_raw_rot13_ppc) \
	$(nonsmoke_specimens_binary_raw_rot13_x86)
SUBDIRS = libraryIdentification_tests Dwarf_tests Pin_tests Concolic
EXTRA_DIST = runExecFormatsTest testShiftResizeSection.sh \
	testSampleBinary.sh testSampleBinaries.conf \
	testFunctionDetection.pl $(am__append_5)

# Forward declarations
TEST_TARGETS = $(am__append_4) $(am__append_8) $(am__append_10) \
	$(am__append_12) $(am__append_14) $(am__append_16) \
	$(am__append_17) $(am__append_18) $(am__append_19) \
	$(am__append_20) $(am__append_21) $(am__append_22) \
	$(am__append_23)
MOSTLYCLEANFILES = $(am__append_6)
PHONIES = $(am__append_15)

# Location of binary specimens
#SPECIMEN_DIR = $(nonsmoke_specimens_binary_directory)

# Corresponding smoke directory
#SMOKE_BLDDIR = $(abspath $(top_builddir))/tests/smoke/functional/BinaryAnalysis
#SMOKE_SRCDIR = $(abspath $(top_srcdir))/tests/smoke/functional/BinaryAnalysis

# To keep compile commands tidy, please ONLY put required include flags here.
#AM_CPPFLAGS = $(ROSE_INCLUDES) -I$(top_srcdir)/src/midend/BinaryAnalysis/libraryIdentification
#AM_LDFLAGS = $(ROSE_RPATHS)
#TEST_EXIT_STATUS = $(top_srcdir)/scripts/test_exit_status
#TEST_WITH_ANSWER = $(top_srcdir)/scripts/test_with_answer
#VALGRIND = 

# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support 
# this, this implementation needs review).  It might be better to prepend the information to the 
# CC and CXX variables. I think that the purify support uses this approach.
##VALGRIND = $(ADDRESS_SANITIZER_OPTIONS)
#conditionalDisable_SOURCES = conditionalDisable.C
#conditionalDisable_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS)
#isA64Disabled_SOURCES = isA64Disabled.C
#isA64Disabled_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS)
#testSymbolicExprParser_SOURCES = testSymbolicExprParser.C
#testSymbolicExprParser_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS)
#execFormatsTest_SOURCES = execFormatsTest.C
#execFormatsTest_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#testControlFlow_SOURCES = testControlFlow.C
#testControlFlow_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#testControlFlow_algorithms = A B C D E
#testControlFlow_targets = $(addsuffix .passed, $(addprefix testControlFlow-, $(testControlFlow_algorithms)))
#testControlFlow_answers = $(testControlFlow_targets:.passed=.ans)
#cfg2_SOURCES = cfg2.C
#cfg2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#testFunctionCall_SOURCES = testFunctionCall.C
#testFunctionCall_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#testElfStrtab_SOURCES = testElfStrtab.C
#testElfStrtab_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#testElfByteOrder_SOURCES = testElfByteOrder.C
#testElfByteOrder_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#testElfWordSize_SOURCES = testElfWordSize.C
#testElfWordSize_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#testElfSchulz_SOURCES = testElfSchulz.C
#testElfSchulz_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#testElfConstruct_SOURCES = testElfConstruct.C
#testElfConstruct_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#testPeConstruct_SOURCES = testPeConstruct.C
#testPeConstruct_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#shiftResizeSection_SOURCES = shiftResizeSection.C
#shiftResizeSection_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#testEtherInsns_SOURCES = testEtherInsns.C
#testEtherInsns_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#functionBoundaries_SOURCES = functionBoundaries.C
#functionBoundaries_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#expandCoreDump_SOURCES = expandCoreDump.C
#expandCoreDump_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#rot13_SOURCES = rot13.C
#testAssembler_SOURCES = testAssembler.C
#testAssembler_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#testAstIO_SOURCES = testAstIO.C
#testAstIO_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#testAstNeuter_SOURCES = testAstNeuter.C
#testAstNeuter_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#testRegisters_SOURCES = testRegisters.C
#testRegisters_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#testReadPastEOF_SOURCES = testReadPastEOF.C
#testReadPastEOF_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
##testLibraryDb_SOURCES = testLibraryDb.C
##testLibraryDb_LDADD = $(ROSE_SEPARATE_LIBS)
#testPeImports_SOURCES = testPeImports.C
#testPeImports_LDADD = $(ROSE_SEPARATE_LIBS)
#cory002_SOURCES = cory002.C
#cory002_LDADD = $(ROSE_SEPARATE_LIBS)
#cory003_SOURCES = cory003.C
#cory003_LDADD = $(ROSE_SEPARATE_LIBS)
#cory004_SOURCES = cory004.C
#cory004_LDADD = $(ROSE_SEPARATE_LIBS)
#cory006_SOURCES = cory006.C
#cory006_LDADD = $(ROSE_SEPARATE_LIBS)
#cory007_SOURCES = cory007.C
#cory007_LDADD = $(ROSE_SEPARATE_LIBS)
#cory008_SOURCES = cory008.C
#cory008_LDADD = $(ROSE_SEPARATE_LIBS)
#cory009_SOURCES = cory009.C
#cory009_LDADD = $(ROSE_SEPARATE_LIBS)
#testSymReadWrite_SOURCES = testSymReadWrite.C
#testSymReadWrite_LDADD = $(ROSE_SEPARATE_LIBS)
#testWorkList_SOURCES = testWorkList.C
#testWorkList_LDADD = $(ROSE_SEPARATE_LIBS)
#testMap_SOURCES = testMap.C
#testMap_LDADD = $(ROSE_SEPARATE_LIBS)
#testPointerDetection_SOURCES = testPointerDetection.C
#testPointerDetection_LDADD = $(ROSE_SEPARATE_LIBS)
#PointerDetectionSpecimen = $(SPECIMEN_DIR)/i386-pointers
#PointerDetectionSpecimenFunctions = \
#	simple01 simple02 simple03 simple04 simple05 simple06 simple07 simple08 simple09 simple10 simple11 simple12	\
#	simple13 simple14 simple15 simple16 simple17 simple18 simple19 simple20 simple21 simple22 simple23 simple24	\
#	simple25 flow01 flow02 flow03 flow04 flow05 flow06 flow07

# This is not currently working: it finds the local variable used as a pointer, but not the L-values used to assign
# to the local variable.
#PointerDetectionSpecimenFunctionsNonWorking = \
#	flow07

#PointerDetectionSwitches = \
#	$(patsubst %,--function=%,										\
#	    $(filter-out $(PointerDetectionSpecimenFunctionsNonWorking),$(PointerDetectionSpecimenFunctions)))

#testCallDetection_SOURCES = testCallDetection.C
#testCallDetection_LDADD = $(ROSE_SEPARATE_LIBS)
#testReturnsValue_SOURCES = testReturnsValue.C
#testReturnsValue_CPPFLAGS = -DROSE_BINARY_TEST_DISABLED='"deprecation"' $(AM_CPPFLAGS)
#testReturnsValue_LDADD = $(ROSE_SEPARATE_LIBS)
#testBitPattern_SOURCES = testBitPattern.C
#testBitPattern_LDADD = $(ROSE_SEPARATE_LIBS)
#testRNG_SOURCES = testRNG.C
#testRNG_LDADD = $(ROSE_SEPARATE_LIBS)
#testSymbolicSimplification_SOURCES = testSymbolicSimplification.C
#testSymbolicSimplification_LDADD = $(ROSE_SEPARATE_LIBS)
#testSymbolicFlags_SOURCES = testSymbolicFlags.C
#testSymbolicFlags_LDADD = $(ROSE_SEPARATE_LIBS)
#verifySemantics_SOURCES = verifySemantics.C
#verifySemantics_LDADD = $(ROSE_SEPARATE_LIBS)

# Be careful where the comma is located!
#testPartitioner2_specimens = $(filter-out		\
#	$(nonsmoke_specimens_binary_any_any_mips)	\
#	$(nonsmoke_specimens_binary_any_any_ppc)	\
#	$(nonsmoke_specimens_binary_any_any_arm)	\
#	$(nonsmoke_specimens_binary_large),		\
#	$(nonsmoke_specimens_binary_any_exe_any))

#testPartitioner2_test_targets = $(addprefix testPartitioner2_, $(addsuffix .passed, $(testPartitioner2_specimens)))
#testPartitioner2_answers = $(testPartitioner2_test_targets:.passed=.ans)

# Another set of partitioner tests, but using the map-based semantic memory
#testP2map_test_targets = $(addprefix testP2map_, $(addsuffix .passed, $(testPartitioner2_specimens)))
#testP2map_answers = $(testPartitioner2_test_target:.passed=.ans)
#testDominance_SOURCES = testDominance.C
#testDominance_CPPFLAGS = -I$(top_srcdir)
#testDominance_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#testDominance_specimens = $(testPartitioner2_specimens)
#testDominance_test_targets = $(patsubst %, testDominance_%.passed, $(testDominance_specimens))
#testDominance_answers = $(testDominance_test_targets:.passed=.ans)
#nullSemantics2_SOURCES = semantics.C
#nullSemantics2_CPPFLAGS = -DSEMANTIC_DOMAIN=NULL_DOMAIN
#nullSemantics2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#partialSymbolicSemantics2_SOURCES = semantics.C
#partialSymbolicSemantics2_CPPFLAGS = -DSEMANTIC_DOMAIN=PARTSYM_DOMAIN
#partialSymbolicSemantics2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#intervalSemantics2_SOURCES = semantics.C
#intervalSemantics2_CPPFLAGS = -DSEMANTIC_DOMAIN=INTERVAL_DOMAIN
#intervalSemantics2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#symbolicSemantics2_SOURCES = semantics.C
#symbolicSemantics2_CPPFLAGS = -DSEMANTIC_DOMAIN=SYMBOLIC_DOMAIN -DSMT_SOLVER=NO_SOLVER
#symbolicSemantics2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#traceSymbolicSemantics2_SOURCES = semantics.C
#traceSymbolicSemantics2_CPPFLAGS = -DSEMANTIC_DOMAIN=SYMBOLIC_DOMAIN -DSMT_SOLVER=NO_SOLVER
#traceSymbolicSemantics2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#yicesSemanticsExe2_SOURCES = semantics.C
#yicesSemanticsExe2_CPPFLAGS = -DSEMANTIC_DOMAIN=SYMBOLIC_DOMAIN -DSMT_SOLVER=YICES_EXE
#yicesSemanticsExe2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#yicesSemanticsLib2_SOURCES = semantics.C
#yicesSemanticsLib2_CPPFLAGS = -DSEMANTIC_DOMAIN=SYMBOLIC_DOMAIN -DSMT_SOLVER=YICES_LIB
#yicesSemanticsLib2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#z3SemanticsExe2_SOURCES = semantics.C
#z3SemanticsExe2_CPPFLAGS = -DSEMANTIC_DOMAIN=SYMBOLIC_DOMAIN -DSMT_SOLVER=Z3_EXE
#z3SemanticsExe2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#z3SemanticsLib2_SOURCES = semantics.C
#z3SemanticsLib2_CPPFLAGS = -DSEMANTIC_DOMAIN=SYMBOLIC_DOMAIN -DSMT_SOLVER=Z3_LIB
#z3SemanticsLib2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#semanticsSubclassing_SOURCES = semanticsSubclassing.C
#semanticsSubclassing_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#nullSemanticsSpeed2_SOURCES = semanticsSpeed.C
#nullSemanticsSpeed2_CPPFLAGS = -DSEMANTIC_DOMAIN=NULL_DOMAIN
#nullSemanticsSpeed2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#partialSymbolicSemanticsSpeed2_SOURCES = semanticsSpeed.C
#partialSymbolicSemanticsSpeed2_CPPFLAGS = -DSEMANTIC_DOMAIN=PARTSYM_DOMAIN
#partialSymbolicSemanticsSpeed2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#symbolicSemanticsSpeed2_SOURCES = semanticsSpeed.C
#symbolicSemanticsSpeed2_CPPFLAGS = -DSEMANTIC_DOMAIN=SYMBOLIC_DOMAIN
#symbolicSemanticsSpeed2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#intervalSemanticsSpeed2_SOURCES = semanticsSpeed.C
#intervalSemanticsSpeed2_CPPFLAGS = -DSEMANTIC_DOMAIN=INTERVAL_DOMAIN
#intervalSemanticsSpeed2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#multiSemanticsSpeed2_SOURCES = semanticsSpeed.C
#multiSemanticsSpeed2_CPPFLAGS = -DSEMANTIC_DOMAIN=MULTI_DOMAIN
#multiSemanticsSpeed2_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#llvmTranscoder_SOURCES = llvmTranscoder.C
#llvmTranscoder_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)

#-------------- basic test to make sure we can transcode each pre-compiled 32-bit x86 specimen

# The "llvm-as" tool might not be installed, in which case $(llvmVersion) will be an empty string.
#llvmVersion = $(shell llvm-as --version 2>&1 |sed -nr '/LLVM version/ s/.*version ([0-9]+\.[0-9]+\.[0-9]+).*/\1/p')

# 128-bit registers are not supported, so don't try to test them (pentium-xxm)
# Test takes too long when compiled with debugging (puttytel.exe)
# Only x86 32-bit is fully supported
#llvmTranscoder_Specimens = \
#        $(filter-out						\
#	        pentium-xmm					\
#		$(nonsmoke_specimens_binary_large),		\
#		$(nonsmoke_specimens_binary_any_exe_x86))

#llvmTranscoder_TestTargets = $(addprefix llvm-xcode-, $(addsuffix .passed, $(llvmTranscoder_Specimens)))

#--------------- tests that run LLVM analysis passes using LLVM's "opt" command
#llvmAnalysis_SpecimenDir = $(srcdir)/llvmAnalysisSpecimens
#llvmAnalysis_Specimens = \
#	basicaa.c				\
#	basiccg.c				\
#	count-aa.c				\
#	domfrontier.c				\
#	domtree.c				\
#	dot-callgraph.c				\
#	dot-cfg-only.c				\
#	dot-cfg.c				\
#	globalsmodref-aa.c			\
#	instcount.c				\
#	intervals.c				\
#	iv-users.c				\
#	libcall-aa.c				\
#	loops.c					\
#	memdep.c				\
#	postdomtree.c				\
#	print-callgraph-sccs.c			\
#	print-cfg-sccs.c			\
#	print-dom-info.c			\
#	print-used-types.c			\
#	scalar-evolution.c


# This appears to not be present for llvm-3.5.0, so don't try to test it.
#	postdomfrontier.c
#llvmAnalysis_TestTargets = $(addprefix llvm-analysis-, $(addsuffix .passed, $(basename $(llvmAnalysis_Specimens))))
#taintedFlow_SOURCES = taintedFlow.C
#taintedFlow_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
#taintedFlow_Specimens = i386-taintflow1
#taintedFlow_TestTargets = $(addprefix taint_, $(addsuffix .passed, $(taintedFlow_Specimens)))
#taintedFlow_TestAnswers = $(addprefix taint_, $(addsuffix .ans, $(taintedFlow_Specimens)))
#testNoop_SOURCES = testNoop.C
#testNoop_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS)
#testNoop_Specimens = i386-noop
#testNoop_TestTargets = $(addprefix noop_, $(addsuffix .passed, $(testNoop_Specimens)))
#testNoop_TestAnswers = $(addprefix noop_, $(addsuffix .ans, $(testNoop_Specimens)))
#testNoop_Switches = --stack=0xdddd0001 --use-semantics --no-find-dead-code --no-intra-function-code
#testStaticSemantics_SOURCES = testStaticSemantics.C
#testStaticSemantics_LDADD = $(ROSE_SEPARATE_LIBS)

# We lack semantics for some architectures, so don't try to test them (the result would be an std::runtime_error with the
# message "no instruction semantics for architecture".  Also, we skip pocketputty2.exe because it takes too long with lots
# of debugging is enabled.
#testStaticSemantics_specimens = \
#	$(filter-out						\
#		$(nonsmoke_specimens_binary_any_any_mips)	\
#		$(nonsmoke_specimens_binary_any_any_ppc)	\
#		$(nonsmoke_specimens_binary_any_any_arm)	\
#		$(nonsmoke_specimens_large)			\
#		,$(nonsmoke_specimens_binary_any_exe_any))

#testStaticSemantics_test_targets = $(addprefix testStaticSemantics_, $(addsuffix .passed, $(testStaticSemantics_specimens)))
#testLazyInitialStates_SOURCES = testLazyInitialStates.C
#testLazyInitialStates_LDADD = $(ROSE_SEPARATE_LIBS)

###############################################################################################################################
# Test various things for all our sample binaries
###############################################################################################################################

#--------------------------------------------------------------------------------
#FIXME: all the ARM specimens are failing, and have been. This might be due to poor disassembly. [Robb Matzke 2013-08-30]
#astio_Specimens = \
#	$(filter-out						\
#		$(nonsmoke_specimens_binary_any_any_arm)	\
#		$(nonsmoke_specimens_binary_large),		\
#		$(nonsmoke_specimens_binary_any_exe_any))

#astio_Targets = $(addprefix astio_, $(addsuffix .passed, $(astio_Specimens)))
#testRandomInput_SOURCES = testRandomInput.C
#testRandomInput_LDADD = $(ROSE_SEPARATE_LIBS)
#testRandomInput_ISAs = amd64 coldfire i386 m68040 mips-be mips-le ppc32-be ppc32-le ppc64-be ppc64-le
#testRandomInput_Targets = $(addprefix tri_, $(addsuffix .passed, $(testRandomInput_ISAs)))

#############################################################################################
# Serialization of IR nodes related to binary analysis
#############################################################################################

# DQ (2/6/2017): This fails to to compile with GNU 4.8.4 and Boost 1.60.
# noinst_PROGRAMS += testSageSerialization
# testSageSerialization_SOURCES = testSageSerialization.C
# testSageSerialization_LDADD = $(ROSE_SEPARATE_LIBS)

# TEST_TARGETS += testSageSerialization.passed

# testSageSerialization.passed: testSageSerialization conditionalDisable
# 	@$(RTH_RUN)								\
#		TITLE="serialization of Sage binary analysis nodes [$@]"	\
#		DISABLED="$$(./conditionalDisable)"				\
#		CMD="$$(pwd)/testSageSerialization"				\
#		$(top_srcdir)/scripts/test_exit_status $@

#############################################################################################
# PDF File Generation for Binaries
#############################################################################################

# DQ (3/26/2017): Added PDF test for ROSE evaluation (forces testing of parts of ROSE for lcov)
#test_pdf_translator = $(abspath ../testPDFGeneration)
#test_pdf_small_specimen = $(top_srcdir)/tests/nonsmoke/specimens/binary/i386-pop
#test_pdf_large_specimen = $(top_srcdir)/tests/nonsmoke/specimens/binary/pocketputty.exe
#testSymbolicSubstitution_SOURCES = testSymbolicSubstitution.C
#testSymbolicSubstitution_LDADD = $(ROSE_SEPARATE_LIBS)
#testSmtWideConstant_SOURCES = testSmtWideConstant.C
#testSmtWideConstant_LDADD = $(ROSE_SEPARATE_LIBS)
#testPeekRegister_SOURCES = testPeekRegister.C
#testPeekRegister_LDADD = $(ROSE_SEPARATE_LIBS)
#testDataBlockOwnership_SOURCES = testDataBlockOwnership.C
#testDataBlockOwnership_LDADD = $(ROSE_SEPARATE_LIBS)
#testDataBlockOwnership_specimen = $(top_srcdir)/tests/nonsmoke/specimens/binary/x86-64-nologin
#testSRecords_SOURCES = testSRecords.C
#testSRecords_LDADD = $(ROSE_SEPARATE_LIBS)
#testDisassembler_SOURCES = testDisassembler.C
#testDisassembler_LDADD = $(ROSE_SEPARATE_LIBS)

# PowerPC-32 decoding PowerPC-32 instructions
#testDisassembler_ppc32_input = $(srcdir)/testDisassembler-ppc32.txt
#testDisassembler_ppc32_answer = $(srcdir)/testDisassembler-ppc32.ans

# PowerPC-64 decoding PowerPC-32 instructions
#testDisassembler_ppc64a_input = $(srcdir)/testDisassembler-ppc32.txt
#testDisassembler_ppc64a_answer = $(srcdir)/testDisassembler-ppc64a.ans

# PowerPC-64 decoding PowerPC-64 instructions
#testDisassembler_ppc64b_input = $(srcdir)/testDisassembler-ppc64.txt
#testDisassembler_ppc64b_answer = $(srcdir)/testDisassembler-ppc64b.ans

# ARM AArch64 A64
#testDisassembler_a64_input = $(srcdir)/testDisassembler-a64.txt
#testDisassembler_a64_answer = $(srcdir)/testDisassembler-a64.ans
all: all-recursive

.SUFFIXES:
.SUFFIXES: .C .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(top_srcdir)/tests/nonsmoke/specimens/binary/SpecimenSets.inc $(top_srcdir)/tests/nonsmoke/specimens/binary/Specimens.inc $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign --ignore-deps tests/nonsmoke/functional/BinaryAnalysis/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign --ignore-deps tests/nonsmoke/functional/BinaryAnalysis/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;
$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(top_srcdir)/tests/nonsmoke/specimens/binary/SpecimenSets.inc $(top_srcdir)/tests/nonsmoke/specimens/binary/Specimens.inc $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-noinstPROGRAMS:
	@list='$(noinst_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

cfg2$(EXEEXT): $(cfg2_OBJECTS) $(cfg2_DEPENDENCIES) $(EXTRA_cfg2_DEPENDENCIES) 
	@rm -f cfg2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(cfg2_OBJECTS) $(cfg2_LDADD) $(LIBS)

conditionalDisable$(EXEEXT): $(conditionalDisable_OBJECTS) $(conditionalDisable_DEPENDENCIES) $(EXTRA_conditionalDisable_DEPENDENCIES) 
	@rm -f conditionalDisable$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(conditionalDisable_OBJECTS) $(conditionalDisable_LDADD) $(LIBS)

cory002$(EXEEXT): $(cory002_OBJECTS) $(cory002_DEPENDENCIES) $(EXTRA_cory002_DEPENDENCIES) 
	@rm -f cory002$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(cory002_OBJECTS) $(cory002_LDADD) $(LIBS)

cory003$(EXEEXT): $(cory003_OBJECTS) $(cory003_DEPENDENCIES) $(EXTRA_cory003_DEPENDENCIES) 
	@rm -f cory003$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(cory003_OBJECTS) $(cory003_LDADD) $(LIBS)

cory004$(EXEEXT): $(cory004_OBJECTS) $(cory004_DEPENDENCIES) $(EXTRA_cory004_DEPENDENCIES) 
	@rm -f cory004$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(cory004_OBJECTS) $(cory004_LDADD) $(LIBS)

cory006$(EXEEXT): $(cory006_OBJECTS) $(cory006_DEPENDENCIES) $(EXTRA_cory006_DEPENDENCIES) 
	@rm -f cory006$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(cory006_OBJECTS) $(cory006_LDADD) $(LIBS)

cory007$(EXEEXT): $(cory007_OBJECTS) $(cory007_DEPENDENCIES) $(EXTRA_cory007_DEPENDENCIES) 
	@rm -f cory007$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(cory007_OBJECTS) $(cory007_LDADD) $(LIBS)

cory008$(EXEEXT): $(cory008_OBJECTS) $(cory008_DEPENDENCIES) $(EXTRA_cory008_DEPENDENCIES) 
	@rm -f cory008$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(cory008_OBJECTS) $(cory008_LDADD) $(LIBS)

cory009$(EXEEXT): $(cory009_OBJECTS) $(cory009_DEPENDENCIES) $(EXTRA_cory009_DEPENDENCIES) 
	@rm -f cory009$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(cory009_OBJECTS) $(cory009_LDADD) $(LIBS)

execFormatsTest$(EXEEXT): $(execFormatsTest_OBJECTS) $(execFormatsTest_DEPENDENCIES) $(EXTRA_execFormatsTest_DEPENDENCIES) 
	@rm -f execFormatsTest$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(execFormatsTest_OBJECTS) $(execFormatsTest_LDADD) $(LIBS)

expandCoreDump$(EXEEXT): $(expandCoreDump_OBJECTS) $(expandCoreDump_DEPENDENCIES) $(EXTRA_expandCoreDump_DEPENDENCIES) 
	@rm -f expandCoreDump$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(expandCoreDump_OBJECTS) $(expandCoreDump_LDADD) $(LIBS)

functionBoundaries$(EXEEXT): $(functionBoundaries_OBJECTS) $(functionBoundaries_DEPENDENCIES) $(EXTRA_functionBoundaries_DEPENDENCIES) 
	@rm -f functionBoundaries$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(functionBoundaries_OBJECTS) $(functionBoundaries_LDADD) $(LIBS)

intervalSemantics2$(EXEEXT): $(intervalSemantics2_OBJECTS) $(intervalSemantics2_DEPENDENCIES) $(EXTRA_intervalSemantics2_DEPENDENCIES) 
	@rm -f intervalSemantics2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(intervalSemantics2_OBJECTS) $(intervalSemantics2_LDADD) $(LIBS)

intervalSemanticsSpeed2$(EXEEXT): $(intervalSemanticsSpeed2_OBJECTS) $(intervalSemanticsSpeed2_DEPENDENCIES) $(EXTRA_intervalSemanticsSpeed2_DEPENDENCIES) 
	@rm -f intervalSemanticsSpeed2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(intervalSemanticsSpeed2_OBJECTS) $(intervalSemanticsSpeed2_LDADD) $(LIBS)

isA64Disabled$(EXEEXT): $(isA64Disabled_OBJECTS) $(isA64Disabled_DEPENDENCIES) $(EXTRA_isA64Disabled_DEPENDENCIES) 
	@rm -f isA64Disabled$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(isA64Disabled_OBJECTS) $(isA64Disabled_LDADD) $(LIBS)

llvmTranscoder$(EXEEXT): $(llvmTranscoder_OBJECTS) $(llvmTranscoder_DEPENDENCIES) $(EXTRA_llvmTranscoder_DEPENDENCIES) 
	@rm -f llvmTranscoder$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(llvmTranscoder_OBJECTS) $(llvmTranscoder_LDADD) $(LIBS)

multiSemanticsSpeed2$(EXEEXT): $(multiSemanticsSpeed2_OBJECTS) $(multiSemanticsSpeed2_DEPENDENCIES) $(EXTRA_multiSemanticsSpeed2_DEPENDENCIES) 
	@rm -f multiSemanticsSpeed2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(multiSemanticsSpeed2_OBJECTS) $(multiSemanticsSpeed2_LDADD) $(LIBS)

nullSemantics2$(EXEEXT): $(nullSemantics2_OBJECTS) $(nullSemantics2_DEPENDENCIES) $(EXTRA_nullSemantics2_DEPENDENCIES) 
	@rm -f nullSemantics2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(nullSemantics2_OBJECTS) $(nullSemantics2_LDADD) $(LIBS)

nullSemanticsSpeed2$(EXEEXT): $(nullSemanticsSpeed2_OBJECTS) $(nullSemanticsSpeed2_DEPENDENCIES) $(EXTRA_nullSemanticsSpeed2_DEPENDENCIES) 
	@rm -f nullSemanticsSpeed2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(nullSemanticsSpeed2_OBJECTS) $(nullSemanticsSpeed2_LDADD) $(LIBS)

partialSymbolicSemantics2$(EXEEXT): $(partialSymbolicSemantics2_OBJECTS) $(partialSymbolicSemantics2_DEPENDENCIES) $(EXTRA_partialSymbolicSemantics2_DEPENDENCIES) 
	@rm -f partialSymbolicSemantics2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(partialSymbolicSemantics2_OBJECTS) $(partialSymbolicSemantics2_LDADD) $(LIBS)

partialSymbolicSemanticsSpeed2$(EXEEXT): $(partialSymbolicSemanticsSpeed2_OBJECTS) $(partialSymbolicSemanticsSpeed2_DEPENDENCIES) $(EXTRA_partialSymbolicSemanticsSpeed2_DEPENDENCIES) 
	@rm -f partialSymbolicSemanticsSpeed2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(partialSymbolicSemanticsSpeed2_OBJECTS) $(partialSymbolicSemanticsSpeed2_LDADD) $(LIBS)

rot13$(EXEEXT): $(rot13_OBJECTS) $(rot13_DEPENDENCIES) $(EXTRA_rot13_DEPENDENCIES) 
	@rm -f rot13$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(rot13_OBJECTS) $(rot13_LDADD) $(LIBS)

semanticsSubclassing$(EXEEXT): $(semanticsSubclassing_OBJECTS) $(semanticsSubclassing_DEPENDENCIES) $(EXTRA_semanticsSubclassing_DEPENDENCIES) 
	@rm -f semanticsSubclassing$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(semanticsSubclassing_OBJECTS) $(semanticsSubclassing_LDADD) $(LIBS)

shiftResizeSection$(EXEEXT): $(shiftResizeSection_OBJECTS) $(shiftResizeSection_DEPENDENCIES) $(EXTRA_shiftResizeSection_DEPENDENCIES) 
	@rm -f shiftResizeSection$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(shiftResizeSection_OBJECTS) $(shiftResizeSection_LDADD) $(LIBS)

symbolicSemantics2$(EXEEXT): $(symbolicSemantics2_OBJECTS) $(symbolicSemantics2_DEPENDENCIES) $(EXTRA_symbolicSemantics2_DEPENDENCIES) 
	@rm -f symbolicSemantics2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(symbolicSemantics2_OBJECTS) $(symbolicSemantics2_LDADD) $(LIBS)

symbolicSemanticsSpeed2$(EXEEXT): $(symbolicSemanticsSpeed2_OBJECTS) $(symbolicSemanticsSpeed2_DEPENDENCIES) $(EXTRA_symbolicSemanticsSpeed2_DEPENDENCIES) 
	@rm -f symbolicSemanticsSpeed2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(symbolicSemanticsSpeed2_OBJECTS) $(symbolicSemanticsSpeed2_LDADD) $(LIBS)

taintedFlow$(EXEEXT): $(taintedFlow_OBJECTS) $(taintedFlow_DEPENDENCIES) $(EXTRA_taintedFlow_DEPENDENCIES) 
	@rm -f taintedFlow$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(taintedFlow_OBJECTS) $(taintedFlow_LDADD) $(LIBS)

testAssembler$(EXEEXT): $(testAssembler_OBJECTS) $(testAssembler_DEPENDENCIES) $(EXTRA_testAssembler_DEPENDENCIES) 
	@rm -f testAssembler$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testAssembler_OBJECTS) $(testAssembler_LDADD) $(LIBS)

testAstIO$(EXEEXT): $(testAstIO_OBJECTS) $(testAstIO_DEPENDENCIES) $(EXTRA_testAstIO_DEPENDENCIES) 
	@rm -f testAstIO$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testAstIO_OBJECTS) $(testAstIO_LDADD) $(LIBS)

testAstNeuter$(EXEEXT): $(testAstNeuter_OBJECTS) $(testAstNeuter_DEPENDENCIES) $(EXTRA_testAstNeuter_DEPENDENCIES) 
	@rm -f testAstNeuter$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testAstNeuter_OBJECTS) $(testAstNeuter_LDADD) $(LIBS)

testBitPattern$(EXEEXT): $(testBitPattern_OBJECTS) $(testBitPattern_DEPENDENCIES) $(EXTRA_testBitPattern_DEPENDENCIES) 
	@rm -f testBitPattern$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testBitPattern_OBJECTS) $(testBitPattern_LDADD) $(LIBS)

testCallDetection$(EXEEXT): $(testCallDetection_OBJECTS) $(testCallDetection_DEPENDENCIES) $(EXTRA_testCallDetection_DEPENDENCIES) 
	@rm -f testCallDetection$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testCallDetection_OBJECTS) $(testCallDetection_LDADD) $(LIBS)

testControlFlow$(EXEEXT): $(testControlFlow_OBJECTS) $(testControlFlow_DEPENDENCIES) $(EXTRA_testControlFlow_DEPENDENCIES) 
	@rm -f testControlFlow$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testControlFlow_OBJECTS) $(testControlFlow_LDADD) $(LIBS)

testDataBlockOwnership$(EXEEXT): $(testDataBlockOwnership_OBJECTS) $(testDataBlockOwnership_DEPENDENCIES) $(EXTRA_testDataBlockOwnership_DEPENDENCIES) 
	@rm -f testDataBlockOwnership$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testDataBlockOwnership_OBJECTS) $(testDataBlockOwnership_LDADD) $(LIBS)

testDisassembler$(EXEEXT): $(testDisassembler_OBJECTS) $(testDisassembler_DEPENDENCIES) $(EXTRA_testDisassembler_DEPENDENCIES) 
	@rm -f testDisassembler$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testDisassembler_OBJECTS) $(testDisassembler_LDADD) $(LIBS)

testDominance$(EXEEXT): $(testDominance_OBJECTS) $(testDominance_DEPENDENCIES) $(EXTRA_testDominance_DEPENDENCIES) 
	@rm -f testDominance$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testDominance_OBJECTS) $(testDominance_LDADD) $(LIBS)

testElfByteOrder$(EXEEXT): $(testElfByteOrder_OBJECTS) $(testElfByteOrder_DEPENDENCIES) $(EXTRA_testElfByteOrder_DEPENDENCIES) 
	@rm -f testElfByteOrder$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testElfByteOrder_OBJECTS) $(testElfByteOrder_LDADD) $(LIBS)

testElfConstruct$(EXEEXT): $(testElfConstruct_OBJECTS) $(testElfConstruct_DEPENDENCIES) $(EXTRA_testElfConstruct_DEPENDENCIES) 
	@rm -f testElfConstruct$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testElfConstruct_OBJECTS) $(testElfConstruct_LDADD) $(LIBS)

testElfSchulz$(EXEEXT): $(testElfSchulz_OBJECTS) $(testElfSchulz_DEPENDENCIES) $(EXTRA_testElfSchulz_DEPENDENCIES) 
	@rm -f testElfSchulz$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testElfSchulz_OBJECTS) $(testElfSchulz_LDADD) $(LIBS)

testElfStrtab$(EXEEXT): $(testElfStrtab_OBJECTS) $(testElfStrtab_DEPENDENCIES) $(EXTRA_testElfStrtab_DEPENDENCIES) 
	@rm -f testElfStrtab$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testElfStrtab_OBJECTS) $(testElfStrtab_LDADD) $(LIBS)

testElfWordSize$(EXEEXT): $(testElfWordSize_OBJECTS) $(testElfWordSize_DEPENDENCIES) $(EXTRA_testElfWordSize_DEPENDENCIES) 
	@rm -f testElfWordSize$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testElfWordSize_OBJECTS) $(testElfWordSize_LDADD) $(LIBS)

testEtherInsns$(EXEEXT): $(testEtherInsns_OBJECTS) $(testEtherInsns_DEPENDENCIES) $(EXTRA_testEtherInsns_DEPENDENCIES) 
	@rm -f testEtherInsns$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testEtherInsns_OBJECTS) $(testEtherInsns_LDADD) $(LIBS)

testFunctionCall$(EXEEXT): $(testFunctionCall_OBJECTS) $(testFunctionCall_DEPENDENCIES) $(EXTRA_testFunctionCall_DEPENDENCIES) 
	@rm -f testFunctionCall$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testFunctionCall_OBJECTS) $(testFunctionCall_LDADD) $(LIBS)

testLazyInitialStates$(EXEEXT): $(testLazyInitialStates_OBJECTS) $(testLazyInitialStates_DEPENDENCIES) $(EXTRA_testLazyInitialStates_DEPENDENCIES) 
	@rm -f testLazyInitialStates$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testLazyInitialStates_OBJECTS) $(testLazyInitialStates_LDADD) $(LIBS)

testLibraryDb$(EXEEXT): $(testLibraryDb_OBJECTS) $(testLibraryDb_DEPENDENCIES) $(EXTRA_testLibraryDb_DEPENDENCIES) 
	@rm -f testLibraryDb$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testLibraryDb_OBJECTS) $(testLibraryDb_LDADD) $(LIBS)

testMap$(EXEEXT): $(testMap_OBJECTS) $(testMap_DEPENDENCIES) $(EXTRA_testMap_DEPENDENCIES) 
	@rm -f testMap$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testMap_OBJECTS) $(testMap_LDADD) $(LIBS)

testNoop$(EXEEXT): $(testNoop_OBJECTS) $(testNoop_DEPENDENCIES) $(EXTRA_testNoop_DEPENDENCIES) 
	@rm -f testNoop$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testNoop_OBJECTS) $(testNoop_LDADD) $(LIBS)

testPeConstruct$(EXEEXT): $(testPeConstruct_OBJECTS) $(testPeConstruct_DEPENDENCIES) $(EXTRA_testPeConstruct_DEPENDENCIES) 
	@rm -f testPeConstruct$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testPeConstruct_OBJECTS) $(testPeConstruct_LDADD) $(LIBS)

testPeImports$(EXEEXT): $(testPeImports_OBJECTS) $(testPeImports_DEPENDENCIES) $(EXTRA_testPeImports_DEPENDENCIES) 
	@rm -f testPeImports$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testPeImports_OBJECTS) $(testPeImports_LDADD) $(LIBS)

testPeekRegister$(EXEEXT): $(testPeekRegister_OBJECTS) $(testPeekRegister_DEPENDENCIES) $(EXTRA_testPeekRegister_DEPENDENCIES) 
	@rm -f testPeekRegister$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testPeekRegister_OBJECTS) $(testPeekRegister_LDADD) $(LIBS)

testPointerDetection$(EXEEXT): $(testPointerDetection_OBJECTS) $(testPointerDetection_DEPENDENCIES) $(EXTRA_testPointerDetection_DEPENDENCIES) 
	@rm -f testPointerDetection$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testPointerDetection_OBJECTS) $(testPointerDetection_LDADD) $(LIBS)

testRNG$(EXEEXT): $(testRNG_OBJECTS) $(testRNG_DEPENDENCIES) $(EXTRA_testRNG_DEPENDENCIES) 
	@rm -f testRNG$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testRNG_OBJECTS) $(testRNG_LDADD) $(LIBS)

testRandomInput$(EXEEXT): $(testRandomInput_OBJECTS) $(testRandomInput_DEPENDENCIES) $(EXTRA_testRandomInput_DEPENDENCIES) 
	@rm -f testRandomInput$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testRandomInput_OBJECTS) $(testRandomInput_LDADD) $(LIBS)

testReadPastEOF$(EXEEXT): $(testReadPastEOF_OBJECTS) $(testReadPastEOF_DEPENDENCIES) $(EXTRA_testReadPastEOF_DEPENDENCIES) 
	@rm -f testReadPastEOF$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testReadPastEOF_OBJECTS) $(testReadPastEOF_LDADD) $(LIBS)

testRegisters$(EXEEXT): $(testRegisters_OBJECTS) $(testRegisters_DEPENDENCIES) $(EXTRA_testRegisters_DEPENDENCIES) 
	@rm -f testRegisters$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testRegisters_OBJECTS) $(testRegisters_LDADD) $(LIBS)

testReturnsValue$(EXEEXT): $(testReturnsValue_OBJECTS) $(testReturnsValue_DEPENDENCIES) $(EXTRA_testReturnsValue_DEPENDENCIES) 
	@rm -f testReturnsValue$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testReturnsValue_OBJECTS) $(testReturnsValue_LDADD) $(LIBS)

testSRecords$(EXEEXT): $(testSRecords_OBJECTS) $(testSRecords_DEPENDENCIES) $(EXTRA_testSRecords_DEPENDENCIES) 
	@rm -f testSRecords$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testSRecords_OBJECTS) $(testSRecords_LDADD) $(LIBS)

testSmtWideConstant$(EXEEXT): $(testSmtWideConstant_OBJECTS) $(testSmtWideConstant_DEPENDENCIES) $(EXTRA_testSmtWideConstant_DEPENDENCIES) 
	@rm -f testSmtWideConstant$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testSmtWideConstant_OBJECTS) $(testSmtWideConstant_LDADD) $(LIBS)

testStaticSemantics$(EXEEXT): $(testStaticSemantics_OBJECTS) $(testStaticSemantics_DEPENDENCIES) $(EXTRA_testStaticSemantics_DEPENDENCIES) 
	@rm -f testStaticSemantics$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testStaticSemantics_OBJECTS) $(testStaticSemantics_LDADD) $(LIBS)

testSymReadWrite$(EXEEXT): $(testSymReadWrite_OBJECTS) $(testSymReadWrite_DEPENDENCIES) $(EXTRA_testSymReadWrite_DEPENDENCIES) 
	@rm -f testSymReadWrite$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testSymReadWrite_OBJECTS) $(testSymReadWrite_LDADD) $(LIBS)

testSymbolicExprParser$(EXEEXT): $(testSymbolicExprParser_OBJECTS) $(testSymbolicExprParser_DEPENDENCIES) $(EXTRA_testSymbolicExprParser_DEPENDENCIES) 
	@rm -f testSymbolicExprParser$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testSymbolicExprParser_OBJECTS) $(testSymbolicExprParser_LDADD) $(LIBS)

testSymbolicFlags$(EXEEXT): $(testSymbolicFlags_OBJECTS) $(testSymbolicFlags_DEPENDENCIES) $(EXTRA_testSymbolicFlags_DEPENDENCIES) 
	@rm -f testSymbolicFlags$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testSymbolicFlags_OBJECTS) $(testSymbolicFlags_LDADD) $(LIBS)

testSymbolicSimplification$(EXEEXT): $(testSymbolicSimplification_OBJECTS) $(testSymbolicSimplification_DEPENDENCIES) $(EXTRA_testSymbolicSimplification_DEPENDENCIES) 
	@rm -f testSymbolicSimplification$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testSymbolicSimplification_OBJECTS) $(testSymbolicSimplification_LDADD) $(LIBS)

testSymbolicSubstitution$(EXEEXT): $(testSymbolicSubstitution_OBJECTS) $(testSymbolicSubstitution_DEPENDENCIES) $(EXTRA_testSymbolicSubstitution_DEPENDENCIES) 
	@rm -f testSymbolicSubstitution$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testSymbolicSubstitution_OBJECTS) $(testSymbolicSubstitution_LDADD) $(LIBS)

testWorkList$(EXEEXT): $(testWorkList_OBJECTS) $(testWorkList_DEPENDENCIES) $(EXTRA_testWorkList_DEPENDENCIES) 
	@rm -f testWorkList$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(testWorkList_OBJECTS) $(testWorkList_LDADD) $(LIBS)

traceSymbolicSemantics2$(EXEEXT): $(traceSymbolicSemantics2_OBJECTS) $(traceSymbolicSemantics2_DEPENDENCIES) $(EXTRA_traceSymbolicSemantics2_DEPENDENCIES) 
	@rm -f traceSymbolicSemantics2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(traceSymbolicSemantics2_OBJECTS) $(traceSymbolicSemantics2_LDADD) $(LIBS)

verifySemantics$(EXEEXT): $(verifySemantics_OBJECTS) $(verifySemantics_DEPENDENCIES) $(EXTRA_verifySemantics_DEPENDENCIES) 
	@rm -f verifySemantics$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(verifySemantics_OBJECTS) $(verifySemantics_LDADD) $(LIBS)

yicesSemanticsExe2$(EXEEXT): $(yicesSemanticsExe2_OBJECTS) $(yicesSemanticsExe2_DEPENDENCIES) $(EXTRA_yicesSemanticsExe2_DEPENDENCIES) 
	@rm -f yicesSemanticsExe2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(yicesSemanticsExe2_OBJECTS) $(yicesSemanticsExe2_LDADD) $(LIBS)

yicesSemanticsLib2$(EXEEXT): $(yicesSemanticsLib2_OBJECTS) $(yicesSemanticsLib2_DEPENDENCIES) $(EXTRA_yicesSemanticsLib2_DEPENDENCIES) 
	@rm -f yicesSemanticsLib2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(yicesSemanticsLib2_OBJECTS) $(yicesSemanticsLib2_LDADD) $(LIBS)

z3SemanticsExe2$(EXEEXT): $(z3SemanticsExe2_OBJECTS) $(z3SemanticsExe2_DEPENDENCIES) $(EXTRA_z3SemanticsExe2_DEPENDENCIES) 
	@rm -f z3SemanticsExe2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(z3SemanticsExe2_OBJECTS) $(z3SemanticsExe2_LDADD) $(LIBS)

z3SemanticsLib2$(EXEEXT): $(z3SemanticsLib2_OBJECTS) $(z3SemanticsLib2_DEPENDENCIES) $(EXTRA_z3SemanticsLib2_DEPENDENCIES) 
	@rm -f z3SemanticsLib2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(z3SemanticsLib2_OBJECTS) $(z3SemanticsLib2_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

.C.o:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ $<

.C.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.C.lo:
	$(AM_V_CXX)$(LTCXXCOMPILE) -c -o $@ $<

intervalSemantics2-semantics.o: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(intervalSemantics2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o intervalSemantics2-semantics.o `test -f 'semantics.C' || echo '$(srcdir)/'`semantics.C

intervalSemantics2-semantics.obj: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(intervalSemantics2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o intervalSemantics2-semantics.obj `if test -f 'semantics.C'; then $(CYGPATH_W) 'semantics.C'; else $(CYGPATH_W) '$(srcdir)/semantics.C'; fi`

intervalSemanticsSpeed2-semanticsSpeed.o: semanticsSpeed.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(intervalSemanticsSpeed2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o intervalSemanticsSpeed2-semanticsSpeed.o `test -f 'semanticsSpeed.C' || echo '$(srcdir)/'`semanticsSpeed.C

intervalSemanticsSpeed2-semanticsSpeed.obj: semanticsSpeed.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(intervalSemanticsSpeed2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o intervalSemanticsSpeed2-semanticsSpeed.obj `if test -f 'semanticsSpeed.C'; then $(CYGPATH_W) 'semanticsSpeed.C'; else $(CYGPATH_W) '$(srcdir)/semanticsSpeed.C'; fi`

multiSemanticsSpeed2-semanticsSpeed.o: semanticsSpeed.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiSemanticsSpeed2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o multiSemanticsSpeed2-semanticsSpeed.o `test -f 'semanticsSpeed.C' || echo '$(srcdir)/'`semanticsSpeed.C

multiSemanticsSpeed2-semanticsSpeed.obj: semanticsSpeed.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(multiSemanticsSpeed2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o multiSemanticsSpeed2-semanticsSpeed.obj `if test -f 'semanticsSpeed.C'; then $(CYGPATH_W) 'semanticsSpeed.C'; else $(CYGPATH_W) '$(srcdir)/semanticsSpeed.C'; fi`

nullSemantics2-semantics.o: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nullSemantics2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nullSemantics2-semantics.o `test -f 'semantics.C' || echo '$(srcdir)/'`semantics.C

nullSemantics2-semantics.obj: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nullSemantics2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nullSemantics2-semantics.obj `if test -f 'semantics.C'; then $(CYGPATH_W) 'semantics.C'; else $(CYGPATH_W) '$(srcdir)/semantics.C'; fi`

nullSemanticsSpeed2-semanticsSpeed.o: semanticsSpeed.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nullSemanticsSpeed2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nullSemanticsSpeed2-semanticsSpeed.o `test -f 'semanticsSpeed.C' || echo '$(srcdir)/'`semanticsSpeed.C

nullSemanticsSpeed2-semanticsSpeed.obj: semanticsSpeed.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nullSemanticsSpeed2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nullSemanticsSpeed2-semanticsSpeed.obj `if test -f 'semanticsSpeed.C'; then $(CYGPATH_W) 'semanticsSpeed.C'; else $(CYGPATH_W) '$(srcdir)/semanticsSpeed.C'; fi`

partialSymbolicSemantics2-semantics.o: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(partialSymbolicSemantics2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o partialSymbolicSemantics2-semantics.o `test -f 'semantics.C' || echo '$(srcdir)/'`semantics.C

partialSymbolicSemantics2-semantics.obj: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(partialSymbolicSemantics2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o partialSymbolicSemantics2-semantics.obj `if test -f 'semantics.C'; then $(CYGPATH_W) 'semantics.C'; else $(CYGPATH_W) '$(srcdir)/semantics.C'; fi`

partialSymbolicSemanticsSpeed2-semanticsSpeed.o: semanticsSpeed.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(partialSymbolicSemanticsSpeed2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o partialSymbolicSemanticsSpeed2-semanticsSpeed.o `test -f 'semanticsSpeed.C' || echo '$(srcdir)/'`semanticsSpeed.C

partialSymbolicSemanticsSpeed2-semanticsSpeed.obj: semanticsSpeed.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(partialSymbolicSemanticsSpeed2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o partialSymbolicSemanticsSpeed2-semanticsSpeed.obj `if test -f 'semanticsSpeed.C'; then $(CYGPATH_W) 'semanticsSpeed.C'; else $(CYGPATH_W) '$(srcdir)/semanticsSpeed.C'; fi`

symbolicSemantics2-semantics.o: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(symbolicSemantics2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o symbolicSemantics2-semantics.o `test -f 'semantics.C' || echo '$(srcdir)/'`semantics.C

symbolicSemantics2-semantics.obj: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(symbolicSemantics2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o symbolicSemantics2-semantics.obj `if test -f 'semantics.C'; then $(CYGPATH_W) 'semantics.C'; else $(CYGPATH_W) '$(srcdir)/semantics.C'; fi`

symbolicSemanticsSpeed2-semanticsSpeed.o: semanticsSpeed.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(symbolicSemanticsSpeed2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o symbolicSemanticsSpeed2-semanticsSpeed.o `test -f 'semanticsSpeed.C' || echo '$(srcdir)/'`semanticsSpeed.C

symbolicSemanticsSpeed2-semanticsSpeed.obj: semanticsSpeed.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(symbolicSemanticsSpeed2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o symbolicSemanticsSpeed2-semanticsSpeed.obj `if test -f 'semanticsSpeed.C'; then $(CYGPATH_W) 'semanticsSpeed.C'; else $(CYGPATH_W) '$(srcdir)/semanticsSpeed.C'; fi`

testDominance-testDominance.o: testDominance.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testDominance_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o testDominance-testDominance.o `test -f 'testDominance.C' || echo '$(srcdir)/'`testDominance.C

testDominance-testDominance.obj: testDominance.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testDominance_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o testDominance-testDominance.obj `if test -f 'testDominance.C'; then $(CYGPATH_W) 'testDominance.C'; else $(CYGPATH_W) '$(srcdir)/testDominance.C'; fi`

testReturnsValue-testReturnsValue.o: testReturnsValue.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testReturnsValue_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o testReturnsValue-testReturnsValue.o `test -f 'testReturnsValue.C' || echo '$(srcdir)/'`testReturnsValue.C

testReturnsValue-testReturnsValue.obj: testReturnsValue.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(testReturnsValue_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o testReturnsValue-testReturnsValue.obj `if test -f 'testReturnsValue.C'; then $(CYGPATH_W) 'testReturnsValue.C'; else $(CYGPATH_W) '$(srcdir)/testReturnsValue.C'; fi`

traceSymbolicSemantics2-semantics.o: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(traceSymbolicSemantics2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o traceSymbolicSemantics2-semantics.o `test -f 'semantics.C' || echo '$(srcdir)/'`semantics.C

traceSymbolicSemantics2-semantics.obj: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(traceSymbolicSemantics2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o traceSymbolicSemantics2-semantics.obj `if test -f 'semantics.C'; then $(CYGPATH_W) 'semantics.C'; else $(CYGPATH_W) '$(srcdir)/semantics.C'; fi`

yicesSemanticsExe2-semantics.o: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(yicesSemanticsExe2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o yicesSemanticsExe2-semantics.o `test -f 'semantics.C' || echo '$(srcdir)/'`semantics.C

yicesSemanticsExe2-semantics.obj: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(yicesSemanticsExe2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o yicesSemanticsExe2-semantics.obj `if test -f 'semantics.C'; then $(CYGPATH_W) 'semantics.C'; else $(CYGPATH_W) '$(srcdir)/semantics.C'; fi`

yicesSemanticsLib2-semantics.o: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(yicesSemanticsLib2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o yicesSemanticsLib2-semantics.o `test -f 'semantics.C' || echo '$(srcdir)/'`semantics.C

yicesSemanticsLib2-semantics.obj: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(yicesSemanticsLib2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o yicesSemanticsLib2-semantics.obj `if test -f 'semantics.C'; then $(CYGPATH_W) 'semantics.C'; else $(CYGPATH_W) '$(srcdir)/semantics.C'; fi`

z3SemanticsExe2-semantics.o: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(z3SemanticsExe2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o z3SemanticsExe2-semantics.o `test -f 'semantics.C' || echo '$(srcdir)/'`semantics.C

z3SemanticsExe2-semantics.obj: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(z3SemanticsExe2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o z3SemanticsExe2-semantics.obj `if test -f 'semantics.C'; then $(CYGPATH_W) 'semantics.C'; else $(CYGPATH_W) '$(srcdir)/semantics.C'; fi`

z3SemanticsLib2-semantics.o: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(z3SemanticsLib2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o z3SemanticsLib2-semantics.o `test -f 'semantics.C' || echo '$(srcdir)/'`semantics.C

z3SemanticsLib2-semantics.obj: semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(z3SemanticsLib2_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o z3SemanticsLib2-semantics.obj `if test -f 'semantics.C'; then $(CYGPATH_W) 'semantics.C'; else $(CYGPATH_W) '$(srcdir)/semantics.C'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

# This directory's subdirectories are mostly independent; you can cd
# into them and run 'make' without going through this Makefile.
# To change the values of 'make' variables: instead of editing Makefiles,
# (1) if the variable is set in 'config.status', edit 'config.status'
#     (which will cause the Makefiles to be regenerated when you run 'make');
# (2) otherwise, pass the desired values on the 'make' command line.
$(am__recursive_targets):
	@fail=; \
	if $(am__make_keepgoing); then \
	  failcom='fail=yes'; \
	else \
	  failcom='exit 1'; \
	fi; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-recursive
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-recursive

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-recursive

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    $(am__make_dryrun) \
	      || test -d "$(distdir)/$$subdir" \
	      || $(MKDIR_P) "$(distdir)/$$subdir" \
	      || exit 1; \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-recursive
all-am: Makefile $(PROGRAMS)
installdirs: installdirs-recursive
installdirs-am:
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-generic clean-libtool clean-local clean-noinstPROGRAMS \
	mostlyclean-am

distclean: distclean-recursive
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am:

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am:

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am:

.MAKE: $(am__recursive_targets) check-am install-am install-strip

.PHONY: $(am__recursive_targets) CTAGS GTAGS TAGS all all-am check \
	check-am check-local clean clean-generic clean-libtool \
	clean-local clean-noinstPROGRAMS cscopelist-am ctags ctags-am \
	distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs installdirs-am maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags tags-am uninstall uninstall-am

.PRECIOUS: Makefile


# JJW (2/25/2008): set a flag (only used when running ROSE applications) to
# have them run using the build tree rather than the install tree -- this is
# important for "make check" in an uninstalled copy of ROSE.
#export ROSE_IN_BUILD_TREE=$(top_builddir)

#  # The previous "Z3_*" variables should have been named "ROSE_Z3_*" following the pattern in the rest of this
#  # makefile. I don't want to break code that uses the wrong names, so I'll just add the correct ones. [Matzke 2017-10-17]

show-rpaths:
	@echo "ROSE_LIBS = $(ROSE_LIBS)"
	@echo "ROSE_RPATHS = $(ROSE_RPATHS)"
	@echo "ROSE_LINK_RPATHS = $(ROSE_LINK_RPATHS)"

clean-test-targets:
	rm -f $(TEST_TARGETS)
	rm -f $(TEST_TARGETS:.passed=.failed)
	rm -f $(TEST_TARGETS:.passed=.out)
	rm -f $(TEST_TARGETS:.passed=.err)

clean-local: clean-test-targets

.PHONY: clean-test-targets

#testSymbolicExprParser.passed: $(TEST_WITH_ANSWER) testSymbolicExprParser testSymbolicExprParser.ans conditionalDisable
#	@$(RTH_RUN)						\
#		TITLE="parsing of symbolic expressions [$@]"	\
#		DISABLED="$$(./conditionalDisable)"		\
#		CMD="./testSymbolicExprParser"			\
#		ANS="$(srcdir)/testSymbolicExprParser.ans"	\
#		$< $@

#$(testControlFlow_targets): \
#testControlFlow-%.passed: $(TEST_WITH_ANSWER) testControlFlow testControlFlow-%.ans conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="AST-based control flow graph, algorithm $* [$@]"	\
#		DISABLED="$$(./conditionalDisable)"			\
#		CMD="./testControlFlow $* $(SPECIMEN_DIR)/buffer2.bin"	\
#		ANS="$(srcdir)/testControlFlow-$*.ans"			\
#		$< $@

#testFunctionCall-A.passed: $(TEST_WITH_ANSWER) testFunctionCall testFunctionCall-A.ans conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="function calls, algorithm A [$@]"		\
#		DISABLED="$$(./conditionalDisable)"			\
#		CMD="./testFunctionCall A $(SPECIMEN_DIR)/buffer2.bin"	\
#		ANS="$(srcdir)/testFunctionCall-A.ans"			\
#		$< $@

#testFunctionCall-B.passed: $(TEST_WITH_ANSWER) testFunctionCall testFunctionCall-B.ans conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="function calls, algorithm B [$@]"		\
#		DISABLED="$$(./conditionalDisable)"			\
#		CMD="./testFunctionCall B $(SPECIMEN_DIR)/buffer2.bin"	\
#		ANS="$(srcdir)/testFunctionCall-B.ans"			\
#		$< $@

#testElfStrtab.passed: $(TEST_EXIT_STATUS) testElfStrtab conditionalDisable
#	@$(RTH_RUN)								\
#		TITLE="ELF string table allocation [$@]"			\
#		DISABLED="$$(./conditionalDisable)"				\
#		CMD="$$(pwd)/testElfStrtab $(SPECIMEN_DIR)/i386-poweroff"	\
#		USE_SUBDIR=yes							\
#		$< $@

#testElfByteOrder.passed: testElfByteOrder.conf testElfByteOrder execFormatsTest testElfStrtab.passed conditionalDisable
#	@$(RTH_RUN)					\
#		TITLE="modification of byte order [$@]"	\
#		DISABLED="$$(./conditionalDisable)"	\
#		INPUT=i386-poweroff			\
#		SPECIMEN_DIR="$(SPECIMEN_DIR)"		\
#		$< $@

#testElfWordSize.passed: testElfWordSize.conf testElfWordSize execFormatsTest testElfStrtab.passed testElfByteOrder.passed conditionalDisable
#	@$(RTH_RUN)					\
#		TITLE="modification of word size [$@]"	\
#		DISABLED="$$(./conditionalDisable)"	\
#		INPUT=i386-poweroff			\
#		SPECIMEN_DIR="$(SPECIMEN_DIR)"		\
#		$< $@

#testElfSchulz-1.passed: testElfSchulz.conf testElfSchulz execFormatsTest conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="rename dynamically linked functions #1 [$@]"	\
#		DISABLED="$$(./conditionalDisable)"			\
#		N=1							\
#		SPECIMEN_DIR="$(SPECIMEN_DIR)"				\
#		$< $@
#testElfSchulz-2.passed: testElfSchulz.conf testElfSchulz execFormatsTest conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="rename dynamically linked functions #2 [$@]"	\
#		DISABLED="$$(./conditionalDisable)"			\
#		N=2							\
#		SPECIMEN_DIR="$(SPECIMEN_DIR)"				\
#		$< $@

#testElfConstruct.passed: $(TEST_EXIT_STATUS) testElfConstruct conditionalDisable
#	@$(RTH_RUN)						\
#		TITLE="build an ELF file from scratch [$@]"	\
#		DISABLED="$$(./conditionalDisable)"		\
#		CMD="$$(pwd)/testElfConstruct"			\
#		USE_SUBDIR=yes					\
#		$< $@

#testPeConstruct.passed: $(TEST_EXIT_STATUS) testPeConstruct conditionalDisable
#	@$(RTH_RUN)						\
#		TITLE="build a PE file from scratch [$@]"	\
#		DISABLED="$$(./conditionalDisable)"		\
#		CMD="$$(pwd)/testPeConstruct"			\
#		USE_SUBDIR=yes					\
#		$< $@

#shiftResizeSection.passed: $(TEST_WITH_ANSWER) shiftResizeSection execFormatsTest shiftResizeSection.ans conditionalDisable
#	@$(RTH_RUN)											\
#		TITLE="changing section size and/or location [$@]"					\
#		DISABLED="$$(./conditionalDisable)"							\
#		CMD="$(srcdir)/testShiftResizeSection.sh $(SPECIMEN_DIR)/i386-ctrlaltdel $$(pwd)"	\
#		ANS="$(srcdir)/shiftResizeSection.ans"							\
#		USE_SUBDIR=yes										\
#		$< $@

#testEtherInsns.passed: $(TEST_EXIT_STATUS) testEtherInsns
#	@$(RTH_RUN)									\
#		TITLE="interface to XEN Ether [$@]"					\
#		DISABLED="cannot be run automatically; requires human interaction"	\
#		$< $@

#functionBoundaries_1.passed: $(SPECIMEN_DIR)/i686-test1.O0.bin functionBoundaries functionBoundaries_1.ans conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="detect function boundaries $(notdir $<) [$@]"	\
#		DISABLED="$$(./conditionalDisable)"			\
#		USE_SUBDIR=yes						\
#		CMD="$$(pwd)/functionBoundaries $<"			\
#		ANS=$(srcdir)/functionBoundaries_1.ans			\
#		$(TEST_WITH_ANSWER) $@
#functionBoundaries_2.passed: $(SPECIMEN_DIR)/i686-test1.O3.bin functionBoundaries functionBoundaries_2.ans conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="detect function boundaries $(notdir $<) [$@]"	\
#		DISABLED="$$(./conditionalDisable)"			\
#		USE_SUBDIR=yes						\
#		CMD="$$(pwd)/functionBoundaries $<"			\
#		ANS=$(srcdir)/functionBoundaries_2.ans			\
#		$(TEST_WITH_ANSWER) $@
#functionBoundaries_3.passed: $(SPECIMEN_DIR)/i686-test1.O3-stripped.bin functionBoundaries functionBoundaries_3.ans conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="detect function boundaries $(notdir $<) [$@]"	\
#		DISABLED="$$(./conditionalDisable)"			\
#		USE_SUBDIR=yes						\
#		CMD="$$(pwd)/functionBoundaries $<"			\
#		ANS=$(srcdir)/functionBoundaries_3.ans			\
#		$(TEST_WITH_ANSWER) $@

#expandCoreDump.passed: $(TEST_EXIT_STATUS) expandCoreDump
#	@$(RTH_RUN)							\
#		TITLE="adding read-only data to core dumps [$@]"	\
#		DISABLED="not currently tested"				\
#		$< $@

#rot13.passed: rot13.conf rot13 conditionalDisable
#	@$(RTH_RUN)					\
#		TITLE="binary ROT-13 [$@]"		\
#		DISABLED="$$(./conditionalDisable)"	\
#		INPUT=i686-test1.O0.bin			\
#		SPECIMEN_DIR="$(SPECIMEN_DIR)"		\
#		$< $@

#testAssembler.passed: $(TEST_WITH_ANSWER) testAssembler testAssembler.ans conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="x86 assembler [$@]"				\
#		DISABLED="$$(./conditionalDisable)"			\
#		CMD="$$(pwd)/testAssembler $(SPECIMEN_DIR)/buffer2.bin"	\
#		USE_SUBDIR=yes						\
#		ANS="$(srcdir)/testAssembler.ans"			\
#		$< $@

#testAstIO.passed: $(TEST_EXIT_STATUS) testAstIO conditionalDisable
#	@$(RTH_RUN)								\
#		TITLE="writing and reading binary AST format [$@]"		\
#		DISABLED="$$(./conditionalDisable)"				\
#		CMD="$$(pwd)/testAstIO $(SPECIMEN_DIR)/i686-test1.O0.bin"	\
#		USE_SUBDIR=yes							\
#		$< $@
#testAstNeuter.passed: testAstNeuter.conf testAstNeuter conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="that neutering works across binary AST IO [$@]"	\
#		DISABLED="$$(./conditionalDisable)"			\
#		CMD="$$(pwd)/testAstNeuter" INPUT="i686-test1.O0.bin"	\
#		SPECIMEN_DIR="$(SPECIMEN_DIR)"				\
#		USE_SUBDIR=yes						\
#		$< $@

#testRegisters.passed: $(TEST_EXIT_STATUS) testRegisters conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="register descriptors and dictionaries [$@]"	\
#		DISABLED="$$(./conditionalDisable)"			\
#		CMD="./testRegisters"					\
#		$< $@

#testReadPastEOF.passed: testReadPastEOF.conf testReadPastEOF testReadPastEOF.ans conditionalDisable
#	@$(RTH_RUN)					\
#		TITLE="reading past end-of-file [$@]"	\
#		DISABLED="$$(./conditionalDisable)"	\
#		SPECIMEN_DIR="$(SPECIMEN_DIR)"		\
#		$< $@

##testLibraryDb.passed: $(TEST_EXIT_STATUS) testLibraryDb conditionalDisable
##	@$(RTH_RUN)					\
##		TITLE="library identification [$@]"	\
##		DISABLED="$$(./conditionalDisable)"	\
##		CMD="$$(pwd)/testLibraryDb"		\
##		USE_SUBDIR=yes				\
##		$< $@

#testPeImports.passed: $(TEST_WITH_ANSWER) testPeImports testPeImports.ans conditionalDisable
#	@$(RTH_RUN)												\
#		TITLE="that PE import tables can be parsed [$@]"						\
#		DISABLED="$$(./conditionalDisable)"								\
#		CMD="$$(pwd)/testPeImports -rose:read_executable_file_format_only $(SPECIMEN_DIR)/proxycfg.exe"	\
#		USE_SUBDIR=yes											\
#		ANS="$(srcdir)/testPeImports.ans"								\
#		$< $@

#cory003.passed: $(TEST_EXIT_STATUS) cory003 conditionalDisable
#	@$(RTH_RUN)					\
#		TITLE="generic register states [$@]"	\
#		DISABLED="$$(./conditionalDisable)"	\
#		CMD=./cory003				\
#		$< $@

#cory004.passed: $(TEST_EXIT_STATUS) cory004 conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="register clearing in subclass container [$@]"	\
#		DISABLED="$$(./conditionalDisable)"			\
#		CMD=./cory004						\
#		$< $@

#cory006.passed: $(TEST_EXIT_STATUS) cory006 conditionalDisable
#	@$(RTH_RUN)						\
#		TITLE="inter-functon disassembly [$@]"		\
#		DISABLED="$$(./conditionalDisable)"		\
#		CMD="./cory006 $(SPECIMEN_DIR)//i386-cory006"	\
#		$< $@

#cory007.passed: $(TEST_EXIT_STATUS) cory007 conditionalDisable
#	@$(RTH_RUN)					\
#		TITLE="binary attributes [$@]"		\
#		DISABLED="$$(./conditionalDisable)"	\
#		CMD="./cory007"				\
#		$< $@

#cory008.passed: $(TEST_WITH_ANSWER) cory008 cory008.ans conditionalDisable
#	@$(RTH_RUN)								\
#		TITLE="base objects in SgAsmIntegerValueExpression [$@]"	\
#		DISABLED="$$(./conditionalDisable)"				\
#		CMD="./cory008 $(SPECIMEN_DIR)/i386-nologin"			\
#		ANS=$(srcdir)/cory008.ans					\
#		$< $@

#cory009.passed: $(TEST_EXIT_STATUS) cory009 conditionalDisable
#	@$(RTH_RUN)									\
#		TITLE="test symbolic structural comparison of integer constants [$@]"	\
#		DISABLED="$$(./conditionalDisable)"					\
#		CMD="./cory009"								\
#		$< $@

#testSymReadWrite.passed: testSymReadWrite.conf testSymReadWrite.ans testSymReadWrite conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="symbolic semantic domain read/write [$@]"	\
#		DISABLED="$$(./conditionalDisable)"			\
#		INPUT=memreadwrite					\
#		SPECIMEN_DIR="$(SPECIMEN_DIR)"				\
#		$< $@

#testWorkList.passed: $(TEST_EXIT_STATUS) testWorkList conditionalDisable
#	@$(RTH_RUN)					\
#		TITLE="work list unit tests [$@]"	\
#		DISABLED="$$(./conditionalDisable)"	\
#		CMD=./testWorkList			\
#		$< $@

#testMap.passed: $(TEST_EXIT_STATUS) testMap conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="custom Map class unit tests (deprecated) [$@]"	\
#		DISABLED="$$(./conditionalDisable)"			\
#		CMD=./testMap						\
#		$< $@

#testPointerDetection.passed: $(TEST_WITH_ANSWER) testPointerDetection testPointerDetection.ans conditionalDisable
#	@$(RTH_RUN)											\
#	    TITLE="pointer detection [$@]"								\
#	    DISABLED="$$(./conditionalDisable)"								\
#	    CMD="./testPointerDetection $(PointerDetectionSwitches) $(PointerDetectionSpecimen)"	\
#	    ANS=$(srcdir)/testPointerDetection.ans							\
#	    $< $@

#testCallDetection.passed: $(TEST_WITH_ANSWER) $(SPECIMEN_DIR)/i386-fcalls testCallDetection testCallDetection.ans conditionalDisable
#	@$(RTH_RUN)								\
#		TITLE="function call detection [$@]"				\
#		DISABLED="$$(./conditionalDisable)"				\
#		CMD="$$(pwd)/testCallDetection $(SPECIMEN_DIR)/i386-fcalls"	\
#		USE_SUBDIR=yes							\
#		ANS=$(srcdir)/testCallDetection.ans				\
#		$< $@

#testReturnsValue.passed: $(SPECIMEN_DIR)/buffer2.bin testReturnsValue $(TEST_EXIT_STATUS) conditionalDisable
#	@$(RTH_RUN)						\
#		TITLE="function-returns-value analysis [$@]"	\
#		DISABLED="deprecated $$(./conditionalDisable)"	\
#		CMD="./testReturnsValue $<"			\
#		$(TEST_EXIT_STATUS) $@

#usedef.passed: usedef.conf symbolicSemantics2 $(SPECIMEN_DIR)/usedef conditionalDisable
#	@$(RTH_RUN)											\
#		USE_SUBDIR=yes										\
#		DISABLED="$$(./conditionalDisable)"							\
#		TITLE="use-def unit tests"								\
#		CMD="$$(pwd)/symbolicSemantics2 --trace --usedef $(abspath $(SPECIMEN_DIR)/usedef)"	\
#		ANS="$(srcdir)/usedef.ans"								\
#		$< $@

#testBitPattern.passed: $(TEST_EXIT_STATUS) testBitPattern conditionalDisable
#	@$(RTH_RUN)					\
#		TITLE="bit pattern matcher [$@]"	\
#		DISABLED="$$(./conditionalDisable)"	\
#		CMD="./testBitPattern"			\
#		$< $@

#testRNG.passed: $(TEST_EXIT_STATUS) testRNG conditionalDisable
#	@$(RTH_RUN)								\
#		TITLE="pseudo random number generator (deprecated) [$@]"	\
#		DISABLED="$$(./conditionalDisable)"				\
#		CMD="./testRNG"							\
#		$< $@

#testSymbolicSimplification.passed: $(TEST_WITH_ANSWER) testSymbolicSimplification testSymbolicSimplification.ans conditionalDisable
#	@$(RTH_RUN)						\
#		TITLE="symbolic simplification [$@]"		\
#		DISABLED="$$(./conditionalDisable)"		\
#		CMD="./testSymbolicSimplification"		\
#		ANS="$(srcdir)/testSymbolicSimplification.ans"	\
#		$< $@

#testSymbolicFlags.passed: $(TEST_WITH_ANSWER) testSymbolicFlags testSymbolicFlags.ans conditionalDisable
#	@$(RTH_RUN)					\
#		TITLE="symbolic flags [$@]"		\
#		DISABLED="$$(./conditionalDisable)"	\
#		CMD="./testSymbolicFlags"		\
#		ANS="$(srcdir)/testSymbolicFlags.ans"	\
#		$< $@

#verifySemantics.passed: $(TEST_EXIT_STATUS) verifySemantics
#	@$(RTH_RUN)							\
#		TITLE="instruction semantics verification"		\
#		DISABLED="not portable enough to run automatically"	\
#		CMD=false						\
#		$< $@

###############################################################################################################################
# Disassembly tests using Rose::BinaryAnalysis::Partitioner2
###############################################################################################################################

# Disassembles executables using Partitioner2
# Disassembly of executable files (DOS, ELF, PE) of various architectures (amd64, Arm, Mips, M68k, PowerPC, x86)
# + MIPS specimens are currently failing a FIXME assertion in makeShadowRegister()
# + PowerPC specimens have lots of "XL-Form xoOpcode = 36 not handled!" and similar errors
# + The pocketputty.exe pocketputty2.exe puttytel.exe are not good unit tests because they're too large; they take too
#   long when extensive debugging is enabled on heavily loaded or slow machines.

#$(SMOKE_BLDDIR)/testPartitioner2: $(SMOKE_SRCDIR)/testPartitioner2.C
#	$(MAKE) -C $(SMOKE_BLDDIR) testPartitioner2

#$(testPartitioner2_test_targets): \
#testPartitioner2_%.passed: $(SPECIMEN_DIR)/% $(SMOKE_BLDDIR)/testPartitioner2 testPartitioner2_%.ans conditionalDisable
#	@$(RTH_RUN)													\
#		TITLE="testPartitioner2 $(notdir $<) [$@]"								\
#		DISABLED="$$(./conditionalDisable)"									\
#		USE_SUBDIR=yes												\
#		CMD="$(SMOKE_BLDDIR)/testPartitioner2 $(if $(findstring exefmt,$<), --no-inter-function-calls) $<"	\
#		ANS="$(srcdir)/testPartitioner2_$*.ans"									\
#		$(top_srcdir)/scripts/test_with_answer $@

#$(testP2map_test_targets): \
#testP2map_%.passed: $(SPECIMEN_DIR)/% $(SMOKE_BLDDIR)/testPartitioner2 conditionalDisable
#	@$(RTH_RUN)													\
#		TITLE="testPartitioner2 map $(notdir $<) [$@]"								\
#		DISABLED="$$(./conditionalDisable)"									\
#		USE_SUBDIR=yes												\
#		CMD="$(SMOKE_BLDDIR)/testPartitioner2 $(if $(findstring exefmt,$<), --no-inter-function-calls) --semantic-memory=map --use-semantics $<"	\
#		ANS="$(srcdir)/testP2map_$*.ans"									\
#		$(top_srcdir)/scripts/test_with_answer $@
#check-testPartitioner2: $(testPartitioner2_test_targets) $(testP2map_test_targets)

#$(testDominance_test_targets): testDominance_%.passed: $(SPECIMEN_DIR)/% testDominance testDominance_%.ans conditionalDisable
#	@$(RTH_RUN)						\
#		TITLE="graph dominance $(notdir $<) [$@]"	\
#		DISABLED="$$(./conditionalDisable)"		\
#		USE_SUBDIR=yes					\
#		CMD="$$(pwd)/testDominance $<"			\
#		ANS="$(srcdir)/testDominance_$*.ans"		\
#		$(top_srcdir)/scripts/test_with_answer $@
#check-testDominance: $(testDominance_test_targets)
#       API2 (the newer stuff)               Extra tests
#check-semantics:								\
#        nullSemantics2-x86.passed						\
#        partialSymbolicSemantics2-x86.passed					\
#        intervalSemantics2-x86.passed						\
#        symbolicSemantics2-x86.passed        traceSymbolicSemantics2-x86.passed	\
#        yicesSemanticsExe2-x86.passed						\
#        yicesSemanticsLib2-x86.passed						\
#	z3SemanticsExe2-x86.passed						\
#	z3SemanticsLib2-x86.passed						\
#        semanticsSubclassing.passed
#nullSemantics2-x86.passed: semantics.conf nullSemantics2 conditionalDisable
#	@$(RTH_RUN)					\
#		DISABLED="$$(./conditionalDisable)"	\
#		CMD=nullSemantics2			\
#		INPUT=i686-test1.O3.bin			\
#		SPECIMEN_DIR="$(SPECIMEN_DIR)"		\
#		ANSWER=$(srcdir)/$(@:.passed=.ans)	\
#		$< $@
#partialSymbolicSemantics2-x86.passed: semantics.conf partialSymbolicSemantics2 conditionalDisable
#	@$(RTH_RUN)					\
#		DISABLED="$$(./conditionalDisable)"	\
#		CMD=partialSymbolicSemantics2		\
#		INPUT=i686-test1.O3.bin			\
#		SPECIMEN_DIR="$(SPECIMEN_DIR)"		\
#		ANSWER=$(srcdir)/$(@:.passed=.ans)	\
#		$< $@
#intervalSemantics2-x86.passed: semantics.conf intervalSemantics2 conditionalDisable
#	@$(RTH_RUN)					\
#		DISABLED="$$(./conditionalDisable)"	\
#		CMD=intervalSemantics2			\
#		INPUT=i686-test1.O3.bin			\
#		SPECIMEN_DIR="$(SPECIMEN_DIR)"		\
#		ANSWER=$(srcdir)/$(@:.passed=.ans)	\
#		$< $@
#symbolicSemantics2-x86.passed: semantics.conf symbolicSemantics2 conditionalDisable
#	@$(RTH_RUN)					\
#		DISABLED="$$(./conditionalDisable)"	\
#		CMD=symbolicSemantics2			\
#		INPUT=i686-test1.O3.bin			\
#		SPECIMEN_DIR="$(SPECIMEN_DIR)"		\
#		ANSWER=$(srcdir)/$(@:.passed=.ans)	\
#		$< $@
#traceSymbolicSemantics2-x86.passed: semantics.conf traceSymbolicSemantics2 conditionalDisable
#	@$(RTH_RUN)					\
#		DISABLED="$$(./conditionalDisable)"	\
#		CMD=traceSymbolicSemantics2		\
#		SWITCHES="--trace --no-usedef"		\
#		INPUT=i686-test1.O3.bin			\
#		SPECIMEN_DIR="$(SPECIMEN_DIR)"		\
#		ANSWER=$(srcdir)/$(@:.passed=.ans)	\
#		$< $@
##yicesSemanticsExe2-x86.passed: semantics.conf yicesSemanticsExe2 conditionalDisable
##	@$(RTH_RUN)					\
##		DISABLED="$$(./conditionalDisable)"	\
##		CMD=yicesSemanticsExe2			\
##		INPUT=i686-test1.O3.bin			\
##		SPECIMEN_DIR="$(SPECIMEN_DIR)"		\
##		ANSWER=$(srcdir)/$(@:.passed=.ans)	\
##		$< $@
##yicesSemanticsLib2-x86.passed: semantics.conf yicesSemanticsLib2 conditionalDisable
##	@$(RTH_RUN)					\
##		DISABLED="$$(./conditionalDisable)"	\
##		CMD=yicesSemanticsLib2			\
##		INPUT=i686-test1.O3.bin			\
##		SPECIMEN_DIR="$(SPECIMEN_DIR)"		\
##		ANSWER=$(srcdir)/$(@:.passed=.ans)	\
##		$< $@
##z3SemanticsExe2-x86.passed: semantics.conf z3SemanticsExe2 conditionalDisable
##	@$(RTH_RUN)					\
##		DISABLED="$$(./conditionalDisable)"	\
##		CMD=z3SemanticsExe2			\
##		INPUT=i686-test1.O3.bin			\
##		SPECIMEN_DIR="$(SPECIMEN_DIR)"		\
##		ANSWER=$(srcdir)/$(@:.passed=.ans)	\
##		$< $@
##z3SemanticsLib2-x86.passed: semantics.conf z3SemanticsLib2 conditionalDisable
##	@$(RTH_RUN)					\
##		DISABLED="$$(./conditionalDisable)"	\
##		CMD=z3SemanticsLib2			\
##		INPUT=i686-test1.O3.bin			\
##		SPECIMEN_DIR="$(SPECIMEN_DIR)"		\
##		ANSWER=$(srcdir)/$(@:.passed=.ans)	\
##		$< $@
#semanticsSubclassing.passed: $(TEST_EXIT_STATUS) semanticsSubclassing conditionalDisable
#	@$(RTH_RUN)					\
#		DISABLED="$$(./conditionalDisable)"	\
#		CMD=./semanticsSubclassing		\
#		$< $@

#$(llvmTranscoder_TestTargets): llvm-xcode-%.passed: $(SPECIMEN_DIR)/% llvmTranscoder llvmTranscoder.conf conditionalDisable
#	@$(RTH_RUN)					\
#		TITLE="LLVM transcoder for $* [$@]"	\
#		DISABLED="$$(./conditionalDisable)"	\
#		SPECIMEN="$(abspath $<)"		\
#		LLVM_VERSION="$(llvmVersion)"		\
#		$(srcdir)/llvmTranscoder.conf $@
#check-llvm-xcode: $(llvmTranscoder_TestTargets)

#$(llvmAnalysis_TestTargets): llvm-analysis-%.passed: $(llvmAnalysis_SpecimenDir)/%.c llvmTranscoder conditionalDisable
#	@$(RTH_RUN)											\
#		TITLE="LLVM analysis for $(notdir $<) [$@]"						\
#		DISABLED="$$(./conditionalDisable)"							\
#		USE_SUBDIR=yes										\
#		SPECIMEN="$<"										\
#		OPT_PASSES="$(shell perl -ne '/OPT:\s*(.*?)\s*(\*\/\s*)?$$/ and print qq{$$1\n}' $<)"	\
#		DISASSEMBLER=$(abspath disassemble)							\
#		TRANSCODER="$(abspath llvmTranscoder) --llvm=$(llvmVersion)"				\
#		$(srcdir)/llvmAnalysis.conf $@
#check-llvm-analysis: $(llvmAnalysis_TestTargets)
#check-llvm: $(llvmTranscoder_TestTargets) $(llvmAnalysis_TestTargets)

#$(taintedFlow_TestTargets): taint_%.passed: $(SPECIMEN_DIR)/% taintedFlow taintedFlow.conf conditionalDisable
#	@$(RTH_RUN)												\
#		TITLE="Tainted flow for $* [$@]"								\
#		DISABLED="$$(./conditionalDisable)"								\
#		USE_SUBDIR=yes											\
#		CMD="$(abspath ./taintedFlow) --approx=under --blocks --names='^f[0-9]' -- $(abspath $<)"	\
#		ANS="$(abs_srcdir)/taint_$*.ans"								\
#		$(abs_srcdir)/taintedFlow.conf $@
#check-taint: $(taintedFlow_TestTargets)

#$(testNoop_TestTargets): noop_%.passed: $(SPECIMEN_DIR)/% testNoop conditionalDisable
#	@$(RTH_RUN)								\
#		TITLE="testNoop $* [$@]"					\
#		DISABLED="$$(./conditionalDisable)"				\
#		USE_SUBDIR=yes							\
#		CMD="$(abspath ./testNoop) $(testNoop_Switches) $(abspath $<)"	\
#		ANS="$(abs_srcdir)/noop_$*.ans"					\
#		$(top_srcdir)/scripts/test_with_answer $@
#check-noop: $(testNoop_TestTargets)

#$(testStaticSemantics_test_targets): testStaticSemantics_%.passed: $(SPECIMEN_DIR)/% testStaticSemantics conditionalDisable
#	@$(RTH_RUN)						\
#		TITLE="testStaticSemantics $(notdir $<) [$@]"	\
#		DISABLED="$$(./conditionalDisable)"		\
#		USE_SUBDIR=yes					\
#		CMD="$$(pwd)/testStaticSemantics $<"		\
#		$(top_srcdir)/scripts/test_exit_status $@
#check-testStaticSemantics: $(testStaticSemantics_test_targets)

#testLazyInitialStates.passed: $(SPECIMEN_DIR)/i386-initialState testLazyInitialStates conditionalDisable
#	@$(RTH_RUN)									\
#		TITLE="lazy symbolic states [$@]"					\
#		DISABLED="$$(./conditionalDisable)"					\
#		USE_SUBDIR=yes								\
#		CMD="$$(pwd)/testLazyInitialStates --isa=i386 --function-at=0 map:0=rx::$<"	\
#		$(top_srcdir)/scripts/test_exit_status $@

#$(astio_Targets): astio_%.passed: $(SPECIMEN_DIR)/% testAstIO conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="binary AST IO for $(notdir $<) [$@]"		\
#		DISABLED="$$(./conditionalDisable)"			\
#		CMD="$$(pwd)/testAstIO -rose:binary $(abspath $<)"	\
#		USE_SUBDIR=yes						\
#		$(TEST_EXIT_STATUS) $@
#check_astio: $(astio_Targets)
#check_specimens: check_parse_container check_disassemble check_unparse check_assemble check_astio

#$(testRandomInput_Targets): tri_%.passed: testRandomInput conditionalDisable
#	@$(RTH_RUN)							\
#		TITLE="disassemble random $* input [$@]"		\
#		DISABLED="$$(./conditionalDisable)"			\
#		CMD="$$(pwd)/testRandomInput --size=50000 --isa=$*"	\
#		$(TEST_EXIT_STATUS) $@

#tri_a64.passed: testRandomInput conditionalDisable isA64Disabled
#	@$(RTH_RUN)							\
#		TITLE="disassemble random $* input [$@]"		\
#		DISABLED="$$(./conditionalDisable)$$(./isA64Disabled)"	\
#		CMD="$$(pwd)/testRandomInput --size=50000 --isa=a64"	\
#		$(TEST_EXIT_STATUS) $@
#check-random-input: $(testRandomInput_Targets) tri_a64.passed

#$(test_pdf_translator):
#	$(MAKE) -C $(dir $(test_pdf_translator)) $(notdir $(test_pdf_translator))

#test_small_pdf_generation.passed: $(test_pdf_small_specimen) $(test_pdf_translator) conditionalDisable
#	@$(RTH_RUN)								\
#		TITLE="generation of small PDF file [$@]"			\
#		DISABLED="$$(./conditionalDisable)"				\
#		USE_SUBDIR=yes							\
#		CMD="$(test_pdf_translator) -rose:verbose 0 $< && ls -l *.pdf"	\
#		$(TEST_EXIT_STATUS) $@

# Matzke (2017-05-08): Disabled because it can take >900 seconds when debugging is enabled, and the
# functionality is already mostly tested by test_small_pdf_generation.passed
#test_large_pdf_generation.passed: $(test_pdf_large_specimen) $(test_pdf_translator) conditionalDisable
#	@$(RTH_RUN)								\
#		TITLE="generation of large PDF file [$@]"			\
#		DISABLED="takes too long"					\
#		USE_SUBDIR=yes							\
#		CMD="$(test_pdf_translator) -rose:verbose 0 $< && ls -l *.pdf"	\
#		$(TEST_EXIT_STATUS) $@

#testSymbolicSubstitution.passed: testSymbolicSubstitution conditionalDisable
#	@$(RTH_RUN)					\
#	    TITLE="symbolic substitution"		\
#	    DISABLED="$$(./conditionalDisable)"		\
#	    USE_SUBDIR=yes				\
#	    CMD="$$(pwd)/testSymbolicSubstitution"	\
#	    $(top_srcdir)/scripts/test_exit_status $@
##testSmtWideConstant-z3exe.passed: $(top_srcdir)/scripts/test_exit_status testSmtWideConstant conditionalDisable
##	@$(RTH_RUN)						\
##		TITLE="SMT wide constant z3-exe [$@]"		\
##		DISABLED="$$(./conditionalDisable)"		\
##		USE_SUBDIR=yes					\
##		CMD="$$(pwd)/testSmtWideConstant z3-exe"	\
##		$< $@
##testSmtWideConstant-z3lib.passed: $(top_srcdir)/scripts/test_exit_status testSmtWideConstant conditionalDisable
##	@$(RTH_RUN)						\
##		TITLE="SMT wide constant z3-lib [$@]"		\
##		DISABLED="$$(./conditionalDisable)"		\
##		USE_SUBDIR=yes					\
##		CMD="$$(pwd)/testSmtWideConstant z3-lib"	\
##		$< $@
#testPeekRegister.passed: $(top_srcdir)/scripts/test_exit_status testPeekRegister conditionalDisable
#	@$(RTH_RUN)						\
#		TITLE="RegisterStateGeneric::peekRegister [$@]"	\
#		DISABLED="$$(./conditionalDisable)"		\
#		USE_SUBDIR=yes					\
#		CMD="$$(pwd)/testPeekRegister"			\
#		$< $@
#testDataBlockOwnership.passed: $(top_srcdir)/scripts/test_exit_status testDataBlockOwnership $(testDataBlockOwnership_specimen)
#	@$(RTH_RUN)									\
#		TITLE="test data block ownership [$@]"					\
#		DISABLED="$$(./conditionalDisable)"					\
#		USE_SUBDIR=yes								\
#		CMD="$$(pwd)/testDataBlockOwnership $(testDataBlockOwnership_specimen)"	\
#		$< $@
#testSRecords.passed: $(top_srcdir)/scripts/test_exit_status testSRecords
#	@$(RTH_RUN)						\
#		TITLE="test S-Record parsing/unparsing [$@]"	\
#		DISABLED="$$(./conditionalDisable)"		\
#		USE_SUBDIR=yes					\
#		CMD="$$(pwd)/testSRecords"			\
#		$< $@
#testDisassembler-ppc32.passed: $(top_srcdir)/scripts/test_with_answer testDisassembler $(testDisassembler_ppc32_input)
#	@$(RTH_RUN)										\
#		TITLE="test disassembler PowerPC-32 [$@]"					\
#		DISABLED="$$(./conditionalDisable)"						\
#		USE_SUBDIR=no									\
#		CMD="$$(pwd)/testDisassembler --isa=ppc32-be $(testDisassembler_ppc32_input)"	\
#		ANS="$(testDisassembler_ppc32_answer)"						\
#		$< $@
#testDisassembler-ppc64a.passed: $(top_srcdir)/scripts/test_with_answer testDisassembler $(testDisassembler_ppc64a_input)
#	@$(RTH_RUN)										\
#		TITLE="test disassembler PowerPC-64 [$@]"					\
#		DISABLED="$$(./conditionalDisable)"						\
#		USE_SUBDIR=no									\
#		CMD="$$(pwd)/testDisassembler --isa=ppc64-be $(testDisassembler_ppc64a_input)"	\
#		ANS="$(testDisassembler_ppc64a_answer)"						\
#		$< $@
#testDisassembler-ppc64b.passed: $(top_srcdir)/scripts/test_with_answer testDisassembler $(testDisassembler_ppc64b_input)
#	@$(RTH_RUN)										\
#		TITLE="test disassembler PowerPC-64 [$@]"					\
#		DISABLED="$$(./conditionalDisable)"						\
#		USE_SUBDIR=no									\
#		CMD="$$(pwd)/testDisassembler --isa=ppc64-be $(testDisassembler_ppc64b_input)"	\
#		ANS="$(testDisassembler_ppc64b_answer)"						\
#		$< $@
#testDisassembler-a64.passed: $(top_srcdir)/scripts/test_with_answer testDisassembler isA64Disabled $(testDisassembler_a64_input)
#	@$(RTH_RUN)										\
#		TITLE="test disassembler ARM AArch64 A64 [$@]"					\
#		DISABLED="$$(./isA64Disabled)"							\
#		USE_SUBDIR=no									\
#		CMD="$$(pwd)/testDisassembler --isa=a64 $(testDisassembler_a64_input)"		\
#		ANS="$(testDisassembler_a64_answer)"						\
#		$< $@

###############################################################################################################################
# Standard boilerplate
###############################################################################################################################

# DQ (3/21/2009): These tests don't appear to run under Cygwin.
##check-local:
##	@echo "  TESTING (disabled: all tests disabled for Cygwin)"
# Binary analysis is enabled and supported
#check-local: $(TEST_TARGETS)
# Binary analysis is not enabled
check-local:
	@echo "  TESTING (disabled: binary frontend is not enabled)"

# Don't delete things indiscriminately--sometimes developers have other related files that should not be touched!
# Rather than use one big MOSTLYCLEANFILES, split things into smaller parts so we don't get command lines that are too big.
clean-local:
	rm -f $(MOSTLYCLEANFILES)

.PHONY: $(PHONIES)

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
