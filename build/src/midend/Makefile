# Makefile.in generated by automake 1.16.2 from Makefile.am.
# src/midend/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2020 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# Non-recursive Makefile

# These definitions are for the benefit of independent software contained			-*- makefile -*-
# in ROSE.  (Currently, this means SAGE and ROSETTA.)
# It defines ROSE_INCLUDES and ROSE_LIBS so they can use the ROSE codes.

# ROSE_INCLUDES contains the include flags for compiling with ROSE code.
# (ROSE software should set the include paths in their respective Makefile.am
# files, since they are expected to know the ROSE source tree structure.)
# To use ROSE_INCLUDES, the independent software packages contained in ROSE
# should define the variable ROSE_HOME to be the relative path to the root
# of the ROSE directory tree.

# This fixes some problem caused by automake or autoconf
# (detailed documentation is in the ChangeLog)
# MAKE=gmake

# DQ (8/10/2007): Valentin suggested this be commented out.
# DQ (4/23/2006): This is the default when build using automake version 1.6.3 but it
# causes errors so we would like to specify --run automake instead
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake-1.6
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake

# force ranlib to just call touch so that *.so (dynamic libraries) will not
# be run with ranlib (which is a error).  This allows us to use dynamic
# libraries as the default within ROSE.
# JJW 7/25/2008: Do we really need this?

# Non-recursive Makefile

# Non-recursive Makefile

# Non-recursive Makefile

# Non-recursive Makefile

# Non-recursive Makefile

# Non-recursive Makefile

#mAstMatching_built_sources=matcherparser.C 

# Non-recursive Makefile

# Non-recursive Makefile

# -*- makefile -*-

# Non-recursive Makefile

# ------------------------------------------------------------------------------
#  Subdirectories
# ------------------------------------------------------------------------------

# Non-recursive Makefile

# Non-recursive Makefile

# Non-recursive Makefile

# Non-recursive Makefile

# Non-recursive Makefile

# ------------------------------------------------------------------------------
#  Subdirectories
# ------------------------------------------------------------------------------

# Non-recursive Makefile

# Non-recursive Makefile

# Non-recursive Makefile

# Non-recursive Makefile

# Non-recursive Makefile

# Non-recursive Makefile

# Non-recursive Makefile


VPATH = /home/meltdown1995/roseRoot/rose-compiler//src/src/midend
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/rose
pkgincludedir = $(includedir)/rose
pkglibdir = $(libdir)/rose
pkglibexecdir = $(libexecdir)/rose
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu

# DQ (10/23/2020): Pei-Hung and I think this may not be required (not available on my system).
# I get the error: 
#    /bin/ld: skipping incompatible /lib/libtinfo.so when searching for -ltinfo
#    clang-10: error: linker command failed with exit code 1 (use -v to see invocation)
# ROSE_LIBS += $(CLANG_LDFLAGS) -ltinfo
#am__append_1 = $(CLANG_LDFLAGS)
#am__append_2 = -R $(DOT_ASIS_LIB_DIR_) 
am__append_3 = \
	$(mAstProcessingPath)/AstRestructure.C

am__append_4 = \
	$(mAstProcessingPath)/AstPDFGeneration.C 

am__append_5 = \
	$(mAstProcessingPath)/AstPDFGeneration.h 


# DQ (12/2/2016): These directories have poorly formated Makefile.am files have
# and are a source of portability problem on Ubuntu systems (because they overload 
# the CXXFLAGS makefile variable).
am__append_6 = \
	programAnalysis \
	programTransformation/loopProcessing

am__append_7 = \
	$(mAstRewriteMechanism_la_sources) \
	$(mAstUtil_la_sources) \
	$(mProgramTransformation_la_sources)

subdir = src/midend
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acmacros/canonicalize-symlink.m4 \
	$(top_srcdir)/acmacros/compiler-ar.m4 \
	$(top_srcdir)/acmacros/compiler-id.m4 \
	$(top_srcdir)/acmacros/configure-log.m4 \
	$(top_srcdir)/acmacros/pkg.m4 $(top_srcdir)/acmacros/upc.m4 \
	$(top_srcdir)/config/EDG.m4 $(top_srcdir)/config/ROSE.m4 \
	$(top_srcdir)/config/ac_pkg_swig.m4 \
	$(top_srcdir)/config/acinclude.m4 \
	$(top_srcdir)/config/ax_boost_base.m4 \
	$(top_srcdir)/config/ax_boost_chrono.m4 \
	$(top_srcdir)/config/ax_boost_date_time.m4 \
	$(top_srcdir)/config/ax_boost_filesystem.m4 \
	$(top_srcdir)/config/ax_boost_iostreams.m4 \
	$(top_srcdir)/config/ax_boost_program_options.m4 \
	$(top_srcdir)/config/ax_boost_random.m4 \
	$(top_srcdir)/config/ax_boost_regex.m4 \
	$(top_srcdir)/config/ax_boost_serialization.m4 \
	$(top_srcdir)/config/ax_boost_system.m4 \
	$(top_srcdir)/config/ax_boost_thread.m4 \
	$(top_srcdir)/config/ax_boost_wave.m4 \
	$(top_srcdir)/config/ax_compare_version.m4 \
	$(top_srcdir)/config/ax_compiler_vendor.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_11.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_14.m4 \
	$(top_srcdir)/config/ax_lib_mysql.m4 \
	$(top_srcdir)/config/ax_lib_sqlite3.m4 \
	$(top_srcdir)/config/ax_lib_xerces.m4 \
	$(top_srcdir)/config/ax_prog_bison_version.m4 \
	$(top_srcdir)/config/ax_python_devel.m4 \
	$(top_srcdir)/config/ax_with_prog.m4 \
	$(top_srcdir)/config/choose-backend-compiler.m4 \
	$(top_srcdir)/config/compiler-defs.m4 \
	$(top_srcdir)/config/determine-os.m4 \
	$(top_srcdir)/config/enable-rosehpct.m4 \
	$(top_srcdir)/config/generate-backend-compiler-specific-headers.m4 \
	$(top_srcdir)/config/libtool.m4 $(top_srcdir)/config/libxml.m4 \
	$(top_srcdir)/config/ltargz.m4 $(top_srcdir)/config/ltdl.m4 \
	$(top_srcdir)/config/ltoptions.m4 \
	$(top_srcdir)/config/ltsugar.m4 \
	$(top_srcdir)/config/ltversion.m4 \
	$(top_srcdir)/config/lt~obsolete.m4 \
	$(top_srcdir)/config/mdl_have_opengl_2014.m4 \
	$(top_srcdir)/config/qrose_indigo_1.m4 \
	$(top_srcdir)/config/qrose_indigo_1_windows.m4 \
	$(top_srcdir)/config/support-GraphViz.m4 \
	$(top_srcdir)/config/support-IntelPin.m4 \
	$(top_srcdir)/config/support-accelerator.m4 \
	$(top_srcdir)/config/support-aterm.m4 \
	$(top_srcdir)/config/support-backend-x10.m4 \
	$(top_srcdir)/config/support-bddbddb.m4 \
	$(top_srcdir)/config/support-binary.m4 \
	$(top_srcdir)/config/support-bison.m4 \
	$(top_srcdir)/config/support-blacklist.m4 \
	$(top_srcdir)/config/support-boost.m4 \
	$(top_srcdir)/config/support-capstone.m4 \
	$(top_srcdir)/config/support-clang.m4 \
	$(top_srcdir)/config/support-cobol.m4 \
	$(top_srcdir)/config/support-compass2.m4 \
	$(top_srcdir)/config/support-compiler-features.m4 \
	$(top_srcdir)/config/support-cuda.m4 \
	$(top_srcdir)/config/support-doxygen.m4 \
	$(top_srcdir)/config/support-dwarf.m4 \
	$(top_srcdir)/config/support-edg-debugging.m4 \
	$(top_srcdir)/config/support-edg.m4 \
	$(top_srcdir)/config/support-elf.m4 \
	$(top_srcdir)/config/support-fatal-rose-warnings.m4 \
	$(top_srcdir)/config/support-flang.m4 \
	$(top_srcdir)/config/support-gcc-omp.m4 \
	$(top_srcdir)/config/support-gcrypt.m4 \
	$(top_srcdir)/config/support-gmp.m4 \
	$(top_srcdir)/config/support-gnat.m4 \
	$(top_srcdir)/config/support-gomp-omp.m4 \
	$(top_srcdir)/config/support-haskell.m4 \
	$(top_srcdir)/config/support-i386.m4 \
	$(top_srcdir)/config/support-ida.m4 \
	$(top_srcdir)/config/support-insure.m4 \
	$(top_srcdir)/config/support-isl.m4 \
	$(top_srcdir)/config/support-java.m4 \
	$(top_srcdir)/config/support-languages.m4 \
	$(top_srcdir)/config/support-lcov.m4 \
	$(top_srcdir)/config/support-libffi.m4 \
	$(top_srcdir)/config/support-libharu.m4 \
	$(top_srcdir)/config/support-libpqxx.m4 \
	$(top_srcdir)/config/support-llvm.m4 \
	$(top_srcdir)/config/support-magic.m4 \
	$(top_srcdir)/config/support-maple.m4 \
	$(top_srcdir)/config/support-mint.m4 \
	$(top_srcdir)/config/support-mpi.m4 \
	$(top_srcdir)/config/support-octave.m4 \
	$(top_srcdir)/config/support-ofp.m4 \
	$(top_srcdir)/config/support-omp.m4 \
	$(top_srcdir)/config/support-php.m4 \
	$(top_srcdir)/config/support-pocc.m4 \
	$(top_srcdir)/config/support-projects.m4 \
	$(top_srcdir)/config/support-purify.m4 \
	$(top_srcdir)/config/support-python-api.m4 \
	$(top_srcdir)/config/support-python.m4 \
	$(top_srcdir)/config/support-readline.m4 \
	$(top_srcdir)/config/support-rose.m4 \
	$(top_srcdir)/config/support-rted.m4 \
	$(top_srcdir)/config/support-rtedupc.m4 \
	$(top_srcdir)/config/support-sanitizer.m4 \
	$(top_srcdir)/config/support-sat.m4 \
	$(top_srcdir)/config/support-spot.m4 \
	$(top_srcdir)/config/support-ssl.m4 \
	$(top_srcdir)/config/support-stratego.m4 \
	$(top_srcdir)/config/support-summary.m4 \
	$(top_srcdir)/config/support-swipl.m4 \
	$(top_srcdir)/config/support-valgrind.m4 \
	$(top_srcdir)/config/support-vectorization.m4 \
	$(top_srcdir)/config/support-visualization.m4 \
	$(top_srcdir)/config/support-windows.m4 \
	$(top_srcdir)/config/support-x10.m4 \
	$(top_srcdir)/config/support-yaml.m4 \
	$(top_srcdir)/config/support-yices.m4 \
	$(top_srcdir)/config/support-z3.m4 \
	$(top_srcdir)/config/support_POET.m4 \
	$(top_srcdir)/config/swig_enable_cxx.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__pkginclude_HEADERS_DIST) \
	$(am__DIST_COMMON)
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/rose_config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(pkgincludedir)"
LTLIBRARIES = $(lib_LTLIBRARIES) $(noinst_LTLIBRARIES)
libmidend_la_LIBADD =
am__libmidend_la_SOURCES_DIST =  \
	$(mAbstractHandlePath)/abstract_handle.cpp \
	$(mAbstractHandlePath)/roseAdapter.cpp \
	$(mAbstractLayerPath)/CodeThornException.C \
	$(mAbstractLayerPath)/AstAnnotator.C \
	$(mAbstractLayerPath)/CPAstAttributeInterface.C \
	$(mAbstractLayerPath)/DFAstAttribute.C \
	$(mAbstractLayerPath)/Labeler.C \
	$(mAbstractLayerPath)/RDAstAttributeInterface.C \
	$(mAbstractLayerPath)/SgNodeHelper.C \
	$(mAbstractLayerPath)/VariableIdMapping.C \
	$(mAbstractMemoryObjectPath)/memory_object.cpp \
	$(mAbstractMemoryObjectPath)/memory_object.h \
	$(mAbstractMemoryObjectPath)/memory_object_impl.h \
	$(mAbstractMemoryObjectPath)/memory_object_impl.cpp \
	$(mAstDiagnosticsPath)/AstConsistencyTests.C \
	$(mAstDiagnosticsPath)/AstWarnings.C \
	$(mAstDiagnosticsPath)/AstStatistics.C \
	$(mAstDiagnosticsPath)/AstPerformance.C \
	$(mAstProcessingPath)/AstNodeVisitMapping.C \
	$(mAstProcessingPath)/AstTextAttributesHandling.C \
	$(mAstProcessingPath)/AstDOTGeneration.C \
	$(mAstProcessingPath)/AstProcessing.C \
	$(mAstProcessingPath)/plugin.C \
	$(mAstProcessingPath)/AstSimpleProcessing.C \
	$(mAstProcessingPath)/AstNodePtrs.C \
	$(mAstProcessingPath)/AstSuccessorsSelectors.C \
	$(mAstProcessingPath)/AstAttributeMechanism.C \
	$(mAstProcessingPath)/AstReverseSimpleProcessing.C \
	$(mAstProcessingPath)/AstClearVisitFlags.C \
	$(mAstProcessingPath)/AstTraversal.C \
	$(mAstProcessingPath)/AstCombinedSimpleProcessing.C \
	$(mAstProcessingPath)/AstSharedMemoryParallelSimpleProcessing.C \
	$(mAstProcessingPath)/AstRestructure.C \
	$(mAstProcessingPath)/AstPDFGeneration.C \
	$(mAstMatchingPath)/matcherparser.C \
	$(mAstMatchingPath)/RoseAst.C \
	$(mAstMatchingPath)/AstMatching.C \
	$(mAstMatchingPath)/MatchOperation.C \
	$(mAstMatchingPath)/AstTerm.C $(mAstQueryPath)/nodeQuery.C \
	$(mAstQueryPath)/nodeQueryInheritedAttribute.C \
	$(mAstQueryPath)/booleanQuery.C \
	$(mAstQueryPath)/booleanQueryInheritedAttribute.C \
	$(mAstQueryPath)/nameQuery.C \
	$(mAstQueryPath)/nameQueryInheritedAttribute.C \
	$(mAstQueryPath)/numberQuery.C \
	$(mAstQueryPath)/numberQueryInheritedAttribute.C \
	$(mAstQueryPath)/astQuery.C \
	$(mAstQueryPath)/astQueryInheritedAttribute.C \
	$(mAstSnippetPath)/Snippet.C \
	$(mAstRewriteMechanismPath)/nodeCollection.C \
	$(mAstRewriteMechanismPath)/rewriteMidLevelInterface.C \
	$(mAstRewriteMechanismPath)/rewriteHighLevelInterface.C \
	$(mAstRewriteMechanismPath)/rewriteSynthesizedAttribute.C \
	$(mAstRewriteMechanismPath)/rewriteASTFragementString.C \
	$(mAstRewriteMechanismPath)/rewriteAccumulatedAttribute.C \
	$(mAstRewriteMechanismPath)/rewriteTypeDeclaration.C \
	$(mAstRewriteMechanismPath)/rewriteDebuggingSupport.C \
	$(mAstRewriteMechanismPath)/rewriteLowLevelInterface.C \
	$(mAstRewriteMechanismPath)/rewriteMidLevelInterfaceTemplatesImpl.h \
	$(mAstRewriteMechanismPath)/prefixGenerationImpl.h \
	$(mAstRewriteMechanismPath)/ASTFragmentCollectorTraversalImpl.h \
	$(mAstRewriteMechanismPath)/rewriteSynthesizedAttributeTemplatesImpl.h \
	$(mAstRewriteMechanismPath)/rewriteTreeTraversalImpl.h \
	$(mAstRewriteMechanismPath)/rewriteASTFragementStringTemplatesImpl.h \
	$(mAstRewriteMechanismPath)/nodeCollectionTemplatesImpl.h \
	$(mAstRewriteMechanismPath)/rewriteDebuggingSupportTemplatesImpl.h \
	$(mAstRewriteMechanismPath)/rewriteTemplateImpl.h \
	$(mAstRewriteMechanismPath)/rewriteTemplateInstantiations.C \
	$(mauAnnotationPath)/AnnotCollect.C \
	$(mauAnnotationPath)/AnnotExpr.C \
	$(mauAnnotationPath)/OperatorAnnotation.C \
	$(mauAnnotationPath)/TypeAnnotation.C \
	$(mauAnnotationPath)/AnnotDescriptors.C \
	$(mauAnnotationPath)/AnnotIO.C \
	$(mauAnnotationPath)/OperatorDescriptors.C \
	$(mauAstInterfacePath)/AstInterface.C \
	$(mauAstInterfacePath)/CPPAstInterface.C \
	$(mauAstSupportPath)/ProcessAstTree.C \
	$(mauAstSupportPath)/StmtInfoCollect.C \
	$(mauSymbolicValPath)/SymbolicBound.C \
	$(mauSymbolicValPath)/SymbolicExpr.C \
	$(mauSymbolicValPath)/SymbolicFind.C \
	$(mauSymbolicValPath)/SymbolicOperator.C \
	$(mauSymbolicValPath)/SymbolicUnwrapCond.C \
	$(mauSymbolicValPath)/SymbolicVal.C \
	$(mptPartialRedundancyEliminationPath)/pre.C \
	$(mptPartialRedundancyEliminationPath)/preControlFlowGraph.C \
	$(mptPartialRedundancyEliminationPath)/expressionTreeEqual.C \
	$(mptFiniteDifferencingPath)/finiteDifferencing.C \
	$(mptFiniteDifferencingPath)/patternRewrite.C \
	$(mptFunctionCallNormalizationPath)/FunctionNormalization.C \
	$(mptConstantFoldingPath)/constantFolding.C \
	$(mptImplicitCodeGenerationPath)/analysisUtils.C \
	$(mptImplicitCodeGenerationPath)/defaultFunctionGenerator.C \
	$(mptImplicitCodeGenerationPath)/destructorCallAnnotator.C \
	$(mptImplicitCodeGenerationPath)/shortCircuitingTransformation.C \
	$(mptAstInliningPath)/inliner.C \
	$(mptAstInliningPath)/inlinerSupport.C \
	$(mptAstInliningPath)/isPotentiallyModified.C \
	$(mptAstInliningPath)/replaceExpressionWithStatement.C \
	$(mptOutliningPath)/Check.cc $(mptOutliningPath)/Outliner.cc \
	$(mptOutliningPath)/NameGenerator.cc \
	$(mptOutliningPath)/PragmaInterface.cc \
	$(mptOutliningPath)/ASTtools.cc $(mptOutliningPath)/Copy.cc \
	$(mptOutliningPath)/Jumps.cc \
	$(mptOutliningPath)/PrePostTraversal.cc \
	$(mptOutliningPath)/PreprocessingInfo.cc \
	$(mptOutliningPath)/StmtRewrite.cc $(mptOutliningPath)/This.cc \
	$(mptOutliningPath)/VarSym.cc $(mptOutliningPath)/Case.cc \
	$(mptOutliningPath)/ExtractIfs.cc $(mptOutliningPath)/If.cc \
	$(mptOutliningPath)/IfDirectiveContextFinder.cc \
	$(mptOutliningPath)/IfDirectiveExtractor.cc \
	$(mptOutliningPath)/Block.cc \
	$(mptOutliningPath)/NonLocalDecls.cc \
	$(mptOutliningPath)/PreprocIfs.cc \
	$(mptOutliningPath)/NonLocalControlFlow.cc \
	$(mptOutliningPath)/Preprocess.cc \
	$(mptOutliningPath)/ThisExprs.cc \
	$(mptOutliningPath)/CollectVars.cc \
	$(mptOutliningPath)/GenerateCall.cc \
	$(mptOutliningPath)/GenerateFunc.cc \
	$(mptOutliningPath)/Insert.cc $(mptOutliningPath)/Transform.cc \
	$(mptOmpLoweringPath)/omp_lowering.cpp \
	$(mptTransTrackingPath)/transformationTracking.cpp
am__dirstamp = $(am__leading_dot)dirstamp
am__objects_1 = $(mAbstractHandlePath)/abstract_handle.lo \
	$(mAbstractHandlePath)/roseAdapter.lo
am__objects_2 = $(mAbstractLayerPath)/CodeThornException.lo \
	$(mAbstractLayerPath)/AstAnnotator.lo \
	$(mAbstractLayerPath)/CPAstAttributeInterface.lo \
	$(mAbstractLayerPath)/DFAstAttribute.lo \
	$(mAbstractLayerPath)/Labeler.lo \
	$(mAbstractLayerPath)/RDAstAttributeInterface.lo \
	$(mAbstractLayerPath)/SgNodeHelper.lo \
	$(mAbstractLayerPath)/VariableIdMapping.lo
am__objects_3 = $(mAbstractMemoryObjectPath)/memory_object.lo \
	$(mAbstractMemoryObjectPath)/memory_object_impl.lo
am__objects_4 = $(mAstDiagnosticsPath)/AstConsistencyTests.lo \
	$(mAstDiagnosticsPath)/AstWarnings.lo \
	$(mAstDiagnosticsPath)/AstStatistics.lo \
	$(mAstDiagnosticsPath)/AstPerformance.lo
am__objects_5 = $(mAstProcessingPath)/AstRestructure.lo
am__objects_6 = $(mAstProcessingPath)/AstPDFGeneration.lo
am__objects_7 = $(mAstProcessingPath)/AstNodeVisitMapping.lo \
	$(mAstProcessingPath)/AstTextAttributesHandling.lo \
	$(mAstProcessingPath)/AstDOTGeneration.lo \
	$(mAstProcessingPath)/AstProcessing.lo \
	$(mAstProcessingPath)/plugin.lo \
	$(mAstProcessingPath)/AstSimpleProcessing.lo \
	$(mAstProcessingPath)/AstNodePtrs.lo \
	$(mAstProcessingPath)/AstSuccessorsSelectors.lo \
	$(mAstProcessingPath)/AstAttributeMechanism.lo \
	$(mAstProcessingPath)/AstReverseSimpleProcessing.lo \
	$(mAstProcessingPath)/AstClearVisitFlags.lo \
	$(mAstProcessingPath)/AstTraversal.lo \
	$(mAstProcessingPath)/AstCombinedSimpleProcessing.lo \
	$(mAstProcessingPath)/AstSharedMemoryParallelSimpleProcessing.lo \
	$(am__objects_5) $(am__objects_6)
am__objects_8 = $(mAstMatchingPath)/matcherparser.lo \
	$(mAstMatchingPath)/RoseAst.lo \
	$(mAstMatchingPath)/AstMatching.lo \
	$(mAstMatchingPath)/MatchOperation.lo \
	$(mAstMatchingPath)/AstTerm.lo
am__objects_9 = $(mAstQueryPath)/nodeQuery.lo \
	$(mAstQueryPath)/nodeQueryInheritedAttribute.lo \
	$(mAstQueryPath)/booleanQuery.lo \
	$(mAstQueryPath)/booleanQueryInheritedAttribute.lo \
	$(mAstQueryPath)/nameQuery.lo \
	$(mAstQueryPath)/nameQueryInheritedAttribute.lo \
	$(mAstQueryPath)/numberQuery.lo \
	$(mAstQueryPath)/numberQueryInheritedAttribute.lo \
	$(mAstQueryPath)/astQuery.lo \
	$(mAstQueryPath)/astQueryInheritedAttribute.lo
am__objects_10 = $(mAstSnippetPath)/Snippet.lo
am__objects_11 =
am__objects_12 = $(mAstRewriteMechanismPath)/nodeCollection.lo \
	$(mAstRewriteMechanismPath)/rewriteMidLevelInterface.lo \
	$(mAstRewriteMechanismPath)/rewriteHighLevelInterface.lo \
	$(mAstRewriteMechanismPath)/rewriteSynthesizedAttribute.lo \
	$(mAstRewriteMechanismPath)/rewriteASTFragementString.lo \
	$(mAstRewriteMechanismPath)/rewriteAccumulatedAttribute.lo \
	$(mAstRewriteMechanismPath)/rewriteTypeDeclaration.lo \
	$(mAstRewriteMechanismPath)/rewriteDebuggingSupport.lo \
	$(mAstRewriteMechanismPath)/rewriteLowLevelInterface.lo \
	$(am__objects_11)
am__objects_13 = $(am__objects_12) \
	$(mAstRewriteMechanismPath)/rewriteTemplateInstantiations.lo
am__objects_14 = $(mauAnnotationPath)/AnnotCollect.lo \
	$(mauAnnotationPath)/AnnotExpr.lo \
	$(mauAnnotationPath)/OperatorAnnotation.lo \
	$(mauAnnotationPath)/TypeAnnotation.lo \
	$(mauAnnotationPath)/AnnotDescriptors.lo \
	$(mauAnnotationPath)/AnnotIO.lo \
	$(mauAnnotationPath)/OperatorDescriptors.lo
am__objects_15 = $(mauAstInterfacePath)/AstInterface.lo \
	$(mauAstInterfacePath)/CPPAstInterface.lo
am__objects_16 = $(mauAstSupportPath)/ProcessAstTree.lo \
	$(mauAstSupportPath)/StmtInfoCollect.lo
am__objects_17 = $(mauSymbolicValPath)/SymbolicBound.lo \
	$(mauSymbolicValPath)/SymbolicExpr.lo \
	$(mauSymbolicValPath)/SymbolicFind.lo \
	$(mauSymbolicValPath)/SymbolicOperator.lo \
	$(mauSymbolicValPath)/SymbolicUnwrapCond.lo \
	$(mauSymbolicValPath)/SymbolicVal.lo
am__objects_18 = $(am__objects_14) $(am__objects_15) $(am__objects_16) \
	$(am__objects_17)
am__objects_19 = $(mptPartialRedundancyEliminationPath)/pre.lo \
	$(mptPartialRedundancyEliminationPath)/preControlFlowGraph.lo \
	$(mptPartialRedundancyEliminationPath)/expressionTreeEqual.lo
am__objects_20 = $(mptFiniteDifferencingPath)/finiteDifferencing.lo \
	$(mptFiniteDifferencingPath)/patternRewrite.lo
am__objects_21 =  \
	$(mptFunctionCallNormalizationPath)/FunctionNormalization.lo
am__objects_22 = $(mptConstantFoldingPath)/constantFolding.lo
am__objects_23 = $(mptImplicitCodeGenerationPath)/analysisUtils.lo \
	$(mptImplicitCodeGenerationPath)/defaultFunctionGenerator.lo \
	$(mptImplicitCodeGenerationPath)/destructorCallAnnotator.lo \
	$(mptImplicitCodeGenerationPath)/shortCircuitingTransformation.lo
am__objects_24 = $(mptAstInliningPath)/inliner.lo \
	$(mptAstInliningPath)/inlinerSupport.lo \
	$(mptAstInliningPath)/isPotentiallyModified.lo \
	$(mptAstInliningPath)/replaceExpressionWithStatement.lo
am__objects_25 = $(mptOutliningPath)/Check.lo \
	$(mptOutliningPath)/Outliner.lo \
	$(mptOutliningPath)/NameGenerator.lo \
	$(mptOutliningPath)/PragmaInterface.lo \
	$(mptOutliningPath)/ASTtools.lo $(mptOutliningPath)/Copy.lo \
	$(mptOutliningPath)/Jumps.lo \
	$(mptOutliningPath)/PrePostTraversal.lo \
	$(mptOutliningPath)/PreprocessingInfo.lo \
	$(mptOutliningPath)/StmtRewrite.lo $(mptOutliningPath)/This.lo \
	$(mptOutliningPath)/VarSym.lo $(mptOutliningPath)/Case.lo \
	$(mptOutliningPath)/ExtractIfs.lo $(mptOutliningPath)/If.lo \
	$(mptOutliningPath)/IfDirectiveContextFinder.lo \
	$(mptOutliningPath)/IfDirectiveExtractor.lo \
	$(mptOutliningPath)/Block.lo \
	$(mptOutliningPath)/NonLocalDecls.lo \
	$(mptOutliningPath)/PreprocIfs.lo \
	$(mptOutliningPath)/NonLocalControlFlow.lo \
	$(mptOutliningPath)/Preprocess.lo \
	$(mptOutliningPath)/ThisExprs.lo \
	$(mptOutliningPath)/CollectVars.lo \
	$(mptOutliningPath)/GenerateCall.lo \
	$(mptOutliningPath)/GenerateFunc.lo \
	$(mptOutliningPath)/Insert.lo $(mptOutliningPath)/Transform.lo
am__objects_26 = $(mptOmpLoweringPath)/omp_lowering.lo
am__objects_27 = $(mptTransTrackingPath)/transformationTracking.lo
am__objects_28 = $(am__objects_19) $(am__objects_20) $(am__objects_21) \
	$(am__objects_22) $(am__objects_23) $(am__objects_24) \
	$(am__objects_25) $(am__objects_26) $(am__objects_27)
am__objects_29 = $(am__objects_13) \
	$(am__objects_18) \
	$(am__objects_28)
am_libmidend_la_OBJECTS = $(am__objects_1) $(am__objects_2) \
	$(am__objects_3) $(am__objects_4) $(am__objects_7) \
	$(am__objects_8) $(am__objects_9) $(am__objects_10) \
	$(am__objects_29)
libmidend_la_OBJECTS = $(am_libmidend_la_OBJECTS)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
libxomp_la_LIBADD =
am_libxomp_la_OBJECTS = $(mptOmpLoweringPath)/xomp.lo
libxomp_la_OBJECTS = $(am_libxomp_la_OBJECTS)
libxomp_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(libxomp_la_LDFLAGS) $(LDFLAGS) -o $@
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp =
am__maybe_remake_depfiles =
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(libmidend_la_SOURCES) $(libxomp_la_SOURCES)
DIST_SOURCES = $(am__libmidend_la_SOURCES_DIST) $(libxomp_la_SOURCES)
RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \
	ctags-recursive dvi-recursive html-recursive info-recursive \
	install-data-recursive install-dvi-recursive \
	install-exec-recursive install-html-recursive \
	install-info-recursive install-pdf-recursive \
	install-ps-recursive install-recursive installcheck-recursive \
	installdirs-recursive pdf-recursive ps-recursive \
	tags-recursive uninstall-recursive
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__pkginclude_HEADERS_DIST =  \
	$(mAbstractHandlePath)/abstract_handle.h \
	$(mAbstractHandlePath)/roseAdapter.h \
	$(mAbstractLayerPath)/CodeThornException.h \
	$(mAbstractLayerPath)/AstAnnotator.h \
	$(mAbstractLayerPath)/CPAstAttributeInterface.h \
	$(mAbstractLayerPath)/DFAstAttribute.h \
	$(mAbstractLayerPath)/Labeler.h \
	$(mAbstractLayerPath)/RDAstAttributeInterface.h \
	$(mAbstractLayerPath)/SgNodeHelper.h \
	$(mAbstractLayerPath)/VariableIdMapping.h \
	$(mAbstractMemoryObjectPath)/memory_object.h \
	$(mAbstractMemoryObjectPath)/memory_object_impl.h \
	$(mAstDiagnosticsPath)/AstDiagnostics.h \
	$(mAstDiagnosticsPath)/AstConsistencyTests.h \
	$(mAstDiagnosticsPath)/AstWarnings.h \
	$(mAstDiagnosticsPath)/AstStatistics.h \
	$(mAstDiagnosticsPath)/AstPerformance.h \
	$(mAstProcessingPath)/AstNodeVisitMapping.h \
	$(mAstProcessingPath)/AstAttributeMechanism.h \
	$(mAstProcessingPath)/AstTextAttributesHandling.h \
	$(mAstProcessingPath)/AstDOTGeneration.h \
	$(mAstProcessingPath)/AstProcessing.h \
	$(mAstProcessingPath)/plugin.h \
	$(mAstProcessingPath)/AstSimpleProcessing.h \
	$(mAstProcessingPath)/AstTraverseToRoot.h \
	$(mAstProcessingPath)/AstNodePtrs.h \
	$(mAstProcessingPath)/AstSuccessorsSelectors.h \
	$(mAstProcessingPath)/AstReverseProcessing.h \
	$(mAstProcessingPath)/AstReverseSimpleProcessing.h \
	$(mAstProcessingPath)/AstRestructure.h \
	$(mAstProcessingPath)/AstClearVisitFlags.h \
	$(mAstProcessingPath)/AstTraversal.h \
	$(mAstProcessingPath)/AstCombinedProcessing.h \
	$(mAstProcessingPath)/AstCombinedProcessingImpl.h \
	$(mAstProcessingPath)/AstCombinedSimpleProcessing.h \
	$(mAstProcessingPath)/StackFrameVector.h \
	$(mAstProcessingPath)/AstSharedMemoryParallelProcessing.h \
	$(mAstProcessingPath)/AstSharedMemoryParallelProcessingImpl.h \
	$(mAstProcessingPath)/AstSharedMemoryParallelSimpleProcessing.h \
	$(mAstProcessingPath)/graphProcessing.h \
	$(mAstProcessingPath)/graphProcessingSgIncGraph.h \
	$(mAstProcessingPath)/graphTemplate.h \
	$(mAstProcessingPath)/SgGraphTemplate.h \
	$(mAstProcessingPath)/AstPDFGeneration.h \
	$(mAstMatchingPath)/RoseAst.h \
	$(mAstMatchingPath)/matcherparser_decls.h \
	$(mAstMatchingPath)/matcherparser.h \
	$(mAstMatchingPath)/AstMatching.h \
	$(mAstMatchingPath)/MatchOperation.h \
	$(mAstMatchingPath)/AstTerm.h \
	$(mAstRewriteMechanismPath)/rewrite.h \
	$(mAstRewriteMechanismPath)/lowLevelRewriteInterface.h \
	$(mAstRewriteMechanismPath)/midLevelRewriteInterface.h \
	$(mAstRewriteMechanismPath)/highLevelRewriteInterface.h \
	$(mAstRewriteMechanismPath)/rewriteMidLevelInterfaceTemplatesImpl.h \
	$(mAstRewriteMechanismPath)/prefixGenerationImpl.h \
	$(mAstRewriteMechanismPath)/ASTFragmentCollectorTraversalImpl.h \
	$(mAstRewriteMechanismPath)/rewriteSynthesizedAttributeTemplatesImpl.h \
	$(mAstRewriteMechanismPath)/rewriteTreeTraversalImpl.h \
	$(mAstRewriteMechanismPath)/rewriteASTFragementStringTemplatesImpl.h \
	$(mAstRewriteMechanismPath)/nodeCollectionTemplatesImpl.h \
	$(mAstRewriteMechanismPath)/rewriteDebuggingSupportTemplatesImpl.h \
	$(mAstRewriteMechanismPath)/rewriteTemplateImpl.h \
	$(mAstQueryPath)/nodeQuery.h \
	$(mAstQueryPath)/nodeQueryInheritedAttribute.h \
	$(mAstQueryPath)/booleanQuery.h \
	$(mAstQueryPath)/booleanQueryInheritedAttribute.h \
	$(mAstQueryPath)/nameQuery.h \
	$(mAstQueryPath)/nameQueryInheritedAttribute.h \
	$(mAstQueryPath)/numberQuery.h \
	$(mAstQueryPath)/numberQueryInheritedAttribute.h \
	$(mAstQueryPath)/astQuery.h \
	$(mAstQueryPath)/astQueryInheritedAttribute.h \
	$(mAstQueryPath)/roseQueryLib.h $(mAstSnippetPath)/Snippet.h \
	$(mauAnnotationPath)/AnnotCollect.h \
	$(mauAnnotationPath)/AnnotExpr.h \
	$(mauAnnotationPath)/AnnotStmt.h \
	$(mauAnnotationPath)/OperatorDescriptors.h \
	$(mauAnnotationPath)/AnnotDescriptors.h \
	$(mauAnnotationPath)/AnnotIO.h \
	$(mauAnnotationPath)/OperatorAnnotation.h \
	$(mauAnnotationPath)/TypeAnnotation.h \
	$(mauAnnotationPath)/CPPAnnotation.h \
	$(mauAstInterfacePath)/AstInterface.h \
	$(mauAstInterfacePath)/CPPAstInterface.h \
	$(mauAstInterfacePath)/AstInterface_ROSE.h \
	$(mauAstSupportPath)/AnalysisInterface.h \
	$(mauAstSupportPath)/ProcessAstTree.h \
	$(mauAstSupportPath)/StmtInfoCollect.h \
	$(mauAstSupportPath)/LoopInfoInterface.h \
	$(mauSymbolicValPath)/SymbolicMultiply.h \
	$(mauSymbolicValPath)/SymbolicPlus.h \
	$(mauSymbolicValPath)/SymbolicVal.h \
	$(mauSymbolicValPath)/SymbolicExpr.h \
	$(mauSymbolicValPath)/SymbolicSelect.h \
	$(mauSymbolicValPath)/SymbolicBound.h \
	$(mptPartialRedundancyEliminationPath)/pre.h \
	$(mptPartialRedundancyEliminationPath)/preControlFlowGraph.h \
	$(mptPartialRedundancyEliminationPath)/expressionTreeEqual.h \
	$(mptFiniteDifferencingPath)/finiteDifferencing.h \
	$(mptFiniteDifferencingPath)/patternRewrite.h \
	$(mptFunctionCallNormalizationPath)/FunctionNormalization.h \
	$(mptConstantFoldingPath)/constantFolding.h \
	$(mptImplicitCodeGenerationPath)/analysisUtils.h \
	$(mptImplicitCodeGenerationPath)/defaultFunctionGenerator.h \
	$(mptImplicitCodeGenerationPath)/destructorCallAnnotator.h \
	$(mptImplicitCodeGenerationPath)/shortCircuitingTransformation.h \
	$(mptAstInliningPath)/inliner.h \
	$(mptAstInliningPath)/inlinerSupport.h \
	$(mptAstInliningPath)/replaceExpressionWithStatement.h \
	$(mptOutliningPath)/Outliner.hh \
	$(mptOutliningPath)/NameGenerator.hh \
	$(mptOutliningPath)/ASTtools.hh $(mptOutliningPath)/Copy.hh \
	$(mptOutliningPath)/Jumps.hh \
	$(mptOutliningPath)/PrePostTraversal.hh \
	$(mptOutliningPath)/PreprocessingInfo.hh \
	$(mptOutliningPath)/StmtRewrite.hh $(mptOutliningPath)/This.hh \
	$(mptOutliningPath)/VarSym.hh \
	$(mptOutliningPath)/IfDirectiveContextFinder.hh \
	$(mptOutliningPath)/IfDirectiveExtractor.hh \
	$(mptOutliningPath)/If.hh $(mptOutliningPath)/Preprocess.hh \
	$(mptOmpLoweringPath)/omp_lowering.h \
	$(mptOmpLoweringPath)/libgomp_g.h \
	$(mptOmpLoweringPath)/libompc.h \
	$(mptOmpLoweringPath)/libxomp.h \
	$(mptOmpLoweringPath)/libxompf.h \
	$(mptOmpLoweringPath)/OmpSupport.h \
	$(mptTransTrackingPath)/transformationTracking.h
HEADERS = $(pkginclude_HEADERS)
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
am__recursive_targets = \
  $(RECURSIVE_TARGETS) \
  $(RECURSIVE_CLEAN_TARGETS) \
  $(am__extra_recursive_targets)
AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \
	distdir distdir-am
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = BinaryAnalysis \
	programTransformation/extractFunctionArgumentsNormalization \
	programTransformation/singleStatementToBlockNormalization MFB \
	MDCG KLT programAnalysis programTransformation/loopProcessing
am__DIST_COMMON = $(srcdir)/Makefile.in \
	$(srcdir)/abstractHandle/Makefile_variables \
	$(srcdir)/abstractLayer/Makefile_variables \
	$(srcdir)/abstractMemoryObject/Makefile_variables \
	$(srcdir)/astDiagnostics/Makefile_variables \
	$(srcdir)/astMatching/Makefile_variables \
	$(srcdir)/astProcessing/Makefile_variables \
	$(srcdir)/astQuery/Makefile_variables \
	$(srcdir)/astRewriteMechanism/Makefile_variables \
	$(srcdir)/astSnippet/Makefile_variables \
	$(srcdir)/astUtil/Makefile_variables \
	$(srcdir)/astUtil/annotation/Makefile_variables \
	$(srcdir)/astUtil/astInterface/Makefile_variables \
	$(srcdir)/astUtil/astSupport/Makefile_variables \
	$(srcdir)/astUtil/symbolicVal/Makefile_variables \
	$(srcdir)/programTransformation/Makefile_variables \
	$(srcdir)/programTransformation/astInlining/Makefile_variables \
	$(srcdir)/programTransformation/astOutlining/Makefile_variables \
	$(srcdir)/programTransformation/constantFolding/Makefile_variables \
	$(srcdir)/programTransformation/finiteDifferencing/Makefile_variables \
	$(srcdir)/programTransformation/functionCallNormalization/Makefile_variables \
	$(srcdir)/programTransformation/implicitCodeGeneration/Makefile_variables \
	$(srcdir)/programTransformation/ompLowering/Makefile_variables \
	$(srcdir)/programTransformation/partialRedundancyElimination/Makefile_variables \
	$(srcdir)/programTransformation/transformationTracking/Makefile_variables \
	$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs \
	$(top_srcdir)/config/mkinstalldirs
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
ABS_COMPASS2_XML_SRCDIR = /home/meltdown1995/roseRoot/rose-compiler/src/projects/compass2/share/xml
ACLOCAL = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing aclocal-1.16
AMTAR = 
AM_DEFAULT_VERBOSITY = 0
AR = ar
ARMA_PREFIX = 
ATERM_BIN_PATH = 
ATERM_INSTALL_PATH = 
ATERM_LIBRARY_PATH = 
AUTOCONF = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing autoconf
AUTOHEADER = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing autoheader
AUTOMAKE = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing automake-1.16
AUX_LINKER = 
AWK = mawk
Axx_INCLUDES = 
Axx_LIBS = 
BACKEND_ADA_COMPILER = gnat
BACKEND_COBOL_COMPILER = cobc
BACKEND_COMPILER_VERSION_MAJOR_NUMBER = 8
BACKEND_COMPILER_VERSION_MINOR_NUMBER = 4
BACKEND_COMPILER_VERSION_NAME = gnu
BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER = 0
BACKEND_CSHARP_COMPILER = mcs
BACKEND_CXX_COMPILER = g++
BACKEND_CXX_VENDOR_AND_VERSION2 = gnu-8.4
BACKEND_CXX_VENDOR_AND_VERSION3 = gnu-8.4.0
BACKEND_C_COMPILER = gcc
BACKEND_FORTRAN_COMPILER = gfortran
BACKEND_JAVA_COMPILER = javac
BACKEND_JOVIAL_COMPILER = default_jovial_compiler
BACKEND_MATLAB_COMPILER = octave
BACKEND_X10_COMPILER = 
BISON = /usr/bin/bison
BISON_VERSION = bison (GNU Bison) 3.7
BOOST_CHRONO_LIB = -lboost_chrono
BOOST_CPPFLAGS = -pthread -I/usr/include
BOOST_DATE_TIME_LIB = -lboost_date_time
BOOST_FILESYSTEM_LIB = -lboost_filesystem
BOOST_IOSTREAMS_LIB = -lboost_iostreams
BOOST_LDFLAGS = -pthread -L/usr/lib/x86_64-linux-gnu
BOOST_PROGRAM_OPTIONS_LIB = -lboost_program_options
BOOST_RANDOM_LIB = -lboost_random
BOOST_REGEX_LIB = -lboost_regex
BOOST_SERIALIZATION_LIB = -lboost_serialization
BOOST_SYSTEM_LIB = -lboost_system
BOOST_THREAD_LIB = -lboost_thread
BOOST_WAVE_LIB = -lboost_wave
CANDL_PATH = 
CC = gcc
CCDEPMODE = depmode=gcc3
CCLD = gcc
CFLAGS = -g -O2  -g -O2 -Wall -Wstrict-prototypes -Wmissing-prototypes
CFLAGS32 = no
CLANG_CXXFLAGS = 
CLANG_LDFLAGS = 
CLANG_LIBDIR = 
CLASSPATH = /home/meltdown1995/roseRoot/rose-compiler//src/src/3rdPartyLibraries/antlr-jars/antlr-3.5.2-complete.jar:/home/meltdown1995/roseRoot/rose-compiler//src/src/3rdPartyLibraries/fortran-parser/OpenFortranParser-20200819-JDK8.jar
CLOOG_PATH = 
COBPT_INSTALL_PATH = 
COBPT_LIBRARY_PATH = 
CPP = gcc -E

# DQ (9/27/2015): Added to support new use of AM_CPPFLAGS instead of INCLUDES
# (depreicated in automake and for which many warnings are generated).
CPPFLAGS = $(AM_CPPFLAGS)
CUDA_BIN_DIR = 
CUDA_INC_DIR = /home/meltdown1995/roseRoot/rose-compiler/build/include-staging/cuda_HEADERS/cuda-7.5/targets/x86_64-linux/include/
CUDA_LIB_DIR = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS =   -g -fno-var-tracking-assignments -Wno-misleading-indentation -O2 -Wall
CXXLD = g++
CXX_DEBUG = -g -fno-var-tracking-assignments -Wno-misleading-indentation
CXX_OPTIMIZE = -O2
CXX_SHARED_LIB_UPDATE = ${CXX} -shared -o
CXX_STATIC_LIB_UPDATE = ${AR} ruv
CXX_TEMPLATE_OBJECTS = 

# ------------------------------------------------------------------------------
#  Library: programTransformation.la
# ------------------------------------------------------------------------------
CXX_TEMPLATE_REPOSITORY_PATH = .
CXX_WARNINGS = -Wall
CYGPATH_W = echo
C_DEBUG = -g
C_OPTIMIZE = -O2
C_WARNINGS = -Wall -Wstrict-prototypes -Wmissing-prototypes
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLIB_PREFIX = 
DLLTOOL = false
DOXYGEN = 
DOXYGEN_ADDED_DIRECTORY_1 = @top_pwd@/src/frontend/SageIII
DOXYGEN_ADDED_DIRECTORY_2 = /home/meltdown1995/roseRoot/rose-compiler//src/src/frontend/SageIII
DOXYGEN_ENABLED_SECTIONS = documentUserVersionUsingDoxygen
DOXYGEN_EXTRACT_ALL = NO
DOXYGEN_EXTRACT_PRIVATE = NO
DOXYGEN_EXTRACT_STATIC = NO
DOXYGEN_HIDE_FRIEND_COMPOUNDS = YES
DOXYGEN_HIDE_UNDOC_CLASSES = NO
DOXYGEN_HIDE_UNDOC_MEMBERS = NO
DOXYGEN_INTERNAL_DOCS = NO
DOXYGEN_USE_TAG_FILE = 
DOXYINDEXER = 
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
ETHER_PREFIX = 
EXE = 
EXEEXT = 
F77 = f77
FC = gfortran
FCFLAGS = -g -O2
FFLAGS = 
FGREP = /usr/bin/grep -F
FLANG_INSTALL_PATH = 
FLANG_SOURCE_PATH = 
FLTK_include_path = 
FLTK_libs_path = 
FRONTEND_CXX_VENDOR_AND_VERSION2 = gnu-8
FRONTEND_CXX_VENDOR_AND_VERSION3 = gnu-8.4.0
GCC_MINOR_VERSION = 8
GCC_VERSION = 8
GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX = gnu-8.4
GEN_BE = sage_gen_be.o
GFORTRAN_PATH = /usr/bin/gfortran
GHCBIN = 
GLUT_CFLAGS = 
GLUT_LIBS = ${glut_path}
GLUT_include_path = 
GLUT_libs_path = 
GL_CFLAGS = 
GL_LIBS = 
GMP_INCLUDE_PATH = 
GMP_INSTALL_PATH = 
GMP_LIBRARY_PATH = 
GNAT_INCLUDES = 
GREP = /usr/bin/grep
GraphViz_include_path = 
GraphViz_libs_path = 
HAVE_CXX11 = 1
HAVE_CXX14 = 1
HS_CONFIG_OPTS = --prefix=/home/meltdown1995/roseRoot/rose-compiler//install --user
INCLTDL = 
INCLUDE_COMPASS_MAKEFILE_INC = include compass_makefile.inc
INDENT = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INSURE_OPTIONS = 
INTEL_FPP_PATH = 
ISL_INCLUDE_PATH = 
ISL_INSTALL_PATH = 
ISL_LIBRARY_PATH = 
IntelPin_path = 
JAR = 
JAVA = 
JAVAC = 
JAVA_JVM_INCLUDE = 
JAVA_JVM_LINK = 
JAVA_JVM_PATH = 
JAVA_PATH = 
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LEX = flex
LEXLIB = 
LEX_OUTPUT_ROOT = lex.yy
LIBADD_DL = -ldl 
LIBADD_DLD_LINK = 
LIBADD_DLOPEN = -ldl
LIBADD_SHL_LOAD = 
LIBDWARF_CPPFLAGS = 
LIBDWARF_LDFLAGS = 
LIBDWARF_PREFIX = 
LIBELF_CPPFLAGS = 
LIBELF_LDFLAGS = 
LIBELF_PREFIX = 
LIBFFI_CFLAGS = 
LIBFFI_LIBS = 
LIBGCRYPT_CPPFLAGS = 
LIBGCRYPT_LDFLAGS = 
LIBGCRYPT_PREFIX = 
LIBLTDL = -lltdl
LIBOBJS = 
LIBREADLINE_INCLUDE_PATH = 
LIBREADLINE_INSTALL_PATH = 
LIBREADLINE_LIBRARY_PATH = 
LIBREADLINE_LIBS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LLVM_CONFIG = /bin/llvm-config
LLVM_CPPFLAGS =  -DLLVMVERSION=
LLVM_LDFLAGS =  -R
LLVM_LIBS =  
LN_S = ln -s
LTDLDEPS = 
LTDLINCL = 
LTDLOPEN = libltdl
LTLIBOBJS = 
LT_ARGZ_H = 
LT_CONFIG_H = rose_config.h
LT_DLLOADERS =  dlopen.la
LT_DLPREOPEN = -dlpreopen dlopen.la 
LT_SYS_LIBRARY_PATH = 
MAKEINFO = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/missing makeinfo
MANIFEST_TOOL = :
MAPLE_INCLUDES = 
MAPLE_LIBDIR = 
MAPLE_LIBS = 
MD5 = md5sum
MINT = $(top_builddir)/projects/mint/src/mint
MKDIR_P = /usr/bin/mkdir -p
MOC = NONE/moc
MPICC = not-found
MPICXX = not-found
MPIF77 = not-found
MPIFC = not-found
MYSQL_CFLAGS = 
MYSQL_CONFIG = 
MYSQL_INCLUDE = 
MYSQL_LDFLAGS = 
MYSQL_VERSION = 
NM = /usr/bin/nm -B
NMEDIT = 
NVCCBIN = 
OBJ = .o
OBJDUMP = objdump
OBJEXT = o
OCTAVE_PARSER_INSTALL_TARFILE = 
OPENCL_INC_DIR = 
OPENCL_LIB_DIR = 
OPEN_FORTRAN_PARSER_PATH = /src/3rdPartyLibraries/fortran-parser
OPTIONAL_PROJECTS =  AMReX-Translation BinaryAnalysisTools CodeProperties CodeThorn MatlabTranslation MatrixTesting OpenK Rose-To-LLVM RTC2 scalarization simulator2 SnippetTools TALCDataLayout traceAnalysis ZFPTool
OS_major_release_number = 20
OS_minor_release_number = 10
OS_release = 20.10
OS_vendor = Ubuntu
OTOOL = 
OTOOL64 = 
PACKAGE = rose
PACKAGE_BUGREPORT = 
PACKAGE_NAME = ROSE
PACKAGE_STRING = ROSE 0.11.13.0
PACKAGE_TARNAME = rose
PACKAGE_URL = 
PACKAGE_VERSION = 0.11.13.0
PACKAGE_VERSION_NUMERIC = 0.11.13.0
PATH_SEPARATOR = :
PERL = perl
PKG_CONFIG = /usr/bin/pkg-config
POET_INCL = 
POET_LIB = 
PPL_PATH = 
PURIFY_OPTIONS = -windows=no -recursion-depth-limit=40000 -chain-length=24 -first-only=yes -leaks-at-exit=no -inuse-at-exit=no -always-use-cache-dir=yes -cache-dir=/home/meltdown1995/tmp -best-effort 
PYTHON = 
PYTHON_CPPFLAGS = 
PYTHON_EXTRA_LDFLAGS = 
PYTHON_EXTRA_LIBS = 
PYTHON_LDFLAGS = 
PYTHON_ROOT = 
PYTHON_SITE_PKG = 
PYTHON_VERSION_MM = 
Pxx_INCLUDES = 
Pxx_LIBS = 
QROSE_PREFIX = 
QT_INCLUDES = -DQT3_SUPPORT -INONE/QtCore -INONE/QtGui -INONE/Qt3Support -INONE/QtXml -INONE
QT_LDFLAGS = -LNONE -lQtCore -lQtGui -lQt3Support -lQtXml -lQtUiTools
QT_VERSION = 
QT_VERSION_MAJOR = 
QT_VERSION_MINOR = 
RANLIB = ranlib
RCC = NONE/rcc
ROSEHPCT_DEP_INCLUDES = 
ROSEHPCT_DEP_LIBS = 
ROSE_BOOST_NORMAL_INCLUDE_PATH = -I/usr/include

# DQ (12/22/2008): Specification of Boost path for use with "-isystem" option (may be GNU
# specific).  We use this option only if the configuration of ROSE has detected a
# previously installed version of Boost (which we do not want to use).
# Note that only one of these will be non-empty makefile variables.
ROSE_BOOST_PREINCLUDE_PATH = 
ROSE_CAPSTONE_PREFIX = 
ROSE_EDG_MAJOR_VERSION_NUMBER = 5
ROSE_EDG_MINOR_VERSION_NUMBER = 0
ROSE_HOME = .
ROSE_LIBMAGIC_PREFIX = 
ROSE_LIBPQXX_PREFIX = 
ROSE_LSB_RELEASE = lsb_release
ROSE_OBJDUMP_PATH = objdump
ROSE_OFP_JAR_FILE = OpenFortranParser-20200819-JDK8.jar
ROSE_OFP_MAJOR_VERSION_NUMBER = 0
ROSE_OFP_MINOR_VERSION_NUMBER = 8
ROSE_OFP_PATCH_VERSION_NUMBER = 7
ROSE_OFP_VERSION_NUMBER = 20200819-JDK8
ROSE_PS2PDF_PATH = ps2pdf
ROSE_SUPPORT_GNU_EXTENSIONS = FALSE
ROSE_SUPPORT_MICROSOFT_EXTENSIONS = FALSE
ROSE_USE_CANDL = 
ROSE_USE_CLOOG = 
ROSE_USE_EDG_QUAD_FLOAT = 
ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT = 
ROSE_USE_PPL = 
ROSE_USE_SCOPLIB = 
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT = 
ROSE_WGET_PATH = wget
ROSE_WITH_MPI_CFLAGS = 
ROSE_WITH_MPI_CLDFLAGS = 
ROSE_WITH_MPI_CXXFLAGS = 
ROSE_WITH_MPI_CXXLDFLAGS = 
ROSE_WITH_MPI_F77FLAGS = 
ROSE_WITH_MPI_F77LDFLAGS = 
ROSE_WITH_MPI_FFLAGS = 
ROSE_WITH_MPI_FLDFLAGS = 
ROSE_YAML_PREFIX = 
ROSE_YICES = 
ROSE_YICES_PREFIX = 
ROSE_Z3_PREFIX = 
RT_LIBS = -ldl 
SCOPLIB_PATH = 
SED = sed
SET_MAKE = 
SHELL = /bin/bash
SPOT_INCLUDE_PATH = 
SPOT_INSTALL_PATH = 
SPOT_LIBRARY_PATH = 
SQLITE3_CFLAGS = 
SQLITE3_LDFLAGS = 
SQLITE3_VERSION = 
STRATEGO_BIN_PATH = 
STRATEGO_INSTALL_PATH = 
STRATEGO_LIBRARY_PATH = 
STRIP = strip
SWIG = echo "Error: SWIG is not installed. You should look at http://www.swig.org" ; false -c++
SWIG_LIB = 
SWIPLBIN = 
TCLSH = 
TEST_SMT_SOLVER = 
UIC = NONE/uic
UPC = 
UPCDEPMODE = 
UPCFLAGS = 
USING_WINDOWS = 0
VALGRIND_BINARY = /valgrind
VALGRIND_BIN_PATH = 
VALGRIND_INCLUDE_PATH = 
VALGRIND_INSTALL_PATH = 
VALGRIND_LIBRARY_PATH = 
VECTORIZATION = $(top_builddir)/projects/vectorization/src/vectorization
VERSION = 0.11.13.0
WT_PREFIX = no
X10_BIN_PATH = 
X10_INSTALL_PATH = 
X10_LIBRARY_PATH = 
X10_VERSION = 
XERCES_CPPFLAGS = 
XERCES_LDFLAGS = 
XERCES_LIBS = 
XERCES_VERSION = 
XMKMF = 
XML2_CONFIG = no
XML_CPPFLAGS = 
XML_LIBS = 
YACC = bison -y
YFLAGS = 
Z3BIN = 
Z3_INCLUDE_PATH = 
Z3_LIBRARY_PATH = 
Z3_PREFIX = 
abs_builddir = /home/meltdown1995/roseRoot/rose-compiler/build/src/midend
abs_srcdir = /home/meltdown1995/roseRoot/rose-compiler//src/src/midend
abs_top_builddir = /home/meltdown1995/roseRoot/rose-compiler/build
abs_top_srcdir = /home/meltdown1995/roseRoot/rose-compiler//src
absolute_path_srcdir = /home/meltdown1995/roseRoot/rose-compiler/src
ac_boost_path = /usr
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
ac_ct_F77 = f77
ac_ct_FC = gfortran
ac_ct_MPICXX = 
ac_ct_UPC = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = tar --format=posix -chf - "$$tardir"
am__untar = tar -xf -
bddbddb_path = 
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_triplet_without_redhat = x86_64-pc-linux-gnu
build_vendor = pc
builddir = .
configure_date = Wednesday December 23 22:42:41 2020
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
edg_union_struct_debugging_value = union
exec_prefix = ${prefix}
glut_path = 
gnat_home = 
gnat_path = 
gomp_omp_runtime_library_path = 
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
ida_path = 
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/meltdown1995/roseRoot/rose-compiler/src/config/install-sh
insure_BIN = 
insure_LIBS = 
insure_PREFIX = 
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
llvm_path = 
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
ltdl_LIBOBJS =  lt__strl.o
ltdl_LTLIBOBJS =  lt__strl.lo
mandir = ${datarootdir}/man
maple_path = 
mkdir_p = $(MKDIR_P)
mono_home = 
oldincludedir = /usr/include
omni_omp_runtime_support_path = 
optional_Visualization_subdirs = 
parallel_ast_traversal_omp_path = 
pdfdir = ${docdir}
php_path = 
poet_dir = 
prefix = /home/meltdown1995/roseRoot/rose-compiler//install
program_transform_name = s,x,x,
psdir = ${docdir}
purify_BIN = 
purify_INCLUDES = 
purify_LIBS = 
purify_PREFIX = 
res_top_src = /home/meltdown1995/roseRoot/rose-compiler/src
rosyln_home = 
rted_path = 
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = /home/meltdown1995/roseRoot/rose-compiler//src/src/midend
subdirs =  src/3rdPartyLibraries/libharu-2.1.0 libltdl
sys_symbol_underscore = no
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_pwd = /home/meltdown1995/roseRoot/rose-compiler/build
top_srcdir = /home/meltdown1995/roseRoot/rose-compiler//src
wine_path = 

# SQLite is a simpler database to use than MySQL
#ROSE_SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS)
#SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS) -I$(top_srcdir)/src/roseExtensions/sqlite3x
#SQLITE_DATABASE_LIBS = $(SQLITE3_LDFLAGS)
#   ROSE_SQLITE_DATABASE_OBJS     = $(top_builddir)/src/roseExtensions/sqlite3x/*o
#ROSE_SQLITE_DATABASE_LIB_NAME = RoseSQLite3xDatabase
#ROSE_SQLITE_DATABASE_LIB_FILE = lib$(ROSE_SQLITE_DATABASE_LIB_NAME).la
#ROSE_SQLITE_DATABASE_LIBS = -l$(ROSE_SQLITE_DATABASE_LIB_NAME)
#ROSE_SIDEEFFECT_INCLUDE = -I$(top_srcdir)/src/midend/programAnalysis/sideEffectAnalysis
#Z3_LIB_NAME = z3
#Z3_LIB_FILE = lib$(Z3_LIB_NAME).so
#Z3_LIBS = -l$(Z3_LIB_NAME)
#Z3_INCLUDES = -I$(Z3_PREFIX)/include
#Z3_LIB_INCLUDES = -L$(Z3_PREFIX)/lib
#ROSE_Z3_INCLUDES = -I/include
#ROSE_Z3_LIBS = -lz3
#ROSE_Z3_LIBS_WITH_PATH = -L/lib -lz3

# This is properly handled by automake even when specified in an include file
EDG_LIBS = @EDG_LIBS@

# Conditional support for Gabriel's QRose GUI Library
#  ROSE_GUI_INCLUDE =   -I${QROSE_PREFIX}/include
#ROSE_GUI_INCLUDE = -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/Common -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/TreeBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/SourceBox

# ROSE_GUI_LIBS = -lqrose
#  ROSE_GUI_LIBS_WITH_PATH = -L${QROSE_PREFIX}/lib -lqrose
#  ROSE_GUI_LIBS_WITH_PATH =  -L${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/  -lqrose
#ROSE_GUI_LIBS_WITH_PATH = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la

# ROSE_GUI_LIB_FILE = libqrose.a
#ROSE_QT_INCLUDE = $(QT_INCLUDES)
# ROSE_QT_LIBS = -lqt
#ROSE_QT_LIBS_WITH_PATH = ${QT_LDFLAGS}
# ROSE_QT_LIB_FILE = libqt.a

# ROSE-HPCToolkit module
#ROSE_ROSEHPCT_INCLUDES = -I$(top_srcdir)/src/roseExtensions/roseHPCToolkit/include
#ROSE_ROSEHPCT_LIBS = -lrosehpct
#ROSE_ROSEHPCT_LIBS_WITH_PATH = $(top_builddir)/src/roseExtensions/roseHPCToolkit/src/librosehpct.la
# ROSE_ROSEHPCT_LIB_FILE = librosehpct.so

# ROSE-YICES Package (destributed by SRI as a static library)
#ROSE_YICES_INCLUDES = -I/include
#ROSE_YICES_LIBS = -lyices
#ROSE_YICES_LIBS_WITH_PATH = /lib/libyices.a

# YAML-CPP package for parsing YAML/JSON files
#ROSE_YAML_INCLUDES = -I/include
#ROSE_YAML_LIBS = -lyaml-cpp
#ROSE_YAML_LIBS_WITH_PATH = -L/lib -lyaml-cpp

# GNU readline
#ROSE_READLINE_INCLUDES = -I
#ROSE_READLINE_LIBS = 
#ROSE_READLINE_LIBS_WITH_PATH = -L $(ROSE_READLINE_LIBS)

# libmagic for identifying file types based on magic numbers
#ROSE_LIBMAGIC_INCLUDES = -I/include
#ROSE_LIBMAGIC_LIBS = -lmagic
#ROSE_LIBMAGIC_LIBS_WITH_PATH = -L/lib -lmagic

# PostgreSQL C++ API
#ROSE_LIBPQXX_INCLUDES = -I/include
#ROSE_LIBPQXX_LIBS = -lpqxx -lpq
#ROSE_LIBPQXX_LIBS_WITH_PATH = -L/lib -lpqxx -lpq

# Capstone disassembler
#ROSE_CAPSTONE_INCLUDES = -I/include
#ROSE_CAPSTONE_LIBS = -lcapstone
#ROSE_CAPSTONE_LIBS_WITH_PATH = -L/lib -lcapstone

# Math algorithms from http://dlib.net. This is a headers-only library neede by some binary analyses.
#ROSE_DLIB_INCLUDES = -I
#ROSE_DLIB_LIBS = 
#ROSE_DLIB_LIBS_WITH_PATH = 

# DQ (11/4/2016): Adding support for use of Address Sanitizer (for where the ROSE Test Handler (RTH) is used.
# Note the quotes and escapes that are required:
ADDRESS_SANITIZER_OPTIONS = "ASAN_OPTIONS=halt_on_error=0:symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=\`which llvm-symbolizer\`"

# DQ(11/4/2016): Need a version when not using the ROSE Test Handler (RTH):
NON_RTH_ADDRESS_SANITIZER_OPTIONS = ASAN_OPTIONS=halt_on_error=1:symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=`which llvm-symbolizer`
#ROSE_ELF_INCLUDES = 
#ROSE_ELF_LIBS_WITH_PATH = 

# ROSE gcrypt support (for things like md5, sha1, etc)
#ROSE_GCRYPT_INCLUDES = 
#ROSE_GCRYPT_LIBS_WITH_PATH = 

# ROSE-DWARF libdwarf support
#ROSE_DWARF_INCLUDES = 
#ROSE_DWARF_LIBS_WITH_PATH = 

# DQ (3/13/2009):
# If Dwarf is used with Intel Pin then reference the same copy of libdwarf.a (in the same
# directory).  However, it does NOT work to link both references to libdwarf into more
# than one dynamic (shared) library, so we need to link libdwarf dynamically.
# To avoid additional LD_LIBRARY_PATH requirements, we do so using rpath.
# To support this the libdwarf.so should be placed into $(INTEL_PIN_PATH)/intel64/lib-ext
# and the static libdwarf.a moved out (renamed) so that it will not be used.
# Note that this will also cause librose.so to use the shared library for
# dwarf when used with Intel Pin.
##ROSE_DWARF_LIBS_WITH_PATH = -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
# DQ (3/14/2009): This factors the lib paths.
##INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)

# ROSE-WINE Package (Wine is a package to permit execution of Windows binaries under Linux)
#ROSE_WINE_INCLUDES = -I$(wine_path)/include
#ROSE_PHP_INCLUDES = -I$(php_path)/include/phc -I$(php_path)/include/php
#ROSE_PHP_LIBS = -lphp5 -lphc -lltdl
#ROSE_PHP_LIBS_WITH_PATH = $(php_path)/lib/libphc.so $(php_path)/lib/libphp5.so $(LIBLTDL)

# ASR (06/09/2010): adding llvm support variables
#ROSE_LLVM_INCLUDES = -I$(llvm_path)/include
#ROSE_LLVM_LIBS = -L$(llvm_path)/lib \
#	-lLLVMXCoreCodeGen -lLLVMXCoreAsmPrinter \
#	-lLLVMXCoreInfo -lLLVMSystemZCodeGen \
#	-lLLVMSystemZAsmPrinter -lLLVMSystemZInfo \
#	-lLLVMSparcCodeGen -lLLVMSparcAsmPrinter \
#	-lLLVMSparcInfo -lLLVMPowerPCCodeGen \
#	-lLLVMPowerPCAsmPrinter -lLLVMPowerPCInfo \
#	-lLLVMpic16passes -lLLVMPIC16AsmPrinter \
#	-lLLVMPIC16CodeGen -lLLVMPIC16Info \
#	-lLLVMMSP430CodeGen -lLLVMMSP430AsmPrinter \
#	-lLLVMMSP430Info -lLLVMMSIL -lLLVMMSILInfo \
#	-lLLVMMipsAsmPrinter -lLLVMMipsCodeGen \
#	-lLLVMMipsInfo -lLLVMMBlazeAsmPrinter \
#	-lLLVMMBlazeCodeGen -lLLVMMBlazeInfo \
#	-lLLVMLinker -lLLVMipo -lLLVMInterpreter \
#	-lLLVMInstrumentation -lLLVMJIT \
#	-lLLVMExecutionEngine -lLLVMCppBackend \
#	-lLLVMCppBackendInfo -lLLVMCellSPUCodeGen \
#	-lLLVMCellSPUAsmPrinter -lLLVMCellSPUInfo \
#	-lLLVMCBackend -lLLVMCBackendInfo \
#	-lLLVMBlackfinCodeGen \
#	-lLLVMBlackfinAsmPrinter \
#	-lLLVMBlackfinInfo -lLLVMBitWriter \
#	-lLLVMX86Disassembler -lLLVMX86AsmParser \
#	-lLLVMX86AsmPrinter -lLLVMX86CodeGen \
#	-lLLVMX86Info -lLLVMAsmParser \
#	-lLLVMARMAsmParser -lLLVMMCParser \
#	-lLLVMARMAsmPrinter -lLLVMARMCodeGen \
#	-lLLVMARMInfo -lLLVMArchive \
#	-lLLVMBitReader -lLLVMAlphaCodeGen \
#	-lLLVMSelectionDAG -lLLVMAlphaAsmPrinter \
#	-lLLVMAsmPrinter -lLLVMCodeGen \
#	-lLLVMScalarOpts -lLLVMInstCombine \
#	-lLLVMTransformUtils -lLLVMipa \
#	-lLLVMAnalysis -lLLVMTarget -lLLVMMC \
#	-lLLVMCore -lLLVMAlphaInfo -lLLVMSupport \
#	-lLLVMSystem

# adding all libraries for now

# Python API support
#ROSE_PYTHON_INCLUDES = 
#ROSE_PYTHON_LIBS_WITH_PATH = 

# SSL support permits use of MD5 checksums internally for binary library identification.
#ROSE_SSL_LIBS = -lssl -lcrypto

# support for precompiled headers
#ROSE_PCH_INCLUDE = -Winvalid-pch -fPIC -DPIC
#INTEL_PIN_PATH = 
#INTEL_PIN_INCLUDE_PATHS = -I$(INTEL_PIN_PATH)/source/include -I$(INTEL_PIN_PATH)/source/include/gen -I$(INTEL_PIN_PATH)/extras/xed2-intel64/include -I$(INTEL_PIN_PATH)/source/tools/InstLib

# DQ (3/8/2009): These cause rose/src/testSharedRoseLib to fail, I don't know why (fails in system call to map()).
# INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib -L$(INTEL_PIN_PATH)/intel64/lib-ext
#INTEL_PIN_LIB_PATHS = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib

# Do we want to handle this differently when Dwarf is used optionally with ROSE.
#INTEL_PIN_LIBS = -lpin -lxed -ldwarf -lelf -ldl
#if ROSE_HAVE_LIBDWARF
#  INTEL_PIN_LIBS          = -lpin -lxed -lelf -ldl
#else
#  INTEL_PIN_LIBS          = -lpin -lxed -ldwarf -lelf -ldl
#endif
#ROSE_ETHER_INCLUDE = -I$(ETHER_PREFIX)/include
#ROSE_ETHER_LIBS = -L$(ETHER_PREFIX)/lib -lxenctrl
#ROSE_ATERM_INCLUDE = -I$(ATERM_LIBRARY_PATH)/../include
#ROSE_ATERM_LIBS = -L$(ATERM_LIBRARY_PATH) -lATerm

# Added support for Fortran front-end development using the flang (F18) compiler [Rasmussen 8/12/2019]
#ROSE_FLANG_INCLUDES = -I$(FLANG_INSTALL_PATH)/include
#ROSE_FLANG_LIBS = -L$(FLANG_INSTALL_PATH)/lib -lLLVMDemangle -lLLVMSupport -lLLVMFrontendOpenMP -lFortranParser -lFortranSemantics -lFortranEvaluate -lFortranCommon -lFortranDecimal -lFortranLower -lncurses

# DQ (5/9/2017): Adding Ada library support.
# ROSE_ADA_INCLUDES = -I$(ada_path)/include_xxx
#ROSE_ADA_INCLUDES = -I$(ada_path)/include_xxx
#DOT_ASIS_LIB_DIR_ = $(abs_top_builddir)/src/frontend/Experimental_Ada_ROSE_Connection/dot_asis/dot_asis_library/lib
#  ROSE_ADA_LIBS = -ldot_asis
#  ROSE_ADA_LIBS_WITH_PATH = $(DOT_ASIS_LIB_DIR_)/libdot_asis.so

# RASMUSSEN (10/24/2017): Adding the GnuCOBOL parse-tree library support.
#ROSE_COBOL_PT_LIBS_WITH_PATH = -L$(COBPT_LIBRARY_PATH) -lcob -lcobpt
ROSE_QUAD_FLOAT_MATH = -lquadmath

# DQ (1/9/2010): Added use of libimf with libm (the two go together when using Intel icc and icpc)
#  ROSE_INTEL_COMPILER_MATH_LIBS = -limf -lm
# DQ (11/16/2017): We need to link in these Intel specific required libraries to avoid: error hidden symbol `__intel_cpu_features_init_x'
# ROSE_INTEL_COMPILER_MATH_LIBS =
#    ROSE_INTEL_COMPILER_MATH_LIBS += -limf
#ROSE_INTEL_COMPILER_MATH_LIBS = -limf \
#	-lirng -lintlc -lsvml -lm
# ROSE_INCLUDES =
#     $(ROSE_BOOST_PREINCLUDE_PATH)
ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
     -I$(top_builddir)/src/roseSupport \
     -I$(top_builddir)/src/frontend/SageIII \
     -I$(top_srcdir)/src \
     -I$(top_srcdir)/src/frontend \
     -I$(top_srcdir)/src/frontend/SageIII \
     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/astMerge \
     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
     -I$(top_srcdir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
     -I$(top_srcdir)/src/frontend/SageIII/virtualCFG \
     -I$(top_srcdir)/src/frontend/SageIII/astTokenStream \
     -I$(top_srcdir)/src/frontend/SageIII/astHiddenTypeAndDeclarationLists \
     -I$(top_builddir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/astFromString \
     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
     -I"$(JAVA_HOME)/include" \
     -I$(top_srcdir)/src/frontend/PHPFrontend \
      $(ROSE_CLANG_FRONTEND_INCLUDE) \
     -I$(top_srcdir)/src/frontend/PythonFrontend \
     -I$(top_srcdir)/src/frontend/BinaryFormats \
     -I$(top_srcdir)/src/frontend/BinaryLoader \
     -I$(top_srcdir)/src/frontend/Disassemblers \
      $(ROSE_CLANG_INCLUDE) \
     -I$(top_srcdir)/src/backend/unparser \
     -I$(top_srcdir)/src/backend/unparser/formatSupport \
     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/AdaCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/JovialCodeGeneration \
     -I$(top_srcdir)/src/backend/asmUnparser \
     -I$(top_srcdir)/src/util \
     -I$(top_srcdir)/src/util/support \
     -I$(top_srcdir)/src/util/graphs  \
     -I$(top_srcdir)/src/util/stringSupport \
     -I$(top_srcdir)/src/util/commandlineProcessing \
     -I$(top_srcdir)/src/midend/abstractHandle \
     -I$(top_srcdir)/src/midend/abstractMemoryObject \
     -I$(top_srcdir)/src/midend/abstractLayer \
     -I$(top_srcdir)/src/midend/astDiagnostics \
     -I$(top_srcdir)/src/midend/programTransformation/astInlining \
     -I$(top_srcdir)/src/midend/programTransformation/astOutlining  \
     -I$(top_srcdir)/src/midend/programTransformation/transformationTracking \
     -I$(top_srcdir)/src/midend/astProcessing \
     -I$(top_srcdir)/src/midend/astMatching \
     -I$(top_srcdir)/src/midend/astQuery \
     -I$(top_srcdir)/src/midend/astRewriteMechanism \
     -I$(top_srcdir)/src/midend/astUtil/annotation \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/src/midend/astUtil/astSupport \
     -I$(top_srcdir)/src/midend/astUtil/symbolicVal \
     -I$(top_srcdir)/src/midend/BinaryAnalysis \
     -I$(top_srcdir)/src/midend/BinaryAnalysis/dataflowanalyses \
     -I$(top_srcdir)/src/midend/BinaryAnalysis/instructionSemantics \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/computation \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depGraph \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depInfo \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/driver \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/outsideInterface \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/prepostTransformation \
     -I$(top_srcdir)/src/midend/programTransformation/ompLowering \
     -I$(top_srcdir)/src/midend/programTransformation/extractFunctionArgumentsNormalization \
     -I$(top_srcdir)/src/midend/programTransformation/singleStatementToBlockNormalization \
     -I$(top_srcdir)/src/midend/programAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/arithmeticIntensity \
     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser \
     -I$(top_srcdir)/src/midend/programAnalysis/CFG \
     -I$(top_srcdir)/src/midend/programAnalysis/staticSingleAssignment \
     -I$(top_srcdir)/src/midend/programAnalysis/ssaUnfilteredCfg \
     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
     -I$(top_srcdir)/src/midend/programAnalysis/CallGraphAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/OAWrap \
     -I$(top_srcdir)/src/midend/programAnalysis/bitvectorDataflow \
     -I$(top_srcdir)/src/midend/programAnalysis/VirtualFunctionAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/defUseAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/distributedMemoryAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/dominanceAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/pointerAnal \
     -I$(top_srcdir)/src/midend/programAnalysis/staticInterproceduralSlicing \
     -I$(top_srcdir)/src/midend/programAnalysis/valuePropagation \
     -I$(top_srcdir)/src/midend/programAnalysis/variableRenaming \
      $(ROSE_SIDEEFFECTS_INCLUDE) \
      $(ROSE_DATABASE_INCLUDE) \
      $(ROSE_GUI_INCLUDE) \
      $(ROSE_QT_INCLUDE) \
      $(ROSE_SQLITE_DATABASE_INCLUDE) \
			$(ROSE_SIDEEFFECT_INCLUDE) \
      $(SQLITE_DATABASE_INCLUDE) \
     -I$(top_srcdir)/src/midend/programTransformation/partialRedundancyElimination \
     -I$(top_srcdir)/src/midend/programTransformation/finiteDifferencing \
     -I$(top_srcdir)/src/midend/programTransformation/functionCallNormalization \
     -I$(top_srcdir)/src/midend/programTransformation/constantFolding \
     -I$(top_srcdir)/src/midend/programTransformation/implicitCodeGeneration \
     -I$(top_srcdir)/src/roseSupport \
     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
     -I$(top_srcdir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets  \
     -I$(top_srcdir)/src/util/graphs \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/libltdl \
     -I$(top_srcdir)/src/roseExtensions/failSafe \
     $(ROSE_PHP_INCLUDES) \
     $(ROSE_PYTHON_INCLUDES) \
     $(ROSE_YICES_INCLUDES) \
     $(ROSE_Z3_INCLUDES) \
     $(ROSE_YAML_INCLUDES) \
     $(ROSE_LIBPQXX_INCLUDES) \
     $(ROSE_CAPSTONE_INCLUDES) \
     $(ROSE_READLINE_INCLUDES) \
     $(ROSE_LIBMAGIC_INCLUDES) \
     $(ROSE_DLIB_INCLUDES) \
     $(ROSE_GCRYPT_INCLUDES) \
     $(ROSE_ELF_INCLUDES) \
     $(ROSE_DWARF_INCLUDES) \
     $(ROSE_WINE_INCLUDES) \
     $(VALGRIND_CFLAGS) \
     $(SQLITE3_CFLAGS) \
     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) \
     $(ROSE_PCH_INCLUDE) \
     $(INTEL_PIN_INCLUDE_PATHS) \
     $(ROSE_ETHER_INCLUDE) \
     $(ROSE_ATERM_INCLUDE) \
     $(ROSE_FLANG_INCLUDES) \
     $(ROSE_CSHARP_INCLUDES) \
     $(ROSE_ADA_INCLUDES) \
     $(ROSE_JOVIAL_INCLUDES) \
     $(ROSE_COBOL_INCLUDES) \
     $(BOOST_CPPFLAGS)


# DQ (4/13/2016): Is there were we put the support to include -lstdc++.so on the link line directly?

# DQ (3/6/2013): We need to build a SWIG path that can't include the isystem option.
# Note use of "-isystem" option in ROSE_BOOST_PREINCLUDE_PATH to have the
# boost specified on the configure
# command-line be used instead of the OS version of boost that is sometimes
# installed with Linux (it is always a version too old to be used with ROSE).
# This is used only when the ROSE configuration detects a previously installed
# version of Boost (e.g /usr/include/boost) that we don't want to use.
# ROSE_INCLUDES =
#    $(ROSE_BOOST_PREINCLUDE_PATH)
#ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
#     -I$(top_builddir)/src/roseSupport \
#     -I$(top_builddir)/src/frontend/SageIII \
#     -I$(top_srcdir)/src \
#     -I$(top_srcdir)/src/frontend \
#     -I$(top_srcdir)/src/frontend/SageIII \
#     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
#     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
#     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
#     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
#     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
#     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
#     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
#     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
#     -I"$(JAVA_HOME)/include" \
#     -I$(top_srcdir)/src/frontend/BinaryFormats \
#     -I$(top_srcdir)/src/frontend/BinaryLoader \
#     -I$(top_srcdir)/src/frontend/Disassemblers \
#     -I$(top_srcdir)/src/backend/unparser \
#     -I$(top_srcdir)/src/backend/unparser/formatSupport \
#     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
#     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/AdaCodeGeneration \
#     -I$(top_srcdir)/src/backend/unparser/JovialCodeGeneration \
#     -I$(top_srcdir)/src/backend/asmUnparser \
#     -I$(top_srcdir)/src/util \
#     -I$(top_srcdir)/src/util/support \
#     -I$(top_srcdir)/src/util/graphs  \
#     -I$(top_srcdir)/src/util/stringSupport \
#     -I$(top_srcdir)/src/util/commandlineProcessing \
#     -I$(top_srcdir)/src/midend/astDiagnostics \
#     -I$(top_srcdir)/src/midend/astProcessing \
#     -I$(top_srcdir)/src/midend/astMatching \
#     -I$(top_srcdir)/src/midend/astQuery \
#     -I$(top_srcdir)/src/midend/BinaryAnalysis \
#     -I$(top_srcdir)/src/midend/programAnalysis \
#     -I$(top_srcdir)/src/roseSupport \
#     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
#     -I$(top_srcdir)/src/util/graphs \
#     -I$(top_srcdir)/src/roseExtensions/failSafe \
#     $(ROSE_ATERM_INCLUDE) \
#     $(ROSE_FLANG_INCLUDES) \
#     $(ROSE_BOOST_NORMAL_INCLUDE_PATH)


# DQ (10/23/2015): These paths have been replaces with the following variables.
# These variable are empty for now (reflecting the default usage, and need to
# be set properly where ever Clang support is processed as a configure option.
#    -I$(top_srcdir)/src/frontend/CxxFrontend/ClangFrontend
#    -I$(top_srcdir)/src/frontend/CxxFrontend/Clang
#    $(ROSE_CLANG_FRONTEND_INCLUDE)
#    $(ROSE_CLANG_INCLUDE)
SWIG_ROSE_INCLUDES = $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH)
ROSE_INCLUDES = $(ROSE_BOOST_PREINCLUDE_PATH) $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH)

# DQ (8/15/2010): I have removed these directories from the include paths since it no longer exists.
# I expect that the directories were removed and the include list not properly cleaned up.
# -I$(top_srcdir)/src/midend/binaryAnalyses/graph
# -I$(top_srcdir)/src/midend/programTransformation/runtimeTransformation
# -I$(top_srcdir)/projects/dataBase

# DQ (12/22/2008): Move Boost directory to front and used "-isystem" option so
# that a system with a previous (older) installation of boost does not interfer
# with the use of ROSE (and the version of boost specified using "--with-boost").
# $(BOOST_CPPFLAGS)

# DQ (10/28/2008): I think these should be included, I don't know why they
# were removed (used with Microsoft Windows tests, and Yices tests).
# DQ: Not used currently
#     $(ROSE_WINE_INCLUDES)

# DQ (5/3/2007): Removed from ROSE
#     -I$(top_srcdir)/src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers
#     -I$(top_srcdir)/src/midend/programAnalysis/staticProgramSlicing

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly with make distcheck rule
#     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser

# New way using two libraries
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.a $(top_builddir)/src/libedg.a
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.so $(top_builddir)/src/libedg.so
# ROSE_LIBS_WITH_PATH = $(libdir)/librose.so $(libdir)/libedg.so
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la $(JAVA_JVM_LIB)
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_LIBS_WITH_PATH = $(ROSE_LIBS)

# ROSE_LIBS = $(top_builddir)/src/librose.la -lm $(LEXLIB) $(SQLITE_DATABASE_LIBS) $(LIB_QT) $(WAVE_LDFLAGS) $(WAVE_LIBRARIES) $(WAVE_LIBS) $(JAVA_JVM_LIB) $(RT_LIBS)

# MS 10/19/2015: added ROSE_BOOST_LIBS variable to share exact same
# boost libs list in ROSE an in the ROSTTA Makefiles.
ROSE_BOOST_LIBS = $(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) $(BOOST_CHRONO_LIB) \
  $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) $(BOOST_PROGRAM_OPTIONS_LIB) \
  $(BOOST_RANDOM_LIB) $(BOOST_REGEX_LIB)  $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB)  \
  $(BOOST_WAVE_LIB) $(BOOST_IOSTREAMS_LIB) $(BOOST_PYTHON_LIB)

ROSE_LIBS = $(abspath $(top_builddir)/src/librose.la) -lm \
	$(JAVA_JVM_LINK) $(SQLITE_DATABASE_LIBS) $(QT_LIBS) \
	$(ROSE_BOOST_LIBS) $(SQLITE3_LDFLAGS) $(RT_LIBS) \
	$(ROSE_YICES_LIBS_WITH_PATH) $(ROSE_Z3_LIBS_WITH_PATH) \
	$(ROSE_PHP_LIBS_WITH_PATH) $(ROSE_DWARF_LIBS_WITH_PATH) \
	$(ROSE_ELF_LIBS_WITH_PATH) $(ROSE_GUI_LIBS_WITH_PATH) \
	$(ROSE_QT_LIBS_WITH_PATH) $(ROSE_SSL_LIBS) $(ROSE_ETHER_LIBS) \
	$(ROSE_INTEL_COMPILER_MATH_LIBS) $(ROSE_ATERM_LIBS) \
	$(ROSE_FLANG_LIBS) $(ROSE_YAML_LIBS_WITH_PATH) \
	$(ROSE_LIBMAGIC_LIBS_WITH_PATH) \
	$(ROSE_READLINE_LIBS_WITH_PATH) $(ROSE_DLIB_LIBS_WITH_PATH) \
	$(ROSE_GCRYPT_LIBS_WITH_PATH) $(ROSE_LIBPQXX_LIBS_WITH_PATH) \
	$(ROSE_COBOL_PT_LIBS_WITH_PATH) $(ROSE_PYTHON_LIBS_WITH_PATH) \
	$(ROSE_QUAD_FLOAT_MATH) $(ROSE_CAPSTONE_LIBS_WITH_PATH) \
	$(am__append_1)

#if ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION
#ROSE_LIBS += $(libroseAdalibraries) 
#endif

#========================================================================================================================
# These are the "-R directory" switches that need to be passed to libtool running in link mode to make sure that ROSE
# executables have rpath properties that point to the directories containing the libraries we're using. Do not add
# system directories (or at least not at the front of this list) because that will cause the system-installed version of
# a library to be used rather than some user-specific version.
#
# Here's the motivation for using rpath instead of LD_LIBRARY_PATH: Consider what happens if some ROSE tool, call it
# myTranslator, is compiled and linked against a custom, user-installed version of libz.so (perhaps because myTranslator
# is using a custom version of some graphics library, like libgraphicsmagick.so, that needs a newer libz.so than what's
# installed on the system).  If I then set LD_LIBRARY_PATH to point to the directory with my libz.so I'll be able to run
# myTranslator, however I probably won't be able any system installed tool that uses libz.so. This includes not being
# able to run /usr/bin/as, which might be called indirectly when myTranslator invokes the backend compiler (because
# LD_LIBRARY_PATH overrides the rpath built into /usr/bin/as).  Run-time linking with the wrong dynamic library at best
# produces an error message from the linker, but more often just results in a fault of some sort.
#
# How does rpath fix this problem? It encodes into each executable the list of directories that should be searched when
# the executable is run, similar to LD_LIBRARY_PATH but on a per-executable basis.
#
# The filter-out is removing specific libraries (-lwhatever), the GCC's POSIX thread switch (-pthread), static libraries
# (whatever.a), and various system directories that might have the wrong library versions and which are searched
# automatically anyway. The outer patsubst is changing "-Ldirectory" to just "directory", and the addprefix is changing
# each directory to "-R directory" which is libtool's switch for adding an rpath to an executable.
#
# The inner-most patsubst needs more explanation: Although most low-level libraries like libz, libpng, etc. are normally
# installed in well-known system-wide locations (like /usr/lib), when testing ROSE in matrix testing using RMC, these
# libraries are often compiled and installed locally in such ways that they're not binary compatible with the
# system-installed versions. However, ROSE doesn't have configuration or cmake options for all these libraries because
# there could eventually be far too many. Therefore, we use the fact that RMC has already chosen the correct library
# directories and added their names to various environment variables. The lines of the form
#     $(subst :, ,# $(whatever_LIBDIRS))
# split the named environment variable into individual directory names.  If there's a ROSE configure option to specify
# the library location, then DO NOT list an environment variable here--use the directory from configure instead (which
# goes into ROSE_LIBS above).
ROSE_RPATHS = $(patsubst -L%,-R %, $(filter-out -L/lib% -L/usr/lib% \
	-L/usr/local/lib% -L/var/lib%, $(filter -L%, $(ROSE_LIBS) \
	$(subst :, , $(GNU_COMPILERS_LIBDIRS)) $(subst :, , \
	$(LIBBZ2_LIBDIRS)) $(subst :, , $(LIBGRAPHICSMAGICK_LIBDIRS)) \
	$(subst :, , $(LIBJPEG_LIBDIRS)) $(subst :, , \
	$(LIBLCMS_LIBDIRS)) $(subst :, , $(LIBLZMA_LIBDIRS)) $(subst \
	:, , $(LIBPNG_LIBDIRS)) $(subst :, , $(LIBTIFF_LIBDIRS)) \
	$(subst :, , $(PYTHON_LIBDIRS)) $(subst :, , $(SPOT_LIBDIRS)) \
	$(subst :, , $(ZLIB_LIBDIRS)) $(subst :, , \
	$(INTEL_COMPILER_RPATHS)) ) ) ) $(am__append_2)
ROSE_LINK_RPATHS = $(addprefix -Wl$(comma)-rpath , $(filter-out -R , $(ROSE_RPATHS)))

# Rasmussen (3/23/2018): Added ROSE_LINK_RPATHS to enable linking on Mac OSX with ROSE installation
#ROSE_LINK_RPATHS = $(addprefix -Xlinker -rpath -Xlinker , $(filter-out -R , $(ROSE_RPATHS)))
comma = ,
INTEL_COMPILER_RPATHS = $(shell $(top_srcdir)/scripts/intel-compiler-rpaths.sh)

# DQ (3/8/2009): This fails when I try to include it (fails in rose/src/testSharedRoseLib).
#  $(INTEL_PIN_LIB_PATHS) $(INTEL_PIN_LIBS)

# DQ (3/14/2009): It is cleaner to just required that Intel Pin support require setting
# the LD_LIBRARYPATH to include: $(INTEL_PIN_PATH)/intel64/lib-ext

# This ROSE_SEPARATE_LIBS is used for the linking of preprocessor.C used within
# development. The use of the seperate libraries make the linking faster where the
# main librose library is not built.  Libtool may have changed this so that we could
# just link to librose now just as easily, but one has to rebuild librose each time
# instead of just the individual shared library.
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_SEPARATE_LIBS = $(ROSE_LIBS)

# QY (11/2/04): removed -lastoutlining from ROSE_SEPARATE_LIBS

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly
# with make distcheck rule
# -lannotationLanguageParser(appears after -lvaluePropagation)

# Test harness variables. See "rth_run.pl --help" for more info.  The RTH_RUN_FLAGS is meant to be set on the
# "make" command-line, but the default depends on the value of the verbosity $(V) flag.
RTH_RUN_FLAGS_V_ = 
RTH_RUN_FLAGS_V_0 = 
RTH_RUN_FLAGS_V_1 = --immediate-output
RTH_RUN_FLAGS = $(RTH_RUN_FLAGS_V_$(V))

# Default timeout that you can override on the "make" commandline. Valid values
# are integers followed by "s" (seconds), "m" (minutes), "h" (hours), or the
# word "never".  See scripts/rth_run.pl for detailed documentation.
RTH_TIMEOUT = 15m
RTH_RUN = $(top_srcdir)/scripts/rth_run.pl $(RTH_RUN_FLAGS) \
	srcdir=$(abspath $(srcdir)) top_srcdir=$(abspath $(top_srcdir)) \
	blddir=$$(pwd) top_blddir=$(abspath $(top_builddir)) \
	VALGRIND=$(VALGRIND) TIMEOUT=$(RTH_TIMEOUT)

RTH_STATS = $(top_srcdir)/scripts/rth_stats.pl

# ------------------------------------------------------------------------------
#  Subdirectories
# ------------------------------------------------------------------------------
AUTOMAKE_OPTIONS = subdir-objects
mAbstractHandle_la_sources = \
	$(mAbstractHandlePath)/abstract_handle.cpp \
	$(mAbstractHandlePath)/roseAdapter.cpp

mAbstractHandle_includeHeaders = \
	$(mAbstractHandlePath)/abstract_handle.h \
	$(mAbstractHandlePath)/roseAdapter.h


# This directory also contains a self-contained example
# using a simple loop data structure to demonstrate the usage.
# It can be released separated from ROSE
mAbstractHandle_extraDist = \
	$(mAbstractHandlePath)/CMakeLists.txt \
	$(mAbstractHandlePath)/README \
	$(mAbstractHandlePath)/testMyLoop.cpp \
	$(mAbstractHandlePath)/myloop.h \
	$(mAbstractHandlePath)/loopAdapter.h \
	$(mAbstractHandlePath)/loopAdapter.cpp \
	$(mAbstractHandlePath)/makefile-myloop

mAbstractHandle_cleanLocal = \
	rm -rf \
		$(mAbstractHandlePath)/core \
		$(mAbstractHandlePath)/ii_files \
		$(mAbstractHandlePath)/ti_files \
		$(mAbstractHandlePath)/Templates.DB

mAbstractLayer_includeHeaders = \
	$(mAbstractLayerPath)/CodeThornException.h \
	$(mAbstractLayerPath)/AstAnnotator.h \
	$(mAbstractLayerPath)/CPAstAttributeInterface.h \
	$(mAbstractLayerPath)/DFAstAttribute.h \
	$(mAbstractLayerPath)/Labeler.h \
	$(mAbstractLayerPath)/RDAstAttributeInterface.h \
	$(mAbstractLayerPath)/SgNodeHelper.h \
	$(mAbstractLayerPath)/VariableIdMapping.h

mAbstractLayer_la_sources = \
	$(mAbstractLayerPath)/CodeThornException.C \
	$(mAbstractLayerPath)/AstAnnotator.C \
	$(mAbstractLayerPath)/CPAstAttributeInterface.C \
	$(mAbstractLayerPath)/DFAstAttribute.C \
	$(mAbstractLayerPath)/Labeler.C \
	$(mAbstractLayerPath)/RDAstAttributeInterface.C \
	$(mAbstractLayerPath)/SgNodeHelper.C \
	$(mAbstractLayerPath)/VariableIdMapping.C

mAbstractLayer_extraDist = \
	$(mAbstractLayerPath)/CMakeLists.txt \
	$(mAbstractLayerPath)/README 

mAbstractLayer_cleanLocal = \
	rm -rf \
	$(mAbstractLayerPath)/core \
	$(mAbstractLayerPath)/ii_files \
	$(mAbstractLayerPath)/ti_files \
	$(mAbstractLayerPath)/Templates.DB

mAbstractMemoryObject_la_sources = \
	$(mAbstractMemoryObjectPath)/memory_object.cpp \
	$(mAbstractMemoryObjectPath)/memory_object.h \
	$(mAbstractMemoryObjectPath)/memory_object_impl.h \
	$(mAbstractMemoryObjectPath)/memory_object_impl.cpp

mAbstractMemoryObject_includeHeaders = \
	$(mAbstractMemoryObjectPath)/memory_object.h \
	$(mAbstractMemoryObjectPath)/memory_object_impl.h

mAbstractMemoryObject_extraDist = \
	$(mAbstractMemoryObjectPath)/CMakeLists.txt \
	$(mAbstractMemoryObjectPath)/README \
	$(mAbstractMemoryObjectPath)/original_design.doc

mAbstractMemoryObject_cleanLocal = \
	rm -rf \
		$(mAbstractMemoryObjectPath)/core \
		$(mAbstractMemoryObjectPath)/ii_files \
		$(mAbstractMemoryObjectPath)/ti_files \
		$(mAbstractMemoryObjectPath)/Templates.DB

mAstDiagnostics_la_sources = \
	$(mAstDiagnosticsPath)/AstConsistencyTests.C \
	$(mAstDiagnosticsPath)/AstWarnings.C \
	$(mAstDiagnosticsPath)/AstStatistics.C \
	$(mAstDiagnosticsPath)/AstPerformance.C

mAstDiagnostics_includeHeaders = \
	$(mAstDiagnosticsPath)/AstDiagnostics.h \
	$(mAstDiagnosticsPath)/AstConsistencyTests.h \
	$(mAstDiagnosticsPath)/AstWarnings.h \
	$(mAstDiagnosticsPath)/AstStatistics.h \
	$(mAstDiagnosticsPath)/AstPerformance.h

mAstDiagnostics_extraDist = \
	$(mAstDiagnosticsPath)/CMakeLists.txt \
	$(mAstDiagnosticsPath)/AstDiagnostics.docs

mAstDiagnostics_cleanLocal = \
	rm -rf \
		$(mAstDiagnosticsPath)/core \
		$(mAstDiagnosticsPath)/ii_files \
		$(mAstDiagnosticsPath)/ti_files \
		$(mAstDiagnosticsPath)/Templates.DB

mAstProcessing_la_sources =  \
	$(mAstProcessingPath)/AstNodeVisitMapping.C \
	$(mAstProcessingPath)/AstTextAttributesHandling.C \
	$(mAstProcessingPath)/AstDOTGeneration.C \
	$(mAstProcessingPath)/AstProcessing.C \
	$(mAstProcessingPath)/plugin.C \
	$(mAstProcessingPath)/AstSimpleProcessing.C \
	$(mAstProcessingPath)/AstNodePtrs.C \
	$(mAstProcessingPath)/AstSuccessorsSelectors.C \
	$(mAstProcessingPath)/AstAttributeMechanism.C \
	$(mAstProcessingPath)/AstReverseSimpleProcessing.C \
	$(mAstProcessingPath)/AstClearVisitFlags.C \
	$(mAstProcessingPath)/AstTraversal.C \
	$(mAstProcessingPath)/AstCombinedSimpleProcessing.C \
	$(mAstProcessingPath)/AstSharedMemoryParallelSimpleProcessing.C \
	$(am__append_3) $(am__append_4)
mAstProcessing_libadd = \
	$(CXX_TEMPLATE_OBJECTS)

mAstProcessing_includeHeaders =  \
	$(mAstProcessingPath)/AstNodeVisitMapping.h \
	$(mAstProcessingPath)/AstAttributeMechanism.h \
	$(mAstProcessingPath)/AstTextAttributesHandling.h \
	$(mAstProcessingPath)/AstDOTGeneration.h \
	$(mAstProcessingPath)/AstProcessing.h \
	$(mAstProcessingPath)/plugin.h \
	$(mAstProcessingPath)/AstSimpleProcessing.h \
	$(mAstProcessingPath)/AstTraverseToRoot.h \
	$(mAstProcessingPath)/AstNodePtrs.h \
	$(mAstProcessingPath)/AstSuccessorsSelectors.h \
	$(mAstProcessingPath)/AstReverseProcessing.h \
	$(mAstProcessingPath)/AstReverseSimpleProcessing.h \
	$(mAstProcessingPath)/AstRestructure.h \
	$(mAstProcessingPath)/AstClearVisitFlags.h \
	$(mAstProcessingPath)/AstTraversal.h \
	$(mAstProcessingPath)/AstCombinedProcessing.h \
	$(mAstProcessingPath)/AstCombinedProcessingImpl.h \
	$(mAstProcessingPath)/AstCombinedSimpleProcessing.h \
	$(mAstProcessingPath)/StackFrameVector.h \
	$(mAstProcessingPath)/AstSharedMemoryParallelProcessing.h \
	$(mAstProcessingPath)/AstSharedMemoryParallelProcessingImpl.h \
	$(mAstProcessingPath)/AstSharedMemoryParallelSimpleProcessing.h \
	$(mAstProcessingPath)/graphProcessing.h \
	$(mAstProcessingPath)/graphProcessingSgIncGraph.h \
	$(mAstProcessingPath)/graphTemplate.h \
	$(mAstProcessingPath)/SgGraphTemplate.h $(am__append_5)
mAstProcessing_extraDist = \
	$(mAstProcessingPath)/CMakeLists.txt \
	$(mAstProcessingPath)/AstProcessing.docs

mAstProcessing_cleanLocal = \
	rm -rf \
		$(mAstProcessingPath)/cxx_templates \
		$(mAstProcessingPath)/ii_files \
		$(mAstProcessingPath)/ti_files \
		$(mAstProcessingPath)/Templates.DB

mAstProcessing_distCleanLocal = \
	rm -rf \
		$(mAstProcessingPath)/Templates.DB

mAstMatching_la_sources = \
	$(mAstMatchingPath)/matcherparser.C \
	$(mAstMatchingPath)/RoseAst.C \
	$(mAstMatchingPath)/AstMatching.C \
	$(mAstMatchingPath)/MatchOperation.C \
	$(mAstMatchingPath)/AstTerm.C

mAstMatching_libadd = \
	$(CXX_TEMPLATE_OBJECTS)

mAstMatching_includeHeaders = \
	$(mAstMatchingPath)/RoseAst.h \
	$(mAstMatchingPath)/matcherparser_decls.h \
	$(mAstMatchingPath)/matcherparser.h \
	$(mAstMatchingPath)/AstMatching.h \
	$(mAstMatchingPath)/MatchOperation.h \
	$(mAstMatchingPath)/AstTerm.h

mAstMatching_extraDist = \
	$(mAstMatchingPath)/CMakeLists.txt \
	$(mAstMatchingPath)/AstMatching.docs \
	$(mAstMatchingPath)/matcherlexer.ll \
	$(mAstMatchingPath)/matcherparser.yy

mAstMatching_cleanLocal = \
	rm -rf \
		$(mAstMatchingPath)/cxx_templates \
		$(mAstMatchingPath)/ii_files \
		$(mAstMatchingPath)/ti_files \
        	$(mAstMatchingPath)/Templates.DB

mAstMatching_distCleanLocal = \
	rm -rf \
		$(mAstMatchingPath)/Templates.DB


# Separate out the template files to make clear which sources are templates
# the hope was that this would be useful to generate the TemplateSourceFiles
mAstRewriteMechanism_template_files = \
	$(mAstRewriteMechanismPath)/rewriteMidLevelInterfaceTemplatesImpl.h \
	$(mAstRewriteMechanismPath)/prefixGenerationImpl.h \
	$(mAstRewriteMechanismPath)/ASTFragmentCollectorTraversalImpl.h \
	$(mAstRewriteMechanismPath)/rewriteSynthesizedAttributeTemplatesImpl.h \
	$(mAstRewriteMechanismPath)/rewriteTreeTraversalImpl.h \
	$(mAstRewriteMechanismPath)/rewriteASTFragementStringTemplatesImpl.h \
	$(mAstRewriteMechanismPath)/nodeCollectionTemplatesImpl.h \
	$(mAstRewriteMechanismPath)/rewriteDebuggingSupportTemplatesImpl.h \
	$(mAstRewriteMechanismPath)/rewriteTemplateImpl.h

mAstRewriteMechanism_sources = \
	$(mAstRewriteMechanismPath)/nodeCollection.C \
	$(mAstRewriteMechanismPath)/rewriteMidLevelInterface.C \
	$(mAstRewriteMechanismPath)/rewriteHighLevelInterface.C \
	$(mAstRewriteMechanismPath)/rewriteSynthesizedAttribute.C \
	$(mAstRewriteMechanismPath)/rewriteASTFragementString.C \
	$(mAstRewriteMechanismPath)/rewriteAccumulatedAttribute.C \
	$(mAstRewriteMechanismPath)/rewriteTypeDeclaration.C \
	$(mAstRewriteMechanismPath)/rewriteDebuggingSupport.C \
	$(mAstRewriteMechanismPath)/rewriteLowLevelInterface.C \
	$(mAstRewriteMechanism_template_files)

mAstRewriteMechanism_la_sources = \
	$(mAstRewriteMechanism_sources) \
	$(mAstRewriteMechanismPath)/rewriteTemplateInstantiations.C


# Header files we want to have installed
# (note that rewrite.h includes the rewriteTreeTraversal.C
# and rewriteSynthesizedAttributeTemplates.C because of how
# templates are used).
mAstRewriteMechanism_includeHeaders = \
	$(mAstRewriteMechanismPath)/rewrite.h \
	$(mAstRewriteMechanismPath)/lowLevelRewriteInterface.h \
	$(mAstRewriteMechanismPath)/midLevelRewriteInterface.h \
	$(mAstRewriteMechanismPath)/highLevelRewriteInterface.h \
	$(mAstRewriteMechanism_template_files)

mAstRewriteMechanism_extraDist = \
	$(mAstRewriteMechanismPath)/CMakeLists.txt \
	$(mAstRewriteMechanismPath)/ASTRewrite.docs

mAstRewriteMechanism_cleanLocal = \
	rm -rf \
		$(mAstRewriteMechanismPath)/core \
		$(mAstRewriteMechanismPath)/ii_files \
		$(mAstRewriteMechanismPath)/ti_files \
		$(mAstRewriteMechanismPath)/Templates.DB; \
	rm -f \
		$(mAstRewriteMechanismPath)/*.dot \
		$(mAstRewriteMechanismPath)/*.pdf; \
	rm -f \
		$(mAstRewriteMechanismPath)/rose_inputProgram*.C \
		$(mAstRewriteMechanismPath)/rose_transformation_*.C \
		$(mAstRewriteMechanismPath)/*.C.pdf

mAstQuery_la_sources = \
	$(mAstQueryPath)/nodeQuery.C \
	$(mAstQueryPath)/nodeQueryInheritedAttribute.C \
	$(mAstQueryPath)/booleanQuery.C \
	$(mAstQueryPath)/booleanQueryInheritedAttribute.C \
	$(mAstQueryPath)/nameQuery.C \
	$(mAstQueryPath)/nameQueryInheritedAttribute.C \
	$(mAstQueryPath)/numberQuery.C \
	$(mAstQueryPath)/numberQueryInheritedAttribute.C \
	$(mAstQueryPath)/astQuery.C \
	$(mAstQueryPath)/astQueryInheritedAttribute.C

mAstQuery_la_dependencies = \
	$(mAstQueryPath)/nodeQuery.o

mAstQuery_includeHeaders = \
	$(mAstQueryPath)/nodeQuery.h \
	$(mAstQueryPath)/nodeQueryInheritedAttribute.h \
	$(mAstQueryPath)/booleanQuery.h \
	$(mAstQueryPath)/booleanQueryInheritedAttribute.h \
	$(mAstQueryPath)/nameQuery.h \
	$(mAstQueryPath)/nameQueryInheritedAttribute.h \
	$(mAstQueryPath)/numberQuery.h \
	$(mAstQueryPath)/numberQueryInheritedAttribute.h \
	$(mAstQueryPath)/astQuery.h \
	$(mAstQueryPath)/astQueryInheritedAttribute.h \
	$(mAstQueryPath)/roseQueryLib.h


# Note: queryVariant.C is included in nodeQuery.C
mAstQuery_extraDist = \
	$(mAstQueryPath)/CMakeLists.txt \
	$(mAstQueryPath)/queryVariant.C \
	$(mAstQueryPath)/QueryLib.docs

mAstQuery_cleanLocal = \
	rm -rf \
		$(mAstQueryPath)/cxx_templates \
		$(mAstQueryPath)/ii_files \
		$(mAstQueryPath)/ti_files \
		$(mAstQueryPath)/Templates.DB

mAstQuery_distCleanLocal = \
	rm -rf \
		$(mAstQueryPath)/Templates.DB

mAstSnippet_la_sources = $(mAstSnippetPath)/Snippet.C
mAstSnippet_includeHeaders = $(mAstSnippetPath)/Snippet.h
mauAnnotationPath = $(mAstUtilPath)/annotation#
mauAstInterfacePath = $(mAstUtilPath)/astInterface#
mauAstSupportPath = $(mAstUtilPath)/astSupport#
mauSymbolicValPath = $(mAstUtilPath)/symbolicVal#

# ------------------------------------------------------------------------------
#  Library: astUtil.la
# ------------------------------------------------------------------------------
mAstUtil_la_sources = \
	$(mauAnnotation_la_sources) \
	$(mauAstInterface_la_sources) \
	$(mauAstSupport_la_sources) \
	$(mauSymbolicVal_la_sources)

mAstUtil_includeHeaders = \
	$(mauAnnotation_includeHeaders) \
	$(mauAstInterface_includeHeaders) \
	$(mauAstSupport_includeHeaders) \
	$(mauSymbolicVal_includeHeaders)

mAstUtil_extraDist = \
	CMakeLists.txt \
	$(mauAnnotation_extraDist) \
	$(mauAstInterface_extraDist) \
	$(mauAstSupport_extraDist) \
	$(mauSymbolicVal_extraDist)

mAstUtil_cleanLocal = \
	$(mauAnnotation_cleanLocal); \
	$(mauAstInterface_cleanLocal); \
	$(mauAstSupport_cleanLocal); \
	$(mauSymbolicVal_cleanLocal)

mAstUtil_distCleanLocal = \
	$(mauAnnotation_distCleanLocal); \
	$(mauAstInterface_distCleanLocal); \
	$(mauAstSupport_distCleanLocal); \
	$(mauSymbolicVal_distCleanLocal)

mauAnnotation_la_sources = \
	$(mauAnnotationPath)/AnnotCollect.C \
	$(mauAnnotationPath)/AnnotExpr.C \
	$(mauAnnotationPath)/OperatorAnnotation.C \
	$(mauAnnotationPath)/TypeAnnotation.C \
	$(mauAnnotationPath)/AnnotDescriptors.C \
	$(mauAnnotationPath)/AnnotIO.C \
	$(mauAnnotationPath)/OperatorDescriptors.C

mauAnnotation_includeHeaders = \
	$(mauAnnotationPath)/AnnotCollect.h \
	$(mauAnnotationPath)/AnnotExpr.h \
	$(mauAnnotationPath)/AnnotStmt.h \
	$(mauAnnotationPath)/OperatorDescriptors.h \
	$(mauAnnotationPath)/AnnotDescriptors.h \
	$(mauAnnotationPath)/AnnotIO.h \
	$(mauAnnotationPath)/OperatorAnnotation.h \
	$(mauAnnotationPath)/TypeAnnotation.h \
	$(mauAnnotationPath)/CPPAnnotation.h

mauAnnotation_extraDist = \
	$(mauAnnotationPath)/CMakeLists.txt

mauAnnotation_cleanLocal = \
	rm -rf \
		$(mauAnnotationPath)/cxx_templates \
		$(mauAnnotationPath)/ii_files \
		$(mauAnnotationPath)/ti_files \
		$(mauAnnotationPath)/Templates.DB

mauAnnotation_distCleanLocal = \
	rm -rf \
		$(mauAnnotationPath)/Templates.DB

mauAstInterface_la_sources = \
	$(mauAstInterfacePath)/AstInterface.C \
	$(mauAstInterfacePath)/CPPAstInterface.C

mauAstInterface_includeHeaders = \
	$(mauAstInterfacePath)/AstInterface.h \
	$(mauAstInterfacePath)/CPPAstInterface.h \
	$(mauAstInterfacePath)/AstInterface_ROSE.h

mauAstInterface_extraDist = \
	$(mauAstInterfacePath)/CMakeLists.txt

mauAstInterface_cleanLocal = \
	rm -rf \
		$(mauAstInterfacePath)/Templates.DB \
		$(mauAstInterfacePath)/ii_files \
		$(mauAstInterfacePath)/ti_files \
		$(mauAstInterfacePath)/cxx_templates

mauAstInterface_distCleanLocal = \
	rm -rf \
		$(mauAstInterfacePath)/Templates.DB

mauAstSupport_la_sources = \
	$(mauAstSupportPath)/ProcessAstTree.C \
	$(mauAstSupportPath)/StmtInfoCollect.C

mauAstSupport_includeHeaders = \
	$(mauAstSupportPath)/AnalysisInterface.h \
	$(mauAstSupportPath)/ProcessAstTree.h \
	$(mauAstSupportPath)/StmtInfoCollect.h \
	$(mauAstSupportPath)/LoopInfoInterface.h

mauAstSupport_extraDist = \
	$(mauAstSupportPath)/CMakeLists.txt

mauAstSupport_cleanLocal = \
	rm -rf \
		$(mauAstSupportPath)/cxx_templates \
		$(mauAstSupportPath)/ii_files \
		$(mauAstSupportPath)/ti_files \
		$(mauAstSupportPath)/Templates.DB

mauAstSupport_distCleanLocal = \
	rm -rf \
		$(mauAstSupportPath)/Templates.DB

mauSymbolicVal_la_sources = \
	$(mauSymbolicValPath)/SymbolicBound.C \
	$(mauSymbolicValPath)/SymbolicExpr.C \
	$(mauSymbolicValPath)/SymbolicFind.C \
	$(mauSymbolicValPath)/SymbolicOperator.C \
	$(mauSymbolicValPath)/SymbolicUnwrapCond.C \
	$(mauSymbolicValPath)/SymbolicVal.C

mauSymbolicVal_includeHeaders = \
	$(mauSymbolicValPath)/SymbolicMultiply.h \
	$(mauSymbolicValPath)/SymbolicPlus.h \
	$(mauSymbolicValPath)/SymbolicVal.h \
	$(mauSymbolicValPath)/SymbolicExpr.h \
	$(mauSymbolicValPath)/SymbolicSelect.h \
	$(mauSymbolicValPath)/SymbolicBound.h

mauSymbolicVal_extraDist = \
	$(mauSymbolicValPath)/CMakeLists.txt

mauSymbolicVal_cleanLocal = \
	rm -rf \
		$(mauSymbolicValPath)/cxx_templates \
		$(mauSymbolicValPath)/ii_files \
		$(mauSymbolicValPath)/ti_files \
		$(mauSymbolicValPath)/Templates.DB

mauSymbolicVal_distCleanLocal = \
	rm -rf \
		$(mauSymbolicValPath)/Templates.DB

mptPartialRedundancyEliminationPath = $(mProgramTransformationPath)/partialRedundancyElimination#
mptFiniteDifferencingPath = $(mProgramTransformationPath)/finiteDifferencing#
mptFunctionCallNormalizationPath = $(mProgramTransformationPath)/functionCallNormalization#
mptConstantFoldingPath = $(mProgramTransformationPath)/constantFolding#
mptImplicitCodeGenerationPath = $(mProgramTransformationPath)/implicitCodeGeneration#
mptAstInliningPath = $(mProgramTransformationPath)/astInlining#
mptOutliningPath = $(mProgramTransformationPath)/astOutlining#
mptOmpLoweringPath = $(mProgramTransformationPath)/ompLowering#
mptTransTrackingPath = $(mProgramTransformationPath)/transformationTracking#

# ------------------------------------------------------------------------------
#  Library: programTransformation.la
# ------------------------------------------------------------------------------
mProgramTransformation_lib_ltlibraries = \
	$(mptOmpLowering_lib_ltlibraries)

mProgramTransformation_la_sources = \
	$(mptPartialRedundancyElimination_la_sources) \
	$(mptFiniteDifferencing_la_source) \
	$(mptFunctionCallNormalization_la_sources) \
	$(mptConstantFolding_la_sources) \
	$(mptImplicitCodeGeneration_la_sources) \
	$(mptAstInlining_la_sources) \
	$(mptAstOutlining_la_sources) \
	$(mptOmpLowering_la_sources) \
	$(mptTransTracking_la_sources)

mProgramTransformation_includeHeaders = \
	$(mptPartialRedundancyElimination_includeHeaders) \
	$(mptFiniteDifferencing_includeHeaders) \
	$(mptFunctionCallNormalization_includeHeaders) \
	$(mptConstantFolding_includeHeaders) \
	$(mptImplicitCodeGeneration_includeHeaders) \
	$(mptAstInlining_includeHeaders) \
	$(mptAstOutlining_includeHeaders) \
	$(mptOmpLowering_includeHeaders) \
	$(mptTransTracking_includeHeaders)


# ------------------------------------------------------------------------------
#
# ------------------------------------------------------------------------------
mProgramTransformation_extraDist = \
	$(mProgramTransformationPath)/CMakeLists.txt \
	$(mptPartialRedundancyElimination_extraDist) \
	$(mptFiniteDifferencing_extraDist) \
	$(mptFunctionCallNormalization_extraDist) \
	$(mptConstantFolding_extraDist) \
	$(mptImplicitCodeGeneration_extraDist) \
	$(mptAstInlining_extraDist) \
	$(mptAstOutlining_extraDist) \
	$(mptOmpLowering_extraDist) \
	$(mptTransTracking_extraDist)

mProgramTransformation_cleanLocal = \
	$(mptPartialRedundancyElimination_cleanLocal); \
	$(mptFiniteDifferencing_cleanLocal); \
	$(mptFunctionCallNormalization_cleanLocal); \
	$(mptConstantFolding_cleanLocal); \
	$(mptAstInlining_cleanLocal); \
	$(mptAstOutlining_cleanLocal); \
	$(mptOmpLowering_cleanLocal); \
	$(mptTransTracking_cleanLocal)

mptPartialRedundancyElimination_la_sources = \
	$(mptPartialRedundancyEliminationPath)/pre.C \
	$(mptPartialRedundancyEliminationPath)/preControlFlowGraph.C \
	$(mptPartialRedundancyEliminationPath)/expressionTreeEqual.C

mptPartialRedundancyElimination_includeHeaders = \
	$(mptPartialRedundancyEliminationPath)/pre.h \
	$(mptPartialRedundancyEliminationPath)/preControlFlowGraph.h \
	$(mptPartialRedundancyEliminationPath)/expressionTreeEqual.h

mptPartialRedundancyElimination_extraDist = \
	$(mptPartialRedundancyEliminationPath)/CMakeLists.txt

mptPartialRedundancyElimination_cleanLocal = \
	rm -rf \
		$(mptPartialRedundancyEliminationPath)/core \
		$(mptPartialRedundancyEliminationPath)/ii_files \
		$(mptPartialRedundancyEliminationPath)/ti_files \
		$(mptPartialRedundancyEliminationPath)/Templates.DB

mptFiniteDifferencing_la_source = \
	$(mptFiniteDifferencingPath)/finiteDifferencing.C \
	$(mptFiniteDifferencingPath)/patternRewrite.C

mptFiniteDifferencing_includeHeaders = \
	$(mptFiniteDifferencingPath)/finiteDifferencing.h \
	$(mptFiniteDifferencingPath)/patternRewrite.h

mptFiniteDifferencing_extraDist = \
	$(mptFiniteDifferencingPath)/CMakeLists.txt

mptFiniteDifferencing_cleanLocal = \
	rm -rf \
		$(mptFiniteDifferencingPath)/core \
		$(mptFiniteDifferencingPath)/ii_files \
		$(mptFiniteDifferencingPath)/ti_files \
		$(mptFiniteDifferencingPath)/Templates.DB

mptFunctionCallNormalization_la_sources = \
	$(mptFunctionCallNormalizationPath)/FunctionNormalization.C

mptFunctionCallNormalization_includeHeaders = \
	$(mptFunctionCallNormalizationPath)/FunctionNormalization.h

mptFunctionCallNormalization_extraDist = \
	$(mptFunctionCallNormalizationPath)/CMakeLists.txt

mptFunctionCallNormalization_cleanLocal = \
	rm -rf \
		$(mptFunctionCallNormalizationPath)/core \
		$(mptFunctionCallNormalizationPath)/ii_files \
		$(mptFunctionCallNormalizationPath)/ti_files \
		$(mptFunctionCallNormalizationPath)/Templates.DB

mptConstantFolding_la_sources = \
	$(mptConstantFoldingPath)/constantFolding.C

mptConstantFolding_includeHeaders = \
	$(mptConstantFoldingPath)/constantFolding.h

mptConstantFolding_extraDist = \
	$(mptConstantFoldingPath)/CMakeLists.txt

mptConstantFolding_cleanLocal = \
	rm -rf \
		$(mptConstantFoldingPath)/core \
		$(mptConstantFoldingPath)/ii_files \
		$(mptConstantFoldingPath)/ti_files \
		$(mptConstantFoldingPath)/Templates.DB

mptImplicitCodeGeneration_la_sources = \
	$(mptImplicitCodeGenerationPath)/analysisUtils.C \
	$(mptImplicitCodeGenerationPath)/defaultFunctionGenerator.C \
	$(mptImplicitCodeGenerationPath)/destructorCallAnnotator.C \
	$(mptImplicitCodeGenerationPath)/shortCircuitingTransformation.C

mptImplicitCodeGeneration_includeHeaders = \
	$(mptImplicitCodeGenerationPath)/analysisUtils.h \
	$(mptImplicitCodeGenerationPath)/defaultFunctionGenerator.h \
	$(mptImplicitCodeGenerationPath)/destructorCallAnnotator.h \
	$(mptImplicitCodeGenerationPath)/shortCircuitingTransformation.h

mptImplicitCodeGeneration_extraDist = \
	$(mptImplicitCodeGenerationPath)/CMakeLists.txt \
	$(mptImplicitCodeGenerationPath)/README

mptAstInlining_la_sources = \
	$(mptAstInliningPath)/inliner.C \
	$(mptAstInliningPath)/inlinerSupport.C \
	$(mptAstInliningPath)/isPotentiallyModified.C \
	$(mptAstInliningPath)/replaceExpressionWithStatement.C

mptAstInlining_includeHeaders = \
	$(mptAstInliningPath)/inliner.h \
	$(mptAstInliningPath)/inlinerSupport.h \
	$(mptAstInliningPath)/replaceExpressionWithStatement.h

mptAstInlining_extraDist = \
	$(mptAstInliningPath)/CMakeLists.txt

mptAstInlining_cleanLocal = \
	rm -rf \
		$(mptAstInliningPath)/core \
		$(mptAstInliningPath)/ii_files \
		$(mptAstInliningPath)/ti_files \
		$(mptAstInliningPath)/Templates.DB

mptAstOutlining_la_sources = \
	$(mptOutliningPath)/Check.cc \
	$(mptOutliningPath)/Outliner.cc \
	$(mptOutliningPath)/NameGenerator.cc \
	$(mptOutliningPath)/PragmaInterface.cc \
	$(mptOutliningPath)/ASTtools.cc \
	$(mptOutliningPath)/Copy.cc \
	$(mptOutliningPath)/Jumps.cc \
	$(mptOutliningPath)/PrePostTraversal.cc \
	$(mptOutliningPath)/PreprocessingInfo.cc \
	$(mptOutliningPath)/StmtRewrite.cc \
	$(mptOutliningPath)/This.cc \
	$(mptOutliningPath)/VarSym.cc \
	$(mptOutliningPath)/Case.cc \
	$(mptOutliningPath)/ExtractIfs.cc \
	$(mptOutliningPath)/If.cc \
	$(mptOutliningPath)/IfDirectiveContextFinder.cc \
	$(mptOutliningPath)/IfDirectiveExtractor.cc \
	$(mptOutliningPath)/Block.cc \
	$(mptOutliningPath)/NonLocalDecls.cc \
	$(mptOutliningPath)/PreprocIfs.cc \
	$(mptOutliningPath)/NonLocalControlFlow.cc \
	$(mptOutliningPath)/Preprocess.cc \
	$(mptOutliningPath)/ThisExprs.cc \
	$(mptOutliningPath)/CollectVars.cc \
	$(mptOutliningPath)/GenerateCall.cc \
	$(mptOutliningPath)/GenerateFunc.cc \
	$(mptOutliningPath)/Insert.cc \
	$(mptOutliningPath)/Transform.cc

mptAstOutlining_includeHeaders = \
	$(mptOutliningPath)/Outliner.hh \
	$(mptOutliningPath)/NameGenerator.hh \
	$(mptOutliningPath)/ASTtools.hh \
	$(mptOutliningPath)/Copy.hh \
	$(mptOutliningPath)/Jumps.hh \
	$(mptOutliningPath)/PrePostTraversal.hh \
	$(mptOutliningPath)/PreprocessingInfo.hh \
	$(mptOutliningPath)/StmtRewrite.hh \
	$(mptOutliningPath)/This.hh \
	$(mptOutliningPath)/VarSym.hh \
	$(mptOutliningPath)/IfDirectiveContextFinder.hh \
	$(mptOutliningPath)/IfDirectiveExtractor.hh \
	$(mptOutliningPath)/If.hh \
	$(mptOutliningPath)/Preprocess.hh

#Transform.hh
mptAstOutlining_extraDist = \
	$(mptOutliningPath)/CMakeLists.txt \
	$(mptOutliningPath)/README

mptAstOutlining_cleanLocal = \
	rm -rf \
		$(mptOutliningPath)/core \
		$(mptOutliningPath)/ii_files \
		$(mptOutliningPath)/ti_files \
		$(mptOutliningPath)/Templates.DB

mptOmpLowering_la_sources = \
	$(mptOmpLoweringPath)/omp_lowering.cpp


# avoid using libtool for libxomp.a since it will be directly linked to executable
mptOmpLowering_lib_ltlibraries = \
	libxomp.la


# only generate .libs/libxomp.a
libxomp_la_LDFLAGS = -static
libxomp_la_SOURCES = \
	$(mptOmpLoweringPath)/xomp.c \
	$(mptOmpLoweringPath)/run_me_callers.inc \
	$(mptOmpLoweringPath)/run_me_defs.inc \
	$(mptOmpLoweringPath)/run_me_callers2.inc \
	$(mptOmpLoweringPath)/run_me_task_defs.inc

mptOmpLowering_includeHeaders = \
	$(mptOmpLoweringPath)/omp_lowering.h \
	$(mptOmpLoweringPath)/libgomp_g.h \
	$(mptOmpLoweringPath)/libompc.h \
	$(mptOmpLoweringPath)/libxomp.h \
	$(mptOmpLoweringPath)/libxompf.h \
	$(mptOmpLoweringPath)/OmpSupport.h

mptOmpLowering_extraDist = \
	$(mptOmpLoweringPath)/CMakeLists.txt \
	$(mptOmpLoweringPath)/README \
	$(mptOmpLoweringPath)/run_me_caller_generator.sh \
	$(mptOmpLoweringPath)/run_me_generator.sh \
	$(mptOmpLoweringPath)/xomp_cuda_lib.cu

mptOmpLowering_cleanLocal = \
	rm -rf \
		$(mptOmpLoweringPath)/core \
		$(mptOmpLoweringPath)/ii_files \
		$(mptOmpLoweringPath)/ti_files \
		$(mptOmpLoweringPath)/Templates.DB

mptTransTracking_la_sources = \
  $(mptTransTrackingPath)/transformationTracking.cpp

mptTransTracking_includeHeaders = \
  $(mptTransTrackingPath)/transformationTracking.h

mptTransTracking_extraDist = \
  $(mptTransTrackingPath)/readme

mptTransTracking_cleanLocal = \
  rm -rf \
   $(mptTransTrackingPath)/core \
   $(mptTransTrackingPath)/ii_files \
   $(mptTransTrackingPath)/Templates.DB


#
# Don't use $(srcdir) in conjunction with [subdir-objects], otherwise
# object files will be built in the source tree. Therefore, we need to
# use relative paths.
#
#mptPartialRedundancyEliminationPath=$(srcdir)/partialRedundancyElimination#
mAbstractHandlePath = abstractHandle#
mAbstractLayerPath = abstractLayer#
mAbstractMemoryObjectPath = abstractMemoryObject#
mAstDiagnosticsPath = astDiagnostics#
mAstProcessingPath = astProcessing#
mAstMatchingPath = astMatching#
mAstRewriteMechanismPath = astRewriteMechanism#
mAstQueryPath = astQuery#
mAstSnippetPath = astSnippet#
mAstUtilPath = astUtil#
mProgramTransformationPath = programTransformation#
SUBDIRS = BinaryAnalysis \
	programTransformation/extractFunctionArgumentsNormalization \
	programTransformation/singleStatementToBlockNormalization MFB \
	MDCG KLT $(am__append_6)
AM_CPPFLAGS = \
	$(ROSE_INCLUDES) \
	-I${top_srcdir}/src/midend/programAnalysis/CFG \
	-I$(mAstUtilPath) \
	-I$(mAstUtilPath)/astInterface \
	-I$(mAstUtilPath)/symbolicVal \
	-I$(mAstUtilPath)/astSupport \
	-I$(top_srcdir)/src/util \
	-I$(top_srcdir)/src/util/support

noinst_LTLIBRARIES = \
	libmidend.la

lib_LTLIBRARIES = \
	$(mProgramTransformation_lib_ltlibraries)


#BUILT_SOURCES = $(mAstMatching_built_sources)
libmidend_la_SOURCES = $(mAbstractHandle_la_sources) \
	$(mAbstractLayer_la_sources) \
	$(mAbstractMemoryObject_la_sources) \
	$(mAstDiagnostics_la_sources) $(mAstProcessing_la_sources) \
	$(mAstMatching_la_sources) $(mAstQuery_la_sources) \
	$(mAstSnippet_la_sources) $(am__append_7)
libmidend_la_DEPENDENCIES = \
	$(mAstQuery_la_dependencies)

pkginclude_HEADERS = \
	$(mAbstractHandle_includeHeaders) \
	$(mAbstractLayer_includeHeaders) \
	$(mAbstractMemoryObject_includeHeaders) \
	$(mAstDiagnostics_includeHeaders) \
	$(mAstProcessing_includeHeaders) \
	$(mAstMatching_includeHeaders) \
	$(mAstRewriteMechanism_includeHeaders) \
	$(mAstQuery_includeHeaders) \
	$(mAstSnippet_includeHeaders) \
	$(mAstUtil_includeHeaders) \
	$(mProgramTransformation_includeHeaders)


# ------------------------------------------------------------------------------
#
# ------------------------------------------------------------------------------
EXTRA_DIST = \
	CMakeLists.txt \
	$(mAbstractHandle_extraDist) \
	$(mAbstractLayer_extraDist) \
	$(mAbstractMemoryObject_extraDist) \
	$(mAstDiagnostics_extraDist) \
	$(mAstProcessing_extraDist) \
	$(mAstMatching_extraDist) \
	$(mAstRewriteMechanism_extraDist) \
	$(mAstQuery_extraDist) \
	$(mAstUtil_extraDist) \
	$(mProgramTransformation_extraDist)

all: all-recursive

.SUFFIXES:
.SUFFIXES: .C .c .cc .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(srcdir)/abstractHandle/Makefile_variables $(srcdir)/abstractLayer/Makefile_variables $(srcdir)/abstractMemoryObject/Makefile_variables $(srcdir)/astDiagnostics/Makefile_variables $(srcdir)/astProcessing/Makefile_variables $(srcdir)/astMatching/Makefile_variables $(srcdir)/astRewriteMechanism/Makefile_variables $(srcdir)/astQuery/Makefile_variables $(srcdir)/astSnippet/Makefile_variables $(srcdir)/astUtil/Makefile_variables $(srcdir)/astUtil/annotation/Makefile_variables $(srcdir)/astUtil/astInterface/Makefile_variables $(srcdir)/astUtil/astSupport/Makefile_variables $(srcdir)/astUtil/symbolicVal/Makefile_variables $(srcdir)/programTransformation/Makefile_variables $(srcdir)/programTransformation/partialRedundancyElimination/Makefile_variables $(srcdir)/programTransformation/finiteDifferencing/Makefile_variables $(srcdir)/programTransformation/functionCallNormalization/Makefile_variables $(srcdir)/programTransformation/constantFolding/Makefile_variables $(srcdir)/programTransformation/implicitCodeGeneration/Makefile_variables $(srcdir)/programTransformation/astInlining/Makefile_variables $(srcdir)/programTransformation/astOutlining/Makefile_variables $(srcdir)/programTransformation/ompLowering/Makefile_variables $(srcdir)/programTransformation/transformationTracking/Makefile_variables $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign --ignore-deps src/midend/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign --ignore-deps src/midend/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;
$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(srcdir)/abstractHandle/Makefile_variables $(srcdir)/abstractLayer/Makefile_variables $(srcdir)/abstractMemoryObject/Makefile_variables $(srcdir)/astDiagnostics/Makefile_variables $(srcdir)/astProcessing/Makefile_variables $(srcdir)/astMatching/Makefile_variables $(srcdir)/astRewriteMechanism/Makefile_variables $(srcdir)/astQuery/Makefile_variables $(srcdir)/astSnippet/Makefile_variables $(srcdir)/astUtil/Makefile_variables $(srcdir)/astUtil/annotation/Makefile_variables $(srcdir)/astUtil/astInterface/Makefile_variables $(srcdir)/astUtil/astSupport/Makefile_variables $(srcdir)/astUtil/symbolicVal/Makefile_variables $(srcdir)/programTransformation/Makefile_variables $(srcdir)/programTransformation/partialRedundancyElimination/Makefile_variables $(srcdir)/programTransformation/finiteDifferencing/Makefile_variables $(srcdir)/programTransformation/functionCallNormalization/Makefile_variables $(srcdir)/programTransformation/constantFolding/Makefile_variables $(srcdir)/programTransformation/implicitCodeGeneration/Makefile_variables $(srcdir)/programTransformation/astInlining/Makefile_variables $(srcdir)/programTransformation/astOutlining/Makefile_variables $(srcdir)/programTransformation/ompLowering/Makefile_variables $(srcdir)/programTransformation/transformationTracking/Makefile_variables $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(MKDIR_P) '$(DESTDIR)$(libdir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(libdir)" || exit 1; \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(libdir)"; \
	}

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; \
	locs=`for p in $$list; do echo $$p; done | \
	      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \
	      sort -u`; \
	test -z "$$locs" || { \
	  echo rm -f $${locs}; \
	  rm -f $${locs}; \
	}

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; \
	locs=`for p in $$list; do echo $$p; done | \
	      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \
	      sort -u`; \
	test -z "$$locs" || { \
	  echo rm -f $${locs}; \
	  rm -f $${locs}; \
	}
$(mAbstractHandlePath)/$(am__dirstamp):
	@$(MKDIR_P) $(mAbstractHandlePath)
	@: > $(mAbstractHandlePath)/$(am__dirstamp)
$(mAbstractHandlePath)/abstract_handle.lo:  \
	$(mAbstractHandlePath)/$(am__dirstamp)
$(mAbstractHandlePath)/roseAdapter.lo:  \
	$(mAbstractHandlePath)/$(am__dirstamp)
$(mAbstractLayerPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mAbstractLayerPath)
	@: > $(mAbstractLayerPath)/$(am__dirstamp)
$(mAbstractLayerPath)/CodeThornException.lo:  \
	$(mAbstractLayerPath)/$(am__dirstamp)
$(mAbstractLayerPath)/AstAnnotator.lo:  \
	$(mAbstractLayerPath)/$(am__dirstamp)
$(mAbstractLayerPath)/CPAstAttributeInterface.lo:  \
	$(mAbstractLayerPath)/$(am__dirstamp)
$(mAbstractLayerPath)/DFAstAttribute.lo:  \
	$(mAbstractLayerPath)/$(am__dirstamp)
$(mAbstractLayerPath)/Labeler.lo:  \
	$(mAbstractLayerPath)/$(am__dirstamp)
$(mAbstractLayerPath)/RDAstAttributeInterface.lo:  \
	$(mAbstractLayerPath)/$(am__dirstamp)
$(mAbstractLayerPath)/SgNodeHelper.lo:  \
	$(mAbstractLayerPath)/$(am__dirstamp)
$(mAbstractLayerPath)/VariableIdMapping.lo:  \
	$(mAbstractLayerPath)/$(am__dirstamp)
$(mAbstractMemoryObjectPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mAbstractMemoryObjectPath)
	@: > $(mAbstractMemoryObjectPath)/$(am__dirstamp)
$(mAbstractMemoryObjectPath)/memory_object.lo:  \
	$(mAbstractMemoryObjectPath)/$(am__dirstamp)
$(mAbstractMemoryObjectPath)/memory_object_impl.lo:  \
	$(mAbstractMemoryObjectPath)/$(am__dirstamp)
$(mAstDiagnosticsPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mAstDiagnosticsPath)
	@: > $(mAstDiagnosticsPath)/$(am__dirstamp)
$(mAstDiagnosticsPath)/AstConsistencyTests.lo:  \
	$(mAstDiagnosticsPath)/$(am__dirstamp)
$(mAstDiagnosticsPath)/AstWarnings.lo:  \
	$(mAstDiagnosticsPath)/$(am__dirstamp)
$(mAstDiagnosticsPath)/AstStatistics.lo:  \
	$(mAstDiagnosticsPath)/$(am__dirstamp)
$(mAstDiagnosticsPath)/AstPerformance.lo:  \
	$(mAstDiagnosticsPath)/$(am__dirstamp)
$(mAstProcessingPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mAstProcessingPath)
	@: > $(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/AstNodeVisitMapping.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/AstTextAttributesHandling.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/AstDOTGeneration.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/AstProcessing.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/plugin.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/AstSimpleProcessing.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/AstNodePtrs.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/AstSuccessorsSelectors.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/AstAttributeMechanism.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/AstReverseSimpleProcessing.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/AstClearVisitFlags.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/AstTraversal.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/AstCombinedSimpleProcessing.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/AstSharedMemoryParallelSimpleProcessing.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/AstRestructure.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstProcessingPath)/AstPDFGeneration.lo:  \
	$(mAstProcessingPath)/$(am__dirstamp)
$(mAstMatchingPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mAstMatchingPath)
	@: > $(mAstMatchingPath)/$(am__dirstamp)
$(mAstMatchingPath)/matcherparser.lo:  \
	$(mAstMatchingPath)/$(am__dirstamp)
$(mAstMatchingPath)/RoseAst.lo: $(mAstMatchingPath)/$(am__dirstamp)
$(mAstMatchingPath)/AstMatching.lo:  \
	$(mAstMatchingPath)/$(am__dirstamp)
$(mAstMatchingPath)/MatchOperation.lo:  \
	$(mAstMatchingPath)/$(am__dirstamp)
$(mAstMatchingPath)/AstTerm.lo: $(mAstMatchingPath)/$(am__dirstamp)
$(mAstQueryPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mAstQueryPath)
	@: > $(mAstQueryPath)/$(am__dirstamp)
$(mAstQueryPath)/nodeQuery.lo: $(mAstQueryPath)/$(am__dirstamp)
$(mAstQueryPath)/nodeQueryInheritedAttribute.lo:  \
	$(mAstQueryPath)/$(am__dirstamp)
$(mAstQueryPath)/booleanQuery.lo: $(mAstQueryPath)/$(am__dirstamp)
$(mAstQueryPath)/booleanQueryInheritedAttribute.lo:  \
	$(mAstQueryPath)/$(am__dirstamp)
$(mAstQueryPath)/nameQuery.lo: $(mAstQueryPath)/$(am__dirstamp)
$(mAstQueryPath)/nameQueryInheritedAttribute.lo:  \
	$(mAstQueryPath)/$(am__dirstamp)
$(mAstQueryPath)/numberQuery.lo: $(mAstQueryPath)/$(am__dirstamp)
$(mAstQueryPath)/numberQueryInheritedAttribute.lo:  \
	$(mAstQueryPath)/$(am__dirstamp)
$(mAstQueryPath)/astQuery.lo: $(mAstQueryPath)/$(am__dirstamp)
$(mAstQueryPath)/astQueryInheritedAttribute.lo:  \
	$(mAstQueryPath)/$(am__dirstamp)
$(mAstSnippetPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mAstSnippetPath)
	@: > $(mAstSnippetPath)/$(am__dirstamp)
$(mAstSnippetPath)/Snippet.lo: $(mAstSnippetPath)/$(am__dirstamp)
$(mAstRewriteMechanismPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mAstRewriteMechanismPath)
	@: > $(mAstRewriteMechanismPath)/$(am__dirstamp)
$(mAstRewriteMechanismPath)/nodeCollection.lo:  \
	$(mAstRewriteMechanismPath)/$(am__dirstamp)
$(mAstRewriteMechanismPath)/rewriteMidLevelInterface.lo:  \
	$(mAstRewriteMechanismPath)/$(am__dirstamp)
$(mAstRewriteMechanismPath)/rewriteHighLevelInterface.lo:  \
	$(mAstRewriteMechanismPath)/$(am__dirstamp)
$(mAstRewriteMechanismPath)/rewriteSynthesizedAttribute.lo:  \
	$(mAstRewriteMechanismPath)/$(am__dirstamp)
$(mAstRewriteMechanismPath)/rewriteASTFragementString.lo:  \
	$(mAstRewriteMechanismPath)/$(am__dirstamp)
$(mAstRewriteMechanismPath)/rewriteAccumulatedAttribute.lo:  \
	$(mAstRewriteMechanismPath)/$(am__dirstamp)
$(mAstRewriteMechanismPath)/rewriteTypeDeclaration.lo:  \
	$(mAstRewriteMechanismPath)/$(am__dirstamp)
$(mAstRewriteMechanismPath)/rewriteDebuggingSupport.lo:  \
	$(mAstRewriteMechanismPath)/$(am__dirstamp)
$(mAstRewriteMechanismPath)/rewriteLowLevelInterface.lo:  \
	$(mAstRewriteMechanismPath)/$(am__dirstamp)
$(mAstRewriteMechanismPath)/rewriteTemplateInstantiations.lo:  \
	$(mAstRewriteMechanismPath)/$(am__dirstamp)
$(mauAnnotationPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mauAnnotationPath)
	@: > $(mauAnnotationPath)/$(am__dirstamp)
$(mauAnnotationPath)/AnnotCollect.lo:  \
	$(mauAnnotationPath)/$(am__dirstamp)
$(mauAnnotationPath)/AnnotExpr.lo:  \
	$(mauAnnotationPath)/$(am__dirstamp)
$(mauAnnotationPath)/OperatorAnnotation.lo:  \
	$(mauAnnotationPath)/$(am__dirstamp)
$(mauAnnotationPath)/TypeAnnotation.lo:  \
	$(mauAnnotationPath)/$(am__dirstamp)
$(mauAnnotationPath)/AnnotDescriptors.lo:  \
	$(mauAnnotationPath)/$(am__dirstamp)
$(mauAnnotationPath)/AnnotIO.lo: $(mauAnnotationPath)/$(am__dirstamp)
$(mauAnnotationPath)/OperatorDescriptors.lo:  \
	$(mauAnnotationPath)/$(am__dirstamp)
$(mauAstInterfacePath)/$(am__dirstamp):
	@$(MKDIR_P) $(mauAstInterfacePath)
	@: > $(mauAstInterfacePath)/$(am__dirstamp)
$(mauAstInterfacePath)/AstInterface.lo:  \
	$(mauAstInterfacePath)/$(am__dirstamp)
$(mauAstInterfacePath)/CPPAstInterface.lo:  \
	$(mauAstInterfacePath)/$(am__dirstamp)
$(mauAstSupportPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mauAstSupportPath)
	@: > $(mauAstSupportPath)/$(am__dirstamp)
$(mauAstSupportPath)/ProcessAstTree.lo:  \
	$(mauAstSupportPath)/$(am__dirstamp)
$(mauAstSupportPath)/StmtInfoCollect.lo:  \
	$(mauAstSupportPath)/$(am__dirstamp)
$(mauSymbolicValPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mauSymbolicValPath)
	@: > $(mauSymbolicValPath)/$(am__dirstamp)
$(mauSymbolicValPath)/SymbolicBound.lo:  \
	$(mauSymbolicValPath)/$(am__dirstamp)
$(mauSymbolicValPath)/SymbolicExpr.lo:  \
	$(mauSymbolicValPath)/$(am__dirstamp)
$(mauSymbolicValPath)/SymbolicFind.lo:  \
	$(mauSymbolicValPath)/$(am__dirstamp)
$(mauSymbolicValPath)/SymbolicOperator.lo:  \
	$(mauSymbolicValPath)/$(am__dirstamp)
$(mauSymbolicValPath)/SymbolicUnwrapCond.lo:  \
	$(mauSymbolicValPath)/$(am__dirstamp)
$(mauSymbolicValPath)/SymbolicVal.lo:  \
	$(mauSymbolicValPath)/$(am__dirstamp)
$(mptPartialRedundancyEliminationPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mptPartialRedundancyEliminationPath)
	@: > $(mptPartialRedundancyEliminationPath)/$(am__dirstamp)
$(mptPartialRedundancyEliminationPath)/pre.lo:  \
	$(mptPartialRedundancyEliminationPath)/$(am__dirstamp)
$(mptPartialRedundancyEliminationPath)/preControlFlowGraph.lo:  \
	$(mptPartialRedundancyEliminationPath)/$(am__dirstamp)
$(mptPartialRedundancyEliminationPath)/expressionTreeEqual.lo:  \
	$(mptPartialRedundancyEliminationPath)/$(am__dirstamp)
$(mptFiniteDifferencingPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mptFiniteDifferencingPath)
	@: > $(mptFiniteDifferencingPath)/$(am__dirstamp)
$(mptFiniteDifferencingPath)/finiteDifferencing.lo:  \
	$(mptFiniteDifferencingPath)/$(am__dirstamp)
$(mptFiniteDifferencingPath)/patternRewrite.lo:  \
	$(mptFiniteDifferencingPath)/$(am__dirstamp)
$(mptFunctionCallNormalizationPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mptFunctionCallNormalizationPath)
	@: > $(mptFunctionCallNormalizationPath)/$(am__dirstamp)
$(mptFunctionCallNormalizationPath)/FunctionNormalization.lo:  \
	$(mptFunctionCallNormalizationPath)/$(am__dirstamp)
$(mptConstantFoldingPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mptConstantFoldingPath)
	@: > $(mptConstantFoldingPath)/$(am__dirstamp)
$(mptConstantFoldingPath)/constantFolding.lo:  \
	$(mptConstantFoldingPath)/$(am__dirstamp)
$(mptImplicitCodeGenerationPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mptImplicitCodeGenerationPath)
	@: > $(mptImplicitCodeGenerationPath)/$(am__dirstamp)
$(mptImplicitCodeGenerationPath)/analysisUtils.lo:  \
	$(mptImplicitCodeGenerationPath)/$(am__dirstamp)
$(mptImplicitCodeGenerationPath)/defaultFunctionGenerator.lo:  \
	$(mptImplicitCodeGenerationPath)/$(am__dirstamp)
$(mptImplicitCodeGenerationPath)/destructorCallAnnotator.lo:  \
	$(mptImplicitCodeGenerationPath)/$(am__dirstamp)
$(mptImplicitCodeGenerationPath)/shortCircuitingTransformation.lo:  \
	$(mptImplicitCodeGenerationPath)/$(am__dirstamp)
$(mptAstInliningPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mptAstInliningPath)
	@: > $(mptAstInliningPath)/$(am__dirstamp)
$(mptAstInliningPath)/inliner.lo:  \
	$(mptAstInliningPath)/$(am__dirstamp)
$(mptAstInliningPath)/inlinerSupport.lo:  \
	$(mptAstInliningPath)/$(am__dirstamp)
$(mptAstInliningPath)/isPotentiallyModified.lo:  \
	$(mptAstInliningPath)/$(am__dirstamp)
$(mptAstInliningPath)/replaceExpressionWithStatement.lo:  \
	$(mptAstInliningPath)/$(am__dirstamp)
$(mptOutliningPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mptOutliningPath)
	@: > $(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/Check.lo: $(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/Outliner.lo: $(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/NameGenerator.lo:  \
	$(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/PragmaInterface.lo:  \
	$(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/ASTtools.lo: $(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/Copy.lo: $(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/Jumps.lo: $(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/PrePostTraversal.lo:  \
	$(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/PreprocessingInfo.lo:  \
	$(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/StmtRewrite.lo:  \
	$(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/This.lo: $(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/VarSym.lo: $(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/Case.lo: $(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/ExtractIfs.lo:  \
	$(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/If.lo: $(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/IfDirectiveContextFinder.lo:  \
	$(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/IfDirectiveExtractor.lo:  \
	$(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/Block.lo: $(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/NonLocalDecls.lo:  \
	$(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/PreprocIfs.lo:  \
	$(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/NonLocalControlFlow.lo:  \
	$(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/Preprocess.lo:  \
	$(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/ThisExprs.lo: $(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/CollectVars.lo:  \
	$(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/GenerateCall.lo:  \
	$(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/GenerateFunc.lo:  \
	$(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/Insert.lo: $(mptOutliningPath)/$(am__dirstamp)
$(mptOutliningPath)/Transform.lo: $(mptOutliningPath)/$(am__dirstamp)
$(mptOmpLoweringPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mptOmpLoweringPath)
	@: > $(mptOmpLoweringPath)/$(am__dirstamp)
$(mptOmpLoweringPath)/omp_lowering.lo:  \
	$(mptOmpLoweringPath)/$(am__dirstamp)
$(mptTransTrackingPath)/$(am__dirstamp):
	@$(MKDIR_P) $(mptTransTrackingPath)
	@: > $(mptTransTrackingPath)/$(am__dirstamp)
$(mptTransTrackingPath)/transformationTracking.lo:  \
	$(mptTransTrackingPath)/$(am__dirstamp)

libmidend.la: $(libmidend_la_OBJECTS) $(libmidend_la_DEPENDENCIES) $(EXTRA_libmidend_la_DEPENDENCIES) 
	$(AM_V_CXXLD)$(CXXLINK)  $(libmidend_la_OBJECTS) $(libmidend_la_LIBADD) $(LIBS)
$(mptOmpLoweringPath)/xomp.lo: $(mptOmpLoweringPath)/$(am__dirstamp)

libxomp.la: $(libxomp_la_OBJECTS) $(libxomp_la_DEPENDENCIES) $(EXTRA_libxomp_la_DEPENDENCIES) 
	$(AM_V_CCLD)$(libxomp_la_LINK) -rpath $(libdir) $(libxomp_la_OBJECTS) $(libxomp_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)
	-rm -f $(mAbstractHandlePath)/*.$(OBJEXT)
	-rm -f $(mAbstractHandlePath)/*.lo
	-rm -f $(mAbstractLayerPath)/*.$(OBJEXT)
	-rm -f $(mAbstractLayerPath)/*.lo
	-rm -f $(mAbstractMemoryObjectPath)/*.$(OBJEXT)
	-rm -f $(mAbstractMemoryObjectPath)/*.lo
	-rm -f $(mAstDiagnosticsPath)/*.$(OBJEXT)
	-rm -f $(mAstDiagnosticsPath)/*.lo
	-rm -f $(mAstMatchingPath)/*.$(OBJEXT)
	-rm -f $(mAstMatchingPath)/*.lo
	-rm -f $(mAstProcessingPath)/*.$(OBJEXT)
	-rm -f $(mAstProcessingPath)/*.lo
	-rm -f $(mAstQueryPath)/*.$(OBJEXT)
	-rm -f $(mAstQueryPath)/*.lo
	-rm -f $(mAstRewriteMechanismPath)/*.$(OBJEXT)
	-rm -f $(mAstRewriteMechanismPath)/*.lo
	-rm -f $(mAstSnippetPath)/*.$(OBJEXT)
	-rm -f $(mAstSnippetPath)/*.lo
	-rm -f $(mauAnnotationPath)/*.$(OBJEXT)
	-rm -f $(mauAnnotationPath)/*.lo
	-rm -f $(mauAstInterfacePath)/*.$(OBJEXT)
	-rm -f $(mauAstInterfacePath)/*.lo
	-rm -f $(mauAstSupportPath)/*.$(OBJEXT)
	-rm -f $(mauAstSupportPath)/*.lo
	-rm -f $(mauSymbolicValPath)/*.$(OBJEXT)
	-rm -f $(mauSymbolicValPath)/*.lo
	-rm -f $(mptAstInliningPath)/*.$(OBJEXT)
	-rm -f $(mptAstInliningPath)/*.lo
	-rm -f $(mptConstantFoldingPath)/*.$(OBJEXT)
	-rm -f $(mptConstantFoldingPath)/*.lo
	-rm -f $(mptFiniteDifferencingPath)/*.$(OBJEXT)
	-rm -f $(mptFiniteDifferencingPath)/*.lo
	-rm -f $(mptFunctionCallNormalizationPath)/*.$(OBJEXT)
	-rm -f $(mptFunctionCallNormalizationPath)/*.lo
	-rm -f $(mptImplicitCodeGenerationPath)/*.$(OBJEXT)
	-rm -f $(mptImplicitCodeGenerationPath)/*.lo
	-rm -f $(mptOmpLoweringPath)/*.$(OBJEXT)
	-rm -f $(mptOmpLoweringPath)/*.lo
	-rm -f $(mptOutliningPath)/*.$(OBJEXT)
	-rm -f $(mptOutliningPath)/*.lo
	-rm -f $(mptPartialRedundancyEliminationPath)/*.$(OBJEXT)
	-rm -f $(mptPartialRedundancyEliminationPath)/*.lo
	-rm -f $(mptTransTrackingPath)/*.$(OBJEXT)
	-rm -f $(mptTransTrackingPath)/*.lo

distclean-compile:
	-rm -f *.tab.c

.C.o:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ $<

.C.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.C.lo:
	$(AM_V_CXX)$(LTCXXCOMPILE) -c -o $@ $<

.c.o:
	$(AM_V_CC)$(COMPILE) -c -o $@ $<

.c.obj:
	$(AM_V_CC)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.c.lo:
	$(AM_V_CC)$(LTCOMPILE) -c -o $@ $<

.cc.o:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cc.lo:
	$(AM_V_CXX)$(LTCXXCOMPILE) -c -o $@ $<

.cpp.o:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(AM_V_CXX)$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf $(mAbstractHandlePath)/.libs $(mAbstractHandlePath)/_libs
	-rm -rf $(mAbstractLayerPath)/.libs $(mAbstractLayerPath)/_libs
	-rm -rf $(mAbstractMemoryObjectPath)/.libs $(mAbstractMemoryObjectPath)/_libs
	-rm -rf $(mAstDiagnosticsPath)/.libs $(mAstDiagnosticsPath)/_libs
	-rm -rf $(mAstMatchingPath)/.libs $(mAstMatchingPath)/_libs
	-rm -rf $(mAstProcessingPath)/.libs $(mAstProcessingPath)/_libs
	-rm -rf $(mAstQueryPath)/.libs $(mAstQueryPath)/_libs
	-rm -rf $(mAstRewriteMechanismPath)/.libs $(mAstRewriteMechanismPath)/_libs
	-rm -rf $(mAstSnippetPath)/.libs $(mAstSnippetPath)/_libs
	-rm -rf $(mauAnnotationPath)/.libs $(mauAnnotationPath)/_libs
	-rm -rf $(mauAstInterfacePath)/.libs $(mauAstInterfacePath)/_libs
	-rm -rf $(mauAstSupportPath)/.libs $(mauAstSupportPath)/_libs
	-rm -rf $(mauSymbolicValPath)/.libs $(mauSymbolicValPath)/_libs
	-rm -rf $(mptAstInliningPath)/.libs $(mptAstInliningPath)/_libs
	-rm -rf $(mptConstantFoldingPath)/.libs $(mptConstantFoldingPath)/_libs
	-rm -rf $(mptFiniteDifferencingPath)/.libs $(mptFiniteDifferencingPath)/_libs
	-rm -rf $(mptFunctionCallNormalizationPath)/.libs $(mptFunctionCallNormalizationPath)/_libs
	-rm -rf $(mptImplicitCodeGenerationPath)/.libs $(mptImplicitCodeGenerationPath)/_libs
	-rm -rf $(mptOmpLoweringPath)/.libs $(mptOmpLoweringPath)/_libs
	-rm -rf $(mptOutliningPath)/.libs $(mptOutliningPath)/_libs
	-rm -rf $(mptPartialRedundancyEliminationPath)/.libs $(mptPartialRedundancyEliminationPath)/_libs
	-rm -rf $(mptTransTrackingPath)/.libs $(mptTransTrackingPath)/_libs
	-rm -rf .libs _libs
install-pkgincludeHEADERS: $(pkginclude_HEADERS)
	@$(NORMAL_INSTALL)
	@list='$(pkginclude_HEADERS)'; test -n "$(pkgincludedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(pkgincludedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(pkgincludedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(pkgincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(pkgincludedir)" || exit $$?; \
	done

uninstall-pkgincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(pkginclude_HEADERS)'; test -n "$(pkgincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(pkgincludedir)'; $(am__uninstall_files_from_dir)

# This directory's subdirectories are mostly independent; you can cd
# into them and run 'make' without going through this Makefile.
# To change the values of 'make' variables: instead of editing Makefiles,
# (1) if the variable is set in 'config.status', edit 'config.status'
#     (which will cause the Makefiles to be regenerated when you run 'make');
# (2) otherwise, pass the desired values on the 'make' command line.
$(am__recursive_targets):
	@fail=; \
	if $(am__make_keepgoing); then \
	  failcom='fail=yes'; \
	else \
	  failcom='exit 1'; \
	fi; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-recursive
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-recursive

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-recursive

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    $(am__make_dryrun) \
	      || test -d "$(distdir)/$$subdir" \
	      || $(MKDIR_P) "$(distdir)/$$subdir" \
	      || exit 1; \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(LTLIBRARIES) $(HEADERS)
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(pkgincludedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-test -z "$(mAbstractHandlePath)/$(am__dirstamp)" || rm -f $(mAbstractHandlePath)/$(am__dirstamp)
	-test -z "$(mAbstractLayerPath)/$(am__dirstamp)" || rm -f $(mAbstractLayerPath)/$(am__dirstamp)
	-test -z "$(mAbstractMemoryObjectPath)/$(am__dirstamp)" || rm -f $(mAbstractMemoryObjectPath)/$(am__dirstamp)
	-test -z "$(mAstDiagnosticsPath)/$(am__dirstamp)" || rm -f $(mAstDiagnosticsPath)/$(am__dirstamp)
	-test -z "$(mAstMatchingPath)/$(am__dirstamp)" || rm -f $(mAstMatchingPath)/$(am__dirstamp)
	-test -z "$(mAstProcessingPath)/$(am__dirstamp)" || rm -f $(mAstProcessingPath)/$(am__dirstamp)
	-test -z "$(mAstQueryPath)/$(am__dirstamp)" || rm -f $(mAstQueryPath)/$(am__dirstamp)
	-test -z "$(mAstRewriteMechanismPath)/$(am__dirstamp)" || rm -f $(mAstRewriteMechanismPath)/$(am__dirstamp)
	-test -z "$(mAstSnippetPath)/$(am__dirstamp)" || rm -f $(mAstSnippetPath)/$(am__dirstamp)
	-test -z "$(mauAnnotationPath)/$(am__dirstamp)" || rm -f $(mauAnnotationPath)/$(am__dirstamp)
	-test -z "$(mauAstInterfacePath)/$(am__dirstamp)" || rm -f $(mauAstInterfacePath)/$(am__dirstamp)
	-test -z "$(mauAstSupportPath)/$(am__dirstamp)" || rm -f $(mauAstSupportPath)/$(am__dirstamp)
	-test -z "$(mauSymbolicValPath)/$(am__dirstamp)" || rm -f $(mauSymbolicValPath)/$(am__dirstamp)
	-test -z "$(mptAstInliningPath)/$(am__dirstamp)" || rm -f $(mptAstInliningPath)/$(am__dirstamp)
	-test -z "$(mptConstantFoldingPath)/$(am__dirstamp)" || rm -f $(mptConstantFoldingPath)/$(am__dirstamp)
	-test -z "$(mptFiniteDifferencingPath)/$(am__dirstamp)" || rm -f $(mptFiniteDifferencingPath)/$(am__dirstamp)
	-test -z "$(mptFunctionCallNormalizationPath)/$(am__dirstamp)" || rm -f $(mptFunctionCallNormalizationPath)/$(am__dirstamp)
	-test -z "$(mptImplicitCodeGenerationPath)/$(am__dirstamp)" || rm -f $(mptImplicitCodeGenerationPath)/$(am__dirstamp)
	-test -z "$(mptOmpLoweringPath)/$(am__dirstamp)" || rm -f $(mptOmpLoweringPath)/$(am__dirstamp)
	-test -z "$(mptOutliningPath)/$(am__dirstamp)" || rm -f $(mptOutliningPath)/$(am__dirstamp)
	-test -z "$(mptPartialRedundancyEliminationPath)/$(am__dirstamp)" || rm -f $(mptPartialRedundancyEliminationPath)/$(am__dirstamp)
	-test -z "$(mptTransTrackingPath)/$(am__dirstamp)" || rm -f $(mptTransTrackingPath)/$(am__dirstamp)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-generic clean-libLTLIBRARIES clean-libtool clean-local \
	clean-noinstLTLIBRARIES mostlyclean-am

distclean: distclean-recursive
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-local distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am: install-pkgincludeHEADERS

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am: install-libLTLIBRARIES
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) install-exec-hook
install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-libLTLIBRARIES uninstall-pkgincludeHEADERS

.MAKE: $(am__recursive_targets) install-am install-exec-am \
	install-strip

.PHONY: $(am__recursive_targets) CTAGS GTAGS TAGS all all-am check \
	check-am clean clean-generic clean-libLTLIBRARIES \
	clean-libtool clean-local clean-noinstLTLIBRARIES \
	cscopelist-am ctags ctags-am distclean distclean-compile \
	distclean-generic distclean-libtool distclean-local \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-exec-hook \
	install-html install-html-am install-info install-info-am \
	install-libLTLIBRARIES install-man install-pdf install-pdf-am \
	install-pkgincludeHEADERS install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	installdirs-am maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags tags-am uninstall \
	uninstall-am uninstall-libLTLIBRARIES \
	uninstall-pkgincludeHEADERS

.PRECIOUS: Makefile


# JJW (2/25/2008): set a flag (only used when running ROSE applications) to
# have them run using the build tree rather than the install tree -- this is
# important for "make check" in an uninstalled copy of ROSE.
#export ROSE_IN_BUILD_TREE=$(top_builddir)

#  # The previous "Z3_*" variables should have been named "ROSE_Z3_*" following the pattern in the rest of this
#  # makefile. I don't want to break code that uses the wrong names, so I'll just add the correct ones. [Matzke 2017-10-17]

show-rpaths:
	@echo "ROSE_LIBS = $(ROSE_LIBS)"
	@echo "ROSE_RPATHS = $(ROSE_RPATHS)"
	@echo "ROSE_LINK_RPATHS = $(ROSE_LINK_RPATHS)"

clean-test-targets:
	rm -f $(TEST_TARGETS)
	rm -f $(TEST_TARGETS:.passed=.failed)
	rm -f $(TEST_TARGETS:.passed=.out)
	rm -f $(TEST_TARGETS:.passed=.err)

clean-local: clean-test-targets

.PHONY: clean-test-targets

# DQ (3/7/2010): This code does not appear to be used or even distributed with ROSE any more.
# DQ (12/8/2006): Linux memory support used in ROSE
# ramustMemoryUsageObjs = \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/memcheck.o \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/filemap.o \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/processes.o \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/mem_totals.o \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/cleanup_memory.o \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/procps/alloc.o \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/procps/devname.o \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/procps/escape.o \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/procps/ksym.o \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/procps/pwcache.o \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/procps/readproc.o \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/procps/sig.o \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/procps/slab.o \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/procps/sysinfo.o \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/procps/version.o \
#  $(top_builddir)/src/3rdPartyLibraries/ramust/procps/whattime.o

# DQ (12/8/2006): Added to support memory useage under Linux
# libastDiagnostics_la_OBJECTS = AstConsistencyTests.o AstWarnings.o AstStatistics.o AstPerformance.o $(ramustMemoryUsageObjs)

# TOO (11/22/2011): TODO: (flattening this makefile) what to do about "-I." ?
test_code_size:
	g++ -E -I$(top_builddir) -I. $(ROSE_INCLUDES) $(mAstProcessingPath)/AstNodeVisitMapping.C | wc -l

#install-exec-hook:
#	INCLUDEDIR="$(DESTDIR)$(includedir)/rose/midend/astMatching" && \
#	mkdir -p "$${INCLUDEDIR}" && \
#	for header in $(mAstMatching_includeHeaders); do \
#          $(LN_S) -F "$(DESTDIR)/$(includedir)/$$(basename $${header})" "$${INCLUDEDIR}/$$(basename $${header})"; done
install-exec-hook:
	INCLUDEDIR="$(DESTDIR)$(includedir)/rose/midend/astMatching" && \
	mkdir -p "$${INCLUDEDIR}" && \
	for header in $(mAstMatching_includeHeaders); do \
          $(LN_S) --force "$(DESTDIR)/$(includedir)/$$(basename $${header})" "$${INCLUDEDIR}/$$(basename $${header})"; done

nodeQuery.lo : $(mAstQueryPath)/nodeQuery.C $(mAstQueryPath)/queryVariant.C

# A way to add additional error checking at compile time
# ROSE_WARNINGS = -Wall -W -Wswitch-enum -Wswitch-default -Wswitch
# GXX_COMPILER_REPORT = -fmem-report -ftime-report
# GXX_COMPILER_REPORT =
# AM_CXXFLAGS = $(ROSE_WARNINGS) $(GXX_COMPILER_REPORT)

clean-local:
	$(mAbstractHandle_cleanLocal)
	$(mAbstractLayer_cleanLocal)
	$(mAbstractMemoryObject_cleanLocal)
	$(mAstDiagnostics_cleanLocal)
	$(mAstProcessing_cleanLocal)
	$(mAstMatching_cleanLocal)
	$(mAstRewriteMechanism_cleanLocal)
	$(mAstQuery_cleanLocal)
	$(mAstUtil_cleanLocal)
	$(mProgramTransformation_cleanLocal)

distclean-local:
	$(mAstProcessing_distCleanLocal)
	$(mAstMatching_distCleanLocal)
	$(mAstQuery_distCleanLocal)
	$(mAstUtil_distCleanLocal)

# Explicit rules because of multiple bison parsers in the
# library. These rules generate a unique name for the parser to avoid
# name conflicts with the default naming scheme. The generated parser
# is a tracked file. It's part of development to regenerate it if the
# parser is changed. This rule is in this Makefile.am because we only use
# variables from the subdirectory make files here.
regenerateparser:
#$(srcdir)/$(mAstMatchingPath)matcherparser.C: $(srcdir)/$(mAstMatchingPath)/matcherlexer.ll $(srcdir)/$(mAstMatchingPath)/matcherparser.yy
	$(AM_V_GEN)
	@$(YACC) $(YFLAGS) -d -p matcherparser $(srcdir)/$(mAstMatchingPath)/matcherparser.yy # generates y.tab.h/c
	@$(LEX) $(LFLAGS) $(AM_LFLAGS) -Pmatcherparser $(srcdir)/$(mAstMatchingPath)/matcherlexer.ll
	@mv y.tab.h $(srcdir)/$(mAstMatchingPath)/matcherparser.h
	@cat lex.yy.c y.tab.c > $(srcdir)/$(mAstMatchingPath)/matcherparser.C
	@rm lex.yy.c y.tab.c
$(srcdir)/$(mAstMatchingPath)/matcherparser.h: $(srcdir)/$(mAstMatchingPath)/matcherparser.C

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
